Calendar = function (D, C, H, A, G, E) {
	initCalendar();
	this.activeDiv = null;
	this.currentDateEl = null;
	this.getDateStatus = null;
	this.getDateToolTip = null;
	this.getDateText = null;
	this.timeout = null;
	this.onSelected = H || null;
	this.onClose = A || null;
	this.dragging = false;
	this.hidden = false;
	this.minYear = 1900;
	this.maxYear = 2100;
	this.dateFormat = Calendar._TT.DEF_DATE_FORMAT;
	this.ttDateFormat = Calendar._TT.TT_DATE_FORMAT;
	this.isPopup = true;
	this.weekNumbers = true;
	this.firstDayOfWeek = typeof D == "number" ? D : Calendar._FD;
	this.showsOtherMonths = false;
	this.dateStr = C;
	this.ar_days = null;
	this.showsTime = false;
	this.time24 = true;
	this.yearStep = 1;
	this.hiliteToday = true;
	this.multiple = null;
	this.table = null;
	this.element = null;
	this.tbody = null;
	this.firstdayname = null;
	this.monthsCombo = null;
	this.yearsCombo = null;
	this.hilitedMonth = null;
	this.activeMonth = null;
	this.hilitedYear = null;
	this.activeYear = null;
	this.isClear = true;
	this.clearBlank = true;
	this.height = null;
	this.isMini = G || null;
	this.onClear = E || null;
	this.dateClicked = false;
	if (typeof Calendar._SDN == "undefined") {
		if (typeof Calendar._SDN_len == "undefined") {
			Calendar._SDN_len = 3
		}
		var B = new Array();
		for (var F = 8; F > 0; ) {
			B[--F] = Calendar._DN[F].substr(0, Calendar._SDN_len)
		}
		Calendar._SDN = B;
		if (typeof Calendar._SMN_len == "undefined") {
			Calendar._SMN_len = 3
		}
		B = new Array();
		for (var F = 12; F > 0; ) {
			B[--F] = Calendar._MN[F].substr(0, Calendar._SMN_len)
		}
		Calendar._SMN = B
	}
};
Calendar._C = null;
Calendar.is_ie = (/msie/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent)) && !/opera/i.test(navigator.userAgent);
Calendar.is_ie5 = (Calendar.is_ie && /msie 5\.0/i.test(navigator.userAgent));
Calendar.is_opera = /opera/i.test(navigator.userAgent);
Calendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);
Calendar.getAbsolutePos = function (E) {
	var A = 0,
	D = 0;
	var C = /^div$/i.test(E.tagName);
	if (C && E.scrollLeft) {
		A = E.scrollLeft
	}
	if (C && E.scrollTop) {
		D = E.scrollTop
	}
	var F = {
		x: E.offsetLeft - A,
		y: E.offsetTop - D
	};
	if (E.offsetParent) {
		var B = this.getAbsolutePos(E.offsetParent);
		F.x += B.x;
		F.y += B.y
	}
	return F
};
Calendar.isRelated = function (C, A) {
	var D = A.relatedTarget;
	if (!D) {
		var B = A.type;
		if (B == "mouseover") {
			D = A.fromElement
		} else {
			if (B == "mouseout") {
				D = A.toElement
			}
		}
	}
	while (D) {
		if (D == C) {
			return true
		}
		D = D.parentNode
	}
	return false
};
Calendar.removeClass = function (E, D) {
	if (!(E && E.className)) {
		return
	}
	var A = E.className.split(" ");
	var B = new Array();
	for (var C = A.length; C > 0; ) {
		if (A[--C] != D) {
			B[B.length] = A[C]
		}
	}
	E.className = B.join(" ")
};
Calendar.addClass = function (B, A) {
	Calendar.removeClass(B, A);
	B.className += " " + A
};
Calendar.getElement = function (B) {
	try {
		var C = Calendar.is_ie ? window.event.srcElement : B.currentTarget;
		if (typeof C.nodeType != null && C.nodeType) {
			while (C.nodeType != 1 || /^div$/i.test(C.tagName)) {
				C = C.parentNode
			}
			return C
		} else {
			return null
		}
	} catch (A) {}
};
Calendar.getCalendar = function (A) {
	while (A.nodeType != 1 || !A.calendar) {
		A = A.parentNode
	}
	return A.calendar
};
Calendar.getTargetElement = function (A) {
	var B = Calendar.is_ie ? window.event.srcElement : A.target;
	while (B.nodeType != 1) {
		B = B.parentNode
	}
	return B
};
Calendar.stopEvent = function (A) {
	A || (A = window.event);
	if (Calendar.is_ie) {
		A.cancelBubble = true;
		A.returnValue = false
	} else {
		A.preventDefault();
		A.stopPropagation()
	}
	return false
};
Calendar.addEvent = function (A, C, B) {
	if (A.attachEvent) {
		A.attachEvent("on" + C, B)
	} else {
		if (A.addEventListener) {
			A.addEventListener(C, B, true)
		} else {
			A["on" + C] = B
		}
	}
};
Calendar.removeEvent = function (A, C, B) {
	if (A.detachEvent) {
		A.detachEvent("on" + C, B)
	} else {
		if (A.removeEventListener) {
			A.removeEventListener(C, B, true)
		} else {
			A["on" + C] = null
		}
	}
};
Calendar.createElement = function (C, B) {
	var A = null;
	if (document.createElementNS) {
		A = document.createElementNS("http://www.w3.org/1999/xhtml", C)
	} else {
		A = document.createElement(C)
	}
	if (typeof B != "undefined") {
		B.appendChild(A)
	}
	return A
};
Calendar._add_evs = function (el) {
	with (Calendar) {
		addEvent(el, "mouseover", dayMouseOver);
		addEvent(el, "mousedown", dayMouseDown);
		addEvent(el, "mouseout", dayMouseOut);
		if (is_ie) {
			addEvent(el, "dblclick", dayMouseDblClick);
			el.setAttribute("unselectable", true)
		}
	}
};
Calendar.findMonth = function (A) {
	if (typeof A.month != "undefined") {
		return A
	} else {
		if (typeof A.parentNode.month != "undefined") {
			return A.parentNode
		}
	}
	return null
};
Calendar.findYear = function (A) {
	if (typeof A.year != "undefined") {
		return A
	} else {
		if (typeof A.parentNode.year != "undefined") {
			return A.parentNode
		}
	}
	return null
};
Calendar.showMonthsCombo = function () {
	var E = Calendar._C;
	if (!E) {
		return false
	}
	var E = E;
	var F = E.activeDiv;
	var D = E.monthsCombo;
	if (E.hilitedMonth) {
		Calendar.removeClass(E.hilitedMonth, "hilite")
	}
	if (E.activeMonth) {
		Calendar.removeClass(E.activeMonth, "active")
	}
	var C = E.monthsCombo.getElementsByTagName("div")[E.date.getMonth()];
	Calendar.addClass(C, "active");
	E.activeMonth = C;
	var B = D.style;
	B.display = "block";
	if (F.navtype < 0) {
		B.left = F.offsetLeft + "px"
	} else {
		var A = D.offsetWidth;
		if (typeof A == "undefined") {
			A = 50
		}
		B.left = (F.offsetLeft + F.offsetWidth - A) + "px"
	}
	B.top = (F.offsetTop + F.offsetHeight) + "px"
};
Calendar.showYearsCombo = function (D) {
	var A = Calendar._C;
	if (!A) {
		return false
	}
	var A = A;
	var C = A.activeDiv;
	var F = A.yearsCombo;
	if (A.hilitedYear) {
		Calendar.removeClass(A.hilitedYear, "hilite")
	}
	if (A.activeYear) {
		Calendar.removeClass(A.activeYear, "active")
	}
	A.activeYear = null;
	var B = A.date.getFullYear() + (D ? 1 : -1);
	var J = F.firstChild;
	var H = false;
	for (var E = 12; E > 0; --E) {
		if (B >= A.minYear && B <= A.maxYear) {
			J.innerHTML = B;
			J.year = B;
			J.style.display = "block";
			H = true
		} else {
			J.style.display = "none"
		}
		J = J.nextSibling;
		var I = A.yearStep ? A.yearStep : 1;
		B += D ? I : -I
	}
	if (H) {
		var K = F.style;
		K.display = "block";
		if (C.navtype < 0) {
			K.left = C.offsetLeft + "px"
		} else {
			var G = F.offsetWidth;
			if (typeof G == "undefined") {
				G = 50
			}
			K.left = (C.offsetLeft + C.offsetWidth - G) + "px"
		}
		K.top = (C.offsetTop + C.offsetHeight) + "px"
	}
};
Calendar.tableMouseUp = function (ev) {
	var cal = Calendar._C;
	if (!cal) {
		return false
	}
	if (cal.timeout) {
		clearTimeout(cal.timeout)
	}
	var el = cal.activeDiv;
	if (!el) {
		return false
	}
	var target = Calendar.getTargetElement(ev);
	ev || (ev = window.event);
	Calendar.removeClass(el, "active");
	if (target == el || target.parentNode == el) {
		var isclick = typeof(SeeUtils.getAttrEl(el, "clicktime")) == "undefined";
		var clickdate = new Date();
		var clicktime = clickdate.getTime();
		if (!isclick) {
			if ((clicktime - SeeUtils.getAttrEl(el, "clicktime")) < 300) {
				if (!SeeUtils.hasClass(target, "nav") && SeeUtils.getAttrEl(target, "unselectable") != "on") {
					Calendar.cellClick(el, ev, "twice");
					SeeUtils.attrEl(el, "clicktime", clicktime)
				}
			} else {
				Calendar.cellClick(el, ev);
				SeeUtils.attrEl(el, "clicktime", clicktime)
			}
		} else {
			Calendar.cellClick(el, ev)
		}
	}
	var mon = Calendar.findMonth(target);
	var date = null;
	if (mon) {
		date = new Date(cal.date);
		if (mon.month != date.getMonth()) {
			date.setMonth(mon.month);
			cal.setDate(date);
			cal.dateClicked = false;
			cal.callHandler()
		}
	} else {
		var year = Calendar.findYear(target);
		if (year) {
			date = new Date(cal.date);
			if (year.year != date.getFullYear()) {
				date.setFullYear(year.year);
				cal.setDate(date);
				cal.dateClicked = false;
				cal.callHandler()
			}
		}
	}
	with (Calendar) {
		removeEvent(document, "mouseup", tableMouseUp);
		removeEvent(document, "mouseover", tableMouseOver);
		removeEvent(document, "mousemove", tableMouseOver);
		cal._hideCombos();
		_C = null;
		return stopEvent(ev)
	}
};
Calendar.tableMouseOver = function (M) {
	var A = Calendar._C;
	if (!A) {
		return
	}
	var C = A.activeDiv;
	var I = Calendar.getTargetElement(M);
	if (I == C || I.parentNode == C) {
		Calendar.addClass(C, "hilite active");
		Calendar.addClass(C.parentNode, "rowhilite")
	} else {
		if (typeof C.navtype == "undefined" || (C.navtype != 50 && (C.navtype == 0 || Math.abs(C.navtype) > 2))) {
			Calendar.removeClass(C, "active")
		}
		Calendar.removeClass(C, "hilite");
		Calendar.removeClass(C.parentNode, "rowhilite")
	}
	M || (M = window.event);
	if (C.navtype == 50 && I != C) {
		var L = Calendar.getAbsolutePos(C);
		var O = C.offsetWidth;
		var N = M.clientX;
		var P;
		var K = true;
		if (N > L.x + O) {
			P = N - L.x - O;
			K = false
		} else {
			P = L.x - N
		}
		if (P < 0) {
			P = 0
		}
		var F = C._range;
		var H = C._current;
		var G = Math.floor(P / 10) % F.length;
		for (var E = F.length; --E >= 0; ) {
			if (F[E] == H) {
				break
			}
		}
		while (G-- > 0) {
			if (K) {
				if (--E < 0) {
					E = F.length - 1
				}
			} else {
				if (++E >= F.length) {
					E = 0
				}
			}
		}
		var B = F[E];
		C.innerHTML = B;
		A.onUpdateTime()
	}
	var D = Calendar.findMonth(I);
	if (D) {
		if (D.month != A.date.getMonth()) {
			if (A.hilitedMonth) {
				Calendar.removeClass(A.hilitedMonth, "hilite")
			}
			Calendar.addClass(D, "hilite");
			A.hilitedMonth = D
		} else {
			if (A.hilitedMonth) {
				Calendar.removeClass(A.hilitedMonth, "hilite")
			}
		}
	} else {
		if (A.hilitedMonth) {
			Calendar.removeClass(A.hilitedMonth, "hilite")
		}
		var J = Calendar.findYear(I);
		if (J) {
			if (J.year != A.date.getFullYear()) {
				if (A.hilitedYear) {
					Calendar.removeClass(A.hilitedYear, "hilite")
				}
				Calendar.addClass(J, "hilite");
				A.hilitedYear = J
			} else {
				if (A.hilitedYear) {
					Calendar.removeClass(A.hilitedYear, "hilite")
				}
			}
		} else {
			if (A.hilitedYear) {
				Calendar.removeClass(A.hilitedYear, "hilite")
			}
		}
	}
	return Calendar.stopEvent(M)
};
Calendar.tableMouseDown = function (A) {
	var B = Calendar.getTargetElement(A).id;
	if (B == "timeHours" || B == "timeMinutes") {
		return
	}
	if (Calendar.getTargetElement(A) == Calendar.getElement(A)) {
		return Calendar.stopEvent(A)
	}
};
Calendar.calDragIt = function (B) {
	var C = Calendar._C;
	if (!(C && C.dragging)) {
		return false
	}
	var E;
	var D;
	if (Calendar.is_ie) {
		D = window.event.clientY + document.body.scrollTop;
		E = window.event.clientX + document.body.scrollLeft
	} else {
		E = B.pageX;
		D = B.pageY
	}
	C.hideShowCovered();
	var A = C.element.style;
	A.left = (E - C.xOffs) + "px";
	A.top = (D - C.yOffs) + "px";
	if (C.isPopup) {
		C.iframe.style.left = (E - C.xOffs) + "px";
		C.iframe.style.top = (D - C.yOffs) + "px"
	}
	return Calendar.stopEvent(B)
};
Calendar.calDragEnd = function (ev) {
	var cal = Calendar._C;
	if (!cal) {
		return false
	}
	cal.dragging = false;
	with (Calendar) {
		removeEvent(document, "mousemove", calDragIt);
		removeEvent(document, "mouseup", calDragEnd);
		tableMouseUp(ev)
	}
	cal.hideShowCovered()
};
Calendar.dayMouseDown = function (ev) {
	var el = Calendar.getElement(ev);
	if (el.disabled) {
		return false
	}
	var cal = el.calendar;
	cal.activeDiv = el;
	Calendar._C = cal;
	if (el.navtype != 300) {
		with (Calendar) {
			if (el.navtype == 50) {
				el._current = el.innerHTML;
				addEvent(document, "mousemove", tableMouseOver)
			} else {
				addEvent(document, Calendar.is_ie5 ? "mousemove" : "mouseover", tableMouseOver)
			}
			addClass(el, "hilite active");
			addEvent(document, "mouseup", tableMouseUp)
		}
	} else {
		if (cal.isPopup) {
			cal._dragStart(ev)
		}
	}
	if (el.navtype == -1 || el.navtype == 1) {
		if (cal.timeout) {
			clearTimeout(cal.timeout)
		}
		cal.timeout = setTimeout("Calendar.showMonthsCombo()", 250)
	} else {
		if (el.navtype == -2 || el.navtype == 2) {
			if (cal.timeout) {
				clearTimeout(cal.timeout)
			}
			cal.timeout = setTimeout((el.navtype > 0) ? "Calendar.showYearsCombo(true)" : "Calendar.showYearsCombo(false)", 250)
		} else {
			cal.timeout = null
		}
	}
	return Calendar.stopEvent(ev)
};
Calendar.dayMouseDblClick = function (A) {
	if (Calendar.is_ie) {
		if (document.selection) {
			document.selection.empty()
		} else {
			if (window.getSelection) {
				try {
					window.getSelection().removeAllRanges()
				} catch (B) {}
			}
		}
	}
};
Calendar.dayMouseOver = function (B) {
	var A = Calendar.getElement(B);
	if (Calendar.isRelated(A, B) || Calendar._C || A.disabled) {
		return false
	}
	if (A.ttip) {
		if (A.ttip.substr(0, 1) == "_") {
			A.ttip = A.caldate.print(A.calendar.ttDateFormat) + A.ttip.substr(1)
		}
		A.calendar.tooltips.innerHTML = A.ttip
	}
	if (A.navtype != 300) {
		Calendar.addClass(A, "hilite");
		if (A.caldate) {
			Calendar.addClass(A.parentNode, "rowhilite");
			var C = A.calendar;
			if (C && C.getDateToolTip) {
				var D = A.caldate;
				window.status = D;
				A.title = C.getDateToolTip(D, D.getFullYear(), D.getMonth(), D.getDate())
			}
		}
	}
	return Calendar.stopEvent(B)
};
Calendar.dayMouseOut = function (ev) {
	with (Calendar) {
		var el = getElement(ev);
		if (isRelated(el, ev) || _C || el.disabled) {
			return false
		}
		removeClass(el, "hilite");
		if (el.caldate) {
			removeClass(el.parentNode, "rowhilite")
		}
		if (el.calendar) {
			el.calendar.tooltips.innerHTML = _TT.SEL_DATE
		}
	}
};
Calendar.cellClick = function (E, O, L) {
	initCalendar();
	var C = E.calendar;
	var H = false;
	var K = false;
	var F = null;
	if (typeof E.navtype == "undefined") {
		if (C.currentDateEl) {
			Calendar.removeClass(C.currentDateEl, "selected");
			Calendar.addClass(E, "selected");
			H = (C.currentDateEl == E);
			if (!H) {
				C.currentDateEl = E
			}
		}
		C.date.setDateOnly(E.caldate);
		F = C.date;
		var B = !(C.dateClicked = !E.otherMonth);
		if (!B && !C.currentDateEl && C.multiple) {
			C._toggleMultipleDate(new Date(F))
		} else {
			K = !E.disabled
		}
		if (B) {
			C._init(C.firstDayOfWeek, F)
		}
	} else {
		if (E.navtype == 200) {
			Calendar.removeClass(E, "hilite");
			C.callCloseHandler();
			return
		}
		F = new Date(C.date);
		if (E.navtype == 0) {
			F.setDateOnly(new Date())
		}
		C.dateClicked = false;
		var N = F.getFullYear();
		var G = F.getMonth();
		function A(R) {
			var S = F.getDate();
			var Q = F.getMonthDays(R);
			if (S > Q) {
				F.setDate(Q)
			}
			F.setMonth(R)
		}
		switch (E.navtype) {
		case 400:
			Calendar.removeClass(E, "hilite");
			var P = Calendar._TT.ABOUT;
			if (typeof P != "undefined") {
				P += C.showsTime ? Calendar._TT.ABOUT_TIME : ""
			} else {
				P = 'Help and about box text is not translated into this language.\nIf you know this language and you feel generous please update\nthe corresponding file in "lang" subdir to match calendar-en.js\nand send it back to <mihai_bazon#yahoo.com> to get it into the distribution  ;-)\n\nThank you!\nhttp://dynarch.com/mishoo/calendar.epl\n'
			}
			alert(P);
			return;
		case -2:
			if (N > C.minYear) {
				F.setFullYear(N - 1)
			}
			break;
		case -1:
			if (G > 0) {
				A(G - 1)
			} else {
				if (N-- > C.minYear) {
					F.setFullYear(N);
					A(11)
				}
			}
			break;
		case 1:
			if (G < 11) {
				A(G + 1)
			} else {
				if (N < C.maxYear) {
					F.setFullYear(N + 1);
					A(0)
				}
			}
			break;
		case 2:
			if (N < C.maxYear) {
				F.setFullYear(N + 1)
			}
			break;
		case 100:
			C.setFirstDayOfWeek(E.fdow);
			return;
		case 50:
			var J = E._range;
			var M = E.innerHTML;
			for (var I = J.length; --I >= 0; ) {
				if (J[I] == M) {
					break
				}
			}
			if (O && O.shiftKey) {
				if (--I < 0) {
					I = J.length - 1
				}
			} else {
				if (++I >= J.length) {
					I = 0
				}
			}
			var D = J[I];
			E.innerHTML = D;
			C.onUpdateTime();
			return;
		case 0:
			if ((typeof C.getDateStatus == "function") && C.getDateStatus(F, F.getFullYear(), F.getMonth(), F.getDate())) {
				return false
			}
			break
		}
		if (!F.equalsTo(C.date)) {
			C.setDate(F);
			K = true
		} else {
			if (E.navtype == 0) {
				K = H = true
			}
		}
	}
	if (K) {
		if (C.params.hideOkClearButton == true) {
			O && C.callHandler()
		}
	}
	if (H) {
		Calendar.removeClass(E, "hilite");
		if (C.params.hideOkClearButton == true) {
			O && C.callCloseHandler()
		}
	}
	if (this._C && this._C.iframe) {
		SeeUtils.setElHeight(this._C.iframe, SeeUtils.getElHeight(this._C.element))
	}
	if (L == "twice") {
		O && C.callHandler() && C.callCloseHandler()
	}
};
Calendar.prototype.create = function (O) {
	initCalendar();
	var J = null;
	if (!O) {
		J = document.getElementsByTagName("body")[0];
		this.isPopup = true
	} else {
		J = O;
		this.isPopup = false
	}
	this.date = this.dateStr ? new Date(this.dateStr) : new Date();
	var X = Calendar.createElement("table");
	this.table = X;
	X.cellSpacing = 2;
	X.cellPadding = 0;
	if (this.height) {
		X.style.height = this.height + "px"
	}
	X.calendar = this;
	Calendar.addEvent(X, "mousedown", Calendar.tableMouseDown);
	var N = Calendar.createElement("div");
	this.element = N;
	N.className = "calendar";
	if (self != top || this.isMini == true) {
		N.className = "calendar miniCalendar"
	}
	if (this.isPopup) {
		N.style.position = "absolute";
		N.style.display = "none"
	}
	N.appendChild(X);
	if (this.dateFormat == "%Y-%m") {
		if (document.getElementById("inputYear")) {
			document.getElementById("inputYear").parentElement.innerHTML = ""
		}
		var H = Calendar.createElement("div");
		H.className = "calendar_month_container";
		var E = Calendar.createElement("div", H);
		E.className = "calendar_month_container_head border_b";
		var L = this.date.getFullYear();
		E.innerHTML = '<input type="button" style="width:20px;" value="&#x00ab;" onclick="Calendar.increaseYearInput(-1);"/><input id="inputYear" type="text" value="' + L + '" size="4"/><input type="button" style="width:20px;" value="&#x00bb;"  onclick="Calendar.increaseYearInput(1);"/>';
		var D = Calendar.createElement("div", H);
		D.className = "calendar_month_container_body";
		for (S = 0; S < Calendar._MN.length; ++S) {
			var T = Calendar.createElement("a");
			T.month = S;
			if (S == this.date.getMonth()) {
				T.className = "current"
			}
			T.innerHTML = Calendar._SMN[S];
			Calendar.addEvent(T, "click", function (b) {
				var Z = Calendar.getElement(b);
				var c = Z.calendar;
				c.date.setMonth(Z.month);
				c.date.setFullYear(document.getElementById("inputYear").value);
				c.callHandler();
				c.callCloseHandler()
			});
			T.calendar = this;
			D.appendChild(T)
		}
		N.appendChild(H);
		X.style.display = "none"
	}
	var W = Calendar.createElement("thead", X);
	var C = null;
	var G = null;
	var M = this;
	var F = function (b, a, Z) {
		C = Calendar.createElement("td", G);
		C.colSpan = a;
		C.className = "button";
		if (Z != 0 && Math.abs(Z) <= 2) {
			C.className += " nav"
		}
		Calendar._add_evs(C);
		C.calendar = M;
		C.navtype = Z;
		C.innerHTML = "<div unselectable='on'>" + b + "</div>";
		return C
	};
	G = Calendar.createElement("tr", W);
	var Y = 6;
	(this.isPopup) && --Y;
	(this.weekNumbers) && ++Y;
	F("?", 1, 400).ttip = Calendar._TT.INFO;
	this.title = F("", Y, 300);
	this.title.className = "title";
	if (this.isPopup) {
		this.title.ttip = Calendar._TT.DRAG_TO_MOVE;
		this.title.style.cursor = "move";
		F("&#x00d7;", 1, 200).ttip = Calendar._TT.CLOSE
	}
	G = Calendar.createElement("tr", W);
	G.className = "headrow";
	this._nav_py = F("&#x00ab;", 1, -2);
	this._nav_py.ttip = Calendar._TT.PREV_YEAR;
	this._nav_pm = F("&#x2039;", 1, -1);
	this._nav_pm.ttip = Calendar._TT.PREV_MONTH;
	this._nav_now = F(Calendar._TT.TODAY, this.weekNumbers ? 4 : 3, 0);
	this._nav_now.ttip = Calendar._TT.GO_TODAY;
	this._nav_nm = F("&#x203a;", 1, 1);
	this._nav_nm.ttip = Calendar._TT.NEXT_MONTH;
	this._nav_ny = F("&#x00bb;", 1, 2);
	this._nav_ny.ttip = Calendar._TT.NEXT_YEAR;
	G = Calendar.createElement("tr", W);
	G.className = "daynames";
	if (this.weekNumbers) {
		C = Calendar.createElement("td", G);
		C.className = "name wn";
		C.innerHTML = Calendar._TT.WK
	}
	for (var S = 7; S > 0; --S) {
		C = Calendar.createElement("td", G);
		if (!S) {
			C.navtype = 100;
			C.calendar = this;
			Calendar._add_evs(C)
		}
	}
	this.firstdayname = (this.weekNumbers) ? G.firstChild.nextSibling : G.firstChild;
	this._displayWeekdays();
	var A = Calendar.createElement("tbody", X);
	this.tbody = A;
	for (S = 6; S > 0; --S) {
		G = Calendar.createElement("tr", A);
		if (this.weekNumbers) {
			C = Calendar.createElement("td", G)
		}
		for (var P = 7; P > 0; --P) {
			C = Calendar.createElement("td", G);
			C.calendar = this;
			Calendar._add_evs(C)
		}
	}
	if (this.showsTime) {
		G = Calendar.createElement("tr", A);
		G.className = "time";
		C = Calendar.createElement("td", G);
		C.className = "time";
		C.colSpan = 7;
		C.innerHTML = getTimeTableHTML(this.date.getHours(), this.date.getMinutes(), this.params.minuteStep, this.params.hideOkClearButton);
		G = Calendar.createElement("tr", A);
		G.className = "time";
		G.style.display = "none";
		C = Calendar.createElement("td", G);
		C.className = "time";
		C.colSpan = 2;
		C.innerHTML = Calendar._TT.TIME || "&nbsp;";
		C = Calendar.createElement("td", G);
		C.className = "time";
		C.colSpan = this.weekNumbers ? 4 : 3;
		(function () {
			function c(m, o, n, p) {
				var k = Calendar.createElement("span", C);
				k.className = m;
				k.innerHTML = o;
				k.calendar = M;
				k.ttip = Calendar._TT.TIME_PART;
				k.navtype = 50;
				k._range = [];
				if (typeof n != "number") {
					k._range = n
				} else {
					for (var l = n; l <= p; ++l) {
						var j;
						if (l < 10 && p >= 10) {
							j = "0" + l
						} else {
							j = "" + l
						}
						k._range[k._range.length] = j
					}
				}
				Calendar._add_evs(k);
				return k
			}
			var g = M.date.getHours();
			var Z = M.date.getMinutes();
			var h = !M.time24;
			var a = (g > 12);
			if (h && a) {
				g -= 12
			}
			var e = c("hour", g, h ? 1 : 0, h ? 12 : 23);
			var d = Calendar.createElement("span", C);
			d.innerHTML = ":";
			d.className = "colon";
			var b = c("minute", Z, 0, 59);
			var f = null;
			C = Calendar.createElement("td", G);
			C.className = "time";
			C.colSpan = 2;
			if (h) {
				f = c("ampm", a ? "pm" : "am", ["am", "pm"])
			} else {
				C.innerHTML = "&nbsp;"
			}
			M.onSetTime = function () {
				var j,
				i = this.date.getHours(),
				k = this.date.getMinutes();
				if (h) {
					j = (i >= 12);
					if (j) {
						i -= 12
					}
					if (i == 0) {
						i = 12
					}
					f.innerHTML = j ? "pm" : "am"
				}
				e.innerHTML = (i < 10) ? ("0" + i) : i;
				b.innerHTML = (k < 10) ? ("0" + k) : k
			};
			M.onUpdateTime = function () {
				var j = this.date;
				var k = parseInt(e.innerHTML, 10);
				if (h) {
					if (/pm/i.test(f.innerHTML) && k < 12) {
						k += 12
					} else {
						if (/am/i.test(f.innerHTML) && k == 12) {
							k = 0
						}
					}
				}
				var l = j.getDate();
				var i = j.getMonth();
				var n = j.getFullYear();
				j.setHours(k);
				j.setMinutes(parseInt(b.innerHTML, 10));
				j.setFullYear(n);
				j.setMonth(i);
				j.setDate(l);
				this.dateClicked = false;
				this.callHandler()
			}
		})()
	} else {
		this.onSetTime = this.onUpdateTime = function () {}
	}
	var K = Calendar.createElement("tfoot", X);
	if (this.isClear) {
		var V = K.insertRow(0);
		V.className = "footrow ttip";
		var B = V.insertCell(0);
		B.colSpan = this.weekNumbers ? 8 : 7;
		var R = Calendar.createElement("table", B);
		R.width = "100%";
		G = R.insertRow(0);
		C = F(Calendar._TT.SEL_DATE, 1, 300);
		C.className = "ttip1";
		if (self != top) {
			C.style.width = "95px"
		} else {
			C.style.width = "178px"
		}
		C.style.color = "#999";
		if (this.isPopup) {
			C.ttip = Calendar._TT.DRAG_TO_MOVE;
			C.style.cursor = "move"
		}
		this.tooltips = C;
		if (!this.params.hideOkClearButton) {
			var I = G.insertCell(1);
			I.nowrap = "nowrap";
			I.width = "50";
			var U = Calendar.createElement("span", I);
			U.innerHTML = getCalendarI18n("calendar_ok");
			U.href = "javascript:void(0)";
			U.className = "common_button common_button_emphasize margin_r_5";
			Calendar.addEvent(U, "click", function (b) {
				var Z = Calendar.getElement(b);
				var c = Z.calendar;
				c.callHandler();
				c.callCloseHandler()
			});
			U.calendar = M;
			if (this.clearBlank) {
				I = G.insertCell(2);
				I.nowrap = "nowrap";
				I.width = "50";
				U = Calendar.createElement("span", I);
				U.innerHTML = getCalendarI18n("calendar_none");
				U.className = "common_button common_button_gray";
				U.href = "javascript:void(0)";
				Calendar._add_clear_evs(U);
				U.calendar = M
			}
		}
	} else {
		G = Calendar.createElement("tr", K);
		G.className = "footrow";
		C = F(Calendar._TT.SEL_DATE, this.weekNumbers ? 8 : 7, 300);
		C.className = "ttip";
		if (this.isPopup) {
			C.ttip = Calendar._TT.DRAG_TO_MOVE;
			C.style.cursor = "move"
		}
		this.tooltips = C
	}
	N = Calendar.createElement("div", this.element);
	this.monthsCombo = N;
	N.className = "combo";
	for (S = 0; S < Calendar._MN.length; ++S) {
		var T = Calendar.createElement("div");
		T.className = Calendar.is_ie ? "label-IEfix" : "label";
		T.month = S;
		T.innerHTML = Calendar._SMN[S];
		N.appendChild(T)
	}
	N = Calendar.createElement("div", this.element);
	this.yearsCombo = N;
	N.className = "combo";
	for (S = 12; S > 0; --S) {
		var Q = Calendar.createElement("div");
		Q.className = Calendar.is_ie ? "label-IEfix" : "label";
		N.appendChild(Q)
	}
	if (this.isPopup) {
		this.iframe = Calendar.createElement("iframe");
		this.iframe.className = "calendar_iframe";
		if (!this.showsTime) {
			this.iframe.style.display = "none";
			this.iframe.style.height = "170px"
		}
		J.appendChild(this.iframe)
	}
	this._init(this.firstDayOfWeek, this.date);
	J.appendChild(this.element)
};
Calendar._add_clear_evs = function (el) {
	with (Calendar) {
		addEvent(el, "click", callClearHandler)
	}
};
Calendar.callClearHandler = function (ev) {
	with (Calendar) {
		var el = getElement(ev);
		if (el.calendar) {
			if (el.calendar.params.inputField) {
				el.calendar.params.inputField.value = "";
				el.calendar.params.inputField.focus();
				if ($) {
					$(el.calendar.params.inputField).trigger("change")
				}
			} else {
				if (el.calendar.params.displayArea) {
					if (el.calendar.params.displayArea.nodeName && el.calendar.params.displayArea.nodeName == "INPUT") {
						el.calendar.params.displayArea.value = "";
						el.calendar.params.displayArea.focus()
					}
				}
			}
			el.calendar.callCloseHandler();
			if (typeof(el.calendar.onClear) == "function") {
				el.calendar.onClear()
			}
		}
	}
};
Calendar._keyEvent = function (M) {
	var A = window._dynarch_popupCalendar;
	if (!A || A.multiple) {
		return false
	}
	(Calendar.is_ie) && (M = window.event);
	var J = (Calendar.is_ie || M.type == "keypress"),
	N = M.keyCode;
	var I = Calendar.getElement(M);
	if (I && (I.id == "inputYear")) {
		var O = document.getElementById("inputYear");
		return true
	}
	if (M.ctrlKey) {
		switch (N) {
		case 37:
			J && Calendar.cellClick(A._nav_pm);
			break;
		case 38:
			J && Calendar.cellClick(A._nav_py);
			break;
		case 39:
			J && Calendar.cellClick(A._nav_nm);
			break;
		case 40:
			J && Calendar.cellClick(A._nav_ny);
			break;
		default:
			return false
		}
	} else {
		switch (N) {
		case 32:
			Calendar.cellClick(A._nav_now);
			break;
		case 27:
			J && A.callCloseHandler();
			break;
		case 37:
		case 38:
		case 39:
		case 40:
			if (J) {
				var E,
				P,
				L,
				G,
				C,
				D;
				E = N == 37 || N == 38;
				D = (N == 37 || N == 39) ? 1 : 7;
				function B() {
					C = A.currentDateEl;
					var K = C.pos;
					P = K & 15;
					L = K >> 4;
					G = A.ar_days[L][P]
				}
				B();
				function F() {
					var K = new Date(A.date);
					K.setDate(K.getDate() - D);
					A.setDate(K)
				}
				function H() {
					var K = new Date(A.date);
					K.setDate(K.getDate() + D);
					A.setDate(K)
				}
				while (1) {
					switch (N) {
					case 37:
						if (--P >= 0) {
							G = A.ar_days[L][P]
						} else {
							P = 6;
							N = 38;
							continue
						}
						break;
					case 38:
						if (--L >= 0) {
							G = A.ar_days[L][P]
						} else {
							F();
							B()
						}
						break;
					case 39:
						if (++P < 7) {
							G = A.ar_days[L][P]
						} else {
							P = 0;
							N = 40;
							continue
						}
						break;
					case 40:
						if (++L < A.ar_days.length) {
							G = A.ar_days[L][P]
						} else {
							H();
							B()
						}
						break
					}
					break
				}
				if (G) {
					if (!G.disabled) {
						Calendar.cellClick(G)
					} else {
						if (E) {
							F()
						} else {
							H()
						}
					}
				}
			}
			break;
		case 13:
			if (J) {
				Calendar.cellClick(A.currentDateEl, M)
			}
			break;
		default:
			return false
		}
	}
	return Calendar.stopEvent(M)
};
Calendar.prototype._init = function (K, U) {
	initCalendar();
	var T = new Date(),
	O = T.getFullYear(),
	W = T.getMonth(),
	B = T.getDate();
	this.table.style.visibility = "hidden";
	var H = U.getFullYear();
	if (H < this.minYear) {
		H = this.minYear;
		U.setFullYear(H)
	} else {
		if (H > this.maxYear) {
			H = this.maxYear;
			U.setFullYear(H)
		}
	}
	this.firstDayOfWeek = K;
	this.date = new Date(U);
	var V = U.getMonth();
	var Y = U.getDate();
	var X = U.getMonthDays();
	U.setDate(1);
	var P = (U.getDay() - this.firstDayOfWeek) % 7;
	if (P < 0) {
		P += 7
	}
	U.setDate(-P);
	U.setDate(U.getDate() + 1);
	var E = this.tbody.firstChild;
	var I = Calendar._SMN[V];
	var M = this.ar_days = new Array();
	var L = Calendar._TT.WEEKEND;
	var D = this.multiple ? (this.datesCells = {}) : null;
	for (var R = 0; R < 6; ++R, E = E.nextSibling) {
		var A = E.firstChild;
		if (this.weekNumbers) {
			A.className = "day wn";
			A.innerHTML = U.getWeekNumber();
			A = A.nextSibling
		}
		E.className = "daysrow";
		var S = false,
		F,
		C = M[R] = [];
		for (var Q = 0; Q < 7; ++Q, A = A.nextSibling, U.setDate(F + 1)) {
			F = U.getDate();
			var G = U.getDay();
			A.className = "day";
			A.pos = R << 4 | Q;
			C[Q] = A;
			var J = (U.getMonth() == V);
			if (!J) {
				if (this.showsOtherMonths) {
					A.className += " othermonth";
					A.otherMonth = true
				} else {
					A.className = "emptycell";
					A.innerHTML = "&nbsp;";
					A.disabled = true;
					continue
				}
			} else {
				A.otherMonth = false;
				S = true
			}
			A.disabled = false;
			A.innerHTML = this.getDateText ? this.getDateText(U, F) : F;
			if (D) {
				D[U.print("%Y%m%d")] = A
			}
			if (this.getDateStatus) {
				var N = this.getDateStatus(U, H, V, F);
				if (N === true) {
					A.className += " disabled";
					A.disabled = true
				} else {
					if (/disabled/i.test(N)) {
						A.disabled = true
					}
					A.className += " " + N
				}
			}
			if (!A.disabled) {
				A.caldate = new Date(U);
				A.ttip = "_";
				if (!this.multiple && J && F == Y && this.hiliteToday) {
					A.className += " selected";
					this.currentDateEl = A
				}
				if (U.getFullYear() == O && U.getMonth() == W && F == B) {
					A.className += " today";
					A.ttip += Calendar._TT.PART_TODAY
				}
				if (L.indexOf(G.toString()) != -1) {
					A.className += A.otherMonth ? " oweekend" : " weekend"
				}
			}
		}
		if (!(S || this.showsOtherMonths)) {
			E.className = "emptyrow"
		}
	}
	this.title.innerHTML = Calendar._MN[V] + ", " + H;
	this.onSetTime();
	this.table.style.visibility = "visible";
	this._initMultipleDates()
};
Calendar.prototype._initMultipleDates = function () {
	if (this.multiple) {
		for (var B in this.multiple) {
			var A = this.datesCells[B];
			var C = this.multiple[B];
			if (!C) {
				continue
			}
			if (A) {
				A.className += " selected"
			}
		}
	}
};
Calendar.prototype._toggleMultipleDate = function (B) {
	if (this.multiple) {
		var C = B.print("%Y%m%d");
		var A = this.datesCells[C];
		if (A) {
			var D = this.multiple[C];
			if (!D) {
				Calendar.addClass(A, "selected");
				this.multiple[C] = B
			} else {
				Calendar.removeClass(A, "selected");
				delete this.multiple[C]
			}
		}
	}
};
Calendar.prototype.setClear = function (A) {
	this.isClear = A
};
Calendar.prototype.setClearBlank = function (A) {
	this.clearBlank = A
};
Calendar.prototype.setHeight = function (A) {
	this.height = A
};
Calendar.prototype.setDateToolTipHandler = function (A) {
	this.getDateToolTip = A
};
Calendar.prototype.setDate = function (B) {
	if (this.dateFormat == "%Y-%m") {
		var C = SeeUtils.getByClass(document, "calendar_month_container_body");
		var D = SeeUtils.getElByTag(C[0], "a");
		var E = B.getMonth();
		for (var A = 0; A < D.length; A++) {
			SeeUtils.removeClass(D[A], "current");
			if (E === A) {
				SeeUtils.addClass(D[A], "current")
			}
			SeeUtils.setElVal("inputYear", B.getFullYear())
		}
	} else {
		if (!B.equalsTo(this.date)) {
			this._init(this.firstDayOfWeek, B)
		}
	}
};
Calendar.prototype.refresh = function () {
	this._init(this.firstDayOfWeek, this.date)
};
Calendar.prototype.setFirstDayOfWeek = function (A) {
	this._init(A, this.date);
	this._displayWeekdays()
};
Calendar.prototype.setDateStatusHandler = Calendar.prototype.setDisabledHandler = function (A) {
	this.getDateStatus = A
};
Calendar.prototype.setRange = function (A, B) {
	this.minYear = A;
	this.maxYear = B
};
Calendar.prototype.callHandler = function () {
	if (this.onSelected) {
		this.onSelected(this, this.date.print(this.dateFormat))
	}
};
Calendar.prototype.closeIdx = 0;
Calendar.prototype.callCloseHandler = function () {
	this.closeIdx++;
	if (this.closeIdx >= 2 && this.params.cache == false) {
		return
	}
	if (this.onClose) {
		this.onClose(this)
	}
	this.hideShowCovered();
	if (this.clearCloseIdx) {
		this.clearCloseIdx()
	}
};
Calendar.prototype.destroy = function () {
	var A = this.element.parentNode;
	A.removeChild(this.element);
	if (this.isPopup) {
		A.removeChild(this.iframe)
	}
	Calendar._C = null;
	window._dynarch_popupCalendar = null
};
Calendar.prototype.reparent = function (B) {
	var A = this.element;
	A.parentNode.removeChild(A);
	B.appendChild(A)
};
Calendar._checkCalendar = function (B) {
	var C = window._dynarch_popupCalendar;
	if (!C) {
		return false
	}
	var A = Calendar.is_ie ? Calendar.getElement(B) : Calendar.getTargetElement(B);
	for (; A != null && A != C.element; A = A.parentNode) {}
	if (A == null) {
		window._dynarch_popupCalendar.callCloseHandler();
		return Calendar.stopEvent(B)
	}
};
Calendar.prototype.show = function () {
	var M = this.table.getElementsByTagName("tr");
	for (var E = M.length; E > 0; ) {
		var L = M[--E];
		Calendar.removeClass(L, "rowhilite");
		var K = L.getElementsByTagName("td");
		for (var D = K.length; D > 0; ) {
			var J = K[--D];
			Calendar.removeClass(J, "hilite");
			Calendar.removeClass(J, "active")
		}
	}
	this.element.style.display = "block";
	this.hidden = false;
	try {
		hideOfficeObj()
	} catch (G) {}
	if (this.isPopup) {
		window._dynarch_popupCalendar = this;
		Calendar.addEvent(document, "keydown", Calendar._keyEvent);
		Calendar.addEvent(document, "keypress", Calendar._keyEvent);
		Calendar.addEvent(document, "mousedown", Calendar._checkCalendar);
		this.iframe.style.display = "block"
	}
	this.hideShowCovered();
	var I = false;
	var H = document.getElementById("timeMinutes");
	if (H) {
		var B = this.date.getMinutes();
		var A = this.params.minuteStep;
		if (A) {
			if (B % A != 0) {
				B = B + A - (B % A)
			}
			if (B == 60) {
				B = 0;
				I = true
			}
		}
		this.date.setMinutes(B);
		if (B < 10) {
			B = "0" + B
		}
		H.value = B
	}
	var C = this.date.getHours();
	if (I) {
		this.date.setHours(++C)
	}
	var F = document.getElementById("timeHours");
	if (F) {
		if (C < 10) {
			C = "0" + C
		}
		F.value = C
	}
};
Calendar.prototype.hide = function () {
	if (this.isPopup) {
		Calendar.removeEvent(document, "keydown", Calendar._keyEvent);
		Calendar.removeEvent(document, "keypress", Calendar._keyEvent);
		Calendar.removeEvent(document, "mousedown", Calendar._checkCalendar)
	}
	this.element.style.display = "none";
	try {
		showOfficeObj()
	} catch (A) {}
	if (this.isPopup) {
		this.iframe.style.display = "none"
	}
	this.hidden = true;
	this.hideShowCovered()
};
Calendar.prototype.showAt = function (A, D) {
	var C = this.element.style;
	C.left = A + "px";
	C.top = D > 0 ? D + "px" : "0px";
	this.show();
	if (this.isPopup) {
		this.iframe.style.left = A + "px";
		this.iframe.style.top = D + "px";
		this.iframe.style.display = "block";
		var B = 214;
		if (SeeUtils.getElWidth(this.element) < B) {
			SeeUtils.setElWidth(this.iframe, B + 20);
			SeeUtils.setElWidth(this.element, B);
			SeeUtils.setElHeight(this.iframe, SeeUtils.getElHeight(this.element) + 20)
		} else {
			SeeUtils.setElWidth(this.iframe, SeeUtils.getElWidth(this.element) + 20);
			SeeUtils.setElHeight(this.iframe, SeeUtils.getElHeight(this.element) + 20)
		}
	}
};
Calendar.prototype.showAtElement = function (C, D) {
	var A = this;
	var E = Calendar.getAbsolutePos(C);
	if (!D || typeof D != "string") {
		this.showAt(E.x, E.y + C.offsetHeight);
		return true
	}
	function B(J) {
		if (J.x < 0) {
			J.x = 0
		}
		if (J.y < 0) {
			J.y = 0
		}
		var K = document.createElement("div");
		var I = K.style;
		I.position = "absolute";
		I.right = I.bottom = I.width = I.height = "0px";
		document.body.appendChild(K);
		var G = Calendar.getAbsolutePos(K);
		document.body.removeChild(K);
		if (Calendar.is_ie) {
			G.y += document.body.scrollTop;
			G.x += document.body.scrollLeft;
			G.x += document.documentElement.scrollLeft;
			var H = parseInt(document.documentElement.scrollTop);
			if (H && H > 0) {
				G.y += H
			}
		} else {
			G.y += window.scrollY;
			G.x += window.scrollX
		}
		var F = J.x + J.width - G.x;
		if (F > 0) {
			J.x -= F
		}
		F = J.y + J.height - G.y;
		if (F > 0) {
			J.y -= F
		}
	}
	this.element.style.display = "block";
	Calendar.continuation_for_the_fucking_khtml_browser = function () {
		var F = A.element.offsetWidth;
		var H = A.element.offsetHeight;
		A.element.style.display = "none";
		var G = D.substr(0, 1);
		var I = "l";
		if (D.length > 1) {
			I = D.substr(1, 1)
		}
		switch (G) {
		case "T":
			E.y -= H;
			break;
		case "B":
			E.y += C.offsetHeight;
			break;
		case "C":
			E.y += (C.offsetHeight - H) / 2;
			break;
		case "t":
			E.y += C.offsetHeight - H;
			break;
		case "b":
			break
		}
		switch (I) {
		case "L":
			E.x -= F;
			break;
		case "R":
			E.x += C.offsetWidth;
			break;
		case "C":
			E.x += (C.offsetWidth - F) / 2;
			break;
		case "l":
			E.x += C.offsetWidth - F;
			break;
		case "r":
			break
		}
		E.width = F;
		E.height = H + 40;
		A.monthsCombo.style.display = "none";
		B(E);
		A.showAt(E.x, E.y)
	};
	if (Calendar.is_khtml) {
		setTimeout("Calendar.continuation_for_the_fucking_khtml_browser()", 10)
	} else {
		Calendar.continuation_for_the_fucking_khtml_browser()
	}
};
Calendar.prototype.setDateFormat = function (A) {
	this.dateFormat = A
};
Calendar.prototype.getDateFormat = function () {
	return this.dateFormat
};
Calendar.prototype.setTtDateFormat = function (A) {
	this.ttDateFormat = A
};
Calendar.prototype.parseDate = function (B, A) {
	if (!A) {
		A = this.dateFormat
	}
	this.setDate(Date.parseDate(B, A))
};
Calendar.prototype.hideShowCovered = function () {
	if (Calendar.is_ie || Calendar.is_opera) {
		return
	}
	if (!Calendar.is_ie && !Calendar.is_opera) {
		return
	}
	function B(R) {
		var Q = R.style.visibility;
		if (!Q) {
			if (document.defaultView && typeof(document.defaultView.getComputedStyle) == "function") {
				if (!Calendar.is_khtml) {
					Q = document.defaultView.getComputedStyle(R, "").getPropertyValue("visibility")
				} else {
					Q = ""
				}
			} else {
				if (R.currentStyle) {
					Q = R.currentStyle.visibility
				} else {
					Q = ""
				}
			}
		}
		return Q
	}
	var P = new Array("applet", "iframe");
	var C = this.element;
	var A = Calendar.getAbsolutePos(C);
	var F = A.x;
	var D = C.offsetWidth + F;
	var O = A.y;
	var N = C.offsetHeight + O;
	for (var H = P.length; H > 0; ) {
		var G = document.getElementsByTagName(P[--H]);
		var E = null;
		for (var J = G.length; J > 0; ) {
			E = G[--J];
			A = Calendar.getAbsolutePos(E);
			var M = A.x;
			var L = E.offsetWidth + M;
			var K = A.y;
			var I = E.offsetHeight + K;
			if (this.hidden || (M > D) || (L < F) || (K > N) || (I < O)) {
				if (!E.__msh_save_visibility) {
					E.__msh_save_visibility = B(E)
				}
				E.style.visibility = E.__msh_save_visibility
			} else {
				if (!E.__msh_save_visibility) {
					E.__msh_save_visibility = B(E)
				}
				if (E.name == "timeHours" || E.name == "timeMinutes" || E.className == "cke_wysiwyg_frame cke_reset" || E.id == "mainbodyFrame" || E.id == "fckedit___Frame" || E.id == "officeEditorFrame" || E.className == "calendar_iframe" || E.id == "content" || SeeUtils.hasClass(E, "calendar_show_iframe")) {
					continue
				}
				E.style.visibility = "hidden"
			}
		}
	}
};
Calendar.prototype._displayWeekdays = function () {
	initCalendar();
	var B = this.firstDayOfWeek;
	var A = this.firstdayname;
	var D = Calendar._TT.WEEKEND;
	for (var C = 0; C < 7; ++C) {
		A.className = "day name";
		var E = (C + B) % 7;
		if (C) {
			A.ttip = Calendar._TT.DAY_FIRST.replace("%s", Calendar._DN[E]);
			A.navtype = 100;
			A.calendar = this;
			A.fdow = E;
			Calendar._add_evs(A)
		}
		if (D.indexOf(E.toString()) != -1) {
			Calendar.addClass(A, "weekend")
		}
		A.innerHTML = Calendar._SDN[(C + B) % 7];
		A = A.nextSibling
	}
};
Calendar.prototype._hideCombos = function () {
	this.monthsCombo.style.display = "none";
	this.yearsCombo.style.display = "none"
};
Calendar.prototype._dragStart = function (ev) {
	if (this.dragging) {
		return
	}
	this.dragging = true;
	var posX;
	var posY;
	if (Calendar.is_ie) {
		posY = window.event.clientY + document.body.scrollTop;
		posX = window.event.clientX + document.body.scrollLeft
	} else {
		posY = ev.clientY + window.scrollY;
		posX = ev.clientX + window.scrollX
	}
	var st = this.element.style;
	this.xOffs = posX - parseInt(st.left);
	this.yOffs = posY - parseInt(st.top);
	with (Calendar) {
		addEvent(document, "mousemove", calDragIt);
		addEvent(document, "mouseup", calDragEnd)
	}
};
Date._MD = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
Date.SECOND = 1000;
Date.MINUTE = 60 * Date.SECOND;
Date.HOUR = 60 * Date.MINUTE;
Date.DAY = 24 * Date.HOUR;
Date.WEEK = 7 * Date.DAY;
Date.parseDate = function (G, A) {
	initCalendar();
	var H = new Date();
	var I = 0;
	var B = -1;
	var F = 0;
	var K = G.split(/\W+/);
	var J = A.match(/%./g);
	var E = 0,
	D = 0;
	var L = 0;
	var C = 0;
	for (E = 0; E < K.length; ++E) {
		if (!K[E]) {
			continue
		}
		switch (J[E]) {
		case "%d":
		case "%e":
			F = parseInt(K[E], 10);
			break;
		case "%m":
			B = parseInt(K[E], 10) - 1;
			break;
		case "%Y":
		case "%y":
			I = parseInt(K[E], 10);
			(I < 100) && (I += (I > 29) ? 1900 : 2000);
			break;
		case "%b":
		case "%B":
			for (D = 0; D < 12; ++D) {
				if (Calendar._MN[D].substr(0, K[E].length).toLowerCase() == K[E].toLowerCase()) {
					B = D;
					break
				}
			}
			break;
		case "%H":
		case "%I":
		case "%k":
		case "%l":
			L = parseInt(K[E], 10);
			break;
		case "%P":
		case "%p":
			if (/pm/i.test(K[E]) && L < 12) {
				L += 12
			} else {
				if (/am/i.test(K[E]) && L >= 12) {
					L -= 12
				}
			}
			break;
		case "%M":
			C = parseInt(K[E], 10);
			break
		}
	}
	if (isNaN(I)) {
		I = H.getFullYear()
	}
	if (isNaN(B)) {
		B = H.getMonth()
	}
	if (isNaN(F)) {
		F = H.getDate()
	}
	if (isNaN(L)) {
		L = H.getHours()
	}
	if (isNaN(C)) {
		C = H.getMinutes()
	}
	if (I != 0 && B != -1 && "%Y-%m" == A) {
		return new Date(I, B, 1, 0, 0, 0)
	}
	if (I != 0 && B != -1 && F != 0) {
		return new Date(I, B, F, L, C, 0)
	}
	I = 0;
	B = -1;
	F = 0;
	for (E = 0; E < K.length; ++E) {
		if (K[E].search(/[a-zA-Z]+/) != -1) {
			var M = -1;
			for (D = 0; D < 12; ++D) {
				if (Calendar._MN[D].substr(0, K[E].length).toLowerCase() == K[E].toLowerCase()) {
					M = D;
					break
				}
			}
			if (M != -1) {
				if (B != -1) {
					F = B + 1
				}
				B = M
			}
		} else {
			if (parseInt(K[E], 10) <= 12 && B == -1) {
				B = K[E] - 1
			} else {
				if (parseInt(K[E], 10) > 31 && I == 0) {
					I = parseInt(K[E], 10);
					(I < 100) && (I += (I > 29) ? 1900 : 2000)
				} else {
					if (F == 0) {
						F = K[E]
					}
				}
			}
		}
	}
	if (I == 0) {
		I = H.getFullYear()
	}
	if (B != -1 && F != 0) {
		return new Date(I, B, F, L, C, 0)
	}
	return H
};
Date.prototype.getMonthDays = function (B) {
	var A = this.getFullYear();
	if (typeof B == "undefined") {
		B = this.getMonth()
	}
	if (((0 == (A % 4)) && ((0 != (A % 100)) || (0 == (A % 400)))) && B == 1) {
		return 29
	} else {
		return Date._MD[B]
	}
};
Date.prototype.getDayOfYear = function () {
	var A = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var C = new Date(this.getFullYear(), 0, 0, 0, 0, 0);
	var B = A - C;
	return Math.floor(B / Date.DAY)
};
Date.prototype.getWeekNumber = function () {
	var C = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var B = C.getDay();
	C.setDate(C.getDate() - (B + 6) % 7 + 3);
	var A = C.valueOf();
	C.setMonth(0);
	C.setDate(4);
	return Math.round((A - C.valueOf()) / (7 * 86400000)) + 1
};
Date.prototype.equalsTo = function (A) {
	return ((this.getFullYear() == A.getFullYear()) && (this.getMonth() == A.getMonth()) && (this.getDate() == A.getDate()) && (this.getHours() == A.getHours()) && (this.getMinutes() == A.getMinutes()))
};
Date.prototype.setDateOnly = function (A) {
	var B = new Date(A);
	this.setDate(1);
	this.setFullYear(B.getFullYear());
	this.setMonth(B.getMonth());
	this.setDate(B.getDate())
};
Date.prototype.print = function (I) {
	initCalendar();
	var A = this.getMonth();
	var H = this.getDate();
	var J = this.getFullYear();
	var L = this.getWeekNumber();
	var M = this.getDay();
	var Q = {};
	var N = this.getHours();
	var B = (N >= 12);
	var F = (B) ? (N - 12) : N;
	var P = this.getDayOfYear();
	if (F == 0) {
		F = 12
	}
	var C = this.getMinutes();
	var G = this.getSeconds();
	Q["%a"] = Calendar._SDN[M];
	Q["%A"] = Calendar._DN[M];
	Q["%b"] = Calendar._SMN[A];
	Q["%B"] = Calendar._MN[A];
	Q["%C"] = 1 + Math.floor(J / 100);
	Q["%d"] = (H < 10) ? ("0" + H) : H;
	Q["%e"] = H;
	Q["%H"] = (N < 10) ? ("0" + N) : N;
	Q["%I"] = (F < 10) ? ("0" + F) : F;
	Q["%j"] = (P < 100) ? ((P < 10) ? ("00" + P) : ("0" + P)) : P;
	Q["%k"] = N;
	Q["%l"] = F;
	Q["%m"] = (A < 9) ? ("0" + (1 + A)) : (1 + A);
	Q["%M"] = (C < 10) ? ("0" + C) : C;
	Q["%n"] = "\n";
	Q["%p"] = B ? "PM" : "AM";
	Q["%P"] = B ? "pm" : "am";
	Q["%s"] = Math.floor(this.getTime() / 1000);
	Q["%S"] = (G < 10) ? ("0" + G) : G;
	Q["%t"] = "\t";
	Q["%U"] = Q["%W"] = Q["%V"] = (L < 10) ? ("0" + L) : L;
	Q["%u"] = M + 1;
	Q["%w"] = M;
	Q["%y"] = ("" + J).substr(2, 2);
	Q["%Y"] = J;
	Q["%%"] = "%";
	var O = /%./g;
	if (!Calendar.is_ie5 && !Calendar.is_khtml) {
		return I.replace(O, function (R) {
			return Q[R] || R
		})
	}
	var K = I.match(O);
	for (var E = 0; E < K.length; E++) {
		var D = Q[K[E]];
		if (D) {
			O = new RegExp(K[E], "g");
			I = I.replace(O, D)
		}
	}
	return I
};
window._dynarch_popupCalendar = null;
Calendar.increaseYearInput = function (B) {
	var A = document.getElementById("inputYear");
	if (A) {
		A.value = parseInt(A.value) + B
	}
};
function getTimeTableHTML(G, K, E, H) {
	var J;
	var C;
	if (!E) {
		E = 10
	}
	var B = new Date();
	if (!G && (G != 0)) {
		G = B.getHours()
	}
	if (!K && (K != 0)) {
		K = B.getMinutes()
	}
	if (document.getElementById("timeHours")) {
		document.getElementById("timeHours").parentElement.innerHTML = ""
	}
	if (document.getElementById("timeMinutes")) {
		document.getElementById("timeMinutes").parentElement.innerHTML = ""
	}
	var F = 0;
	var D = "";
	var I = "";
	var L = "";
	var A = "cal.callHandler();";
	if (!H) {
		A = ""
	}
	L += '<table border="0" cellspacing="0" cellpadding="0">';
	L += " <tr>";
	L += ' <td width=40 colspan="2" align="left">' + Calendar._TT.TIME + "</td>";
	L += " <td>";
	L += ' <select name="timeHours" id="timeHours" style="width: 50px; height:20px; visibility: visible" onchange="var cal = Calendar.getCalendar(this);cal.date.setHours(this.value);' + A + '">';
	for (F = 0; F < 24; F++) {
		D = (F == G || F == C) ? " selected" : "";
		L += '<option value="' + (F < 10 ? "0" + F : F) + '"' + D + ">" + (F < 10 ? "0" + F : F) + "</option>"
	}
	L += " </select>";
	L += " </td>";
	L += " <td width=30>&nbsp;" + Calendar._TT.HOUR + "&nbsp;</td>";
	L += " <td>";
	L += " <select name='timeMinutes' id='timeMinutes' style='width: 50px; height:20px; visibility: visible' onchange='var cal = Calendar.getCalendar(this);cal.date.setMinutes(this.value);" + A + "'>";
	for (F = 0; F < 60; F += E) {
		I = (F == K || F == J) ? " selected" : "";
		L += '<option value="' + (F < 10 ? "0" + F : F) + '"' + I + ">" + (F < 10 ? "0" + F : F) + "</option>"
	}
	L += " </select>";
	L += " </td>";
	L += " <td>&nbsp;&nbsp;" + Calendar._TT.MINUTE + "</td>";
	L += " </tr>";
	L += "</table>";
	return L
}
function getCalendarI18n(A) {
	var B = getA8Top();
	if (B && (typeof B.$ !== "undefined") && (typeof B.$.i18n !== "undefined")) {
		return B.$.i18n(A)
	} else {
		return B.v3x.getMessage("V3XLang." + A)
	}
};
/*
 * jQuery JavaScript Library v1.8.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
 */
(function (window, undefined) {
	var rootjQuery,
	readyList,
	document = window.document,
	location = window.location,
	navigator = window.navigator,
	_jQuery = window.jQuery,
	_$ = window.$,
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,
	jQuery = function (selector, context) {
		return new jQuery.fn.init(selector, context, rootjQuery)
	},
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,
	fcamelCase = function (all, letter) {
		return (letter + "").toUpperCase()
	},
	DOMContentLoaded = function () {
		if (document.addEventListener) {
			document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
			jQuery.ready()
		} else {
			if (document.readyState === "complete") {
				document.detachEvent("onreadystatechange", DOMContentLoaded);
				jQuery.ready()
			}
		}
	},
	class2type = {};
	jQuery.fn = jQuery.prototype = {
		constructor: jQuery,
		init: function (selector, context, rootjQuery) {
			var match,
			elem,
			ret,
			doc;
			if (!selector) {
				return this
			}
			if (selector.nodeType) {
				this.context = this[0] = selector;
				this.length = 1;
				return this
			}
			if (typeof selector === "string") {
				if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
					match = [null, selector, null]
				} else {
					match = rquickExpr.exec(selector)
				}
				if (match && (match[1] || !context)) {
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;
						doc = (context && context.nodeType ? context.ownerDocument || context : document);
						selector = jQuery.parseHTML(match[1], doc, true);
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							this.attr.call(selector, context, true)
						}
						return jQuery.merge(this, selector)
					} else {
						elem = document.getElementById(match[2]);
						if (elem && elem.parentNode) {
							if (elem.id !== match[2]) {
								return rootjQuery.find(selector)
							}
							this.length = 1;
							this[0] = elem
						}
						this.context = document;
						this.selector = selector;
						return this
					}
				} else {
					if (!context || context.jquery) {
						return (context || rootjQuery).find(selector)
					} else {
						return this.constructor(context).find(selector)
					}
				}
			} else {
				if (jQuery.isFunction(selector)) {
					return rootjQuery.ready(selector)
				}
			}
			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context
			}
			return jQuery.makeArray(selector, this)
		},
		selector: "",
		jquery: "1.8.3",
		length: 0,
		size: function () {
			return this.length
		},
		toArray: function () {
			return core_slice.call(this)
		},
		get: function (num) {
			return num == null ? this.toArray() : (num < 0 ? this[this.length + num] : this[num])
		},
		pushStack: function (elems, name, selector) {
			var ret = jQuery.merge(this.constructor(), elems);
			ret.prevObject = this;
			ret.context = this.context;
			if (name === "find") {
				ret.selector = this.selector + (this.selector ? " " : "") + selector
			} else {
				if (name) {
					ret.selector = this.selector + "." + name + "(" + selector + ")"
				}
			}
			return ret
		},
		each: function (callback, args) {
			return jQuery.each(this, callback, args)
		},
		ready: function (fn) {
			jQuery.ready.promise().done(fn);
			return this
		},
		eq: function (i) {
			i = +i;
			return i === -1 ? this.slice(i) : this.slice(i, i + 1)
		},
		first: function () {
			return this.eq(0)
		},
		last: function () {
			return this.eq(-1)
		},
		slice: function () {
			return this.pushStack(core_slice.apply(this, arguments), "slice", core_slice.call(arguments).join(","))
		},
		map: function (callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem)
				}))
		},
		end: function () {
			return this.prevObject || this.constructor(null)
		},
		push: core_push,
		sort: [].sort,
		splice: [].splice
	};
	jQuery.fn.init.prototype = jQuery.fn;
	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		name,
		src,
		copy,
		copyIsArray,
		clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i = 2
		}
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {}
		}
		if (length === i) {
			target = this;
			--i
		}
		for (; i < length; i++) {
			if ((options = arguments[i]) != null) {
				for (name in options) {
					src = target[name];
					copy = options[name];
					if (target === copy) {
						continue
					}
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : []
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {}
						}
						target[name] = jQuery.extend(deep, clone, copy)
					} else {
						if (copy !== undefined) {
							target[name] = copy
						}
					}
				}
			}
		}
		return target
	};
	jQuery.extend({
		noConflict: function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$
			}
			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery
			}
			return jQuery
		},
		isReady: false,
		readyWait: 1,
		holdReady: function (hold) {
			if (hold) {
				jQuery.readyWait++
			} else {
				jQuery.ready(true)
			}
		},
		ready: function (wait) {
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return
			}
			if (!document.body) {
				return setTimeout(jQuery.ready, 1)
			}
			jQuery.isReady = true;
			if (wait !== true && --jQuery.readyWait > 0) {
				return
			}
			readyList.resolveWith(document, [jQuery]);
			if (jQuery.fn.trigger) {
				jQuery(document).trigger("ready").off("ready")
			}
		},
		isFunction: function (obj) {
			return jQuery.type(obj) === "function"
		},
		isArray: Array.isArray || function (obj) {
			return jQuery.type(obj) === "array"
		},
		isWindow: function (obj) {
			return obj != null && obj == obj.window
		},
		isNumeric: function (obj) {
			return !isNaN(parseFloat(obj)) && isFinite(obj)
		},
		type: function (obj) {
			return obj == null ? "null" : class2type[core_toString.call(obj)] || "object"
		},
		isPlainObject: function (obj) {
			if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false
			}
			try {
				if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false
				}
			} catch (e) {
				return false
			}
			var key;
			for (key in obj) {}
			return key === undefined || core_hasOwn.call(obj, key)
		},
		isEmptyObject: function (obj) {
			var name;
			for (name in obj) {
				return false
			}
			return true
		},
		error: function (msg) {
			throw new Error(msg)
		},
		parseHTML: function (data, context, scripts) {
			var parsed;
			if (!data || typeof data !== "string") {
				return null
			}
			if (typeof context === "boolean") {
				scripts = context;
				context = 0
			}
			context = context || document;
			if ((parsed = rsingleTag.exec(data))) {
				return [context.createElement(parsed[1])]
			}
			parsed = jQuery.buildFragment([data], context, scripts ? null : []);
			return jQuery.merge([], (parsed.cacheable ? jQuery.clone(parsed.fragment) : parsed.fragment).childNodes)
		},
		parseJSON: function (data) {
			if (!data || typeof data !== "string") {
				return null
			}
			data = jQuery.trim(data);
			if (window.JSON && window.JSON.parse) {
				return window.JSON.parse(data)
			}
			if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
				return (new Function("return " + data))()
			}
			jQuery.error("Invalid JSON: " + data)
		},
		parseXML: function (data) {
			var xml,
			tmp;
			if (!data || typeof data !== "string") {
				return null
			}
			try {
				if (window.DOMParser) {
					tmp = new DOMParser();
					xml = tmp.parseFromString(data, "text/xml")
				} else {
					xml = new ActiveXObject("Microsoft.XMLDOM");
					xml.async = "false";
					xml.loadXML(data)
				}
			} catch (e) {
				xml = undefined
			}
			if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data)
			}
			return xml
		},
		noop: function () {},
		globalEval: function (data) {
			if (data && core_rnotwhite.test(data)) {
				(window.execScript || function (data) {
					window["eval"].call(window, data)
				})(data)
			}
		},
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
		},
		nodeName: function (elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
		},
		each: function (obj, callback, args) {
			var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction(obj);
			if (args) {
				if (isObj) {
					for (name in obj) {
						if (callback.apply(obj[name], args) === false) {
							break
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.apply(obj[i++], args) === false) {
							break
						}
					}
				}
			} else {
				if (isObj) {
					for (name in obj) {
						if (callback.call(obj[name], name, obj[name]) === false) {
							break
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.call(obj[i], i, obj[i++]) === false) {
							break
						}
					}
				}
			}
			return obj
		},
		trim: core_trim && !core_trim.call("\uFEFF\xA0") ? function (text) {
			return text == null ? "" : core_trim.call(text)
		}
		 : function (text) {
			return text == null ? "" : (text + "").replace(rtrim, "")
		},
		makeArray: function (arr, results) {
			var type,
			ret = results || [];
			if (arr != null) {
				type = jQuery.type(arr);
				if (arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(arr)) {
					core_push.call(ret, arr)
				} else {
					jQuery.merge(ret, arr)
				}
			}
			return ret
		},
		inArray: function (elem, arr, i) {
			var len;
			if (arr) {
				if (core_indexOf) {
					return core_indexOf.call(arr, elem, i)
				}
				len = arr.length;
				i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
				for (; i < len; i++) {
					if (i in arr && arr[i] === elem) {
						return i
					}
				}
			}
			return -1
		},
		merge: function (first, second) {
			var l = second.length,
			i = first.length,
			j = 0;
			if (typeof l === "number") {
				for (; j < l; j++) {
					first[i++] = second[j]
				}
			} else {
				while (second[j] !== undefined) {
					first[i++] = second[j++]
				}
			}
			first.length = i;
			return first
		},
		grep: function (elems, callback, inv) {
			var retVal,
			ret = [],
			i = 0,
			length = elems.length;
			inv = !!inv;
			for (; i < length; i++) {
				retVal = !!callback(elems[i], i);
				if (inv !== retVal) {
					ret.push(elems[i])
				}
			}
			return ret
		},
		map: function (elems, callback, arg) {
			var value,
			key,
			ret = [],
			i = 0,
			length = elems.length,
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ((length > 0 && elems[0] && elems[length - 1]) || length === 0 || jQuery.isArray(elems));
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);
					if (value != null) {
						ret[ret.length] = value
					}
				}
			} else {
				for (key in elems) {
					value = callback(elems[key], key, arg);
					if (value != null) {
						ret[ret.length] = value
					}
				}
			}
			return ret.concat.apply([], ret)
		},
		guid: 1,
		proxy: function (fn, context) {
			var tmp,
			args,
			proxy;
			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp
			}
			if (!jQuery.isFunction(fn)) {
				return undefined
			}
			args = core_slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context, args.concat(core_slice.call(arguments)))
			};
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
			return proxy
		},
		access: function (elems, fn, key, value, chainable, emptyGet, pass) {
			var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;
			if (key && typeof key === "object") {
				for (i in key) {
					jQuery.access(elems, fn, i, key[i], 1, emptyGet, value)
				}
				chainable = 1
			} else {
				if (value !== undefined) {
					exec = pass === undefined && jQuery.isFunction(value);
					if (bulk) {
						if (exec) {
							exec = fn;
							fn = function (elem, key, value) {
								return exec.call(jQuery(elem), value)
							}
						} else {
							fn.call(elems, value);
							fn = null
						}
					}
					if (fn) {
						for (; i < length; i++) {
							fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass)
						}
					}
					chainable = 1
				}
			}
			return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet
		},
		now: function () {
			return (new Date()).getTime()
		}
	});
	jQuery.ready.promise = function (obj) {
		if (!readyList) {
			readyList = jQuery.Deferred();
			if (document.readyState === "complete") {
				setTimeout(jQuery.ready, 1)
			} else {
				if (document.addEventListener) {
					document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
					window.addEventListener("load", jQuery.ready, false)
				} else {
					document.attachEvent("onreadystatechange", DOMContentLoaded);
					window.attachEvent("onload", jQuery.ready);
					var top = false;
					try {
						top = window.frameElement == null && document.documentElement
					} catch (e) {}
					if (top && top.doScroll) {
						(function doScrollCheck() {
							if (!jQuery.isReady) {
								try {
									top.doScroll("left")
								} catch (e) {
									return setTimeout(doScrollCheck, 50)
								}
								jQuery.ready()
							}
						})()
					}
				}
			}
		}
		return readyList.promise(obj)
	};
	jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase()
	});
	rootjQuery = jQuery(document);
	var optionsCache = {};
	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.split(core_rspace), function (_, flag) {
			object[flag] = true
		});
		return object
	}
	jQuery.Callbacks = function (options) {
		options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
		var memory,
		fired,
		firing,
		firingStart,
		firingLength,
		firingIndex,
		list = [],
		stack = !options.once && [],
		fire = function (data) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false;
					break
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift())
					}
				} else {
					if (memory) {
						list = []
					} else {
						self.disable()
					}
				}
			}
		},
		self = {
			add: function () {
				if (list) {
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg)
								}
							} else {
								if (arg && arg.length && type !== "string") {
									add(arg)
								}
							}
						})
					})(arguments);
					if (firing) {
						firingLength = list.length
					} else {
						if (memory) {
							firingStart = start;
							fire(memory)
						}
					}
				}
				return this
			},
			remove: function () {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);
							if (firing) {
								if (index <= firingLength) {
									firingLength--
								}
								if (index <= firingIndex) {
									firingIndex--
								}
							}
						}
					})
				}
				return this
			},
			has: function (fn) {
				return jQuery.inArray(fn, list) > -1
			},
			empty: function () {
				list = [];
				return this
			},
			disable: function () {
				list = stack = memory = undefined;
				return this
			},
			disabled: function () {
				return !list
			},
			lock: function () {
				stack = undefined;
				if (!memory) {
					self.disable()
				}
				return this
			},
			locked: function () {
				return !stack
			},
			fireWith: function (context, args) {
				args = args || [];
				args = [context, args.slice ? args.slice() : args];
				if (list && (!fired || stack)) {
					if (firing) {
						stack.push(args)
					} else {
						fire(args)
					}
				}
				return this
			},
			fire: function () {
				self.fireWith(this, arguments);
				return this
			},
			fired: function () {
				return !!fired
			}
		};
		return self
	};
	jQuery.extend({
		Deferred: function (func) {
			var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			state = "pending",
			promise = {
				state: function () {
					return state
				},
				always: function () {
					deferred.done(arguments).fail(arguments);
					return this
				},
				then: function () {
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var action = tuple[0],
							fn = fns[i];
							deferred[tuple[1]](jQuery.isFunction(fn) ? function () {
								var returned = fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
								} else {
									newDefer[action + "With"](this === deferred ? newDefer : this, [returned])
								}
							}
								 : newDefer[action])
						});
						fns = null
					}).promise()
				},
				promise: function (obj) {
					return obj != null ? jQuery.extend(obj, promise) : promise
				}
			},
			deferred = {};
			promise.pipe = promise.then;
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				stateString = tuple[3];
				promise[tuple[1]] = list.add;
				if (stateString) {
					list.add(function () {
						state = stateString
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock)
				}
				deferred[tuple[0]] = list.fire;
				deferred[tuple[0] + "With"] = list.fireWith
			});
			promise.promise(deferred);
			if (func) {
				func.call(deferred, deferred)
			}
			return deferred
		},
		when: function (subordinate) {
			var i = 0,
			resolveValues = core_slice.call(arguments),
			length = resolveValues.length,
			remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
			updateFunc = function (i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values)
					} else {
						if (!(--remaining)) {
							deferred.resolveWith(contexts, values)
						}
					}
				}
			},
			progressValues,
			progressContexts,
			resolveContexts;
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
					} else {
						--remaining
					}
				}
			}
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues)
			}
			return deferred.promise()
		}
	});
	jQuery.support = (function () {
		var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");
		div.setAttribute("className", "t");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		all = div.getElementsByTagName("*");
		a = div.getElementsByTagName("a")[0];
		if (!all || !a || !all.length) {
			return {}
		}
		select = document.createElement("select");
		opt = select.appendChild(document.createElement("option"));
		input = div.getElementsByTagName("input")[0];
		a.style.cssText = "top:1px;float:left;opacity:.5";
		support = {
			leadingWhitespace: (div.firstChild.nodeType === 3),
			tbody: !div.getElementsByTagName("tbody").length,
			htmlSerialize: !!div.getElementsByTagName("link").length,
			style: /top/.test(a.getAttribute("style")),
			hrefNormalized: (a.getAttribute("href") === "/a"),
			opacity: /^0.5/.test(a.style.opacity),
			cssFloat: !!a.style.cssFloat,
			checkOn: (input.value === "on"),
			optSelected: opt.selected,
			getSetAttribute: div.className !== "t",
			enctype: !!document.createElement("form").enctype,
			html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
			boxModel: (document.compatMode === "CSS1Compat"),
			submitBubbles: true,
			changeBubbles: true,
			focusinBubbles: false,
			deleteExpando: true,
			noCloneEvent: true,
			inlineBlockNeedsLayout: false,
			shrinkWrapBlocks: false,
			reliableMarginRight: true,
			boxSizingReliable: true,
			pixelPosition: false
		};
		input.checked = true;
		support.noCloneChecked = input.cloneNode(true).checked;
		select.disabled = true;
		support.optDisabled = !opt.disabled;
		try {
			delete div.test
		} catch (e) {
			support.deleteExpando = false
		}
		if (!div.addEventListener && div.attachEvent && div.fireEvent) {
			div.attachEvent("onclick", clickFn = function () {
				support.noCloneEvent = false
			});
			div.cloneNode(true).fireEvent("onclick");
			div.detachEvent("onclick", clickFn)
		}
		input = document.createElement("input");
		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");
		div.appendChild(input);
		fragment = document.createDocumentFragment();
		fragment.appendChild(div.lastChild);
		support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
		support.appendChecked = input.checked;
		fragment.removeChild(input);
		fragment.appendChild(div);
		if (div.attachEvent) {
			for (i in {
				submit: true,
				change: true,
				focusin: true
			}) {
				eventName = "on" + i;
				isSupported = (eventName in div);
				if (!isSupported) {
					div.setAttribute(eventName, "return;");
					isSupported = (typeof div[eventName] === "function")
				}
				support[i + "Bubbles"] = isSupported
			}
		}
		jQuery(function () {
			var container,
			div,
			tds,
			marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];
			if (!body) {
				return
			}
			container = document.createElement("div");
			container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
			body.insertBefore(container, body.firstChild);
			div = document.createElement("div");
			container.appendChild(div);
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName("td");
			tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
			isSupported = (tds[0].offsetHeight === 0);
			tds[0].style.display = "";
			tds[1].style.display = "none";
			support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);
			div.innerHTML = "";
			div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
			support.boxSizing = (div.offsetWidth === 4);
			support.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== 1);
			if (window.getComputedStyle) {
				support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
				support.boxSizingReliable = (window.getComputedStyle(div, null) || {
					width: "4px"
				}).width === "4px";
				marginDiv = document.createElement("div");
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				div.appendChild(marginDiv);
				support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight)
			}
			if (typeof div.style.zoom !== "undefined") {
				div.innerHTML = "";
				div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
				support.inlineBlockNeedsLayout = (div.offsetWidth === 3);
				div.style.display = "block";
				div.style.overflow = "visible";
				div.innerHTML = "<div></div>";
				div.firstChild.style.width = "5px";
				support.shrinkWrapBlocks = (div.offsetWidth !== 3);
				container.style.zoom = 1
			}
			body.removeChild(container);
			container = div = tds = marginDiv = null
		});
		fragment.removeChild(div);
		all = a = select = opt = input = fragment = div = null;
		return support
	})();
	var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;
	jQuery.extend({
		cache: {},
		deletedIds: [],
		uuid: 0,
		expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
		noData: {
			embed: true,
			object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
			applet: true
		},
		hasData: function (elem) {
			elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
			return !!elem && !isEmptyDataObject(elem)
		},
		data: function (elem, name, data, pvt) {
			if (!jQuery.acceptData(elem)) {
				return
			}
			var thisCache,
			ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",
			isNode = elem.nodeType,
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
			if ((!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined) {
				return
			}
			if (!id) {
				if (isNode) {
					elem[internalKey] = id = jQuery.deletedIds.pop() || jQuery.guid++
				} else {
					id = internalKey
				}
			}
			if (!cache[id]) {
				cache[id] = {};
				if (!isNode) {
					cache[id].toJSON = jQuery.noop
				}
			}
			if (typeof name === "object" || typeof name === "function") {
				if (pvt) {
					cache[id] = jQuery.extend(cache[id], name)
				} else {
					cache[id].data = jQuery.extend(cache[id].data, name)
				}
			}
			thisCache = cache[id];
			if (!pvt) {
				if (!thisCache.data) {
					thisCache.data = {}
				}
				thisCache = thisCache.data
			}
			if (data !== undefined) {
				thisCache[jQuery.camelCase(name)] = data
			}
			if (getByName) {
				ret = thisCache[name];
				if (ret == null) {
					ret = thisCache[jQuery.camelCase(name)]
				}
			} else {
				ret = thisCache
			}
			return ret
		},
		removeData: function (elem, name, pvt) {
			if (!jQuery.acceptData(elem)) {
				return
			}
			var thisCache,
			i,
			l,
			isNode = elem.nodeType,
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[jQuery.expando] : jQuery.expando;
			if (!cache[id]) {
				return
			}
			if (name) {
				thisCache = pvt ? cache[id] : cache[id].data;
				if (thisCache) {
					if (!jQuery.isArray(name)) {
						if (name in thisCache) {
							name = [name]
						} else {
							name = jQuery.camelCase(name);
							if (name in thisCache) {
								name = [name]
							} else {
								name = name.split(" ")
							}
						}
					}
					for (i = 0, l = name.length; i < l; i++) {
						delete thisCache[name[i]]
					}
					if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
						return
					}
				}
			}
			if (!pvt) {
				delete cache[id].data;
				if (!isEmptyDataObject(cache[id])) {
					return
				}
			}
			if (isNode) {
				jQuery.cleanData([elem], true)
			} else {
				if (jQuery.support.deleteExpando || cache != cache.window) {
					delete cache[id]
				} else {
					cache[id] = null
				}
			}
		},
		_data: function (elem, name, data) {
			return jQuery.data(elem, name, data, true)
		},
		acceptData: function (elem) {
			var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
			return !noData || noData !== true && elem.getAttribute("classid") === noData
		}
	});
	jQuery.fn.extend({
		data: function (key, value) {
			var parts,
			part,
			attr,
			name,
			l,
			elem = this[0],
			i = 0,
			data = null;
			if (key === undefined) {
				if (this.length) {
					data = jQuery.data(elem);
					if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
						attr = elem.attributes;
						for (l = attr.length; i < l; i++) {
							name = attr[i].name;
							if (!name.indexOf("data-")) {
								name = jQuery.camelCase(name.substring(5));
								dataAttr(elem, name, data[name])
							}
						}
						jQuery._data(elem, "parsedAttrs", true)
					}
				}
				return data
			}
			if (typeof key === "object") {
				return this.each(function () {
					jQuery.data(this, key)
				})
			}
			parts = key.split(".", 2);
			parts[1] = parts[1] ? "." + parts[1] : "";
			part = parts[1] + "!";
			return jQuery.access(this, function (value) {
				if (value === undefined) {
					data = this.triggerHandler("getData" + part, [parts[0]]);
					if (data === undefined && elem) {
						data = jQuery.data(elem, key);
						data = dataAttr(elem, key, data)
					}
					return data === undefined && parts[1] ? this.data(parts[0]) : data
				}
				parts[1] = value;
				this.each(function () {
					var self = jQuery(this);
					self.triggerHandler("setData" + part, parts);
					jQuery.data(this, key, value);
					self.triggerHandler("changeData" + part, parts)
				})
			}, null, value, arguments.length > 1, null, false)
		},
		removeData: function (key) {
			return this.each(function () {
				jQuery.removeData(this, key)
			})
		}
	});
	function dataAttr(elem, key, data) {
		if (data === undefined && elem.nodeType === 1) {
			var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
			data = elem.getAttribute(name);
			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
				} catch (e) {}
				jQuery.data(elem, key, data)
			} else {
				data = undefined
			}
		}
		return data
	}
	function isEmptyDataObject(obj) {
		var name;
		for (name in obj) {
			if (name === "data" && jQuery.isEmptyObject(obj[name])) {
				continue
			}
			if (name !== "toJSON") {
				return false
			}
		}
		return true
	}
	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;
			if (elem) {
				type = (type || "fx") + "queue";
				queue = jQuery._data(elem, type);
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = jQuery._data(elem, type, jQuery.makeArray(data))
					} else {
						queue.push(data)
					}
				}
				return queue || []
			}
		},
		dequeue: function (elem, type) {
			type = type || "fx";
			var queue = jQuery.queue(elem, type),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks(elem, type),
			next = function () {
				jQuery.dequeue(elem, type)
			};
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--
			}
			if (fn) {
				if (type === "fx") {
					queue.unshift("inprogress")
				}
				delete hooks.stop;
				fn.call(elem, next, hooks)
			}
			if (!startLength && hooks) {
				hooks.empty.fire()
			}
		},
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return jQuery._data(elem, key) || jQuery._data(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					jQuery.removeData(elem, type + "queue", true);
					jQuery.removeData(elem, key, true)
				})
			})
		}
	});
	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;
			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--
			}
			if (arguments.length < setter) {
				return jQuery.queue(this[0], type)
			}
			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);
				jQuery._queueHooks(this, type);
				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type)
				}
			})
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type)
			})
		},
		delay: function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";
			return this.queue(type, function (next, hooks) {
				var timeout = setTimeout(next, time);
				hooks.stop = function () {
					clearTimeout(timeout)
				}
			})
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", [])
		},
		promise: function (type, obj) {
			var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function () {
				if (!(--count)) {
					defer.resolveWith(elements, [elements])
				}
			};
			if (typeof type !== "string") {
				obj = type;
				type = undefined
			}
			type = type || "fx";
			while (i--) {
				tmp = jQuery._data(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve)
				}
			}
			resolve();
			return defer.promise(obj)
		}
	});
	var nodeHook,
	boolHook,
	fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;
	jQuery.fn.extend({
		attr: function (name, value) {
			return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1)
		},
		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name)
			})
		},
		prop: function (name, value) {
			return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1)
		},
		removeProp: function (name) {
			name = jQuery.propFix[name] || name;
			return this.each(function () {
				try {
					this[name] = undefined;
					delete this[name]
				} catch (e) {}
			})
		},
		addClass: function (value) {
			var classNames,
			i,
			l,
			elem,
			setClass,
			c,
			cl;
			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className))
				})
			}
			if (value && typeof value === "string") {
				classNames = value.split(core_rspace);
				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];
					if (elem.nodeType === 1) {
						if (!elem.className && classNames.length === 1) {
							elem.className = value
						} else {
							setClass = " " + elem.className + " ";
							for (c = 0, cl = classNames.length; c < cl; c++) {
								if (setClass.indexOf(" " + classNames[c] + " ") < 0) {
									setClass += classNames[c] + " "
								}
							}
							elem.className = jQuery.trim(setClass)
						}
					}
				}
			}
			return this
		},
		removeClass: function (value) {
			var removes,
			className,
			elem,
			c,
			cl,
			i,
			l;
			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className))
				})
			}
			if ((value && typeof value === "string") || value === undefined) {
				removes = (value || "").split(core_rspace);
				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];
					if (elem.nodeType === 1 && elem.className) {
						className = (" " + elem.className + " ").replace(rclass, " ");
						for (c = 0, cl = removes.length; c < cl; c++) {
							while (className.indexOf(" " + removes[c] + " ") >= 0) {
								className = className.replace(" " + removes[c] + " ", " ")
							}
						}
						elem.className = value ? jQuery.trim(className) : ""
					}
				}
			}
			return this
		},
		toggleClass: function (value, stateVal) {
			var type = typeof value,
			isBool = typeof stateVal === "boolean";
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal)
				})
			}
			return this.each(function () {
				if (type === "string") {
					var className,
					i = 0,
					self = jQuery(this),
					state = stateVal,
					classNames = value.split(core_rspace);
					while ((className = classNames[i++])) {
						state = isBool ? state : !self.hasClass(className);
						self[state ? "addClass" : "removeClass"](className)
					}
				} else {
					if (type === "undefined" || type === "boolean") {
						if (this.className) {
							jQuery._data(this, "__className__", this.className)
						}
						this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || ""
					}
				}
			})
		},
		hasClass: function (selector) {
			var className = " " + selector + " ",
			i = 0,
			l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true
				}
			}
			return false
		},
		val: function (value) {
			var hooks,
			ret,
			isFunction,
			elem = this[0];
			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret
					}
					ret = elem.value;
					return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret
				}
				return
			}
			isFunction = jQuery.isFunction(value);
			return this.each(function (i) {
				var val,
				self = jQuery(this);
				if (this.nodeType !== 1) {
					return
				}
				if (isFunction) {
					val = value.call(this, i, self.val())
				} else {
					val = value
				}
				if (val == null) {
					val = ""
				} else {
					if (typeof val === "number") {
						val += ""
					} else {
						if (jQuery.isArray(val)) {
							val = jQuery.map(val, function (value) {
									return value == null ? "" : value + ""
								})
						}
					}
				}
				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val
				}
			})
		}
	});
	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {
					var val = elem.attributes.value;
					return !val || val.specified ? elem.value : elem.text
				}
			},
			select: {
				get: function (elem) {
					var value,
					option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ? max : one ? index : 0;
					for (; i < max; i++) {
						option = options[i];
						if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
							value = jQuery(option).val();
							if (one) {
								return value
							}
							values.push(value)
						}
					}
					return values
				},
				set: function (elem, value) {
					var values = jQuery.makeArray(value);
					jQuery(elem).find("option").each(function () {
						this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0
					});
					if (!values.length) {
						elem.selectedIndex = -1
					}
					return values
				}
			}
		},
		attrFn: {},
		attr: function (elem, name, value, pass) {
			var ret,
			hooks,
			notxml,
			nType = elem.nodeType;
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return
			}
			if (pass && jQuery.isFunction(jQuery.fn[name])) {
				return jQuery(elem)[name](value)
			}
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value)
			}
			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
			if (notxml) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook)
			}
			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return
				} else {
					if (hooks && "set" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret
					} else {
						elem.setAttribute(name, value + "");
						return value
					}
				}
			} else {
				if (hooks && "get" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
					return ret
				} else {
					ret = elem.getAttribute(name);
					return ret === null ? undefined : ret
				}
			}
		},
		removeAttr: function (elem, value) {
			var propName,
			attrNames,
			name,
			isBool,
			i = 0;
			if (value && elem.nodeType === 1) {
				attrNames = value.split(core_rspace);
				for (; i < attrNames.length; i++) {
					name = attrNames[i];
					if (name) {
						propName = jQuery.propFix[name] || name;
						isBool = rboolean.test(name);
						if (!isBool) {
							jQuery.attr(elem, name, "")
						}
						elem.removeAttribute(getSetAttribute ? name : propName);
						if (isBool && propName in elem) {
							elem[propName] = false
						}
					}
				}
			}
		},
		attrHooks: {
			type: {
				set: function (elem, value) {
					if (rtype.test(elem.nodeName) && elem.parentNode) {
						jQuery.error("type property can't be changed")
					} else {
						if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val
							}
							return value
						}
					}
				}
			},
			value: {
				get: function (elem, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.get(elem, name)
					}
					return name in elem ? elem.value : null
				},
				set: function (elem, value, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.set(elem, value, name)
					}
					elem.value = value
				}
			}
		},
		propFix: {
			tabindex: "tabIndex",
			readonly: "readOnly",
			"for": "htmlFor",
			"class": "className",
			maxlength: "maxLength",
			cellspacing: "cellSpacing",
			cellpadding: "cellPadding",
			rowspan: "rowSpan",
			colspan: "colSpan",
			usemap: "useMap",
			frameborder: "frameBorder",
			contenteditable: "contentEditable"
		},
		prop: function (elem, name, value) {
			var ret,
			hooks,
			notxml,
			nType = elem.nodeType;
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return
			}
			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
			if (notxml) {
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name]
			}
			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret
				} else {
					return (elem[name] = value)
				}
			} else {
				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret
				} else {
					return elem[name]
				}
			}
		},
		propHooks: {
			tabIndex: {
				get: function (elem) {
					var attributeNode = elem.getAttributeNode("tabindex");
					return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined
				}
			}
		}
	});
	boolHook = {
		get: function (elem, name) {
			var attrNode,
			property = jQuery.prop(elem, name);
			return property === true || typeof property !== "boolean" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ? name.toLowerCase() : undefined
		},
		set: function (elem, value, name) {
			var propName;
			if (value === false) {
				jQuery.removeAttr(elem, name)
			} else {
				propName = jQuery.propFix[name] || name;
				if (propName in elem) {
					elem[propName] = true
				}
				elem.setAttribute(name, name.toLowerCase())
			}
			return name
		}
	};
	if (!getSetAttribute) {
		fixSpecified = {
			name: true,
			id: true,
			coords: true
		};
		nodeHook = jQuery.valHooks.button = {
			get: function (elem, name) {
				var ret;
				ret = elem.getAttributeNode(name);
				return ret && (fixSpecified[name] ? ret.value !== "" : ret.specified) ? ret.value : undefined
			},
			set: function (elem, value, name) {
				var ret = elem.getAttributeNode(name);
				if (!ret) {
					ret = document.createAttribute(name);
					elem.setAttributeNode(ret)
				}
				return (ret.value = value + "")
			}
		};
		jQuery.each(["width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
					set: function (elem, value) {
						if (value === "") {
							elem.setAttribute(name, "auto");
							return value
						}
					}
				})
		});
		jQuery.attrHooks.contenteditable = {
			get: nodeHook.get,
			set: function (elem, value, name) {
				if (value === "") {
					value = "false"
				}
				nodeHook.set(elem, value, name)
			}
		}
	}
	if (!jQuery.support.hrefNormalized) {
		jQuery.each(["href", "src", "width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
					get: function (elem) {
						var ret = elem.getAttribute(name, 2);
						return ret === null ? undefined : ret
					}
				})
		})
	}
	if (!jQuery.support.style) {
		jQuery.attrHooks.style = {
			get: function (elem) {
				return elem.style.cssText.toLowerCase() || undefined
			},
			set: function (elem, value) {
				return (elem.style.cssText = value + "")
			}
		}
	}
	if (!jQuery.support.optSelected) {
		jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
				get: function (elem) {
					var parent = elem.parentNode;
					if (parent) {
						parent.selectedIndex;
						if (parent.parentNode) {
							parent.parentNode.selectedIndex
						}
					}
					return null
				}
			})
	}
	if (!jQuery.support.enctype) {
		jQuery.propFix.enctype = "encoding"
	}
	if (!jQuery.support.checkOn) {
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				get: function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value
				}
			}
		})
	}
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
				set: function (elem, value) {
					if (jQuery.isArray(value)) {
						return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0)
					}
				}
			})
	});
	var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function (events) {
		return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1")
	};
	jQuery.event = {
		add: function (elem, types, handler, data, selector) {
			var elemData,
			eventHandle,
			events,
			t,
			tns,
			type,
			namespaces,
			handleObj,
			handleObjIn,
			handlers,
			special;
			if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
				return
			}
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector
			}
			if (!handler.guid) {
				handler.guid = jQuery.guid++
			}
			events = elemData.events;
			if (!events) {
				elemData.events = events = {}
			}
			eventHandle = elemData.handle;
			if (!eventHandle) {
				elemData.handle = eventHandle = function (e) {
					return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined
				};
				eventHandle.elem = elem
			}
			types = jQuery.trim(hoverHack(types)).split(" ");
			for (t = 0; t < types.length; t++) {
				tns = rtypenamespace.exec(types[t]) || [];
				type = tns[1];
				namespaces = (tns[2] || "").split(".").sort();
				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				special = jQuery.event.special[type] || {};
				handleObj = jQuery.extend({
						type: type,
						origType: tns[1],
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);
				handlers = events[type];
				if (!handlers) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false)
						} else {
							if (elem.attachEvent) {
								elem.attachEvent("on" + type, eventHandle)
							}
						}
					}
				}
				if (special.add) {
					special.add.call(elem, handleObj);
					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid
					}
				}
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj)
				} else {
					handlers.push(handleObj)
				}
				jQuery.event.global[type] = true
			}
			elem = null
		},
		global: {},
		remove: function (elem, types, handler, selector, mappedTypes) {
			var t,
			tns,
			type,
			origType,
			namespaces,
			origCount,
			j,
			events,
			special,
			eventType,
			handleObj,
			elemData = jQuery.hasData(elem) && jQuery._data(elem);
			if (!elemData || !(events = elemData.events)) {
				return
			}
			types = jQuery.trim(hoverHack(types || "")).split(" ");
			for (t = 0; t < types.length; t++) {
				tns = rtypenamespace.exec(types[t]) || [];
				type = origType = tns[1];
				namespaces = tns[2];
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true)
					}
					continue
				}
				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				eventType = events[type] || [];
				origCount = eventType.length;
				namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
				for (j = 0; j < eventType.length; j++) {
					handleObj = eventType[j];
					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!namespaces || namespaces.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						eventType.splice(j--, 1);
						if (handleObj.selector) {
							eventType.delegateCount--
						}
						if (special.remove) {
							special.remove.call(elem, handleObj)
						}
					}
				}
				if (eventType.length === 0 && origCount !== eventType.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle)
					}
					delete events[type]
				}
			}
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;
				jQuery.removeData(elem, "events", true)
			}
		},
		customEvent: {
			getData: true,
			setData: true,
			changeData: true
		},
		trigger: function (event, data, elem, onlyHandlers) {
			if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
				return
			}
			var cache,
			exclusive,
			i,
			cur,
			old,
			ontype,
			special,
			handle,
			eventPath,
			bubbleType,
			type = event.type || event,
			namespaces = [];
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return
			}
			if (type.indexOf("!") >= 0) {
				type = type.slice(0, -1);
				exclusive = true
			}
			if (type.indexOf(".") >= 0) {
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort()
			}
			if ((!elem || jQuery.event.customEvent[type]) && !jQuery.event.global[type]) {
				return
			}
			event = typeof event === "object" ? event[jQuery.expando] ? event : new jQuery.Event(type, event) : new jQuery.Event(type);
			event.type = type;
			event.isTrigger = true;
			event.exclusive = exclusive;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
			ontype = type.indexOf(":") < 0 ? "on" + type : "";
			if (!elem) {
				cache = jQuery.cache;
				for (i in cache) {
					if (cache[i].events && cache[i].events[type]) {
						jQuery.event.trigger(event, data, cache[i].handle.elem, true)
					}
				}
				return
			}
			event.result = undefined;
			if (!event.target) {
				event.target = elem
			}
			data = data != null ? jQuery.makeArray(data) : [];
			data.unshift(event);
			special = jQuery.event.special[type] || {};
			if (special.trigger && special.trigger.apply(elem, data) === false) {
				return
			}
			eventPath = [[elem, special.bindType || type]];
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
				bubbleType = special.delegateType || type;
				cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
				for (old = elem; cur; cur = cur.parentNode) {
					eventPath.push([cur, bubbleType]);
					old = cur
				}
				if (old === (elem.ownerDocument || document)) {
					eventPath.push([old.defaultView || old.parentWindow || window, bubbleType])
				}
			}
			for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {
				cur = eventPath[i][0];
				event.type = eventPath[i][1];
				handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
				if (handle) {
					handle.apply(cur, data)
				}
				handle = ontype && cur[ontype];
				if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
					event.preventDefault()
				}
			}
			event.type = type;
			if (!onlyHandlers && !event.isDefaultPrevented()) {
				if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {
					if (ontype && elem[type] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow(elem)) {
						old = elem[ontype];
						if (old) {
							elem[ontype] = null
						}
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;
						if (old) {
							elem[ontype] = old
						}
					}
				}
			}
			return event.result
		},
		dispatch: function (event) {
			event = jQuery.event.fix(event || window.event);
			var i,
			j,
			cur,
			ret,
			selMatch,
			matched,
			matches,
			handleObj,
			sel,
			related,
			handlers = ((jQuery._data(this, "events") || {})[event.type] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call(arguments),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[event.type] || {},
			handlerQueue = [];
			args[0] = event;
			event.delegateTarget = this;
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return
			}
			if (delegateCount && !(event.button && event.type === "click")) {
				for (cur = event.target; cur != this; cur = cur.parentNode || this) {
					if (cur.disabled !== true || event.type !== "click") {
						selMatch = {};
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];
							sel = handleObj.selector;
							if (selMatch[sel] === undefined) {
								selMatch[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length
							}
							if (selMatch[sel]) {
								matches.push(handleObj)
							}
						}
						if (matches.length) {
							handlerQueue.push({
								elem: cur,
								matches: matches
							})
						}
					}
				}
			}
			if (handlers.length > delegateCount) {
				handlerQueue.push({
					elem: this,
					matches: handlers.slice(delegateCount)
				})
			}
			for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
				matched = handlerQueue[i];
				event.currentTarget = matched.elem;
				for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
					handleObj = matched.matches[j];
					if (run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {
						event.data = handleObj.data;
						event.handleObj = handleObj;
						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
						if (ret !== undefined) {
							event.result = ret;
							if (ret === false) {
								event.preventDefault();
								event.stopPropagation()
							}
						}
					}
				}
			}
			if (special.postDispatch) {
				special.postDispatch.call(this, event)
			}
			return event.result
		},
		props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
		fixHooks: {},
		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (event, original) {
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode
				}
				return event
			}
		},
		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function (event, original) {
				var eventDoc,
				doc,
				body,
				button = original.button,
				fromElement = original.fromElement;
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
				}
				if (!event.relatedTarget && fromElement) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement
				}
				if (!event.which && button !== undefined) {
					event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)))
				}
				return event
			}
		},
		fix: function (event) {
			if (event[jQuery.expando]) {
				return event
			}
			var i,
			prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[event.type] || {},
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
			event = jQuery.Event(originalEvent);
			for (i = copy.length; i; ) {
				prop = copy[--i];
				event[prop] = originalEvent[prop]
			}
			if (!event.target) {
				event.target = originalEvent.srcElement || document
			}
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode
			}
			event.metaKey = !!event.metaKey;
			return fixHook.filter ? fixHook.filter(event, originalEvent) : event
		},
		special: {
			load: {
				noBubble: true
			},
			focus: {
				delegateType: "focusin"
			},
			blur: {
				delegateType: "focusout"
			},
			beforeunload: {
				setup: function (data, namespaces, eventHandle) {
					if (jQuery.isWindow(this)) {
						this.onbeforeunload = eventHandle
					}
				},
				teardown: function (namespaces, eventHandle) {
					if (this.onbeforeunload === eventHandle) {
						this.onbeforeunload = null
					}
				}
			}
		},
		simulate: function (type, elem, event, bubble) {
			var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true,
					originalEvent: {}
				});
			if (bubble) {
				jQuery.event.trigger(e, null, elem)
			} else {
				jQuery.event.dispatch.call(elem, e)
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault()
			}
		}
	};
	jQuery.event.handle = jQuery.event.dispatch;
	jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false)
		}
	}
	 : function (elem, type, handle) {
		var name = "on" + type;
		if (elem.detachEvent) {
			if (typeof elem[name] === "undefined") {
				elem[name] = null
			}
			elem.detachEvent(name, handle)
		}
	};
	jQuery.Event = function (src, props) {
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props)
		}
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;
			this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse
		} else {
			this.type = src
		}
		if (props) {
			jQuery.extend(this, props)
		}
		this.timeStamp = src && src.timeStamp || jQuery.now();
		this[jQuery.expando] = true
	};
	function returnFalse() {
		return false
	}
	function returnTrue() {
		return true
	}
	jQuery.Event.prototype = {
		preventDefault: function () {
			this.isDefaultPrevented = returnTrue;
			var e = this.originalEvent;
			if (!e) {
				return
			}
			if (e.preventDefault) {
				e.preventDefault()
			} else {
				e.returnValue = false
			}
		},
		stopPropagation: function () {
			this.isPropagationStopped = returnTrue;
			var e = this.originalEvent;
			if (!e) {
				return
			}
			if (e.stopPropagation) {
				e.stopPropagation()
			}
			e.cancelBubble = true
		},
		stopImmediatePropagation: function () {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation()
		},
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse
	};
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,
			handle: function (event) {
				var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;
				if (!related || (related !== target && !jQuery.contains(target, related))) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix
				}
				return ret
			}
		}
	});
	if (!jQuery.support.submitBubbles) {
		jQuery.event.special.submit = {
			setup: function () {
				if (jQuery.nodeName(this, "form")) {
					return false
				}
				jQuery.event.add(this, "click._submit keypress._submit", function (e) {
					var elem = e.target,
					form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
					if (form && !jQuery._data(form, "_submit_attached")) {
						jQuery.event.add(form, "submit._submit", function (event) {
							event._submit_bubble = true
						});
						jQuery._data(form, "_submit_attached", true)
					}
				})
			},
			postDispatch: function (event) {
				if (event._submit_bubble) {
					delete event._submit_bubble;
					if (this.parentNode && !event.isTrigger) {
						jQuery.event.simulate("submit", this.parentNode, event, true)
					}
				}
			},
			teardown: function () {
				if (jQuery.nodeName(this, "form")) {
					return false
				}
				jQuery.event.remove(this, "._submit")
			}
		}
	}
	if (!jQuery.support.changeBubbles) {
		jQuery.event.special.change = {
			setup: function () {
				if (rformElems.test(this.nodeName)) {
					if (this.type === "checkbox" || this.type === "radio") {
						jQuery.event.add(this, "propertychange._change", function (event) {
							if (event.originalEvent.propertyName === "checked") {
								this._just_changed = true
							}
						});
						jQuery.event.add(this, "click._change", function (event) {
							if (this._just_changed && !event.isTrigger) {
								this._just_changed = false
							}
							jQuery.event.simulate("change", this, event, true)
						})
					}
					return false
				}
				jQuery.event.add(this, "beforeactivate._change", function (e) {
					var elem = e.target;
					if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "_change_attached")) {
						jQuery.event.add(elem, "change._change", function (event) {
							if (this.parentNode && !event.isSimulated && !event.isTrigger) {
								jQuery.event.simulate("change", this.parentNode, event, true)
							}
						});
						jQuery._data(elem, "_change_attached", true)
					}
				})
			},
			handle: function (event) {
				var elem = event.target;
				if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
					return event.handleObj.handler.apply(this, arguments)
				}
			},
			teardown: function () {
				jQuery.event.remove(this, "._change");
				return !rformElems.test(this.nodeName)
			}
		}
	}
	if (!jQuery.support.focusinBubbles) {
		jQuery.each({
			focus: "focusin",
			blur: "focusout"
		}, function (orig, fix) {
			var attaches = 0,
			handler = function (event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
			};
			jQuery.event.special[fix] = {
				setup: function () {
					if (attaches++ === 0) {
						document.addEventListener(orig, handler, true)
					}
				},
				teardown: function () {
					if (--attaches === 0) {
						document.removeEventListener(orig, handler, true)
					}
				}
			}
		})
	}
	jQuery.fn.extend({
		on: function (types, selector, data, fn, one) {
			var origFn,
			type;
			if (typeof types === "object") {
				if (typeof selector !== "string") {
					data = data || selector;
					selector = undefined
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one)
				}
				return this
			}
			if (data == null && fn == null) {
				fn = selector;
				data = selector = undefined
			} else {
				if (fn == null) {
					if (typeof selector === "string") {
						fn = data;
						data = undefined
					} else {
						fn = data;
						data = selector;
						selector = undefined
					}
				}
			}
			if (fn === false) {
				fn = returnFalse
			} else {
				if (!fn) {
					return this
				}
			}
			if (one === 1) {
				origFn = fn;
				fn = function (event) {
					jQuery().off(event);
					return origFn.apply(this, arguments)
				};
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector)
			})
		},
		one: function (types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1)
		},
		off: function (types, selector, fn) {
			var handleObj,
			type;
			if (types && types.preventDefault && types.handleObj) {
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this
			}
			if (typeof types === "object") {
				for (type in types) {
					this.off(type, selector, types[type])
				}
				return this
			}
			if (selector === false || typeof selector === "function") {
				fn = selector;
				selector = undefined
			}
			if (fn === false) {
				fn = returnFalse
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector)
			})
		},
		bind: function (types, data, fn) {
			return this.on(types, null, data, fn)
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn)
		},
		live: function (types, data, fn) {
			jQuery(this.context).on(types, this.selector, data, fn);
			return this
		},
		die: function (types, fn) {
			jQuery(this.context).off(types, this.selector || "**", fn);
			return this
		},
		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn)
		},
		undelegate: function (selector, types, fn) {
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
		},
		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this)
			})
		},
		triggerHandler: function (type, data) {
			if (this[0]) {
				return jQuery.event.trigger(type, data, this[0], true)
			}
		},
		toggle: function (fn) {
			var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function (event) {
				var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
				jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
				event.preventDefault();
				return args[lastToggle].apply(this, arguments) || false
			};
			toggler.guid = guid;
			while (i < args.length) {
				args[i++].guid = guid
			}
			return this.click(toggler)
		},
		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
		}
	});
	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
		jQuery.fn[name] = function (data, fn) {
			if (fn == null) {
				fn = data;
				data = null
			}
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
		};
		if (rkeyEvent.test(name)) {
			jQuery.event.fixHooks[name] = jQuery.event.keyHooks
		}
		if (rmouseEvent.test(name)) {
			jQuery.event.fixHooks[name] = jQuery.event.mouseHooks
		}
	});
	/*
	 * Sizzle CSS Selector Engine
	 * Copyright 2012 jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://sizzlejs.com/
	 */
	(function (window, undefined) {
		var cachedruns,
		assertGetIdNotName,
		Expr,
		getText,
		isXML,
		contains,
		compile,
		sortOrder,
		hasDuplicate,
		outermostContext,
		baseHasDuplicate = true,
		strundefined = "undefined",
		expando = ("sizcache" + Math.random()).replace(".", ""),
		Token = String,
		document = window.document,
		docElem = document.documentElement,
		dirruns = 0,
		done = 0,
		pop = [].pop,
		push = [].push,
		slice = [].slice,
		indexOf = [].indexOf || function (elem) {
			var i = 0,
			len = this.length;
			for (; i < len; i++) {
				if (this[i] === elem) {
					return i
				}
			}
			return -1
		},
		markFunction = function (fn, value) {
			fn[expando] = value == null || value;
			return fn
		},
		createCache = function () {
			var cache = {},
			keys = [];
			return markFunction(function (key, value) {
				if (keys.push(key) > Expr.cacheLength) {
					delete cache[keys.shift()]
				}
				return (cache[key + " "] = value)
			}, cache)
		},
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		whitespace = "[\\x20\\t\\r\\n\\f]",
		characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
		identifier = characterEncoding.replace("w", "w#"),
		operators = "([*^$|!~]?=)",
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
		pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",
		pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",
		rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"),
		rpseudo = new RegExp(pseudos),
		rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
		rnot = /^:not/,
		rsibling = /[\x20\t\r\n\f]*[+~]/,
		rendsWithNot = /:not\($/,
		rheader = /h\d/i,
		rinputs = /input|select|textarea|button/i,
		rbackslash = /\\(?!\\)/g,
		matchExpr = {
			ID: new RegExp("^#(" + characterEncoding + ")"),
			CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
			NAME: new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
			TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			ATTR: new RegExp("^" + attributes),
			PSEUDO: new RegExp("^" + pseudos),
			POS: new RegExp(pos, "i"),
			CHILD: new RegExp("^:(only|nth|first|last)-child(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			needsContext: new RegExp("^" + whitespace + "*[>+~]|" + pos, "i")
		},
		assert = function (fn) {
			var div = document.createElement("div");
			try {
				return fn(div)
			} catch (e) {
				return false
			}
			finally {
				div = null
			}
		},
		assertTagNameNoComments = assert(function (div) {
				div.appendChild(document.createComment(""));
				return !div.getElementsByTagName("*").length
			}),
		assertHrefNotNormalized = assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute("href") === "#"
			}),
		assertAttributes = assert(function (div) {
				div.innerHTML = "<select></select>";
				var type = typeof div.lastChild.getAttribute("multiple");
				return type !== "boolean" && type !== "string"
			}),
		assertUsableClassName = assert(function (div) {
				div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
				if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
					return false
				}
				div.lastChild.className = "e";
				return div.getElementsByClassName("e").length === 2
			}),
		assertUsableName = assert(function (div) {
				div.id = expando + 0;
				div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
				docElem.insertBefore(div, docElem.firstChild);
				var pass = document.getElementsByName && document.getElementsByName(expando).length === 2 + document.getElementsByName(expando + 0).length;
				assertGetIdNotName = !document.getElementById(expando);
				docElem.removeChild(div);
				return pass
			});
		try {
			slice.call(docElem.childNodes, 0)[0].nodeType
		} catch (e) {
			slice = function (i) {
				var elem,
				results = [];
				for (; (elem = this[i]); i++) {
					results.push(elem)
				}
				return results
			}
		}
		function Sizzle(selector, context, results, seed) {
			results = results || [];
			context = context || document;
			var match,
			elem,
			xml,
			m,
			nodeType = context.nodeType;
			if (!selector || typeof selector !== "string") {
				return results
			}
			if (nodeType !== 1 && nodeType !== 9) {
				return []
			}
			xml = isXML(context);
			if (!xml && !seed) {
				if ((match = rquickExpr.exec(selector))) {
					if ((m = match[1])) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							if (elem && elem.parentNode) {
								if (elem.id === m) {
									results.push(elem);
									return results
								}
							} else {
								return results
							}
						} else {
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results
							}
						}
					} else {
						if (match[2]) {
							push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
							return results
						} else {
							if ((m = match[3]) && assertUsableClassName && context.getElementsByClassName) {
								push.apply(results, slice.call(context.getElementsByClassName(m), 0));
								return results
							}
						}
					}
				}
			}
			return select(selector.replace(rtrim, "$1"), context, results, seed, xml)
		}
		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements)
		};
		Sizzle.matchesSelector = function (elem, expr) {
			return Sizzle(expr, null, null, [elem]).length > 0
		};
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type
			}
		}
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type
			}
		}
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					matchIndexes = fn([], seed.length, argument),
					i = matchIndexes.length;
					while (i--) {
						if (seed[(j = matchIndexes[i])]) {
							seed[j] = !(matches[j] = seed[j])
						}
					}
				})
			})
		}
		getText = Sizzle.getText = function (elem) {
			var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
			if (nodeType) {
				if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					if (typeof elem.textContent === "string") {
						return elem.textContent
					} else {
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem)
						}
					}
				} else {
					if (nodeType === 3 || nodeType === 4) {
						return elem.nodeValue
					}
				}
			} else {
				for (; (node = elem[i]); i++) {
					ret += getText(node)
				}
			}
			return ret
		};
		isXML = Sizzle.isXML = function (elem) {
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false
		};
		contains = Sizzle.contains = docElem.contains ? function (a, b) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
			return a === bup || !!(bup && bup.nodeType === 1 && adown.contains && adown.contains(bup))
		}
		 : docElem.compareDocumentPosition ? function (a, b) {
			return b && !!(a.compareDocumentPosition(b) & 16)
		}
		 : function (a, b) {
			while ((b = b.parentNode)) {
				if (b === a) {
					return true
				}
			}
			return false
		};
		Sizzle.attr = function (elem, name) {
			var val,
			xml = isXML(elem);
			if (!xml) {
				name = name.toLowerCase()
			}
			if ((val = Expr.attrHandle[name])) {
				return val(elem)
			}
			if (xml || assertAttributes) {
				return elem.getAttribute(name)
			}
			val = elem.getAttributeNode(name);
			return val ? typeof elem[name] === "boolean" ? elem[name] ? name : null : val.specified ? val.value : null : null
		};
		Expr = Sizzle.selectors = {
			cacheLength: 50,
			createPseudo: markFunction,
			match: matchExpr,
			attrHandle: assertHrefNotNormalized ? {}
			 : {
				href: function (elem) {
					return elem.getAttribute("href", 2)
				},
				type: function (elem) {
					return elem.getAttribute("type")
				}
			},
			find: {
				ID: assertGetIdNotName ? function (id, context, xml) {
					if (typeof context.getElementById !== strundefined && !xml) {
						var m = context.getElementById(id);
						return m && m.parentNode ? [m] : []
					}
				}
				 : function (id, context, xml) {
					if (typeof context.getElementById !== strundefined && !xml) {
						var m = context.getElementById(id);
						return m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ? [m] : undefined : []
					}
				},
				TAG: assertTagNameNoComments ? function (tag, context) {
					if (typeof context.getElementsByTagName !== strundefined) {
						return context.getElementsByTagName(tag)
					}
				}
				 : function (tag, context) {
					var results = context.getElementsByTagName(tag);
					if (tag === "*") {
						var elem,
						tmp = [],
						i = 0;
						for (; (elem = results[i]); i++) {
							if (elem.nodeType === 1) {
								tmp.push(elem)
							}
						}
						return tmp
					}
					return results
				},
				NAME: assertUsableName && function (tag, context) {
					if (typeof context.getElementsByName !== strundefined) {
						return context.getElementsByName(name)
					}
				},
				CLASS: assertUsableClassName && function (className, context, xml) {
					if (typeof context.getElementsByClassName !== strundefined && !xml) {
						return context.getElementsByClassName(className)
					}
				}
			},
			relative: {
				">": {
					dir: "parentNode",
					first: true
				},
				" ": {
					dir: "parentNode"
				},
				"+": {
					dir: "previousSibling",
					first: true
				},
				"~": {
					dir: "previousSibling"
				}
			},
			preFilter: {
				ATTR: function (match) {
					match[1] = match[1].replace(rbackslash, "");
					match[3] = (match[4] || match[5] || "").replace(rbackslash, "");
					if (match[2] === "~=") {
						match[3] = " " + match[3] + " "
					}
					return match.slice(0, 4)
				},
				CHILD: function (match) {
					match[1] = match[1].toLowerCase();
					if (match[1] === "nth") {
						if (!match[2]) {
							Sizzle.error(match[0])
						}
						match[3] =  + (match[3] ? match[4] + (match[5] || 1) : 2 * (match[2] === "even" || match[2] === "odd"));
						match[4] =  + ((match[6] + match[7]) || match[2] === "odd")
					} else {
						if (match[2]) {
							Sizzle.error(match[0])
						}
					}
					return match
				},
				PSEUDO: function (match) {
					var unquoted,
					excess;
					if (matchExpr.CHILD.test(match[0])) {
						return null
					}
					if (match[3]) {
						match[2] = match[3]
					} else {
						if ((unquoted = match[4])) {
							if (rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
								unquoted = unquoted.slice(0, excess);
								match[0] = match[0].slice(0, excess)
							}
							match[2] = unquoted
						}
					}
					return match.slice(0, 3)
				}
			},
			filter: {
				ID: assertGetIdNotName ? function (id) {
					id = id.replace(rbackslash, "");
					return function (elem) {
						return elem.getAttribute("id") === id
					}
				}
				 : function (id) {
					id = id.replace(rbackslash, "");
					return function (elem) {
						var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
						return node && node.value === id
					}
				},
				TAG: function (nodeName) {
					if (nodeName === "*") {
						return function () {
							return true
						}
					}
					nodeName = nodeName.replace(rbackslash, "").toLowerCase();
					return function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
					}
				},
				CLASS: function (className) {
					var pattern = classCache[expando][className + " "];
					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "")
					})
				},
				ATTR: function (name, operator, check) {
					return function (elem, context) {
						var result = Sizzle.attr(elem, name);
						if (result == null) {
							return operator === "!="
						}
						if (!operator) {
							return true
						}
						result += "";
						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.substr(result.length - check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.substr(0, check.length + 1) === check + "-" : false
					}
				},
				CHILD: function (type, argument, first, last) {
					if (type === "nth") {
						return function (elem) {
							var node,
							diff,
							parent = elem.parentNode;
							if (first === 1 && last === 0) {
								return true
							}
							if (parent) {
								diff = 0;
								for (node = parent.firstChild; node; node = node.nextSibling) {
									if (node.nodeType === 1) {
										diff++;
										if (elem === node) {
											break
										}
									}
								}
							}
							diff -= last;
							return diff === first || (diff % first === 0 && diff / first >= 0)
						}
					}
					return function (elem) {
						var node = elem;
						switch (type) {
						case "only":
						case "first":
							while ((node = node.previousSibling)) {
								if (node.nodeType === 1) {
									return false
								}
							}
							if (type === "first") {
								return true
							}
							node = elem;
						case "last":
							while ((node = node.nextSibling)) {
								if (node.nodeType === 1) {
									return false
								}
							}
							return true
						}
					}
				},
				PSEUDO: function (pseudo, argument) {
					var args,
					fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
					if (fn[expando]) {
						return fn(argument)
					}
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							matched = fn(seed, argument),
							i = matched.length;
							while (i--) {
								idx = indexOf.call(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i])
							}
						}) : function (elem) {
							return fn(elem, 0, args)
						}
					}
					return fn
				}
			},
			pseudos: {
				not: markFunction(function (selector) {
					var input = [],
					results = [],
					matcher = compile(selector.replace(rtrim, "$1"));
					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						unmatched = matcher(seed, null, xml, []),
						i = seed.length;
						while (i--) {
							if ((elem = unmatched[i])) {
								seed[i] = !(matches[i] = elem)
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						return !results.pop()
					}
				}),
				has: markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0
					}
				}),
				contains: markFunction(function (text) {
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
					}
				}),
				enabled: function (elem) {
					return elem.disabled === false
				},
				disabled: function (elem) {
					return elem.disabled === true
				},
				checked: function (elem) {
					var nodeName = elem.nodeName.toLowerCase();
					return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected)
				},
				selected: function (elem) {
					if (elem.parentNode) {
						elem.parentNode.selectedIndex
					}
					return elem.selected === true
				},
				parent: function (elem) {
					return !Expr.pseudos.empty(elem)
				},
				empty: function (elem) {
					var nodeType;
					elem = elem.firstChild;
					while (elem) {
						if (elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4) {
							return false
						}
						elem = elem.nextSibling
					}
					return true
				},
				header: function (elem) {
					return rheader.test(elem.nodeName)
				},
				text: function (elem) {
					var type,
					attr;
					return elem.nodeName.toLowerCase() === "input" && (type = elem.type) === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type)
				},
				radio: createInputPseudo("radio"),
				checkbox: createInputPseudo("checkbox"),
				file: createInputPseudo("file"),
				password: createInputPseudo("password"),
				image: createInputPseudo("image"),
				submit: createButtonPseudo("submit"),
				reset: createButtonPseudo("reset"),
				button: function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button"
				},
				input: function (elem) {
					return rinputs.test(elem.nodeName)
				},
				focus: function (elem) {
					var doc = elem.ownerDocument;
					return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
				},
				active: function (elem) {
					return elem === elem.ownerDocument.activeElement
				},
				first: createPositionalPseudo(function () {
					return [0]
				}),
				last: createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1]
				}),
				eq: createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument]
				}),
				even: createPositionalPseudo(function (matchIndexes, length) {
					for (var i = 0; i < length; i += 2) {
						matchIndexes.push(i)
					}
					return matchIndexes
				}),
				odd: createPositionalPseudo(function (matchIndexes, length) {
					for (var i = 1; i < length; i += 2) {
						matchIndexes.push(i)
					}
					return matchIndexes
				}),
				lt: createPositionalPseudo(function (matchIndexes, length, argument) {
					for (var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
						matchIndexes.push(i)
					}
					return matchIndexes
				}),
				gt: createPositionalPseudo(function (matchIndexes, length, argument) {
					for (var i = argument < 0 ? argument + length : argument; ++i < length; ) {
						matchIndexes.push(i)
					}
					return matchIndexes
				})
			}
		};
		function siblingCheck(a, b, ret) {
			if (a === b) {
				return ret
			}
			var cur = a.nextSibling;
			while (cur) {
				if (cur === b) {
					return -1
				}
				cur = cur.nextSibling
			}
			return 1
		}
		sortOrder = docElem.compareDocumentPosition ? function (a, b) {
			if (a === b) {
				hasDuplicate = true;
				return 0
			}
			return (!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition : a.compareDocumentPosition(b) & 4) ? -1 : 1
		}
		 : function (a, b) {
			if (a === b) {
				hasDuplicate = true;
				return 0
			} else {
				if (a.sourceIndex && b.sourceIndex) {
					return a.sourceIndex - b.sourceIndex
				}
			}
			var al,
			bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;
			if (aup === bup) {
				return siblingCheck(a, b)
			} else {
				if (!aup) {
					return -1
				} else {
					if (!bup) {
						return 1
					}
				}
			}
			while (cur) {
				ap.unshift(cur);
				cur = cur.parentNode
			}
			cur = bup;
			while (cur) {
				bp.unshift(cur);
				cur = cur.parentNode
			}
			al = ap.length;
			bl = bp.length;
			for (var i = 0; i < al && i < bl; i++) {
				if (ap[i] !== bp[i]) {
					return siblingCheck(ap[i], bp[i])
				}
			}
			return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1)
		};
		[0, 0].sort(sortOrder);
		baseHasDuplicate = !hasDuplicate;
		Sizzle.uniqueSort = function (results) {
			var elem,
			duplicates = [],
			i = 1,
			j = 0;
			hasDuplicate = baseHasDuplicate;
			results.sort(sortOrder);
			if (hasDuplicate) {
				for (; (elem = results[i]); i++) {
					if (elem === results[i - 1]) {
						j = duplicates.push(i)
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1)
				}
			}
			return results
		};
		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg)
		};
		function tokenize(selector, parseOnly) {
			var matched,
			match,
			tokens,
			type,
			soFar,
			groups,
			preFilters,
			cached = tokenCache[expando][selector + " "];
			if (cached) {
				return parseOnly ? 0 : cached.slice(0)
			}
			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;
			while (soFar) {
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						soFar = soFar.slice(match[0].length) || soFar
					}
					groups.push(tokens = [])
				}
				matched = false;
				if ((match = rcombinators.exec(soFar))) {
					tokens.push(matched = new Token(match.shift()));
					soFar = soFar.slice(matched.length);
					matched.type = match[0].replace(rtrim, " ")
				}
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						tokens.push(matched = new Token(match.shift()));
						soFar = soFar.slice(matched.length);
						matched.type = type;
						matched.matches = match
					}
				}
				if (!matched) {
					break
				}
			}
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0)
		}
		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			checkNonElements = base && combinator.dir === "parentNode",
			doneName = done++;
			return combinator.first ? function (elem, context, xml) {
				while ((elem = elem[dir])) {
					if (checkNonElements || elem.nodeType === 1) {
						return matcher(elem, context, xml)
					}
				}
			}
			 : function (elem, context, xml) {
				if (!xml) {
					var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
					while ((elem = elem[dir])) {
						if (checkNonElements || elem.nodeType === 1) {
							if ((cache = elem[expando]) === cachedkey) {
								return elem.sizset
							} else {
								if (typeof cache === "string" && cache.indexOf(dirkey) === 0) {
									if (elem.sizset) {
										return elem
									}
								} else {
									elem[expando] = cachedkey;
									if (matcher(elem, context, xml)) {
										elem.sizset = true;
										return elem
									}
									elem.sizset = false
								}
							}
						}
					}
				} else {
					while ((elem = elem[dir])) {
						if (checkNonElements || elem.nodeType === 1) {
							if (matcher(elem, context, xml)) {
								return elem
							}
						}
					}
				}
			}
		}
		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false
					}
				}
				return true
			}
			 : matchers[0]
		}
		function condense(unmatched, map, filter, context, xml) {
			var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
			for (; i < len; i++) {
				if ((elem = unmatched[i])) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i)
						}
					}
				}
			}
			return newUnmatched
		}
		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter)
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector)
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				i,
				elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml)
				}
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);
					i = temp.length;
					while (i--) {
						if ((elem = temp[i])) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
						}
					}
				}
				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i])) {
									temp.push((matcherIn[i] = elem))
								}
							}
							postFinder(null, (matcherOut = []), temp, xml)
						}
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
								seed[temp] = !(results[temp] = elem)
							}
						}
					}
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml)
					} else {
						push.apply(results, matcherOut)
					}
				}
			})
		}
		function matcherFromTokens(tokens) {
			var checkContext,
			matcher,
			j,
			len = tokens.length,
			leadingRelative = Expr.relative[tokens[0].type],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
			matchContext = addCombinator(function (elem) {
					return elem === checkContext
				}, implicitRelative, true),
			matchAnyContext = addCombinator(function (elem) {
					return indexOf.call(checkContext, elem) > -1
				}, implicitRelative, true),
			matchers = [function (elem, context, xml) {
					return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml))
				}
			];
			for (; i < len; i++) {
				if ((matcher = Expr.relative[tokens[i].type])) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)]
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
					if (matcher[expando]) {
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && tokens.slice(0, i - 1).join("").replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && tokens.join(""))
					}
					matchers.push(matcher)
				}
			}
			return elementMatcher(matchers)
		}
		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function (seed, context, xml, results, expandContext) {
				var elem,
				j,
				matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				elems = seed || byElement && Expr.find.TAG("*", expandContext && context.parentNode || context),
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);
				if (outermost) {
					outermostContext = context !== document && context;
					cachedruns = superMatcher.el
				}
				for (; (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						for (j = 0; (matcher = elementMatchers[j]); j++) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
							cachedruns = ++superMatcher.el
						}
					}
					if (bySet) {
						if ((elem = !matcher && elem)) {
							matchedCount--
						}
						if (seed) {
							unmatched.push(elem)
						}
					}
				}
				matchedCount += i;
				if (bySet && i !== matchedCount) {
					for (j = 0; (matcher = setMatchers[j]); j++) {
						matcher(unmatched, setMatched, context, xml)
					}
					if (seed) {
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results)
								}
							}
						}
						setMatched = condense(setMatched)
					}
					push.apply(results, setMatched);
					if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
						Sizzle.uniqueSort(results)
					}
				}
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup
				}
				return unmatched
			};
			superMatcher.el = 0;
			return bySet ? markFunction(superMatcher) : superMatcher
		}
		compile = Sizzle.compile = function (selector, group) {
			var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[expando][selector + " "];
			if (!cached) {
				if (!group) {
					group = tokenize(selector)
				}
				i = group.length;
				while (i--) {
					cached = matcherFromTokens(group[i]);
					if (cached[expando]) {
						setMatchers.push(cached)
					} else {
						elementMatchers.push(cached)
					}
				}
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers))
			}
			return cached
		};
		function multipleContexts(selector, contexts, results) {
			var i = 0,
			len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results)
			}
			return results
		}
		function select(selector, context, results, seed, xml) {
			var i,
			tokens,
			token,
			type,
			find,
			match = tokenize(selector),
			j = match.length;
			if (!seed) {
				if (match.length === 1) {
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && !xml && Expr.relative[tokens[1].type]) {
						context = Expr.find.ID(token.matches[0].replace(rbackslash, ""), context, xml)[0];
						if (!context) {
							return results
						}
						selector = selector.slice(tokens.shift().length)
					}
					for (i = matchExpr.POS.test(selector) ? -1 : tokens.length - 1; i >= 0; i--) {
						token = tokens[i];
						if (Expr.relative[(type = token.type)]) {
							break
						}
						if ((find = Expr.find[type])) {
							if ((seed = find(token.matches[0].replace(rbackslash, ""), rsibling.test(tokens[0].type) && context.parentNode || context, xml))) {
								tokens.splice(i, 1);
								selector = seed.length && tokens.join("");
								if (!selector) {
									push.apply(results, slice.call(seed, 0));
									return results
								}
								break
							}
						}
					}
				}
			}
			compile(selector, match)(seed, context, xml, results, rsibling.test(selector));
			return results
		}
		if (document.querySelectorAll) {
			(function () {
				var disconnectedMatch,
				oldSelect = select,
				rescape = /'|\\/g,
				rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
				rbuggyQSA = [":focus"],
				rbuggyMatches = [":active"],
				matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector;
				assert(function (div) {
					div.innerHTML = "<select><option selected=''></option></select>";
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)")
					}
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked")
					}
				});
				assert(function (div) {
					div.innerHTML = "<p test=''></p>";
					if (div.querySelectorAll("[test^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')")
					}
					div.innerHTML = "<input type='hidden'/>";
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled")
					}
				});
				rbuggyQSA = new RegExp(rbuggyQSA.join("|"));
				select = function (selector, context, results, seed, xml) {
					if (!seed && !xml && !rbuggyQSA.test(selector)) {
						var groups,
						i,
						old = true,
						nid = expando,
						newContext = context,
						newSelector = context.nodeType === 9 && selector;
						if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
							groups = tokenize(selector);
							if ((old = context.getAttribute("id"))) {
								nid = old.replace(rescape, "\\$&")
							} else {
								context.setAttribute("id", nid)
							}
							nid = "[id='" + nid + "'] ";
							i = groups.length;
							while (i--) {
								groups[i] = nid + groups[i].join("")
							}
							newContext = rsibling.test(selector) && context.parentNode || context;
							newSelector = groups.join(",")
						}
						if (newSelector) {
							try {
								push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));
								return results
							} catch (qsaError) {}
							finally {
								if (!old) {
									context.removeAttribute("id")
								}
							}
						}
					}
					return oldSelect(selector, context, results, seed, xml)
				};
				if (matches) {
					assert(function (div) {
						disconnectedMatch = matches.call(div, "div");
						try {
							matches.call(div, "[test!='']:sizzle");
							rbuggyMatches.push("!=", pseudos)
						} catch (e) {}
					});
					rbuggyMatches = new RegExp(rbuggyMatches.join("|"));
					Sizzle.matchesSelector = function (elem, expr) {
						expr = expr.replace(rattributeQuotes, "='$1']");
						if (!isXML(elem) && !rbuggyMatches.test(expr) && !rbuggyQSA.test(expr)) {
							try {
								var ret = matches.call(elem, expr);
								if (ret || disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
									return ret
								}
							} catch (e) {}
						}
						return Sizzle(expr, null, null, [elem]).length > 0
					}
				}
			})()
		}
		Expr.pseudos.nth = Expr.pseudos.eq;
		function setFilters() {}
		Expr.filters = setFilters.prototype = Expr.pseudos;
		Expr.setFilters = new setFilters();
		Sizzle.attr = jQuery.attr;
		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains
	})(window);
	var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};
	jQuery.fn.extend({
		find: function (selector) {
			var i,
			l,
			length,
			n,
			r,
			ret,
			self = this;
			if (typeof selector !== "string") {
				return jQuery(selector).filter(function () {
					for (i = 0, l = self.length; i < l; i++) {
						if (jQuery.contains(self[i], this)) {
							return true
						}
					}
				})
			}
			ret = this.pushStack("", "find", selector);
			for (i = 0, l = this.length; i < l; i++) {
				length = ret.length;
				jQuery.find(selector, this[i], ret);
				if (i > 0) {
					for (n = length; n < ret.length; n++) {
						for (r = 0; r < length; r++) {
							if (ret[r] === ret[n]) {
								ret.splice(n--, 1);
								break
							}
						}
					}
				}
			}
			return ret
		},
		has: function (target) {
			var i,
			targets = jQuery(target, this),
			len = targets.length;
			return this.filter(function () {
				for (i = 0; i < len; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true
					}
				}
			})
		},
		not: function (selector) {
			return this.pushStack(winnow(this, selector, false), "not", selector)
		},
		filter: function (selector) {
			return this.pushStack(winnow(this, selector, true), "filter", selector)
		},
		is: function (selector) {
			return !!selector && (typeof selector === "string" ? rneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0)
		},
		closest: function (selectors, context) {
			var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
			for (; i < l; i++) {
				cur = this[i];
				while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
					if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
						ret.push(cur);
						break
					}
					cur = cur.parentNode
				}
			}
			ret = ret.length > 1 ? jQuery.unique(ret) : ret;
			return this.pushStack(ret, "closest", selectors)
		},
		index: function (elem) {
			if (!elem) {
				return (this[0] && this[0].parentNode) ? this.prevAll().length : -1
			}
			if (typeof elem === "string") {
				return jQuery.inArray(this[0], jQuery(elem))
			}
			return jQuery.inArray(elem.jquery ? elem[0] : elem, this)
		},
		add: function (selector, context) {
			var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),
			all = jQuery.merge(this.get(), set);
			return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all))
		},
		addBack: function (selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
		}
	});
	jQuery.fn.andSelf = jQuery.fn.addBack;
	function isDisconnected(node) {
		return !node || !node.parentNode || node.parentNode.nodeType === 11
	}
	function sibling(cur, dir) {
		do {
			cur = cur[dir]
		} while (cur && cur.nodeType !== 1);
		return cur
	}
	jQuery.each({
		parent: function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null
		},
		parents: function (elem) {
			return jQuery.dir(elem, "parentNode")
		},
		parentsUntil: function (elem, i, until) {
			return jQuery.dir(elem, "parentNode", until)
		},
		next: function (elem) {
			return sibling(elem, "nextSibling")
		},
		prev: function (elem) {
			return sibling(elem, "previousSibling")
		},
		nextAll: function (elem) {
			return jQuery.dir(elem, "nextSibling")
		},
		prevAll: function (elem) {
			return jQuery.dir(elem, "previousSibling")
		},
		nextUntil: function (elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until)
		},
		prevUntil: function (elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until)
		},
		siblings: function (elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
		},
		children: function (elem) {
			return jQuery.sibling(elem.firstChild)
		},
		contents: function (elem) {
			return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes)
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var ret = jQuery.map(this, fn, until);
			if (!runtil.test(name)) {
				selector = until
			}
			if (selector && typeof selector === "string") {
				ret = jQuery.filter(selector, ret)
			}
			ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
			if (this.length > 1 && rparentsprev.test(name)) {
				ret = ret.reverse()
			}
			return this.pushStack(ret, name, core_slice.call(arguments).join(","))
		}
	});
	jQuery.extend({
		filter: function (expr, elems, not) {
			if (not) {
				expr = ":not(" + expr + ")"
			}
			return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems)
		},
		dir: function (elem, dir, until) {
			var matched = [],
			cur = elem[dir];
			while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
				if (cur.nodeType === 1) {
					matched.push(cur)
				}
				cur = cur[dir]
			}
			return matched
		},
		sibling: function (n, elem) {
			var r = [];
			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n)
				}
			}
			return r
		}
	});
	function winnow(elements, qualifier, keep) {
		qualifier = qualifier || 0;
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				var retVal = !!qualifier.call(elem, i, elem);
				return retVal === keep
			})
		} else {
			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem, i) {
					return (elem === qualifier) === keep
				})
			} else {
				if (typeof qualifier === "string") {
					var filtered = jQuery.grep(elements, function (elem) {
							return elem.nodeType === 1
						});
					if (isSimple.test(qualifier)) {
						return jQuery.filter(qualifier, filtered, !keep)
					} else {
						qualifier = jQuery.filter(qualifier, filtered)
					}
				}
			}
		}
		return jQuery.grep(elements, function (elem, i) {
			return (jQuery.inArray(elem, qualifier) >= 0) === keep
		})
	}
	function createSafeFragment(document) {
		var list = nodeNames.split("|"),
		safeFrag = document.createDocumentFragment();
		if (safeFrag.createElement) {
			while (list.length) {
				safeFrag.createElement(list.pop())
			}
		}
		return safeFrag
	}
	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
	wrapMap = {
		option: [1, "<select multiple='multiple'>", "</select>"],
		legend: [1, "<fieldset>", "</fieldset>"],
		thead: [1, "<table>", "</table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
		col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
		area: [1, "<map>", "</map>"],
		_default: [0, "", ""]
	},
	safeFragment = createSafeFragment(document),
	fragmentDiv = safeFragment.appendChild(document.createElement("div"));
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	if (!jQuery.support.htmlSerialize) {
		wrapMap._default = [1, "X<div>", "</div>"]
	}
	jQuery.fn.extend({
		text: function (value) {
			return jQuery.access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value))
			}, null, value, arguments.length)
		},
		wrapAll: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i))
				})
			}
			if (this[0]) {
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
				if (this[0].parentNode) {
					wrap.insertBefore(this[0])
				}
				wrap.map(function () {
					var elem = this;
					while (elem.firstChild && elem.firstChild.nodeType === 1) {
						elem = elem.firstChild
					}
					return elem
				}).append(this)
			}
			return this
		},
		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i))
				})
			}
			return this.each(function () {
				var self = jQuery(this),
				contents = self.contents();
				if (contents.length) {
					contents.wrapAll(html)
				} else {
					self.append(html)
				}
			})
		},
		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);
			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
			})
		},
		unwrap: function () {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes)
				}
			}).end()
		},
		append: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.appendChild(elem)
				}
			})
		},
		prepend: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.insertBefore(elem, this.firstChild)
				}
			})
		},
		before: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this)
				})
			}
			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(set, this), "before", this.selector)
			}
		},
		after: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this.nextSibling)
				})
			}
			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(this, set), "after", this.selector)
			}
		},
		remove: function (selector, keepData) {
			var elem,
			i = 0;
			for (; (elem = this[i]) != null; i++) {
				if (!selector || jQuery.filter(selector, [elem]).length) {
					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(elem.getElementsByTagName("*"));
						jQuery.cleanData([elem])
					}
					if (elem.parentNode) {
						elem.parentNode.removeChild(elem)
					}
				}
			}
			return this
		},
		empty: function () {
			var elem,
			i = 0;
			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {
					jQuery.cleanData(elem.getElementsByTagName("*"))
				}
				while (elem.firstChild) {
					elem.removeChild(elem.firstChild)
				}
			}
			return this
		},
		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
			})
		},
		html: function (value) {
			return jQuery.access(this, function (value) {
				var elem = this[0] || {},
				i = 0,
				l = this.length;
				if (value === undefined) {
					return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined
				}
				if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
					value = value.replace(rxhtmlTag, "<$1></$2>");
					try {
						for (; i < l; i++) {
							elem = this[i] || {};
							if (elem.nodeType === 1) {
								jQuery.cleanData(elem.getElementsByTagName("*"));
								elem.innerHTML = value
							}
						}
						elem = 0
					} catch (e) {}
				}
				if (elem) {
					this.empty().append(value)
				}
			}, null, value, arguments.length)
		},
		replaceWith: function (value) {
			if (!isDisconnected(this[0])) {
				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						var self = jQuery(this),
						old = self.html();
						self.replaceWith(value.call(this, i, old))
					})
				}
				if (typeof value !== "string") {
					value = jQuery(value).detach()
				}
				return this.each(function () {
					var next = this.nextSibling,
					parent = this.parentNode;
					jQuery(this).remove();
					if (next) {
						jQuery(next).before(value)
					} else {
						jQuery(parent).append(value)
					}
				})
			}
			return this.length ? this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) : this
		},
		detach: function (selector) {
			return this.remove(selector, true)
		},
		domManip: function (args, table, callback) {
			args = [].concat.apply([], args);
			var results,
			first,
			fragment,
			iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;
			if (!jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test(value)) {
				return this.each(function () {
					jQuery(this).domManip(args, table, callback)
				})
			}
			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					args[0] = value.call(this, i, table ? self.html() : undefined);
					self.domManip(args, table, callback)
				})
			}
			if (this[0]) {
				results = jQuery.buildFragment(args, this, scripts);
				fragment = results.fragment;
				first = fragment.firstChild;
				if (fragment.childNodes.length === 1) {
					fragment = first
				}
				if (first) {
					table = table && jQuery.nodeName(first, "tr");
					for (iNoClone = results.cacheable || l - 1; i < l; i++) {
						callback.call(table && jQuery.nodeName(this[i], "table") ? findOrAppend(this[i], "tbody") : this[i], i === iNoClone ? fragment : jQuery.clone(fragment, true, true))
					}
				}
				fragment = first = null;
				if (scripts.length) {
					jQuery.each(scripts, function (i, elem) {
						if (elem.src) {
							if (jQuery.ajax) {
								jQuery.ajax({
									url: elem.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									beforeSend: CsrfGuard.beforeAjaxSend,
									"throws": true
								})
							} else {
								jQuery.error("no ajax")
							}
						} else {
							jQuery.globalEval((elem.text || elem.textContent || elem.innerHTML || "").replace(rcleanScript, ""))
						}
						if (elem.parentNode) {
							elem.parentNode.removeChild(elem)
						}
					})
				}
			}
			return this
		}
	});
	function findOrAppend(elem, tag) {
		return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag))
	}
	function cloneCopyEvent(src, dest) {
		if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
			return
		}
		var type,
		i,
		l,
		oldData = jQuery._data(src),
		curData = jQuery._data(dest, oldData),
		events = oldData.events;
		if (events) {
			delete curData.handle;
			curData.events = {};
			for (type in events) {
				for (i = 0, l = events[type].length; i < l; i++) {
					jQuery.event.add(dest, type, events[type][i])
				}
			}
		}
		if (curData.data) {
			curData.data = jQuery.extend({}, curData.data)
		}
	}
	function cloneFixAttributes(src, dest) {
		var nodeName;
		if (dest.nodeType !== 1) {
			return
		}
		try {
			if (dest.clearAttributes) {
				dest.clearAttributes()
			}
			if (dest.mergeAttributes) {
				dest.mergeAttributes(src)
			}
		} catch (err) {}
		nodeName = dest.nodeName.toLowerCase();
		if (nodeName === "object") {
			if (dest.parentNode) {
				dest.outerHTML = src.outerHTML
			}
			if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
				dest.innerHTML = src.innerHTML
			}
		} else {
			if (nodeName === "input" && rcheckableType.test(src.type)) {
				dest.defaultChecked = dest.checked = src.checked;
				if (dest.value !== src.value) {
					dest.value = src.value
				}
			} else {
				if (nodeName === "option") {
					dest.selected = src.defaultSelected
				} else {
					if (nodeName === "input" || nodeName === "textarea") {
						dest.defaultValue = src.defaultValue
					} else {
						if (nodeName === "script" && dest.text !== src.text) {
							dest.text = src.text
						}
					}
				}
			}
		}
		dest.removeAttribute(jQuery.expando)
	}
	jQuery.buildFragment = function (args, context, scripts) {
		var fragment,
		cacheable,
		cachehit,
		first = args[0];
		context = context || document;
		context = !context.nodeType && context[0] || context;
		context = context.ownerDocument || context;
		if (args.length === 1 && typeof first === "string" && first.length < 512 && context === document && first.charAt(0) === "<" && !rnocache.test(first) && (jQuery.support.checkClone || !rchecked.test(first)) && (jQuery.support.html5Clone || !rnoshimcache.test(first))) {
			cacheable = true;
			fragment = jQuery.fragments[first];
			cachehit = fragment !== undefined
		}
		if (!fragment) {
			fragment = context.createDocumentFragment();
			jQuery.clean(args, context, fragment, scripts);
			if (cacheable) {
				jQuery.fragments[first] = cachehit && fragment
			}
		}
		return {
			fragment: fragment,
			cacheable: cacheable
		}
	};
	jQuery.fragments = {};
	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			i = 0,
			ret = [],
			insert = jQuery(selector),
			l = insert.length,
			parent = this.length === 1 && this[0].parentNode;
			if ((parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1) {
				insert[original](this[0]);
				return this
			} else {
				for (; i < l; i++) {
					elems = (i > 0 ? this.clone(true) : this).get();
					jQuery(insert[i])[original](elems);
					ret = ret.concat(elems)
				}
				return this.pushStack(ret, name, insert.selector)
			}
		}
	});
	function getAll(elem) {
		if (typeof elem.getElementsByTagName !== "undefined") {
			return elem.getElementsByTagName("*")
		} else {
			if (typeof elem.querySelectorAll !== "undefined") {
				return elem.querySelectorAll("*")
			} else {
				return []
			}
		}
	}
	function fixDefaultChecked(elem) {
		if (rcheckableType.test(elem.type)) {
			elem.defaultChecked = elem.checked
		}
	}
	jQuery.extend({
		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var srcElements,
			destElements,
			i,
			clone;
			if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
				clone = elem.cloneNode(true)
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild(clone = fragmentDiv.firstChild)
			}
			if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
				cloneFixAttributes(elem, clone);
				srcElements = getAll(elem);
				destElements = getAll(clone);
				for (i = 0; srcElements[i]; ++i) {
					if (destElements[i]) {
						cloneFixAttributes(srcElements[i], destElements[i])
					}
				}
			}
			if (dataAndEvents) {
				cloneCopyEvent(elem, clone);
				if (deepDataAndEvents) {
					srcElements = getAll(elem);
					destElements = getAll(clone);
					for (i = 0; srcElements[i]; ++i) {
						cloneCopyEvent(srcElements[i], destElements[i])
					}
				}
			}
			srcElements = destElements = null;
			return clone
		},
		clean: function (elems, context, fragment, scripts) {
			var i,
			j,
			elem,
			tag,
			wrap,
			depth,
			div,
			hasBody,
			tbody,
			len,
			handleScript,
			jsTags,
			safe = context === document && safeFragment,
			ret = [];
			if (!context || typeof context.createDocumentFragment === "undefined") {
				context = document
			}
			for (i = 0; (elem = elems[i]) != null; i++) {
				if (typeof elem === "number") {
					elem += ""
				}
				if (!elem) {
					continue
				}
				if (typeof elem === "string") {
					if (!rhtml.test(elem)) {
						elem = context.createTextNode(elem)
					} else {
						safe = safe || createSafeFragment(context);
						div = context.createElement("div");
						safe.appendChild(div);
						elem = elem.replace(rxhtmlTag, "<$1></$2>");
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						depth = wrap[0];
						div.innerHTML = wrap[1] + elem + wrap[2];
						while (depth--) {
							div = div.lastChild
						}
						if (!jQuery.support.tbody) {
							hasBody = rtbody.test(elem);
							tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
							for (j = tbody.length - 1; j >= 0; --j) {
								if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
									tbody[j].parentNode.removeChild(tbody[j])
								}
							}
						}
						if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
							div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild)
						}
						elem = div.childNodes;
						div.parentNode.removeChild(div)
					}
				}
				if (elem.nodeType) {
					ret.push(elem)
				} else {
					jQuery.merge(ret, elem)
				}
			}
			if (div) {
				elem = div = safe = null
			}
			if (!jQuery.support.appendChecked) {
				for (i = 0; (elem = ret[i]) != null; i++) {
					if (jQuery.nodeName(elem, "input")) {
						fixDefaultChecked(elem)
					} else {
						if (typeof elem.getElementsByTagName !== "undefined") {
							jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked)
						}
					}
				}
			}
			if (fragment) {
				handleScript = function (elem) {
					if (!elem.type || rscriptType.test(elem.type)) {
						return scripts ? scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) : fragment.appendChild(elem)
					}
				};
				for (i = 0; (elem = ret[i]) != null; i++) {
					if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
						fragment.appendChild(elem);
						if (typeof elem.getElementsByTagName !== "undefined") {
							jsTags = jQuery.grep(jQuery.merge([], elem.getElementsByTagName("script")), handleScript);
							ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
							i += jsTags.length
						}
					}
				}
			}
			return ret
		},
		cleanData: function (elems, acceptData) {
			var data,
			id,
			elem,
			type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;
			for (; (elem = elems[i]) != null; i++) {
				if (acceptData || jQuery.acceptData(elem)) {
					id = elem[internalKey];
					data = id && cache[id];
					if (data) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type)
								} else {
									jQuery.removeEvent(elem, type, data.handle)
								}
							}
						}
						if (cache[id]) {
							delete cache[id];
							if (deleteExpando) {
								delete elem[internalKey]
							} else {
								if (elem.removeAttribute) {
									elem.removeAttribute(internalKey)
								} else {
									elem[internalKey] = null
								}
							}
							jQuery.deletedIds.push(id)
						}
					}
				}
			}
		}
	});
	(function () {
		var matched,
		browser;
		jQuery.uaMatch = function (ua) {
			ua = ua.toLowerCase();
			var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || /(trident)[ \/](?:.*? rv:([\w.]+)|)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
			if (match[1] == "trident") {
				match[1] = "msie"
			}
			return {
				browser: match[1] || "",
				version: match[2] || "0"
			}
		};
		matched = jQuery.uaMatch(navigator.userAgent);
		browser = {};
		if (matched.browser) {
			browser[matched.browser] = true;
			browser.version = matched.version
		}
		if (browser.chrome) {
			browser.webkit = true
		} else {
			if (browser.webkit) {
				browser.safari = true
			}
		}
		jQuery.browser = browser;
		jQuery.sub = function () {
			function jQuerySub(selector, context) {
				return new jQuerySub.fn.init(selector, context)
			}
			jQuery.extend(true, jQuerySub, this);
			jQuerySub.superclass = this;
			jQuerySub.fn = jQuerySub.prototype = this();
			jQuerySub.fn.constructor = jQuerySub;
			jQuerySub.sub = this.sub;
			jQuerySub.fn.init = function init(selector, context) {
				if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
					context = jQuerySub(context)
				}
				return jQuery.fn.init.call(this, selector, context, rootjQuerySub)
			};
			jQuerySub.fn.init.prototype = jQuerySub.fn;
			var rootjQuerySub = jQuerySub(document);
			return jQuerySub
		}
	})();
	var curCSS,
	iframe,
	iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
	rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
	rrelNum = new RegExp("^([-+])=(" + core_pnum + ")", "i"),
	elemdisplay = {
		BODY: "block"
	},
	cssShow = {
		position: "absolute",
		visibility: "hidden",
		display: "block"
	},
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},
	cssExpand = ["Top", "Right", "Bottom", "Left"],
	cssPrefixes = ["Webkit", "O", "Moz", "ms"],
	eventsToggle = jQuery.fn.toggle;
	function vendorPropName(style, name) {
		if (name in style) {
			return name
		}
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;
		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name
			}
		}
		return origName
	}
	function isHidden(elem, el) {
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
	}
	function showHide(elements, show) {
		var elem,
		display,
		values = [],
		index = 0,
		length = elements.length;
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue
			}
			values[index] = jQuery._data(elem, "olddisplay");
			if (show) {
				if (!values[index] && elem.style.display === "none") {
					elem.style.display = ""
				}
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName))
				}
			} else {
				display = curCSS(elem, "display");
				if (!values[index] && display !== "none") {
					jQuery._data(elem, "olddisplay", display)
				}
			}
		}
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none"
			}
		}
		return elements
	}
	jQuery.fn.extend({
		css: function (name, value) {
			return jQuery.access(this, function (elem, name, value) {
				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
			}, name, value, arguments.length > 1)
		},
		show: function () {
			return showHide(this, true)
		},
		hide: function () {
			return showHide(this)
		},
		toggle: function (state, fn2) {
			var bool = typeof state === "boolean";
			if (jQuery.isFunction(state) && jQuery.isFunction(fn2)) {
				return eventsToggle.apply(this, arguments)
			}
			return this.each(function () {
				if (bool ? state : isHidden(this)) {
					jQuery(this).show()
				} else {
					jQuery(this).hide()
				}
			})
		}
	});
	jQuery.extend({
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret
					}
				}
			}
		},
		cssNumber: {
			fillOpacity: true,
			fontWeight: true,
			lineHeight: true,
			opacity: true,
			orphans: true,
			widows: true,
			zIndex: true,
			zoom: true
		},
		cssProps: {
			"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
		},
		style: function (elem, name, value, extra) {
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return
			}
			var ret,
			type,
			hooks,
			origName = jQuery.camelCase(name),
			style = elem.style;
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
			if (value !== undefined) {
				type = typeof value;
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					type = "number"
				}
				if (value == null || type === "number" && isNaN(value)) {
					return
				}
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px"
				}
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
					try {
						style[name] = value
					} catch (e) {}
				}
			} else {
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret
				}
				return style[name]
			}
		},
		css: function (elem, name, numeric, extra) {
			var val,
			num,
			hooks,
			origName = jQuery.camelCase(name);
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra)
			}
			if (val === undefined) {
				val = curCSS(elem, name)
			}
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name]
			}
			if (numeric || extra !== undefined) {
				num = parseFloat(val);
				return numeric || jQuery.isNumeric(num) ? num || 0 : val
			}
			return val
		},
		swap: function (elem, options, callback) {
			var ret,
			name,
			old = {};
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name]
			}
			ret = callback.call(elem);
			for (name in options) {
				elem.style[name] = old[name]
			}
			return ret
		}
	});
	if (window.getComputedStyle) {
		curCSS = function (elem, name) {
			var ret,
			width,
			minWidth,
			maxWidth,
			computed = window.getComputedStyle(elem, null),
			style = elem.style;
			if (computed) {
				ret = computed.getPropertyValue(name) || computed[name];
				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name)
				}
				if (rnumnonpx.test(ret) && rmargin.test(name)) {
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth
				}
			}
			return ret
		}
	} else {
		if (document.documentElement.currentStyle) {
			curCSS = function (elem, name) {
				var left,
				rsLeft,
				ret = elem.currentStyle && elem.currentStyle[name],
				style = elem.style;
				if (ret == null && style && style[name]) {
					ret = style[name]
				}
				if (rnumnonpx.test(ret) && !rposition.test(name)) {
					left = style.left;
					rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
					if (rsLeft) {
						elem.runtimeStyle.left = elem.currentStyle.left
					}
					style.left = name === "fontSize" ? "1em" : ret;
					ret = style.pixelLeft + "px";
					style.left = left;
					if (rsLeft) {
						elem.runtimeStyle.left = rsLeft
					}
				}
				return ret === "" ? "auto" : ret
			}
		}
	}
	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
	}
	function augmentWidthOrHeight(elem, name, extra, isBorderBox) {
		var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
		val = 0;
		for (; i < 4; i += 2) {
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true)
			}
			if (isBorderBox) {
				if (extra === "content") {
					val -= parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0
				}
				if (extra !== "margin") {
					val -= parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0
				}
			} else {
				val += parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
				if (extra !== "padding") {
					val += parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0
				}
			}
		}
		return val
	}
	function getWidthOrHeight(elem, name, extra) {
		var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box";
		if (val <= 0 || val == null) {
			val = curCSS(elem, name);
			if (val < 0 || val == null) {
				val = elem.style[name]
			}
			if (rnumnonpx.test(val)) {
				return val
			}
			valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
			val = parseFloat(val) || 0
		}
		return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox)) + "px"
	}
	function css_defaultDisplay(nodeName) {
		if (elemdisplay[nodeName]) {
			return elemdisplay[nodeName]
		}
		var elem = jQuery("<" + nodeName + ">").appendTo(document.body),
		display = elem.css("display");
		elem.remove();
		if (display === "none" || display === "") {
			iframe = document.body.appendChild(iframe || jQuery.extend(document.createElement("iframe"), {
						frameBorder: 0,
						width: 0,
						height: 0
					}));
			if (!iframeDoc || !iframe.createElement) {
				iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
				iframeDoc.write("<!doctype html><html><body>");
				iframeDoc.close()
			}
			elem = iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));
			display = curCSS(elem, "display");
			document.body.removeChild(iframe)
		}
		elemdisplay[nodeName] = display;
		return display
	}
	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {
					if (elem.offsetWidth === 0 && rdisplayswap.test(curCSS(elem, "display"))) {
						return jQuery.swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra)
						})
					} else {
						return getWidthOrHeight(elem, name, extra)
					}
				}
			},
			set: function (elem, value, extra) {
				return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box") : 0)
			}
		}
	});
	if (!jQuery.support.opacity) {
		jQuery.cssHooks.opacity = {
			get: function (elem, computed) {
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (0.01 * parseFloat(RegExp.$1)) + "" : computed ? "1" : ""
			},
			set: function (elem, value) {
				var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";
				style.zoom = 1;
				if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
					style.removeAttribute("filter");
					if (currentStyle && !currentStyle.filter) {
						return
					}
				}
				style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity
			}
		}
	}
	jQuery(function () {
		if (!jQuery.support.reliableMarginRight) {
			jQuery.cssHooks.marginRight = {
				get: function (elem, computed) {
					return jQuery.swap(elem, {
						display: "inline-block"
					}, function () {
						if (computed) {
							return curCSS(elem, "marginRight")
						}
					})
				}
			}
		}
		if (!jQuery.support.pixelPosition && jQuery.fn.position) {
			jQuery.each(["top", "left"], function (i, prop) {
				jQuery.cssHooks[prop] = {
					get: function (elem, computed) {
						if (computed) {
							var ret = curCSS(elem, prop);
							return rnumnonpx.test(ret) ? jQuery(elem).position()[prop] + "px" : ret
						}
					}
				}
			})
		}
	});
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.hidden = function (elem) {
			return (elem.offsetWidth === 0 && elem.offsetHeight === 0) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS(elem, "display")) === "none")
		};
		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem)
		}
	}
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function (value) {
				var i,
				parts = typeof value === "string" ? value.split(" ") : [value],
				expanded = {};
				for (i = 0; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
				}
				return expanded
			}
		};
		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
		}
	});
	var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;
	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray())
		},
		serializeArray: function () {
			return this.map(function () {
				return this.elements ? jQuery.makeArray(this.elements) : this
			}).filter(function () {
				return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type))
			}).map(function (i, elem) {
				var val = jQuery(this).val();
				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {
					return {
						name: elem.name,
						value: val.replace(rCRLF, "\r\n")
					}
				}) : {
					name: elem.name,
					value: val.replace(rCRLF, "\r\n")
				}
			}).get()
		}
	});
	jQuery.param = function (a, traditional) {
		var prefix,
		s = [],
		add = function (key, value) {
			value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
		};
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
		}
		if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
			jQuery.each(a, function () {
				add(this.name, this.value)
			})
		} else {
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add)
			}
		}
		return s.join("&").replace(r20, "+")
	};
	function buildParams(prefix, obj, traditional, add) {
		var name;
		if (jQuery.isArray(obj)) {
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					add(prefix, v)
				} else {
					buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
				}
			})
		} else {
			if (!traditional && jQuery.type(obj) === "object") {
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add)
				}
			} else {
				add(prefix, obj)
			}
		}
	}
	var ajaxLocParts,
	ajaxLocation,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
	_load = jQuery.fn.load,
	prefilters = {},
	transports = {},
	allTypes = ["*/"] + ["*"];
	try {
		ajaxLocation = location.href
	} catch (e) {
		ajaxLocation = document.createElement("a");
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href
	}
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
	function addToPrefiltersOrTransports(structure) {
		return function (dataTypeExpression, func) {
			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*"
			}
			var dataType,
			list,
			placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split(core_rspace),
			i = 0,
			length = dataTypes.length;
			if (jQuery.isFunction(func)) {
				for (; i < length; i++) {
					dataType = dataTypes[i];
					placeBefore = /^\+/.test(dataType);
					if (placeBefore) {
						dataType = dataType.substr(1) || "*"
					}
					list = structure[dataType] = structure[dataType] || [];
					list[placeBefore ? "unshift" : "push"](func)
				}
			}
		}
	}
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType, inspected) {
		dataType = dataType || options.dataTypes[0];
		inspected = inspected || {};
		inspected[dataType] = true;
		var selection,
		list = structure[dataType],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = (structure === prefilters);
		for (; i < length && (executeOnly || !selection); i++) {
			selection = list[i](options, originalOptions, jqXHR);
			if (typeof selection === "string") {
				if (!executeOnly || inspected[selection]) {
					selection = undefined
				} else {
					options.dataTypes.unshift(selection);
					selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected)
				}
			}
		}
		if ((executeOnly || !selection) && !inspected["*"]) {
			selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, "*", inspected)
		}
		return selection
	}
	function ajaxExtend(target, src) {
		var key,
		deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key]
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep)
		}
	}
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments)
		}
		if (!this.length) {
			return this
		}
		var selector,
		type,
		response,
		self = this,
		off = url.indexOf(" ");
		if (off >= 0) {
			selector = url.slice(off, url.length);
			url = url.slice(0, off)
		}
		if (jQuery.isFunction(params)) {
			callback = params;
			params = undefined
		} else {
			if (params && typeof params === "object") {
				type = "POST"
			}
		}
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			complete: function (jqXHR, status) {
				if (callback) {
					self.each(callback, response || [jqXHR.responseText, status, jqXHR])
				}
			}
		}).done(function (responseText) {
			response = arguments;
			self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText)
		});
		return this
	};
	jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
		jQuery.fn[o] = function (f) {
			return this.on(o, f)
		}
	});
	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined
			}
			return jQuery.ajax({
				type: method,
				url: url,
				data: data,
				success: callback,
				dataType: type
			})
		}
	});
	jQuery.extend({
		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script")
		},
		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json")
		},
		ajaxSetup: function (target, settings) {
			if (settings) {
				ajaxExtend(target, jQuery.ajaxSettings)
			} else {
				settings = target;
				target = jQuery.ajaxSettings
			}
			ajaxExtend(target, settings);
			return target
		},
		ajaxSettings: {
			url: ajaxLocation,
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			type: "GET",
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			processData: true,
			async: true,
			accepts: {
				xml: "application/xml, text/xml",
				html: "text/html",
				text: "text/plain",
				json: "application/json, text/javascript",
				"*": allTypes
			},
			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},
			responseFields: {
				xml: "responseXML",
				text: "responseText"
			},
			converters: {
				"* text": window.String,
				"text html": true,
				"text json": jQuery.parseJSON,
				"text xml": jQuery.parseXML
			},
			flatOptions: {
				context: true,
				url: true
			}
		},
		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),
		ajax: function (url, options) {
			if (typeof url === "object") {
				options = url;
				url = undefined
			}
			options = options || {};
			var ifModifiedKey,
			responseHeadersString,
			responseHeaders,
			transport,
			timeoutTimer,
			parts,
			fireGlobals,
			i,
			s = jQuery.ajaxSetup({}, options),
			callbackContext = s.context || s,
			globalEventContext = callbackContext !== s && (callbackContext.nodeType || callbackContext instanceof jQuery) ? jQuery(callbackContext) : jQuery.event,
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			statusCode = s.statusCode || {},
			requestHeaders = {},
			requestHeadersNames = {},
			state = 0,
			strAbort = "canceled",
			jqXHR = {
				readyState: 0,
				setRequestHeader: function (name, value) {
					if (!state) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value
					}
					return this
				},
				getAllResponseHeaders: function () {
					return state === 2 ? responseHeadersString : null
				},
				getResponseHeader: function (key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while ((match = rheaders.exec(responseHeadersString))) {
								responseHeaders[match[1].toLowerCase()] = match[2]
							}
						}
						match = responseHeaders[key.toLowerCase()]
					}
					return match === undefined ? null : match
				},
				overrideMimeType: function (type) {
					if (!state) {
						s.mimeType = type
					}
					return this
				},
				abort: function (statusText) {
					statusText = statusText || strAbort;
					if (transport) {
						transport.abort(statusText)
					}
					done(0, statusText);
					return this
				}
			};
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				success,
				error,
				response,
				modified,
				statusText = nativeStatusText;
				if (state === 2) {
					return
				}
				state = 2;
				if (timeoutTimer) {
					clearTimeout(timeoutTimer)
				}
				transport = undefined;
				responseHeadersString = headers || "";
				jqXHR.readyState = status > 0 ? 4 : 0;
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses)
				}
				if (status >= 200 && status < 300 || status === 304) {
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[ifModifiedKey] = modified
						}
						modified = jqXHR.getResponseHeader("Etag");
						if (modified) {
							jQuery.etag[ifModifiedKey] = modified
						}
					}
					if (status === 304) {
						statusText = "notmodified";
						isSuccess = true
					} else {
						isSuccess = ajaxConvert(s, response);
						statusText = isSuccess.state;
						success = isSuccess.data;
						error = isSuccess.error;
						isSuccess = !error
					}
				} else {
					error = statusText;
					if (!statusText || status) {
						statusText = "error";
						if (status < 0) {
							status = 0
						}
					}
				}
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR])
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
				}
				jqXHR.statusCode(statusCode);
				statusCode = undefined;
				if (fireGlobals) {
					globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [jqXHR, s, isSuccess ? success : error])
				}
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					if (!(--jQuery.active)) {
						jQuery.event.trigger("ajaxStop")
					}
				}
			}
			deferred.promise(jqXHR);
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
			jqXHR.complete = completeDeferred.add;
			jqXHR.statusCode = function (map) {
				if (map) {
					var tmp;
					if (state < 2) {
						for (tmp in map) {
							statusCode[tmp] = [statusCode[tmp], map[tmp]]
						}
					} else {
						tmp = map[jqXHR.status];
						jqXHR.always(tmp)
					}
				}
				return this
			};
			s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(core_rspace);
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))))
			}
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional)
			}
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
			if (state === 2) {
				return jqXHR
			}
			fireGlobals = s.global;
			s.type = s.type.toUpperCase();
			s.hasContent = !rnoContent.test(s.type);
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart")
			}
			if (!s.hasContent) {
				if (s.data) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
					delete s.data
				}
				ifModifiedKey = s.url;
				if (s.cache === false) {
					var ts = jQuery.now(),
					ret = s.url.replace(rts, "$1_=" + ts);
					s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "")
				}
			}
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType)
			}
			if (s.ifModified) {
				ifModifiedKey = ifModifiedKey || s.url;
				if (jQuery.lastModified[ifModifiedKey]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey])
				}
				if (jQuery.etag[ifModifiedKey]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey])
				}
			}
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i])
			}
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				return jqXHR.abort()
			}
			strAbort = "abort";
			for (i in {
				success: 1,
				error: 1,
				complete: 1
			}) {
				jqXHR[i](s[i])
			}
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
			if (!transport) {
				done(-1, "No Transport")
			} else {
				jqXHR.readyState = 1;
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s])
				}
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
							jqXHR.abort("timeout")
						}, s.timeout)
				}
				try {
					state = 1;
					transport.send(requestHeaders, done)
				} catch (e) {
					if (state < 2) {
						done(-1, e)
					} else {
						if (getCtpTop() && typeof(getCtpTop().LogoutFlag) != "undefined" && !getCtpTop().LogoutFlag) {
							if (e == "Logout") {
								getCtpTop().LogoutFlag = true;
								getCtpTop().showLogoutMsg("\u60a8\u5df2\u9000\u51fa\u7cfb\u7edf\uff0c\u8bf7\u91cd\u65b0\u767b\u5f55!");
								return
							} else {
								throw e
							}
						}
					}
				}
			}
			return jqXHR
		},
		active: 0,
		lastModified: {},
		etag: {}
	});
	function ajaxHandleResponses(s, jqXHR, responses) {
		var ct,
		type,
		finalDataType,
		firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;
		for (type in responseFields) {
			if (type in responses) {
				jqXHR[responseFields[type]] = responses[type]
			}
		}
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("content-type")
			}
		}
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break
				}
			}
		}
		if (dataTypes[0]in responses) {
			finalDataType = dataTypes[0]
		} else {
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break
				}
				if (!firstDataType) {
					firstDataType = type
				}
			}
			finalDataType = finalDataType || firstDataType
		}
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType)
			}
			return responses[finalDataType]
		}
	}
	function ajaxConvert(s, response) {
		var conv,
		conv2,
		current,
		tmp,
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[0],
		converters = {},
		i = 0;
		if (s.dataFilter) {
			response = s.dataFilter(response, s.dataType)
		}
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv]
			}
		}
		for (; (current = dataTypes[++i]); ) {
			if (current !== "*") {
				if (prev !== "*" && prev !== current) {
					conv = converters[prev + " " + current] || converters["* " + current];
					if (!conv) {
						for (conv2 in converters) {
							tmp = conv2.split(" ");
							if (tmp[1] === current) {
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {
									if (conv === true) {
										conv = converters[conv2]
									} else {
										if (converters[conv2] !== true) {
											current = tmp[0];
											dataTypes.splice(i--, 0, current)
										}
									}
									break
								}
							}
						}
					}
					if (conv !== true) {
						if (conv && s["throws"]) {
							response = conv(response)
						} else {
							try {
								response = conv(response)
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								}
							}
						}
					}
				}
				prev = current
			}
		}
		return {
			state: "success",
			data: response
		}
	}
	var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&|$)|\?\?/,
	nonce = jQuery.now();
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
			this[callback] = true;
			return callback
		}
	});
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
		var callbackName,
		overwritten,
		responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback && rjsonp.test(url),
		replaceInData = hasCallback && !replaceInUrl && typeof data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(data);
		if (s.dataTypes[0] === "jsonp" || replaceInUrl || replaceInData) {
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
			overwritten = window[callbackName];
			if (replaceInUrl) {
				s.url = url.replace(rjsonp, "$1" + callbackName)
			} else {
				if (replaceInData) {
					s.data = data.replace(rjsonp, "$1" + callbackName)
				} else {
					if (hasCallback) {
						s.url += (rquestion.test(url) ? "&" : "?") + s.jsonp + "=" + callbackName
					}
				}
			}
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called")
				}
				return responseContainer[0]
			};
			s.dataTypes[0] = "json";
			window[callbackName] = function () {
				responseContainer = arguments
			};
			jqXHR.always(function () {
				window[callbackName] = overwritten;
				if (s[callbackName]) {
					s.jsonpCallback = originalSettings.jsonpCallback;
					oldCallbacks.push(callbackName)
				}
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0])
				}
				responseContainer = overwritten = undefined
			});
			return "script"
		}
	});
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /javascript|ecmascript/
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text
			}
		}
	});
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false
		}
		if (s.crossDomain) {
			s.type = "GET";
			s.global = false
		}
	});
	jQuery.ajaxTransport("script", function (s) {
		if (s.crossDomain) {
			var script,
			head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
			return {
				send: function (_, callback) {
					script = document.createElement("script");
					script.async = "async";
					if (s.scriptCharset) {
						script.charset = s.scriptCharset
					}
					script.src = s.url;
					script.onload = script.onreadystatechange = function (_, isAbort) {
						if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
							script.onload = script.onreadystatechange = null;
							if (head && script.parentNode) {
								head.removeChild(script)
							}
							script = undefined;
							if (!isAbort) {
								callback(200, "success")
							}
						}
					};
					head.insertBefore(script, head.firstChild)
				},
				abort: function () {
					if (script) {
						script.onload(0, 1)
					}
				}
			}
		}
	});
	var xhrCallbacks,
	xhrOnUnloadAbort = window.ActiveXObject ? function () {
		for (var key in xhrCallbacks) {
			xhrCallbacks[key](0, 1)
		}
	}
	 : false,
	xhrId = 0;
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest()
		} catch (e) {}
	}
	function createActiveXHR() {
		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP")
		} catch (e) {}
	}
	jQuery.ajaxSettings.xhr = window.ActiveXObject ? function () {
		return !this.isLocal && createStandardXHR() || createActiveXHR()
	}
	 : createStandardXHR;
	(function (xhr) {
		jQuery.extend(jQuery.support, {
			ajax: !!xhr,
			cors: !!xhr && ("withCredentials" in xhr)
		})
	})(jQuery.ajaxSettings.xhr());
	if (jQuery.support.ajax) {
		jQuery.ajaxTransport(function (s) {
			if (!s.crossDomain || jQuery.support.cors) {
				var callback;
				return {
					send: function (headers, complete) {
						var handle,
						i,
						xhr = s.xhr();
						if (s.username) {
							xhr.open(s.type, s.url, s.async, s.username, s.password)
						} else {
							xhr.open(s.type, s.url, s.async)
						}
						if (s.xhrFields) {
							for (i in s.xhrFields) {
								xhr[i] = s.xhrFields[i]
							}
						}
						if (s.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(s.mimeType)
						}
						if (!s.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest"
						}
						try {
							for (i in headers) {
								xhr.setRequestHeader(i, headers[i])
							}
						} catch (_) {}
						xhr.send((s.hasContent && s.data) || null);
						callback = function (_, isAbort) {
							var status,
							statusText,
							responseHeaders,
							responses,
							xml;
							try {
								if (callback && (isAbort || xhr.readyState === 4)) {
									callback = undefined;
									if (handle) {
										xhr.onreadystatechange = jQuery.noop;
										if (xhrOnUnloadAbort) {
											delete xhrCallbacks[handle]
										}
									}
									if (isAbort) {
										if (xhr.readyState !== 4) {
											xhr.abort()
										}
									} else {
										status = xhr.status;
										responseHeaders = xhr.getAllResponseHeaders();
										responses = {};
										xml = xhr.responseXML;
										if (xml && xml.documentElement) {
											responses.xml = xml
										}
										try {
											responses.text = xhr.responseText
										} catch (e) {}
										try {
											statusText = xhr.statusText
										} catch (e) {
											statusText = ""
										}
										if (!status && s.isLocal && !s.crossDomain) {
											status = responses.text ? 200 : 404
										} else {
											if (status === 1223) {
												status = 204
											}
										}
									}
								}
							} catch (firefoxAccessException) {
								if (!isAbort) {
									complete(-1, firefoxAccessException)
								}
							}
							if (responses) {
								complete(status, statusText, responses, responseHeaders)
							}
						};
						if (!s.async) {
							callback()
						} else {
							if (xhr.readyState === 4) {
								setTimeout(callback, 0)
							} else {
								handle = ++xhrId;
								if (xhrOnUnloadAbort) {
									if (!xhrCallbacks) {
										xhrCallbacks = {};
										jQuery(window).unload(xhrOnUnloadAbort)
									}
									xhrCallbacks[handle] = callback
								}
								xhr.onreadystatechange = callback
							}
						}
					},
					abort: function () {
						if (callback) {
							callback(0, 1)
						}
					}
				}
			}
		})
	}
	var fxNow,
	timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp("^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
	rrun = /queueHooks$/,
	animationPrefilters = [defaultPrefilter],
	tweeners = {
		"*": [function (prop, value) {
				var end,
				unit,
				tween = this.createTween(prop, value),
				parts = rfxnum.exec(value),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;
				if (parts) {
					end = +parts[2];
					unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");
					if (unit !== "px" && start) {
						start = jQuery.css(tween.elem, prop, true) || end || 1;
						do {
							scale = scale || ".5";
							start = start / scale;
							jQuery.style(tween.elem, prop, start + unit)
						} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
					}
					tween.unit = unit;
					tween.start = start;
					tween.end = parts[1] ? start + (parts[1] + 1) * end : end
				}
				return tween
			}
		]
	};
	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined
		}, 0);
		return (fxNow = jQuery.now())
	}
	function createTweens(animation, props) {
		jQuery.each(props, function (prop, value) {
			var collection = (tweeners[prop] || []).concat(tweeners["*"]),
			index = 0,
			length = collection.length;
			for (; index < length; index++) {
				if (collection[index].call(animation, prop, value)) {
					return
				}
			}
		})
	}
	function Animation(elem, properties, options) {
		var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always(function () {
				delete tick.elem
			}),
		tick = function () {
			var currentTime = fxNow || createFxNow(),
			remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
			temp = remaining / animation.duration || 0,
			percent = 1 - temp,
			index = 0,
			length = animation.tweens.length;
			for (; index < length; index++) {
				animation.tweens[index].run(percent)
			}
			deferred.notifyWith(elem, [animation, percent, remaining]);
			if (percent < 1 && length) {
				return remaining
			} else {
				deferred.resolveWith(elem, [animation]);
				return false
			}
		},
		animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {}
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function (prop, end, easing) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween
				},
				stop: function (gotoEnd) {
					var index = 0,
					length = gotoEnd ? animation.tweens.length : 0;
					for (; index < length; index++) {
						animation.tweens[index].run(1)
					}
					if (gotoEnd) {
						deferred.resolveWith(elem, [animation, gotoEnd])
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd])
					}
					return this
				}
			}),
		props = animation.props;
		propFilter(props, animation.opts.specialEasing);
		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result
			}
		}
		createTweens(animation, props);
		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation)
		}
		jQuery.fx.timer(jQuery.extend(tick, {
				anim: animation,
				queue: animation.opts.queue,
				elem: elem
			}));
		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
	}
	function propFilter(props, specialEasing) {
		var index,
		name,
		easing,
		value,
		hooks;
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0]
			}
			if (index !== name) {
				props[name] = value;
				delete props[index]
			}
			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing
					}
				}
			} else {
				specialEasing[name] = easing
			}
		}
	}
	jQuery.Animation = jQuery.extend(Animation, {
			tweener: function (props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"]
				} else {
					props = props.split(" ")
				}
				var prop,
				index = 0,
				length = props.length;
				for (; index < length; index++) {
					prop = props[index];
					tweeners[prop] = tweeners[prop] || [];
					tweeners[prop].unshift(callback)
				}
			},
			prefilter: function (callback, prepend) {
				if (prepend) {
					animationPrefilters.unshift(callback)
				} else {
					animationPrefilters.push(callback)
				}
			}
		});
	function defaultPrefilter(elem, props, opts) {
		var index,
		prop,
		value,
		length,
		dataShow,
		toggle,
		tween,
		hooks,
		oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden(elem);
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire()
					}
				}
			}
			hooks.unqueued++;
			anim.always(function () {
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire()
					}
				})
			})
		}
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];
			if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
				if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
					style.display = "inline-block"
				} else {
					style.zoom = 1
				}
			}
		}
		if (opts.overflow) {
			style.overflow = "hidden";
			if (!jQuery.support.shrinkWrapBlocks) {
				anim.done(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2]
				})
			}
		}
		for (index in props) {
			value = props[index];
			if (rfxtypes.exec(value)) {
				delete props[index];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {
					continue
				}
				handled.push(index)
			}
		}
		length = handled.length;
		if (length) {
			dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
			if ("hidden" in dataShow) {
				hidden = dataShow.hidden
			}
			if (toggle) {
				dataShow.hidden = !hidden
			}
			if (hidden) {
				jQuery(elem).show()
			} else {
				anim.done(function () {
					jQuery(elem).hide()
				})
			}
			anim.done(function () {
				var prop;
				jQuery.removeData(elem, "fxshow", true);
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop])
				}
			});
			for (index = 0; index < length; index++) {
				prop = handled[index];
				tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
				orig[prop] = dataShow[prop] || jQuery.style(elem, prop);
				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0
					}
				}
			}
		}
	}
	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing)
	}
	jQuery.Tween = Tween;
	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px")
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];
			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
		},
		run: function (percent) {
			var eased,
			hooks = Tween.propHooks[this.prop];
			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
			} else {
				this.pos = eased = percent
			}
			this.now = (this.end - this.start) * eased + this.start;
			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this)
			}
			if (hooks && hooks.set) {
				hooks.set(this)
			} else {
				Tween.propHooks._default.set(this)
			}
			return this
		}
	};
	Tween.prototype.init.prototype = Tween.prototype;
	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;
				if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop]
				}
				result = jQuery.css(tween.elem, tween.prop, false, "");
				return !result || result === "auto" ? 0 : result
			},
			set: function (tween) {
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween)
				} else {
					if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
					} else {
						tween.elem[tween.prop] = tween.now
					}
				}
			}
		}
	};
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now
			}
		}
	};
	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" || (!i && jQuery.isFunction(speed) && jQuery.isFunction(easing)) ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
		}
	});
	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {
			return this.filter(isHidden).css("opacity", 0).show().end().animate({
				opacity: to
			}, speed, easing, callback)
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			optall = jQuery.speed(speed, easing, callback),
			doAnimation = function () {
				var anim = Animation(this, jQuery.extend({}, prop), optall);
				if (empty) {
					anim.stop(true)
				}
			};
			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd)
			};
			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", [])
			}
			return this.each(function () {
				var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data(this);
				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index])
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index])
						}
					}
				}
				for (index = timers.length; index--; ) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1)
					}
				}
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type)
				}
			})
		}
	});
	function genFx(type, includeWidth) {
		var which,
		attrs = {
			height: type
		},
		i = 0;
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type
		}
		if (includeWidth) {
			attrs.opacity = attrs.width = type
		}
		return attrs
	}
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: {
			opacity: "show"
		},
		fadeOut: {
			opacity: "hide"
		},
		fadeToggle: {
			opacity: "toggle"
		}
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback)
		}
	});
	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx"
		}
		opt.old = opt.complete;
		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this)
			}
			if (opt.queue) {
				jQuery.dequeue(this, opt.queue)
			}
		};
		return opt
	};
	jQuery.easing = {
		linear: function (p) {
			return p
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2
		}
	};
	jQuery.timers = [];
	jQuery.fx = Tween.prototype.init;
	jQuery.fx.tick = function () {
		var timer,
		timers = jQuery.timers,
		i = 0;
		fxNow = jQuery.now();
		for (; i < timers.length; i++) {
			timer = timers[i];
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1)
			}
		}
		if (!timers.length) {
			jQuery.fx.stop()
		}
		fxNow = undefined
	};
	jQuery.fx.timer = function (timer) {
		if (timer() && jQuery.timers.push(timer) && !timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval)
		}
	};
	jQuery.fx.interval = 13;
	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null
	};
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		_default: 400
	};
	jQuery.fx.step = {};
	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem
			}).length
		}
	}
	var rroot = /^(?:body|html)$/i;
	jQuery.fn.offset = function (options) {
		if (arguments.length) {
			return options === undefined ? this : this.each(function (i) {
				jQuery.offset.setOffset(this, options, i)
			})
		}
		var docElem,
		body,
		win,
		clientTop,
		clientLeft,
		scrollTop,
		scrollLeft,
		box = {
			top: 0,
			left: 0
		},
		elem = this[0],
		doc = elem && elem.ownerDocument;
		if (!doc) {
			return
		}
		if ((body = doc.body) === elem) {
			return jQuery.offset.bodyOffset(elem)
		}
		docElem = doc.documentElement;
		if (!jQuery.contains(docElem, elem)) {
			return box
		}
		if (typeof elem.getBoundingClientRect !== "undefined") {
			box = elem.getBoundingClientRect()
		}
		win = getWindow(doc);
		clientTop = docElem.clientTop || body.clientTop || 0;
		clientLeft = docElem.clientLeft || body.clientLeft || 0;
		scrollTop = win.pageYOffset || docElem.scrollTop;
		scrollLeft = win.pageXOffset || docElem.scrollLeft;
		return {
			top: box.top + scrollTop - clientTop,
			left: box.left + scrollLeft - clientLeft
		}
	};
	jQuery.offset = {
		bodyOffset: function (body) {
			var top = body.offsetTop,
			left = body.offsetLeft;
			if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
				top += parseFloat(jQuery.css(body, "marginTop")) || 0;
				left += parseFloat(jQuery.css(body, "marginLeft")) || 0
			}
			return {
				top: top,
				left: left
			}
		},
		setOffset: function (elem, options, i) {
			var position = jQuery.css(elem, "position");
			if (position === "static") {
				elem.style.position = "relative"
			}
			var curElem = jQuery(elem),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css(elem, "top"),
			curCSSLeft = jQuery.css(elem, "left"),
			calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {},
			curPosition = {},
			curTop,
			curLeft;
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0
			}
			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset)
			}
			if (options.top != null) {
				props.top = (options.top - curOffset.top) + curTop
			}
			if (options.left != null) {
				props.left = (options.left - curOffset.left) + curLeft
			}
			if ("using" in options) {
				options.using.call(elem, props)
			} else {
				curElem.css(props)
			}
		}
	};
	jQuery.fn.extend({
		position: function () {
			if (!this[0]) {
				return
			}
			var elem = this[0],
			offsetParent = this.offsetParent(),
			offset = this.offset(),
			parentOffset = rroot.test(offsetParent[0].nodeName) ? {
				top: 0,
				left: 0
			}
			 : offsetParent.offset();
			offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
			offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
			parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
			parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
			return {
				top: offset.top - parentOffset.top,
				left: offset.left - parentOffset.left
			}
		},
		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent || document.body;
				while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
					offsetParent = offsetParent.offsetParent
				}
				return offsetParent || document.body
			})
		}
	});
	jQuery.each({
		scrollLeft: "pageXOffset",
		scrollTop: "pageYOffset"
	}, function (method, prop) {
		var top = /Y/.test(prop);
		jQuery.fn[method] = function (val) {
			return jQuery.access(this, function (elem, method, val) {
				var win = getWindow(elem);
				if (val === undefined) {
					return win ? (prop in win) ? win[prop] : win.document.documentElement[method] : elem[method]
				}
				if (win) {
					win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop())
				} else {
					elem[method] = val
				}
			}, method, val, arguments.length, null)
		}
	});
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false
	}
	jQuery.each({
		Height: "height",
		Width: "width"
	}, function (name, type) {
		jQuery.each({
			padding: "inner" + name,
			content: type,
			"": "outer" + name
		}, function (defaultExtra, funcName) {
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
				return jQuery.access(this, function (elem, type, value) {
					var doc;
					if (jQuery.isWindow(elem)) {
						return elem.document.documentElement["client" + name]
					}
					if (elem.nodeType === 9) {
						doc = elem.documentElement;
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
					}
					return value === undefined ? jQuery.css(elem, type, value, extra) : jQuery.style(elem, type, value, extra)
				}, type, chainable ? margin : undefined, chainable, null)
			}
		})
	});
	window.jQuery = window.$ = jQuery;
	if (typeof define === "function" && define.amd && define.amd.jQuery) {
		define("jquery", [], function () {
			return jQuery
		})
	}
})(window);
var Class = function (B) {
	var A = function () {
		if (this.initialize && arguments[0] != "noinit") {
			return this.initialize.apply(this, arguments)
		} else {
			return this
		}
	};
	for (var C in this) {
		A[C] = this[C]
	}
	A.prototype = B;
	return A
};
Class.empty = function () {};
Class.prototype = {
	extend: function (C) {
		var B = new this("noinit");
		var A = function (G, H) {
			if (!G.apply || !H.apply) {
				return false
			}
			return function () {
				this.parent = G;
				return H.apply(this, arguments)
			}
		};
		for (var E in C) {
			var D = B[E];
			var F = C[E];
			if (D && D != F) {
				F = A(D, F) || F
			}
			B[E] = F
		}
		return new Class(B)
	},
	implement: function (A) {
		for (var B in A) {
			this.prototype[B] = A[B]
		}
	}
};
Object.extend = function () {
	var A = arguments;
	A = (A[1]) ? [A[0], A[1]] : [this, A[0]];
	for (var B in A[1]) {
		A[0][B] = A[1][B]
	}
	return A[0]
};
Object.Native = function () {
	for (var A = 0; A < arguments.length; A++) {
		arguments[A].extend = Class.prototype.implement
	}
};
new Object.Native(Function, Array, String, Number, Class);
var CallerResponder = new Class({
		debug: false,
		context: new Object(),
		error: function (C, B, D) {
			if (C.status == 500) {
				var A = C.responseText
			}
			if (this.debug) {
				alert("ajax error: " + C.responseText);
				alert(D)
			}
		},
		complete: function (B, A) {
			if (this.debug) {
				alert("ajax complete")
			}
		},
		beforeSend: function (A) {
			if (this.debug) {
				alert("ajax beforeSend:" + A)
			}
		}
	});
var ajaxCallFunc = function (C, A) {
	var B = typeof(this.m) === "undefined" ? this.jsonGateway : "/seeyon/ajax.do?method=ajaxAction&managerName=" + this.m;
	return ajaxCallFuncInner(B, A, C)
};
function ajaxCallFuncInner(url, bsMethod, args) {
	function isArray(o) {
		return typeof(o) === "object" && (o.constructor === Array)
	}
	function toJSON(o) {
		if (typeof(JSON) !== "undefined") {
			if (JSON.stringify(document.createElement("input").value) === '"null"') {
				return JSON.stringify(o, function (k, v) {
					return v === "" ? "" : v
				})
			} else {
				return JSON.stringify(o)
			}
		} else {
			var m = {
				"\b": "\\b",
				"\t": "\\t",
				"\n": "\\n",
				"\f": "\\f",
				"\r": "\\r",
				'"': '\\"',
				"\\": "\\\\"
			},
			s = {
				array: function (x) {
					var a = ["["],
					b,
					f,
					i,
					l = x.length,
					v;
					for (var i = 0; i < l; i += 1) {
						v = x[i];
						if (v === undefined) {
							v = null
						}
						f = s[typeof v];
						if (f) {
							v = f(v);
							if (typeof v == "string") {
								if (b) {
									a[a.length] = ","
								}
								a[a.length] = v;
								b = true
							}
						}
					}
					a[a.length] = "]";
					return a.join("")
				},
				date: function (x) {
					return s.string(x.dateFormat("Y-m-d"))
				},
				"boolean": function (x) {
					return String(x)
				},
				"null": function (x) {
					return "null"
				},
				number: function (x) {
					return isFinite(x) ? String(x) : "null"
				},
				object: function (x) {
					if (!(typeof(x) === "object")) {
						return "null"
					}
					if (x) {
						if (isArray(x)) {
							return s.array(x)
						} else {
							if (x instanceof Date) {
								return s.date(x)
							}
						}
						var a = ["{"],
						b,
						f,
						i,
						v;
						for (var i in x) {
							v = x[i];
							f = s[typeof v];
							if (f) {
								v = f(v);
								if (typeof v == "string") {
									if (b) {
										a[a.length] = ","
									}
									a.push(s.string(i), ":", v);
									b = true
								}
							}
						}
						a[a.length] = "}";
						return a.join("")
					}
					return "null"
				},
				string: function (x) {
					if (/["\\\x00-\x1f]/.test(x)) {
						x = x.replace(/([\x00-\x1f\\"])/g, function (a, b) {
								var c = m[b];
								if (c) {
									return c
								}
								c = b.charCodeAt();
								return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
							})
					}
					return '"' + x + '"'
				},
				"function": function (x) {
					return x.toString().match(/function\s+([^\s\(]+)/)[1]
				}
			};
			var f;
			if (isNaN(o)) {
				f = s[typeof o]
			} else {
				f = (isArray(o)) ? s.array : s.number
			}
			if (f) {
				return f(o)
			}
		}
	}
	function parseJSON(json) {
		if ((navigator.userAgent.appName == "Microsoft Internet Explorer" || navigator.userAgent.indexOf("Trident") != -1) && navigator.userAgent.indexOf("MSIE 8") != -1) {
			return eval("(" + json + ")")
		}
		if ($ != null) {
			return $.parseJSON(json)
		}
	}
	function extend() {
		var target = arguments[0],
		a = 1;
		if (arguments.length == 1) {
			target = this;
			a = 0
		}
		var prop;
		while (prop = arguments[a++]) {
			for (var i in prop) {
				target[i] = prop[i]
			}
		}
		return target
	}
	function param(a) {
		var s = [];
		if (a.constructor == Array) {
			for (var index = 0; index < a.length; index++) {
				var element = a[index];
				s.push(encodeURIComponent(element.name) + "=" + encodeURIComponent(element.value))
			}
		} else {
			for (var j in a) {
				if (a[j] && a[j].constructor == Array) {
					for (var index = 0; index < a[j].length; index++) {
						var element = a[j][index];
						s.push(encodeURIComponent(j) + "=" + encodeURIComponent(element.value))
					}
				} else {
					s.push(encodeURIComponent(j) + "=" + encodeURIComponent(a[j]))
				}
			}
		}
		return s.join("&")
	}
	function ajax(settings) {
		var xhr = new XMLHttpRequest();
		if (settings.async) {
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {
					if (xhr.status == 200) {
						settings.success && settings.success(parseJSON(xhr.responseText))
					} else {
						settings.error && settings.error(xhr)
					}
					settings.complete && settings.complete(xhr, xhr.status)
				}
			}
		}
		xhr.open("POST", settings.url, settings.async);
		xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
		xhr.setRequestHeader("RequestType", "AJAX");
		CsrfGuard.beforeAjaxSend(xhr);
		xhr.send(param(settings.data));
		if (!settings.async) {
			if (xhr.readyState == 4) {
				if (xhr.status == 200) {
					settings.success && settings.success(parseJSON(xhr.responseText))
				} else {
					if (xhr.getResponseHeader("ErrorCode") == "40401") {
						if ($.ctx.CurrentUser != null) {
							var notTheSameOneMsg = $.i18n("loginUserState.notTheSameOne", "Guest", $.ctx.CurrentUser.name);
							alert(notTheSameOneMsg)
						} else {
							if (top.vPortal != null && top.vPortal.CurrentUser != null) {
								var notTheSameOneMsg = $.i18n("loginUserState.notTheSameOne", "Guest", top.vPortal.CurrentUser.name);
								alert(notTheSameOneMsg)
							}
						}
					} else {
						settings.error && settings.error(xhr)
					}
				}
				settings.complete && settings.complete(xhr, xhr.status)
			}
		}
	}
	var setting = null;
	if (args.length >= 1) {
		var tmpArg_2 = args[args.length - 1];
		if (tmpArg_2 != null && typeof(tmpArg_2.success) === "function") {
			setting = tmpArg_2;
			Array.prototype.splice.apply(args, [args.length - 1, 1])
		}
	}
	var newArgs = new Array();
	for (var i = 0; i < args.length; i++) {
		newArgs[i] = args[i];
		if (typeof($) !== "undefined" && typeof($_isInVInValid) !== "undefined" && $._isInVInValid(newArgs[i])) {
			return null
		}
	}
	var data = new Object();
	data.managerMethod = bsMethod;
	data.arguments = toJSON(newArgs);
	var _async = true;
	var result = null;
	if (setting && setting.success) {
		_async = true;
		setting = extend(new CallerResponder(), setting)
	} else {
		_async = false;
		setting = new CallerResponder();
		setting.success = function (jsonObj) {
			if (typeof jsonObj === "string") {
				if (jsonObj == "__LOGOUT") {
					throw "Logout"
				}
				try {
					result = parseJSON(jsonObj);
					if (typeof result === "number") {
						result = jsonObj
					}
				} catch (e) {
					result = jsonObj
				}
			} else {
				result = jsonObj
			}
		}
	}
	ajax({
		url: url + "&rnd=" + parseInt(Math.random() * 100000),
		data: data,
		dataType: "json",
		async: _async,
		success: setting.success,
		error: setting.error,
		complete: setting.complete
	});
	return result
}
var RemoteJsonService = new Class({
		jsonGateway: "/json/",
		async: true,
		ajaxCall: ajaxCallFunc,
		c: ajaxCallFunc
	});
var RJS = RemoteJsonService;
function callBackendMethod(C, A) {
	var B = "/seeyon/ajax.do?method=ajaxAction&managerName=" + C;
	return ajaxCallFuncInner(B, A, Array.prototype.slice.call(arguments, 2))
};
(function ($) {
	var m = {
		"\b": "\\b",
		"\t": "\\t",
		"\n": "\\n",
		"\f": "\\f",
		"\r": "\\r",
		'"': '\\"',
		"\\": "\\\\"
	},
	s = {
		array: function (x) {
			var a = ["["],
			b,
			f,
			i,
			l = x.length,
			v;
			for (var i = 0; i < l; i += 1) {
				v = x[i];
				if (v === undefined) {
					v = null
				}
				f = s[typeof v];
				if (f) {
					v = f(v);
					if (typeof v == "string") {
						if (b) {
							a[a.length] = ","
						}
						a[a.length] = v;
						b = true
					}
				}
			}
			a[a.length] = "]";
			return a.join("")
		},
		date: function (x) {
			return s.string(x.dateFormat("Y-m-d"))
		},
		"boolean": function (x) {
			return String(x)
		},
		"null": function (x) {
			return "null"
		},
		number: function (x) {
			return isFinite(x) ? String(x) : "null"
		},
		object: function (x) {
			if (!(typeof(x) === "object")) {
				return "null"
			}
			if (x) {
				if ($.isArray(x)) {
					return s.array(x)
				} else {
					if (x instanceof Date) {
						return s.date(x)
					}
				}
				var a = ["{"],
				b,
				f,
				i,
				v;
				for (var i in x) {
					v = x[i];
					f = s[typeof v];
					if (f) {
						v = f(v);
						if (typeof v == "string") {
							if (b) {
								a[a.length] = ","
							}
							a.push(s.string(i), ":", v);
							b = true
						}
					}
				}
				a[a.length] = "}";
				return a.join("")
			}
			return "null"
		},
		string: function (x) {
			if (/["\\\x00-\x1f]/.test(x)) {
				x = x.replace(/([\x00-\x1f\\"])/g, function (a, b) {
						var c = m[b];
						if (c) {
							return c
						}
						c = b.charCodeAt();
						return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
					})
			}
			return '"' + x + '"'
		},
		"function": function (x) {
			return x.toString().match(/function\s+([^\s\(]+)/)[1]
		}
	};
	jQuery.toJSON = function (v) {
		var f;
		if (isNaN(v)) {
			f = s[typeof v]
		} else {
			f = ($.isArray(v)) ? s.array : s.number
		}
		if (f) {
			return f(v)
		}
	};
	jQuery.parseJSON = function (v, safe) {
		if (safe === undefined) {
			safe = jQuery.parseJSON.safe
		}
		if (safe && !/^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/.test(v)) {
			return undefined
		}
		return eval("(" + v + ")")
	};
	jQuery.parseJSON.safe = false
})(jQuery);
(function (A) {
	A._autofill = new Object();
	A.autofillform = function (B) {
		var C = {};
		B = A.extend(C, B);
		var D = B.fillmaps ? B.fillmaps : new Object();
		A._autofill.filllists = D;
		for (var E in D) {
			A("#" + E).fillform(D[E])
		}
	};
	A.fn.clearform = function (B) {
		var C = {
			clearHidden: false
		};
		this.resetValidate();
		B = A.extend(C, B);
		this.find(":input").each(function () {
			switch (this.type) {
			case "passsword":
			case "select-multiple":
			case "select-one":
			case "text":
			case "textarea":
				A(this).val("");
			case "hidden":
				if (B.clearHidden) {
					A(this).val("")
				}
				break;
			case "checkbox":
			case "radio":
				this.checked = false
			}
		})
	};
	A.fn.fillform = function (B, C) {
		if (this[0] == null) {
			return
		}
		this.each(function (E) {
			var F = A(this);
			F.resetValidate();
			for (var G in B) {
				A("#" + G, F).each(function (H) {
					A(this).fill(B[G], G, F)
				})
			}
			F = null
		});
		try {
			if (typeof(C) != "undefined" && C === false) {
				return
			}
			this.find("input[type=text]:first").focus()
		} catch (D) {}
	};
	A.fn.fill = function (H, G, P) {
		var C = this[0],
		Q = A(C),
		R = C.tagName.toLowerCase();
		if (H && typeof H == "string") {
			H = H.replace(/<\/\/script>/gi, "<\/script>")
		}
		var I = C.type,
		S = C.value;
		switch (R) {
		case "input":
			switch (I) {
			case "text":
				Q.val(H);
				break;
			case "hidden":
				var E = Q.attrObj("_comp"),
				O;
				if (E) {
					O = E.attr("compType");
					if (O === "selectPeople") {
						var J = "",
						L = "";
						if (H && H.startsWith("{")) {
							H = A.parseJSON(H);
							if (H.value === undefined) {
								H.value = "";
								H.text = ""
							}
							E.comp(H);
							J = H.value;
							L = H.text
						}
						E.val(L);
						Q.val(J);
						break
					}
				}
				Q.val(H);
				break;
			case "checkbox":
				if (H == S) {
					C.checked = true
				} else {
					C.checked = false
				}
				break;
			case "radio":
				if (P) {
					A("input[type=radio]", P).each(function () {
						if ((this.id == G || this.name == G) && H == this.value && !this.checked) {
							this.checked = true
						}
					})
				} else {
					if (H == C.value && !C.checked) {
						C.checked = true
					}
				}
			}
			break;
		case "textarea":
			Q.val(H);
			break;
		case "select":
			switch (I) {
			case "select-one":
				Q.val(H);
				break;
			case "select-multiple":
				var D = C.options;
				if (H.split) {
					var K = H.split(",");
					for (var N = 0; N < D.length; N++) {
						var F = D[N];
						var B = A.browser.msie && !(F.attributes.value.specified) ? F.text : F.value;
						for (var M = 0; M < K.length; M++) {
							if (B == K[M]) {
								F.selected = true
							}
						}
					}
				}
			}
			break;
		default:
			if (!((!H || H == "") && A(this)[0].innerHTML.indexOf("&nbsp;") != -1)) {
				if (H && Q.parent(".text_overflow").length == 1) {
					Q.attr("title", H)
				}
				if (H && typeof H == "string") {
					H = H.replace(/\n/g, "<br/>")
				}
				C.innerHTML = H
			}
		}
		if (this.attr("validate")) {
			this.validate()
		}
	};
	A.fn.fillgrid = function (B) {
		this.each(function (D) {
			var C = this.tagName.toLowerCase(),
			E = A(this);
			switch (C) {
			case "table":
				elem.grid.addData(B);
				break
			}
		})
	}
})(jQuery);
(function (A) {
	A.fn.jsonSubmit = function (L) {
		var J = "_js_frm" + new Date().getTime();
		var F = {
			isMask: true,
			validate: true,
			ajax: false,
			async: false
		};
		L = A.extend(F, L);
		if (L.isMask) {
			showMask && showMask()
		}
		var K = this.formobj(L);
		if (L.paramObj) {
			if (A.isArray(K)) {
				K = {}
			}
			for (var B in L.paramObj) {
				K[B] = L.paramObj[B]
			}
		}
		var G = L.action || this.attr("action");
		if (G == null || A.trim(G) == "") {
			alert("you don't set action attribute!");
			hideMask && hideMask();
			return
		}
		if (L.validate && A._isInValid(K)) {
			hideMask && hideMask();
			if (typeof L.collbackError == "function") {
				L.collbackError()
			}
			return
		}
		if (L.beforeSubmit && L.beforeSubmit(K, this, L) === false) {
			hideMask && hideMask();
			return
		}
		var E = A.toJSON(K);
		if (L.ajax == true) {
			A.ajax({
				async: L.async,
				type: "post",
				url: G,
				data: {
					_json_params: E
				},
				beforeSend: CsrfGuard.beforeAjaxSend,
				error: function (N) {
					if (N.getResponseHeader("ErrorCode") == 40401) {
						if (A.ctx.CurrentUser != null) {
							var M = A.i18n("loginUserState.notTheSameOne", "Guest", A.ctx.CurrentUser.name);
							alert(M)
						} else {
							if (top.vPortal != null && top.vPortal.CurrentUser != null) {
								var M = A.i18n("loginUserState.notTheSameOne", "Guest", top.vPortal.CurrentUser.name);
								alert(M)
							}
						}
					} else {
						alert("error\uff0cform submit fail ! url:" + G);
						if (typeof L.collbackError == "function") {
							L.collbackError()
						}
					}
				},
				success: function (M) {
					if (typeof L.callback == "function") {
						L.callback(M)
					}
				}
			})
		} else {
			var D = window;
			if (L.targetWindow) {
				D = L.targetWindow
			}
			var H = A('<form method="post" action="' + G + '"><input type="hidden" name="CSRFTOKEN" value="' + CsrfGuard.getToken() + '"/><input type="hidden" id="_json_params" name="_json_params" value=""/></form>', D.document);
			A(D.document.body).append(H);
			D = null;
			if (typeof L.callback == "function") {
				var C = A('<iframe id="' + J + '" name="' + J + '" style="display:none;"></iframe>', H[0].ownerDocument);
				A("body", H[0].ownerDocument).append(C);
				C.load(function () {
					var M = A(this).contents().find("body").html();
					if (M) {
						M = M.replace(/<\s*\/?\s*(embed|pre)[^<>]*>/g, "")
					} else {
						M = ""
					}
					L.callback(M);
					try {
						A(this).remove()
					} catch (N) {}
				});
				C = null;
				H.attr("target", J)
			} else {
				if (L.target) {
					H.attr("target", L.target)
				}
			}
			H.find("#_json_params").val(E);
			if (L.debug && _isDevelop) {
				alert("JSON data format:\n" + E)
			}
			A.confirmClose(false);
			H.submit();
			H.remove();
			H = null
		}
		try {
			if (L.isMask) {
				hideMask && hideMask()
			}
		} catch (I) {}
	};
	A.fn.formobj = function (M) {
		if (this[0] == null) {
			return {}
		}
		var F = {
			needSubmitFilter: null,
			gridFilter: null,
			validate: true,
			errorIcon: true,
			errorAlert: false,
			errorBg: false,
			includeDisabled: true
		};
		M = A.extend(F, M);
		var N = M.domains;
		if (N && N.length > 0) {
			var G = {};
			if (A("#attachmentArea").length > 0) {
				var K = A("<div></div>");
				K.attr("id", "attachmentInputs");
				K.attr("style", "display:none;");
				K.attr("isGrid", "true");
				this.append(K);
				saveAttachment();
				N.push("attachmentInputs")
			}
			for (var J = 0; J < N.length; J++) {
				var B = N[J],
				L = B == this.attr("id") ? this : A("#" + B, this),
				E;
				var I = A("." + B),
				D = I.length;
				if (D > 0 && M.matchClass) {
					E = [];
					var C = [];
					for (var H = 0; H < N.length; H++) {
						if (H != J) {
							C.push(N[H])
						}
					}
					I.each(function (Q) {
						L = A(this);
						var R = A.jsonDomain(L, M);
						if (A._isInValid(R) && !A._isInValid(E)) {
							A._invalidObj(E)
						}
						E.push(R);
						for (var O = 0; O < C.length; O++) {
							var P = A.jsonDomain(A("#" + C[O], L), M);
							if (A._isInValid(P) && !A._isInValid(E)) {
								A._invalidObj(E)
							}
							R[C[O]] = P
						}
					});
					if (M.isGrid) {
						G = E
					} else {
						if (E.length == 1) {
							G = E[0]
						}
					}
					break
				} else {
					E = A.jsonDomain(L, M);
					G[B] = E;
					if (A._isInValid(E) && !A._isInValid(G)) {
						A._invalidObj(G)
					}
				}
			}
			return G
		} else {
			return A.jsonDomain(this, M)
		}
	};
	A.jsonDomain = function (J, P) {
		P = P || {};
		var N = [],
		H = null,
		L = P.gridFilter,
		D = J.attr("isGrid") ? J.attr("isGrid") : false,
		E = true,
		F,
		K = [],
		C = P.domains,
		M = P.includeDisabled;
		var I = P.needSubmitFilter;
		if (C) {
			for (var G = 0; G < C.length; G++) {
				var O = C[G];
				if (J[0] && O != J[0].id && A("#" + O, J).length > 0) {
					K.push(O)
				}
			}
		}
		A("table,input,textarea,select", J).add(J).filter(function (X) {
			if (!this.id && !this.name) {
				return false
			}
			if (I && !I(this)) {
				return false
			}
			for (var T = 0; T < K.length; T++) {
				var Y = K[T];
				if (A(this).parents("#" + Y).length > 0) {
					return false
				}
			}
			var Q = this,
			Z = Q.tagName.toLowerCase(),
			R = Q.id ? Q.id : Q.name;
			if (Z && R && (M || !Q.disabled) && !Q.ignore) {
				switch (Z) {
				case "table":
					if (Q.grid && Q.p.datas) {
						var S = Q.p.datas.rows;
						A(S).each(function (a) {
							if (L && !L(S[a], A("tbody tr", A(Q)).get(a))) {
								return
							}
							N.push(S[a])
						});
						D = true
					}
					break;
				case "input":
					var W = Q.type;
					if (W == "button" || W == "reset" || W == "submit" || W == "image" || R == "_json_params") {
						break
					}
				case "textarea":
					if (Z == "textarea") {
						var V = A(Q).attr("comp");
						if (V && A.parseJSON("{" + V + "}").type == "editor") {
							A(Q).val(A(Q).getEditorContent());
							break
						}
						if (V && A.parseJSON("{" + V + "}").type == "aceEditor") {
							var U = ace.editor(A(Q).attr("id") + "Ace");
							A(Q).val(U.getValue());
							break
						}
					}
				case "select":
					if (H && R in H) {
						if (Q.type != "radio") {
							H = {};
							N.push(H)
						}
					}
					var Y = A.ctpFieldValue(Q, true, M);
					if (!H) {
						H = new Object();
						N.push(H)
					}
					if (!H[R]) {
						H[R] = Y
					}
				}
			}
			return false
		});
		if (P.validate) {
			E = A(J).validate({
					errorIcon: P.errorIcon,
					errorAlert: P.errorAlert,
					errorBg: P.errorBg
				})
		}
		if (N.length == 1 && !D) {
			F = N[0]
		} else {
			if (L) {
				var B = [];
				for (var G = 0; G < N.length; G++) {
					if (!L(N[G])) {
						continue
					}
					B.push(N[G])
				}
				N = B
			}
			F = N
		}
		if (!E) {
			A._invalidObj(F)
		}
		return F
	};
	A.ctpFieldValue = function (C, H, L) {
		var D = C.id ? C.id : C.dataIndex ? C.dataIndex : C.name,
		N = C.type,
		O = C.tagName.toLowerCase();
		if (typeof H == "undefined") {
			H = true
		}
		if (H && (!D || (!L && C.disabled) || N == "reset" || N == "button" || (N == "checkbox" || N == "radio") && !C.checked || (N == "submit" || N == "image") && C.form && C.form.clk != C || O == "select" && C.selectedIndex == -1)) {
			if (parseInt(A(C).attr("returnunchecked")) != 1) {
				return null
			}
			if (parseInt(A(C).attr("returnunchecked")) == 1 && (N == "radio") && !C.checked) {
				return ""
			}
		}
		if (O == "select") {
			var I = C.selectedIndex;
			if (I < 0) {
				return null
			}
			var K = [],
			B = C.options;
			var F = (N == "select-one");
			var J = (F ? I + 1 : B.length);
			for (var E = (F ? I : 0); E < J; E++) {
				var G = B[E];
				if (G.selected) {
					var M = G.value;
					if (F) {
						return M
					}
					K.push(M)
				}
			}
			return K
		}
		return C.value
	}
})(jQuery);
(function (C) {
	C.hotkeys = {
		version: "0.8",
		specialKeys: {
			8: "backspace",
			9: "tab",
			13: "return",
			16: "shift",
			17: "ctrl",
			18: "alt",
			19: "pause",
			20: "capslock",
			27: "esc",
			32: "space",
			33: "pageup",
			34: "pagedown",
			35: "end",
			36: "home",
			37: "left",
			38: "up",
			39: "right",
			40: "down",
			45: "insert",
			46: "del",
			96: "0",
			97: "1",
			98: "2",
			99: "3",
			100: "4",
			101: "5",
			102: "6",
			103: "7",
			104: "8",
			105: "9",
			106: "*",
			107: "+",
			109: "-",
			110: ".",
			111: "/",
			112: "f1",
			113: "f2",
			114: "f3",
			115: "f4",
			116: "f5",
			117: "f6",
			118: "f7",
			119: "f8",
			120: "f9",
			121: "f10",
			122: "f11",
			123: "f12",
			144: "numlock",
			145: "scroll",
			191: "/",
			224: "meta"
		},
		shiftNums: {
			"`": "~",
			"1": "!",
			"2": "@",
			"3": "#",
			"4": "$",
			"5": "%",
			"6": "^",
			"7": "&",
			"8": "*",
			"9": "(",
			"0": ")",
			"-": "_",
			"=": "+",
			";": ": ",
			"'": '"',
			",": "<",
			".": ">",
			"/": "?",
			"\\": "|"
		},
		returnKeys: [],
		cancelKeys: []
	};
	function B(E) {
		if (typeof E.data !== "string") {
			return
		}
		var D = E.handler,
		F = E.data.toLowerCase().split(" ");
		E.handler = function (G) {
			if (this !== G.target && (/textarea|select/i.test(G.target.nodeName) || G.target.type === "text")) {
				return
			}
			var N = G.type !== "keypress" && C.hotkeys.specialKeys[G.which],
			L,
			O,
			I = "",
			J = {};
			try {
				L = String.fromCharCode(G.which).toLowerCase()
			} catch (M) {
				L = G.which
			}
			if (G.altKey && N !== "alt") {
				I += "alt+"
			}
			if (G.ctrlKey && N !== "ctrl") {
				I += "ctrl+"
			}
			if (G.metaKey && !G.ctrlKey && N !== "meta") {
				I += "meta+"
			}
			if (G.shiftKey && N !== "shift") {
				I += "shift+"
			}
			if (N) {
				J[I + N] = true
			} else {
				J[I + L] = true;
				J[I + C.hotkeys.shiftNums[L]] = true;
				if (I === "shift+") {
					J[C.hotkeys.shiftNums[L]] = true
				}
			}
			for (var K = 0, H = F.length; K < H; K++) {
				if (J[F[K]]) {
					return D.apply(this, arguments)
				}
			}
		}
	}
	$.each(["keydown", "keyup", "keypress"], function () {
		C.event.special[this] = {
			add: B
		}
	});
	$(document).bind("keydown", "esc", function (D) {
		C._fireKeydown_esc(D);
		return false
	}).bind("keydown", "return", function (D) {
		C._fireKeydown_return(D);
		return true
	});
	function A(D) {
		if (!D || D.length == 0 || D.hasClass("common_button_disable") || D.css("display") == "none" || D.css("visibility") == "hidden" || D.parents(".button_container").css("display") == "none" || D.parents(".button_container").css("visibility") == "hidden") {
			return false
		}
		return true
	}
	$._fireKeydown_return = function (D) {
		var E = false;
		$($.hotkeys.returnKeys).each(function (G, H) {
			var F = $("#" + H);
			if (A(F)) {
				F.click();
				E = true;
				return false
			}
		});
		if (E) {
			return
		}
		if ($("#ok_msg_btn_first").size() > 0) {
			if (A($("#ok_msg_btn_first"))) {
				$("#ok_msg_btn_first").click()
			}
		} else {
			if ($("#btnsave").size() > 0) {
				if (A($("#btnsave"))) {
					$("#btnsave").click()
				}
			} else {
				if ($("#btnok").size() > 0) {
					if (A($("#btnok"))) {
						$("#btnok").click()
					}
				} else {
					if ($("#btnsubmit").size() > 0) {
						if (A($("#btnsubmit"))) {
							$("#btnsubmit").click()
						}
					} else {
						if ($("#btnsearch").size() > 0) {
							if (A($("#btnsearch"))) {
								$("#btnsearch").click()
							}
						} else {
							if ($("#btnreset").size() > 0) {
								if (A($("#btnreset"))) {
									$("#btnreset").click()
								}
							} else {
								if ($("#btnmodify").size() > 0) {
									if (A($("#btnmodify"))) {
										$("#btnmodify").click()
									}
								} else {
									if ($("#ok_msg_btn").size() > 0) {
										if (A($("#ok_msg_btn"))) {
											$("#ok_msg_btn").click()
										}
									} else {
										if ($("#yes_msg_btn").size() > 0) {
											if (A($("#yes_msg_btn"))) {
												$("#yes_msg_btn").click()
											}
										} else {
											if ($("#retry_msg_btn").size() > 0) {
												if (A($("#retry_msg_btn"))) {
													$("#retry_msg_btn").click()
												}
											} else {
												if (parent && parent != window) {
													if (parent.jQuery && parent.jQuery._fireKeydown_return) {
														parent.jQuery._fireKeydown_return(D)
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	$._fireKeydown_esc = function (D) {
		var E = false;
		$($.hotkeys.cancelKeys).each(function (G, H) {
			var F = $("#" + H);
			if (A(F)) {
				F.click();
				E = true;
				return false
			}
		});
		if (E) {
			return
		}
		if ($("#btncancel").size() > 0) {
			$("#btncancel").click()
		} else {
			if ($("#btnclose").size() > 0) {
				$("#btnclose").click()
			} else {
				if (parent && parent != window) {
					if (parent.jQuery && parent.jQuery._fireKeydown_esc) {
						parent.jQuery._fireKeydown_esc(D)
					}
				}
			}
		}
	}
})(jQuery);
$(function () {
	$("input,select").bind("keydown", "esc", function (A) {
		if ($._fireKeydown_esc) {
			$._fireKeydown_esc(A)
		}
		return false
	}).bind("keydown", "return", function (A) {
		if ($._fireKeydown_return) {
			$._fireKeydown_return(A)
		}
		return false
	})
});
(function ($) {
	var _managerNames = [],
	_defaultPageSize = 20;
	$.fn.ajaxgridbar = function (options) {
		var settings = {
			size: _defaultPageSize,
			async: true,
			page: 1,
			page_btn: "_page_btn",
			page_id: "_page_id",
			afpPageId: "_afpPage",
			afpPagesId: "_afpPages",
			afpTotalId: "_afpTotal",
			afpSizeId: "_afpSize",
			afpFirstId: "_afpFirst",
			afpPreviousId: "_afpPrevious",
			afpNextId: "_afpNext",
			afpLastId: "_afpLast",
			activeClass: "alink",
			deactiveClass: "blink",
			btnCallback: null
		};
		options = $.extend(settings, options);
		this.attrObj("config", options);
		var bn = options.managerName;
		if (!_managerNames.contains(bn)) {
			$("head").append("<script src='" + _ctxPath + "/ajax.do?managerName=" + bn + "' type='text/javascript'><\/script>");
			_managerNames.push(bn)
		}
	};
	$.fn.ajaxgridbarLoad = function (param, page, size) {
		var tbl = this,
		config = this.attrObj("config"),
		bn = config.managerName,
		bm = config.managerMethod,
		callbk = config.callback;
		if (!size) {
			size = config.size
		}
		if (!page) {
			page = config.page
		}
		var callerResponder = new CallerResponder();
		callerResponder.success = function (fpi) {
			$("#" + config.page_id).val(fpi.page);
			$("#" + config.page_id).unbind();
			$("#" + config.page_id).keydown(function () {
				var code = event.keyCode;
				if (code == "13") {
					goPage()
				}
			});
			$("#" + config.page_btn).unbind();
			$("#" + config.page_btn).click(function () {
				goPage()
			});
			function goPage() {
				var varPage = $("#" + config.page_id).val(),
				varPages = fpi.pages;
				if (parseInt(varPage) < 1) {
					$("#" + config.page_id).val(1)
				}
				if (parseInt(varPage) > parseInt(varPages)) {
					$("#" + config.page_id).val(varPages)
				}
				tbl.ajaxgridbarLoad(param, $("#" + config.page_id).val(), size)
			}
			$("#" + config.afpPageId).each(function () {
				var t = $(this),
				tn = this.tagName.toLowerCase();
				if ("input" == tn) {
					t.val(fpi.page)
				} else {
					t.text(fpi.page)
				}
			});
			$("#" + config.afpPagesId).each(function () {
				var t = $(this),
				tn = this.tagName.toLowerCase();
				if ("input" == tn) {
					t.val(fpi.pages)
				} else {
					t.text(fpi.pages)
				}
			});
			$("#" + config.afpTotalId).each(function () {
				var t = $(this),
				tn = this.tagName.toLowerCase();
				if ("input" == tn) {
					t.val(fpi.total)
				} else {
					t.text(fpi.total)
				}
			});
			$("#" + config.afpSizeId).each(function () {
				var t = $(this),
				tn = this.tagName.toLowerCase();
				if ("input" == tn) {
					t.val(fpi.size);
					t.blur(function () {
						var _s = t.val();
						try {
							_s = parseInt(_s, 10);
							if (_s <= 0) {
								_s = _defaultPageSize
							}
						} catch (e) {
							_s = _defaultPageSize
						}
						t.val(_s);
						size = _s
					})
				} else {
					if ("select" == tn) {
						t.val(fpi.size);
						t.change(function () {
							size = t.val();
							goPage()
						})
					} else {
						t.text(fpi.size)
					}
				}
			});
			var l1 = $("#" + config.afpFirstId),
			l2 = $("#" + config.afpPreviousId),
			l3 = $("#" + config.afpNextId),
			l4 = $("#" + config.afpLastId);
			l1.unbind();
			l2.unbind();
			l3.unbind();
			l4.unbind();
			if (fpi.page > 1) {
				l1.click(function () {
					tbl.ajaxgridbarLoad(param, 1, size)
				});
				l1.removeClass(config.deactiveClass);
				l1.addClass(config.activeClass)
			} else {
				l1.removeClass(config.activeClass);
				l1.addClass(config.deactiveClass)
			}
			if (fpi.page > 1) {
				$("#" + config.afpPreviousId).click(function () {
					tbl.ajaxgridbarLoad(param, (fpi.page - 1), size)
				});
				l2.removeClass(config.deactiveClass);
				l2.addClass(config.activeClass)
			} else {
				l2.removeClass(config.activeClass);
				l2.addClass(config.deactiveClass)
			}
			if (fpi.page < fpi.pages) {
				$("#" + config.afpNextId).click(function () {
					tbl.ajaxgridbarLoad(param, fpi.page + 1, size)
				});
				l3.removeClass(config.deactiveClass);
				l3.addClass(config.activeClass)
			} else {
				l3.removeClass(config.activeClass);
				l3.addClass(config.deactiveClass)
			}
			if (fpi.page < fpi.pages) {
				$("#" + config.afpLastId).click(function () {
					tbl.ajaxgridbarLoad(param, fpi.pages, size)
				});
				l4.removeClass(config.deactiveClass);
				l4.addClass(config.activeClass)
			} else {
				l4.removeClass(config.activeClass);
				l4.addClass(config.deactiveClass)
			}
			if (callbk) {
				callbk(fpi)
			}
		};
		if (config.complete) {
			callerResponder.complete = config.complete
		}
		if (config.errorHandler) {
			callerResponder.errorHandler = config.errorHandler
		}
		var fi = {
			page: page,
			size: size
		};
		if (param) {
			eval("var _bs = new " + bn + "();_bs.async=" + config.async + ";_bs." + bm + "(fi,param,callerResponder);")
		} else {
			eval("var _bs = new " + bn + "();_bs.async=" + config.async + ";_bs." + bm + "(fi,callerResponder);")
		}
	}
})(jQuery);
(function (B) {
	var A = 1;
	B.fn.codeoption = function (D) {
		var E = {};
		D = B.extend(E, D);
		var C = new Array;
		B(".codecfg", this).add(this).each(function (H) {
			var F = this.tagName;
			if (!F) {
				return
			}
			F = F.toLowerCase();
			var I = D.codecfg ? D.codecfg : B(this).attr("codecfg");
			if (I) {
				var G = B.codecfgobj(this, I);
				if (D.tags && !D.tags.contains(F) && !G.render) {
					return
				}
				C.push(G)
			}
		});
		B.genoption(C, D)
	};
	B.codeoption = function (C) {
		var D = {
			tags: ["select"]
		};
		C = B.extend(D, C);
		B(document).codeoption(C)
	};
	B.fn.codetext = function (D) {
		var E = {};
		D = B.extend(E, D);
		var C = new Array;
		B(".codecfg", this).add(this).each(function (H) {
			if (!B(this).attr("codecfg")) {
				return
			}
			var F = this.tagName.toLowerCase();
			if (F != "select") {
				var I = D.codecfg ? D.codecfg : B(this).attr("codecfg");
				if (I) {
					var G = B.codecfgobj(this, I);
					if (G.render) {
						return
					}
					var J = F == "input" ? B(this).val() : B(this).text();
					if (J) {
						C.push(G)
					}
				}
			}
		});
		B.genoption(C, D)
	};
	B.codetext = function (C) {
		B(document).codetext(C)
	};
	B.codecfgobj = function (G, F) {
		if (F) {
			var C = F.indexOf("{");
			var D = B.parseJSON(C == 0 ? F : ("{" + F + "}"));
			var E = G.id ? G.id : G.name;
			if (!E || E.indexOf("coi_") == 0) {
				E = "coi_" + A;
				B(G).attr("id", E);
				A++
			}
			D.eleid = E;
			return D
		} else {
			return {}
		}
	};
	B.genoption = function (D, F) {
		if (D.length > 0) {
			var E = new ctpCodeManager();
			var C = B.toJSON(D);
			B.fillOption(E.selectCode(C))
		}
	};
	B.fillOption = function (E) {
		if (E) {
			for (var C = 0; C < E.length; C++) {
				var G = B.findTag(E[C]);
				var D = E[C].options;
				var F = E[C]["defaultValue"];
				if (G) {
					G.each(function () {
						var U = this.tagName.toLowerCase(),
						T = B(this);
						var R = E[C].render;
						if (R == "radioh") {
							H(T, D)
						} else {
							if (R == "radiov") {
								H(T, D, true)
							} else {
								if (U == "select") {
									B("option[tmp]", T).remove();
									var Q = E[C].prependBlank;
									if (Q) {
										var S = E[C].blankText;
										S = typeof(S) === "undefined" ? "" : S;
										var O = new Option(S, Q);
										O.tmp = "tmp";
										this.options[this.options.length] = O;
										if (F && F == Q) {
											O.selected = true
										}
									}
									for (var I in D) {
										var O = new Option(D[I], I);
										O.tmp = "tmp";
										this.options[this.options.length] = O;
										if (F && F == I) {
											O.selected = true
										}
									}
									if (E[C].codeId == "collaboration_deadline") {
										try {
											var J = this.options;
											if (J[14] && J[15]) {
												var N = J[14];
												J.insertBefore(J[14], J[15]);
												J.insertBefore(J[15], N)
											}
											if (J[17] && J[18]) {
												var M = J[17];
												J.insertBefore(J[17], J[18]);
												J.insertBefore(J[18], M)
											}
										} catch (P) {}
									}
									if (R == "new") {
										var L = B.dropdown({
												id: this.id
											});
										if (F) {
											L.setValue(F)
										}
									}
								} else {
									if (U == "input") {
										B(this).val(D[B(this).val()])
									} else {
										var K = D[B(this).text()];
										B(this).text(K);
										if (B(this).attr("title")) {
											B(this).attr("title", K)
										}
									}
								}
							}
						}
						function H(Y, Z, b) {
							var c = Y.attr("id"),
							V = Y;
							Y.attr("id", c + "_hid");
							for (var X in Z) {
								var W = B('<label class="margin_r_10 hand"></label>');
								W.text(Z[X]);
								if (b) {
									W.addClass("display_block")
								}
								var a = B('<input class="radio_com" type="radio" name="' + c + '">');
								a.attr("id", c);
								a.val(X);
								W.prepend(a);
								V.after(W);
								V = W;
								if (F && F == X) {
									a.attr("checked", true)
								}
							}
							Y.remove()
						}
					})
				}
			}
		}
	};
	B.findTag = function (D) {
		var C;
		if (D.eleid) {
			C = B("#" + D.eleid).length == 0 ? B("[name='" + D.eleid + "']") : B("#" + D.eleid)
		}
		if (!C) {
			B(".codecfg").each(function (F) {
				var E = this.codecfg;
				if (E) {
					if (E.indexOf("codeType") != -1 && E.indexOf(D.codeType) != -1) {
						C = B(this)
					}
					if (E.indexOf("codeType") == -1 && E.indexOf(D.tableName) != -1) {
						C = B(this)
					}
				}
			})
		}
		return C
	}
})(jQuery);
$.ctx = {};
var isFormSubmit = true;
$.extend(Function.prototype, {
	defer: function (A) {
		var D,
		C = this,
		B = function () {
			var F = this,
			E = arguments;
			window.clearTimeout(D);
			D = window.setTimeout(function () {
					C.apply(F, E)
				}, A)
		};
		B();
		return 0
	}
});
$.extendParam = function (C, A) {
	for (var B in A) {
		if (!(A[B]instanceof Array)) {
			C[B] = A[B]
		}
	}
	return C
};
var isPDFReaderInited = false;
function isPDFReaderEnabled() {
	try {
		if (isPDFReaderInited == false) {
			isPDFReaderInited = true;
			new ActiveXObject("iWebPDF.PDFReader")
		}
	} catch (A) {
		return false
	}
	return true
}
$.ctx.isOfficeEnabled = function (F) {
	var A = F,
	C = true;
	if (!$.browser.msie) {
		return true
	}
	var E = "ctx.isOfficeEnabled." + F;
	var G = window.sessionStorage;
	if (typeof G !== "undefined" && window.sessionStorage !== null) {
		var B = G.getItem(E);
		if (B != undefined) {
			return B
		}
	}
	try {
		if (!$.ctx._mainbodyOcxObj && (A == ".doc" || A == ".xls" || A == ".wps" || A == ".et" || (A > 40 && A < 45))) {
			if (v3x.isMSIE && (navigator.cpuClass.indexOf("x86") != -1 ? false : true)) {
				$.ctx._mainbodyOcxObj = new ActiveXObject("Kinggrid.iWebOffice_x64")
			} else {
				$.ctx._mainbodyOcxObj = new ActiveXObject("Kinggrid.iWebOffice")
			}
		}
		if (A == ".doc" || A == 41) {
			C = $.ctx._mainbodyOcxObj.WebApplication(".doc")
		} else {
			if (A == ".xls" || A == 42) {
				C = $.ctx._mainbodyOcxObj.WebApplication(".xls")
			} else {
				if (A == ".wps" || A == 43) {
					C = $.ctx._mainbodyOcxObj.WebApplication(".wps")
				} else {
					if (A == ".et" || A == 44) {
						C = $.ctx._mainbodyOcxObj.WebApplication(".et")
					} else {
						if (A == ".pdf" || A == 45) {
							C = true
						}
					}
				}
			}
		}
	} catch (D) {
		C = false
	}
	if (typeof G !== "undefined" && window.sessionStorage !== null) {
		G.setItem(E, C)
	}
	return C
};
$.ctx._hasPrivJudge = function (C, B) {
	var A = false,
	E;
	if (C && (B ? $.ctx.plugins : $.ctx.resources)) {
		if (C.indexOf("&") != -1) {
			A = true;
			E = C.split("&");
			for (var D = 0; D < E.length; D++) {
				if (B ? !$.ctx.plugins.contains(E[D].trim()) : !$.ctx.resources.contains(E[D].trim())) {
					A = false;
					break
				}
			}
		} else {
			if (C.indexOf("|") != -1) {
				E = C.split("|");
				for (var D = 0; D < E.length; D++) {
					if (B ? $.ctx.plugins.contains(E[D].trim()) : $.ctx.resources.contains(E[D].trim())) {
						A = true;
						break
					}
				}
			} else {
				A = B ? $.ctx.plugins.contains(C.trim()) : $.ctx.resources.contains(C.trim())
			}
		}
	}
	return A
};
$.ctx.hasPlugin = function (A) {
	return $.ctx._hasPrivJudge(A, true)
};
$.ctx.hasResource = function (A) {
	return $.ctx._hasPrivJudge(A, false)
};
$.privCheck = function (A, C, D, B) {
	if (!D) {
		D = function () {}
	}
	if (!B) {
		B = function () {}
	}
	if (_isDevelop) {
		D()
	} else {
		if (C && $.ctx.hasPlugin(C)) {
			if (A && $.ctx.hasResource(A)) {
				D()
			} else {
				if (!A) {
					D()
				} else {
					B()
				}
			}
		} else {
			if (!C && A) {
				if ($.ctx.hasResource(A)) {
					D()
				} else {
					B()
				}
			} else {
				if (!C && !A) {
					D()
				} else {
					B()
				}
			}
		}
	}
};
var _safriDoubleKeyIgnoreKeys = [32, 192, 186, 187, 188, 189, 190, 191, 219, 220, 221, 222, 13];
$.handleModalDialogInputKeyEvent = function () {
	var C = navigator.vendor,
	A = navigator.platform;
	if (C && C.indexOf("Apple") != -1 && A && A.indexOf("Win") != -1) {
		var B = false;
		$(":input").keyup(function (E) {
			D(this, E)
		}).keydown(function (E) {
			if (E.keyCode == 229) {
				B = true
			} else {
				B = false
			}
		});
		function D(J, E) {
			if (B) {
				return
			}
			var H = E.keyCode;
			if (((H < 48 || H > 111) && !_safriDoubleKeyIgnoreKeys.contains(H)) || E.ctrlKey || E.altKey) {
				return
			}
			if (H == 13 && J.type !== "textarea") {
				return
			}
			var G = J.selectionStart,
			I = J.value,
			F;
			if (G > 0) {
				F = I.substring(0, G - 1);
				if (G < I.length) {
					F += I.substring(G)
				}
			}
			J.value = F;
			J.setSelectionRange(G - 1, G - 1)
		}
	}
};
$().ready(function () {
	if ($.ctx && $.ctx.disableAutoInit) {
		return
	}
	$(".comp").each(function (A) {
		$(this).compThis()
	});
	if ($.codeoption) {
		$.codeoption()
	}
	if ($.autofillform) {
		$.autofillform({
			fillmaps: $.ctx.fillmaps
		})
	}
	if ($.codetext) {
		$.codetext()
	}
	$(".resCode").each(function (B) {
		var A = $(this),
		C = A.attr("resCode"),
		D = A.attr("pluginId");
		$.privCheck(C, D, function () {
			A.show()
		}, function () {
			A.hide()
		})
	});
	CallerResponder.prototype = {
		error: function (E, D, F) {
			try {
				var B = $.parseJSON(E.responseText);
				if (!B.details) {
					$.alert({
						msg: B.message,
						close_fn: function () {
							try {
								if (getCtpTop() && getCtpTop().endProc) {
									getCtpTop().endProc()
								}
							} catch (G) {}
						},
						ok_fn: function () {
							try {
								if (getCtpTop() && getCtpTop().endProc) {
									getCtpTop().endProc()
								}
							} catch (G) {}
						}
					})
				} else {
					$("body").append('<div id="errorDiv" style="display: none" width="600"><div id="errMsg"></div><br><textarea id="errDetails" rows="15" style="width: 500; font-size: 10pt" readonly="readonly"></textarea></div>');
					$("#errMsg").text("Error message(" + B.code + "):" + B.message);
					$("#errDetails").text(B.details);
					var C = $.dialog({
							title: "Error!",
							htmlId: "errorDiv",
							width: 520,
							height: 300,
							targetWindow: getCtpTop(),
							buttons: [{
									text: "Close",
									handler: function () {
										$("#errorDiv").remove();
										var G = C.getObjectById("errorDiv");
										if (G) {
											G.remove()
										}
										C.close();
										hideMask()
									}
								}
							]
						})
				}
			} catch (A) {}
		}
	};
	(function () {
		try {
			if (_isModalDialog) {
				$.handleModalDialogInputKeyEvent();
				var A = setInterval(function () {
						$.ajax({
							url: _ctxPath + "/main.do?method=hangup&t=" + Math.random() * 100000000,
							async: true
						})
					}, 30000)
			}
		} catch (B) {}
		$("input:reset").each(function () {
			$("input:text,select,input:checkbox,input:password", $(this).parents("form")).each(function () {
				if (this.type == "checkbox") {
					$(this).attr("coriginValue", this.checked)
				}
				$(this).attr("originValue", $(this).val())
			});
			var D = $(this);
			var E = $("<input type='button' />");
			E.attr("id", D.attr("id"));
			E.attr("className", D.attr("className") + " button_3");
			E.attr("style", D.attr("style"));
			E.attr("name", D.attr("name"));
			E.onmuseover = this["onmuseover"];
			E.val(D.val());
			D.after(E);
			D.remove();
			E.click(function () {
				$("input:text,select,input:checkbox,input:password", $(this).parents("form")).each(function () {
					if ($(this).attr("originValue")) {
						$(this).val($(this).attr("originValue"))
					} else {
						$(this).val("")
					}
					if (this.tagName.toUpperCase() == "SELECT") {
						for (var F = 0; F < this.options.length; F++) {
							if (this.options[F].value == $(this).attr("originValue")) {
								this.options[F].selected = true
							}
						}
					}
					if (this.type == "checkbox") {
						if ($(this).attr("coriginValue") != "true") {
							this.checked = false
						} else {
							this.checked = true
						}
					}
				})
			})
		});
		function C(D) {
			if (typeof D == "string" && D.length > 10) {
				return D.substring(0, 10)
			}
			return D
		}
		if (document.all) {
			$("a[href='javascript:void(0)']").click(function (D) {
				D.preventDefault()
			})
		}
	}).defer(0, this)
});
Date.prototype.isBefore = function (C) {
	var B = parseInt(this.format("Ymd")),
	A = parseInt(C.format("Ymd"));
	return B > A ? -1 : (B < A ? 1 : 0)
};
Date.prototype.before = function (C, G) {
	if (!C || !G) {
		return 0
	}
	var D = 0,
	F,
	A = true,
	E = this,
	B = G;
	if (this.isBefore(G) == -1) {
		A = false;
		E = G;
		B = this
	}
	F = E.clone();
	switch (C.toLowerCase()) {
	case Date.MONTH:
		while (true) {
			if (F.getYear() == B.getYear() && F.getMonth() == B.getMonth()) {
				break
			} else {
				D++;
				F = F.add(Date.MONTH, 1)
			}
		}
		break;
	case Date.YEAR:
		while (true) {
			if (F.getYear() == B.getYear()) {
				break
			} else {
				D++;
				F = F.add(Date.YEAR, 1)
			}
		}
		break
	}
	if (!A) {
		D *= -1
	}
	return D
};
Date.prototype.roundBefore = function (D, I) {
	var J,
	A = this,
	C = I,
	F = true;
	if (this.isBefore(I) == -1) {
		F = false;
		bdate = I;
		adate = this
	}
	J = A.before(D, C);
	var E = A.getDate(),
	H = C.getDate();
	switch (D.toLowerCase()) {
	case Date.MONTH:
		if (H < E) {
			J--
		}
		break;
	case Date.YEAR:
		var G = A.getMonth(),
		B = C.getMonth();
		if (B < G) {
			J--
		} else {
			if (B == G) {
				if (H < E) {
					J--
				}
			}
		}
		break
	}
	if (!F) {
		J *= -1
	}
	return J
};
function isBefore(B, C) {
	var A = Date.parseDate(B, "Y-m-d");
	var D = Date.parseDate(C, "Y-m-d");
	return A.isBefore(D)
}
function before(A, C, D) {
	var B = Date.parseDate(C, "Y-m-d");
	var E = Date.parseDate(D, "Y-m-d");
	return B.before(A, E)
}
function roundBefore(A, C, D) {
	var B = Date.parseDate(C, "Y-m-d");
	var E = Date.parseDate(D, "Y-m-d");
	return B.roundBefore(A, E)
}
(function ($) {
	$.fn.switchClone = function (da, hc) {
		var t = this;
		if (!t.attr("_isclone")) {
			var tc = t.attrObj("tmpclone");
			if (!tc) {
				tc = t.clone();
				if (hc) {
					hc(t[0].tagName.toLowerCase(), tc)
				}
				tc.attr("_isclone", 1);
				t.attrObj("tmpclone", tc);
				t.after(tc)
			}
			if (t.attr("_hide") == 1) {
				if (!da) {
					t.show();
					t.attr("_hide", 0);
					tc.hide()
				}
			} else {
				if (da) {
					t.hide();
					t.attr("_hide", 1);
					tc.show()
				}
			}
		}
	};
	$.fn.disable = function () {
		this.each(function (i) {
			$(this).find(":input,a.common_button").add(this).each(function () {
				var id = this.id,
				t = $(this),
				c = t.attrObj("_rel");
				switch (this.tagName.toLowerCase()) {
				case "textarea":
				case "select":
					var dd = t.attrObj("_dropdown");
					if (dd) {
						dd.disabled = "true"
					}
				case "input":
					t.attr("disabled", "yes");
					t.attr("_da", true);
					if (t.attr("type") == "button") {
						t.addClass("common_button_disable")
					}
					if (c) {
						c.switchClone(true, function (tn, sc) {
							if (tn == "a") {
								sc.addClass("common_button_disable")
							} else {
								sc.attr("disabled", "yes")
							}
						})
					}
					break;
				case "a":
					if (!t.attr("_isrel")) {
						t.switchClone(true, function (tn, sc) {
							sc.removeAttr("onclick");
							sc.addClass("common_button_disable")
						});
						t.attr("_da", true)
					}
					break
				}
			})
		})
	};
	$.fn.enable = function () {
		this.each(function (i) {
			$(this).find(":input,a.common_button").add(this).each(function () {
				var id = this.id,
				t = $(this),
				c = t.attrObj("_rel");
				if (t.attr("_da")) {
					switch (this.tagName.toLowerCase()) {
					case "textarea":
					case "select":
						var dd = t.attrObj("_dropdown");
						if (dd) {
							dd.disabled = null
						}
					case "input":
						t.removeAttr("disabled");
						t.attr("_da", false);
						if (t.attr("type") == "button") {
							t.removeClass("common_button_disable")
						}
						if (c) {
							c.switchClone(false)
						}
						break;
					case "a":
						if (!t.attr("_isrel")) {
							t.switchClone(false);
							t.attr("_da", false)
						}
						break
					}
				}
			})
		})
	};
	var attrObjs = [];
	$.fn.attrObj = function (name, value) {
		var obj;
		for (var i = 0; i < attrObjs.length; i++) {
			if (attrObjs[i].o == this[0]) {
				obj = attrObjs[i];
				break
			}
		}
		if (!obj) {
			obj = new Object();
			obj.o = this[0];
			obj.v = new Object();
			attrObjs.push(obj)
		}
		if (value) {
			obj.v[name] = value
		} else {
			return obj.v[name]
		}
	};
	$.fn.removeAttrObj = function (name) {
		for (var i = 0; i < attrObjs.length; i++) {
			if (attrObjs[i].o == this[0]) {
				var obj = attrObjs[i];
				obj.v[name] = null;
				break
			}
		}
	};
	$.confirmClose = function () {
		var mute = arguments.length > 0;
		var ua = navigator.userAgent;
		var isMSIE = (navigator.appName == "Microsoft Internet Explorer") || ua.indexOf("Trident") != -1;
		if (isMSIE) {
			document.body.onbeforeunload = function () {
				if (removeCtpWindow) {
					removeCtpWindow(null, 2)
				}
				if (!mute && isFormSubmit) {
					window.event.returnValue = ""
				}
			}
		} else {
			if (navigator.userAgent.indexOf("Firefox") != -1) {
				window.onbeforeunload = function (e) {
					if (removeCtpWindow) {
						removeCtpWindow(null, 2)
					}
					if (!mute && isFormSubmit) {
						return ""
					}
				}
			} else {
				if (navigator.userAgent.indexOf("Safari") != -1) {
					window.addEventListener("beforeunload", function (event) {
						if (removeCtpWindow) {
							removeCtpWindow(null, 2)
						}
						if (!mute && isFormSubmit) {
							event && (event.returnValue = "");
							return ""
						}
					}, false)
				} else {
					window.addEventListener("beforeunload", function () {
						if (removeCtpWindow) {
							removeCtpWindow(null, 2)
						}
						if (!mute && isFormSubmit) {
							return ""
						}
					}, false)
				}
			}
		}
	};
	$.i18n = function (key) {
		function sleep(milliseconds) {
			var start = new Date().getTime();
			for (var i = 0; i < 10000000; i++) {
				if ((new Date().getTime() - start) > milliseconds) {
					break
				}
			}
		}
		try {
			var msg = "";
			if (window.localStorage) {
				msg = window.localStorage.getItem("i18n_" + key);
				if (msg == null) {
					var data = window.localStorage.getItem("i18n_DATA");
					if (data == null) {
						$.ajax({
							url: "/seeyon/i18n_init_" + _locale + ".js",
							async: false,
							beforeSend: CsrfGuard.beforeAjaxSend,
							dataType: "script"
						})
					}
					var k = "|_" + key + ",";
					var firstIndex = data.indexOf(k);
					if (firstIndex > -1) {
						var lastIndex = data.indexOf("_|", firstIndex);
						msg = data.substring(firstIndex + k.length, lastIndex);
						localStorage.setItem("i18n_" + key, msg)
					}
					data = null
				}
			} else {
				if (!CTPLang) {
					$.ajax({
						url: "/seeyon/i18n_" + _locale + ".js",
						async: false,
						beforeSend: CsrfGuard.beforeAjaxSend,
						dataType: "script"
					})
				}
				var lang = CTPLang[_locale];
				if (!lang) {
					return key
				}
				var msg = lang[key + _editionI18nSuffix.toUpperCase()];
				if (!msg) {
					msg = lang[key + _editionI18nSuffix.toLowerCase()]
				}
				if (!msg) {
					msg = lang[key]
				}
			}
			if (msg && arguments.length > 1) {
				var messageRegEx_0 = /\{0\}/g;
				var messageRegEx_1 = /\{1\}/g;
				var messageRegEx_2 = /\{2\}/g;
				var messageRegEx_3 = /\{3\}/g;
				var messageRegEx_4 = /\{4\}/g;
				var messageRegEx_5 = /\{5\}/g;
				var messageRegEx_6 = /\{6\}/g;
				var messageRegEx_7 = /\{7\}/g;
				var messageRegEx_8 = /\{8\}/g;
				var messageRegEx_9 = /\{9\}/g;
				var messageRegEx_10 = /\{10\}/g;
				var messageRegEx_11 = /\{11\}/g;
				var messageRegEx_12 = /\{12\}/g;
				var messageRegEx_13 = /\{13\}/g;
				var messageRegEx_14 = /\{14\}/g;
				var messageRegEx_15 = /\{15\}/g;
				for (var i = 0; i < arguments.length - 1; i++) {
					var regEx = eval("messageRegEx_" + i);
					var repMe = "" + arguments[i + 1];
					if (repMe.indexOf("$_") != -1) {
						repMe = repMe.replace("$_", "$$_")
					}
					msg = msg.replace(regEx, repMe)
				}
			}
			return msg
		} catch (e) {}
		return ""
	}
})(jQuery);
var ctpCodeManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath + "/ajax.do?method=ajaxAction&managerName=ctpCodeManager",
		selectCode: function () {
			return this.ajaxCall(arguments, "selectCode")
		}
	});
var ctpUserPreferenceManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath + "/ajax.do?method=ajaxAction&managerName=ctpUserPreferenceManager",
		saveGridPreference: function () {
			return this.ajaxCall(arguments, "saveGridPreference")
		}
	});
var AjaxDataLoader = {
	load: function (A, B, C) {
		jQuery.ajax({
			type: "POST",
			beforeSend: CsrfGuard.beforeAjaxSend,
			url: A,
			cache: false,
			data: B,
			async: true,
			success: function (D) {
				if ($.isFunction(C)) {
					C(D)
				}
			}
		})
	}
};
Array.prototype.contains = function (B) {
	for (var A = 0; A < this.length; A++) {
		if (this[A] == B) {
			return true
		}
	}
	return false
};
String.prototype.format = function () {
	var A = arguments;
	return this.replace(/\{(\d+)\}/g, function () {
		return A[arguments[1]]
	})
};
function showMask() {
	try {
		if (getCtpTop() && getCtpTop().startProc) {
			getCtpTop().startProc()
		}
	} catch (A) {}
}
function hideMask() {
	try {
		if (getCtpTop() && getCtpTop().endProc) {
			getCtpTop().endProc()
		}
	} catch (A) {}
}
function getCtpTop() {
	try {
		var A = getCtpParentWindow(window);
		if (A) {
			return A
		} else {
			return top
		}
	} catch (B) {
		return top
	}
}
function getCtpParentWindow(C) {
	var A = C;
	for (var B = 0; B < 20; B++) {
		if (typeof A.isCtpTop != "undefined" && A.isCtpTop) {
			return A
		} else {
			if (A == window.top) {
				break
			}
			A = A.parent
		}
	}
}
function getCtpTopFromOpener(D) {
	var A = D.getCtpTop();
	for (var B = 0; B < 10; B++) {
		if (typeof A.isCtpTop != "undefined" && A.isCtpTop) {
			return A
		} else {
			try {
				if (A.opener.getCtpTop) {
					A = A.opener.getCtpTop()
				} else {
					A = A.opener.top
				}
			} catch (C) {
				return A
			}
		}
	}
}
function closeOpenMultyWindow(C, E) {
	if (C == undefined) {
		C = window.location + "";
		var D = C.indexOf("/seeyon/");
		if (D != -1) {
			C = C.substring(D)
		}
	}
	var B = getCtpTop()._windowsMap;
	if (B) {
		var A = B.get(C);
		if (A) {
			if (E != undefined && A.isFormSubmit) {
				A.isFormSubmit = E
			}
			A.close()
		}
		B.remove(C)
	}
}
function addAnotherKey(B, D, I, G, A) {
	if (B && D) {
		var L = getCtpTop();
		if (I == 2) {
			if (getCtpTop().opener) {
				L = getCtpTop().opener
			}
		}
		var E = L._windowsMap;
		if (E) {
			var J = E.get(B);
			if (J) {
				if (E.containsKey(D)) {
					E.remove(D)
				}
				E.putRef(D, J)
			} else {
				if (G) {
					if (E.keys().size() == 0) {
						E.putRef(D, A)
					} else {
						var F = E.keys().size();
						var K;
						for (var C = 0; C < F; C++) {
							var H = E.keys().get(C);
							if (H.indexOf(G)) {
								K = E.get(H);
								break
							}
						}
						if (E.containsKey(D)) {
							E.remove(D)
						}
						E.putRef(D, K)
					}
				}
			}
		}
	}
}
function getMultyWindowId(B, C) {
	if (C == undefined || B == undefined) {
		return
	}
	var D;
	var E = C.indexOf(B);
	var A = C.indexOf("&", E);
	if (A == -1) {
		D = C.substring(E + B.length + 1)
	} else {
		D = C.substring(E + B.length + 1, A)
	}
	return D
}
function removeCtpWindow(F, B) {
	try {
		var E = getCtpTop();
		if (F == null || F == undefined) {
			F = E.location + "";
			var D = F.indexOf("/seeyon/");
			if (D != -1) {
				F = F.substring(D)
			}
		}
		if (B == 2) {
			if (getCtpTop().isCtpTop) {
				return
			}
			if (getCtpTop().opener) {
				E = getCtpTop().opener
			}
		}
		var A = E._windowsMap;
		if (A) {
			A.remove(F)
		}
	} catch (C) {}
}
function openCtpWindow(D) {
	var O,
	T,
	R,
	M,
	L,
	J,
	Y,
	H,
	B;
	this.windowArgs = D;
	T = D.width || parseInt(screen.width) - 20;
	R = D.height || parseInt(screen.height) - 80;
	this.settings = {
		dialog_type: "open",
		resizable: "yes",
		scrollbars: "yes"
	};
	O = D.html;
	H = D.url;
	if (H.indexOf("seeyon") == 0) {
		H = _ctxPath + H
	}
	H += CsrfGuard.getUrlSurffix(H);
	B = D.dialogType || this.settings.dialog_type;
	J = D.resizable || this.settings.resizable;
	Y = D.scrollbars || this.settings.scrollbars;
	var K = null;
	var W = (J == "yes") ? "no" : "yes";
	var E = D.id;
	if (E == undefined) {
		E = H
	}
	var U = getCtpTop()._windowsMap;
	if (U) {
		try {
			var Q = U.keys()
		} catch (X) {
			getCtpTop()._windowsMap = new Properties();
			U = getCtpTop()._windowsMap
		}
		for (var S = 0; S < U.keys().size(); S++) {
			var P = U.keys().get(S);
			try {
				var C = U.get(P);
				var N = C.document;
				if (N) {
					var Z = parseInt(N.body.clientHeight);
					if (Z == 0) {
						if ($.browser.msie) {
							N.write("")
						}
						C.close();
						C = null;
						U.remove(P);
						S--
					}
				} else {
					C = null;
					U.remove(P);
					S--
				}
			} catch (X) {
				C = null;
				U.remove(P);
				S--
			}
		}
		if (U.size() == 10) {
			alert($.i18n("window.max.length.js"));
			return
		}
		var V = U.get(E);
		if (V) {
			try {
				var G = V.location.href;
				var I = "";
				var A = G.indexOf("/seeyon/");
				if (A != -1) {
					I = G.substring(A)
				}
				if (I == H) {
					var N = V.document;
					if (D.window) {
						D.window.alert($.i18n("window.already.exit.js"))
					} else {
						alert($.i18n("window.already.exit.js"))
					}
					V.focus();
					return
				}
			} catch (X) {
				V = null;
				U.remove(E)
			}
		}
	} else {
		getCtpTop()._windowsMap = new Properties();
		U = getCtpTop()._windowsMap
	}
	R -= 25;
	var F;
	if (H.indexOf("linkConnectForMenu") != -1 || H.indexOf("linkSystemController") != -1) {
		F = window.open(H, "", "top=0,left=0,scrollbars=yes,dialog=yes,minimizable=yes,modal=open,width=" + T + ",height=" + R + ",resizable=yes")
	} else {
		F = window.open(H, "ctpPopup" + new Date().getTime(), "top=0,left=0,scrollbars=yes,dialog=yes,minimizable=yes,modal=open,width=" + T + ",height=" + R + ",resizable=yes")
	}
	if (F == null) {
		return
	}
	F.focus();
	if (U) {
		U.putRef(E, F)
	}
	return F
}
function removeAllDialog() {
	try {
		getCtpTop().$(".mask").remove();
		var D = getCtpTop().$(".dialog_box");
		if (D.size() > 0) {
			var B = getCtpTop().$(".dialog_box .dialog_main_content iframe");
			if (B.size() > 0) {
				for (var A = 0; A < B.size(); A++) {
					B[A].contentWindow.document.write("");
					B[A].contentWindow.close()
				}
				B.remove()
			}
			D.remove()
		}
		getCtpTop().$(".shield").remove();
		getCtpTop().$(".mxt-window").remove()
	} catch (C) {}
}
var CsrfGuard = {
	getToken: function () {
		var A = typeof(CSRFTOKEN) === "undefined" ? getCtpTop().CSRFTOKEN : CSRFTOKEN;
		return typeof(A) === "undefined" || A === "null" ? "" : A
	},
	isEnabled: function () {
		return this.getToken() !== ""
	},
	getUrlSurffix: function (A) {
		if (typeof(A) !== "undefined" && A.indexOf("CSRFTOKEN=") > 0) {
			return ""
		}
		function B(C) {
			var D = "&";
			if (typeof(C) !== "undefined") {
				if (C.indexOf("?") < 0) {
					D = "?"
				}
			}
			return D
		}
		return !this.isEnabled() ? "" : B(A) + "CSRFTOKEN=" + this.getToken()
	},
	beforeAjaxSend: function (A) {
		var B = CsrfGuard.getToken();
		if (B !== "") {
			A.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			A.setRequestHeader("CSRFTOKEN", B)
		}
	}
};
var messageRegEx_0 = /\{0\}/g;
var messageRegEx_1 = /\{1\}/g;
var messageRegEx_2 = /\{2\}/g;
var messageRegEx_3 = /\{3\}/g;
var messageRegEx_4 = /\{4\}/g;
var messageRegEx_5 = /\{5\}/g;
var messageRegEx_6 = /\{6\}/g;
var messageRegEx_7 = /\{7\}/g;
var messageRegEx_8 = /\{8\}/g;
var messageRegEx_9 = /\{9\}/g;
var messageRegEx_10 = /\{10\}/g;
var messageRegEx_11 = /\{11\}/g;
var messageRegEx_12 = /\{12\}/g;
var messageRegEx_13 = /\{13\}/g;
var messageRegEx_14 = /\{14\}/g;
var messageRegEx_15 = /\{15\}/g;
var portalOfA8IframeStr = "top.frames['frame_A8']";
var thisWindowZindex = 600;
var getMaxZindex = function (A) {
	if (typeof(A) != "undefined") {
		A = Number(A);
		if (isNaN(Number(A))) {
			$.alert("\u8bf7\u68c0\u67e5\u4f20\u5165\u7684z-index\u503c\uff01")
		}
	}
	if (typeof(A) == "undefined" || A == 1) {
		thisWindowZindex = thisWindowZindex + 1;
		return thisWindowZindex
	} else {
		thisWindowZindex = thisWindowZindex + A;
		return (thisWindowZindex - A + 1)
	}
};
if (!window.ActiveXObject) {
	if (typeof(HTMLElement) != "undefined") {
		HTMLElement.prototype.__defineSetter__("outerHTML", function (A) {
			var B = this.ownerDocument.createRange();
			B.setStartBefore(this);
			var D = B.createContextualFragment(A);
			this.parentNode.replaceChild(D, this);
			return A
		});
		HTMLElement.prototype.__defineGetter__("outerHTML", function () {
			var A = this.attributes,
			D = "<" + this.tagName,
			B = 0;
			for (; B < A.length; B++) {
				if (A[B].specified) {
					D += " " + A[B].name + '="' + A[B].value + '"'
				}
			}
			if (!this.canHaveChildren) {
				return D + " />"
			}
			return D + ">" + this.innerHTML + "</" + this.tagName + ">"
		});
		HTMLElement.prototype.__defineGetter__("canHaveChildren", function () {
			return !/^(area|base|basefont|col|frame|hr|img|br|input|isindex|link|meta|param)$/.test(this.tagName.toLowerCase())
		})
	}
}
if (!window.ActiveXObject) {
	if (!!document.getBoxObjectFor || window.mozInnerScreenX != null) {
		HTMLElement.prototype.__defineSetter__("innerText", function (B) {
			var A = document.createTextNode(B);
			this.innerHTML = "";
			this.appendChild(A);
			return A
		});
		HTMLElement.prototype.__defineGetter__("innerText", function () {
			var A = this.ownerDocument.createRange();
			A.selectNodeContents(this);
			return A.toString()
		})
	}
	if (!!document.getBoxObjectFor || window.mozInnerScreenX != null) {
		HTMLElement.prototype.__defineSetter__("outerText", function (B) {
			var A = document.createTextNode(B);
			this.parentNode.replaceChild(A, this);
			return A
		});
		HTMLElement.prototype.__defineGetter__("outerText", function () {
			var A = this.ownerDocument.createRange();
			A.selectNodeContents(this);
			return A.toString()
		})
	}
}
String.prototype.getBytesLength = function () {
	var A = this.match(/[^\x00-\xff]/ig);
	return this.length + (A == null ? 0 : A.length)
};
String.prototype.getLimitLength = function (D, G) {
	if (!D || D < 0) {
		return this
	}
	var A = this.getBytesLength();
	if (A <= D) {
		return this
	}
	G = G == null ? ".." : G;
	D = D - G.length;
	var B = 0;
	var E = "";
	for (var F = 0; F < this.length; F++) {
		if (this.charCodeAt(F) > 255) {
			B += 2
		} else {
			B++
		}
		E += this.charAt(F);
		if (B >= D) {
			return E + G
		}
	}
	return this
};
String.prototype.escapeHTML = function (B, A) {
	try {
		return escapeStringToHTML(this, B, A)
	} catch (D) {}
	return this
};
String.prototype.escapeUrl = function (A) {
	try {
		return escapeStringToHTML(this.replace(/\n/g, ""), A)
	} catch (B) {}
	return this
};
String.prototype.escapeJavascript = function () {
	return escapeStringToJavascript(this)
};
String.prototype.escapeSpace = function () {
	return this.replace(/ /g, "&nbsp;")
};
String.prototype.escapeSameWidthSpace = function () {
	return this.replace(/ /g, "&nbsp;&nbsp;")
};
String.prototype.escapeXML = function () {
	return this.replace(/\&/g, "&amp;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\"/g, "&quot;")
};
String.prototype.escapeQuot = function () {
	return this.replace(/\'/g, "&#039;").replace(/"/g, "&#034;")
};
String.prototype.startsWith = function (A) {
	return this.indexOf(A) == 0
};
String.prototype.endsWith = function (A) {
	var B = this.indexOf(A);
	return B > -1 && B == this.length - A.length
};
String.prototype.trim = function () {
	var D = this.toCharArray();
	var A = 0;
	var E = D.length;
	for (var B = 0; B < D.length; B++) {
		var F = D[B];
		if (F == " ") {
			A++
		} else {
			break
		}
	}
	if (A == this.length) {
		return ""
	}
	for (var B = D.length; B > 0; B--) {
		var F = D[B - 1];
		if (F == " ") {
			E--
		} else {
			break
		}
	}
	return this.substring(A, E)
};
String.prototype.toCharArray = function () {
	var B = [];
	for (var A = 0; A < this.length; A++) {
		B[A] = this.charAt(A)
	}
	return B
};
Array.prototype.indexOf = function (A) {
	for (var B = 0; B < this.length; B++) {
		if (this[B] == A) {
			return B
		}
	}
	return -1
};
var log = {
	rootLogger: "info",
	debugLevel: {
		debug: true,
		info: true,
		warn: true,
		error: true
	},
	infoLevel: {
		debug: false,
		info: true,
		warn: true,
		error: true
	},
	warnLevel: {
		debug: false,
		info: false,
		warn: true,
		error: true
	},
	errorLevel: {
		debug: false,
		info: false,
		warn: false,
		error: true
	},
	debug: function (A) {
		if (this.isDebugEnabled()) {
			alert("Debug : " + A)
		}
	},
	info: function (A) {
		if (this.isInfoEnabled()) {
			alert("Info : " + A)
		}
	},
	warn: function (A) {
		if (this.isWarnEnabled()) {
			alert("Warn : " + A)
		}
	},
	error: function (B, A) {
		if (this.isErrorEnabled()) {
			alert("Error : " + B + "\n\n" + A.message)
		}
	},
	isDebugEnabled: function () {
		return eval("this." + this.rootLogger + "Level.debug")
	},
	isInfoEnabled: function () {
		return eval("this." + this.rootLogger + "Level.info")
	},
	isWarnEnabled: function () {
		return eval("this." + this.rootLogger + "Level.warn")
	},
	isErrorEnabled: function () {
		return eval("this." + this.rootLogger + "Level.error")
	}
};
var UUID_seqence = 0;
function getUUID() {
	var A = new Date().getTime() + "" + (UUID_seqence++);
	if (UUID_seqence >= 100000) {
		UUID_seqence = 0
	}
	return A
}
var EmptyArrayList = new ArrayList();
function ArrayList() {
	this.instance = new Array()
}
ArrayList.prototype.size = function () {
	return this.instance.length
};
ArrayList.prototype.add = function (A) {
	this.instance[this.instance.length] = A
};
ArrayList.prototype.addSingle = function (A) {
	if (!this.contains(A)) {
		this.instance[this.instance.length] = A
	}
};
ArrayList.prototype.addAt = function (A, B) {
	if (A >= this.size() || A < 0 || this.isEmpty()) {
		this.add(B);
		return
	}
	this.instance.splice(A, 0, B)
};
ArrayList.prototype.addAll = function (A) {
	if (!A || A.length < 1) {
		return
	}
	this.instance = this.instance.concat(A)
};
ArrayList.prototype.addList = function (A) {
	if (A && A instanceof ArrayList && !A.isEmpty()) {
		this.instance = this.instance.concat(A.instance)
	}
};
ArrayList.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
ArrayList.prototype.getLast = function () {
	if (this.size() < 1) {
		return null
	}
	return this.instance[this.size() - 1]
};
ArrayList.prototype.set = function (B, D) {
	if (B >= this.size()) {
		throw "IndexOutOfBoundException : Index " + B + ", Size " + this.size()
	}
	var A = this.instance[B];
	this.instance[B] = D;
	return A
};
ArrayList.prototype.removeElementAt = function (A) {
	if (A > this.size() || A < 0) {
		return
	}
	this.instance.splice(A, 1)
};
ArrayList.prototype.remove = function (B) {
	var A = this.indexOf(B);
	this.removeElementAt(A)
};
ArrayList.prototype.contains = function (A, B) {
	return this.indexOf(A, B) > -1
};
ArrayList.prototype.indexOf = function (D, E) {
	for (var A = 0; A < this.size(); A++) {
		var B = this.instance[A];
		if (B == D) {
			return A
		} else {
			if (E != null && B != null && D != null && B[E] == D[E]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.lastIndexOf = function (D, E) {
	for (var A = this.size() - 1; A >= 0; A--) {
		var B = this.instance[A];
		if (B == D) {
			return A
		} else {
			if (E != null && B != null && D != null && B[E] == D[E]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.subList = function (B, E) {
	if (B < 0) {
		B = 0
	}
	if (E > this.size()) {
		E = this.size()
	}
	var D = this.instance.slice(B, E);
	var A = new ArrayList();
	A.addAll(D);
	return A
};
ArrayList.prototype.toArray = function () {
	return this.instance
};
ArrayList.prototype.isEmpty = function () {
	return this.size() == 0
};
ArrayList.prototype.clear = function () {
	this.instance = new Array()
};
ArrayList.prototype.toString = function (A) {
	A = A || ", ";
	return this.instance.join(A)
};
function QuickSortArrayList(A, B) {
	QuickSortArray(A.toArray(), B)
}
function QuickSortArray(A, B) {
	if (B) {
		A.sort(function (E, D) {
			return E[B] < D[B] ? -1 : (E[B] == D[B] ? 0 : 1)
		})
	} else {
		A.sort()
	}
}
var EmptyProperties = new Properties();
function Properties(A) {
	this.instanceKeys = new ArrayList();
	this.instance = {};
	if (A) {
		this.instance = A;
		for (var B in A) {
			this.instanceKeys.add(B)
		}
	}
}
Properties.prototype.size = function () {
	return this.instanceKeys.size()
};
Properties.prototype.get = function (B, A) {
	if (B == null) {
		return null
	}
	var D = this.instance[B];
	if (D == null && A != null) {
		return A
	}
	return D
};
Properties.prototype.remove = function (A) {
	if (A == null) {
		return null
	}
	this.instanceKeys.remove(A);
	delete this.instance[A]
};
Properties.prototype.put = function (A, B) {
	if (A == null) {
		return null
	}
	if (this.instance[A] == null) {
		this.instanceKeys.add(A)
	}
	this.instance[A] = B
};
Properties.prototype.putRef = function (A, B) {
	if (A == null) {
		return null
	}
	this.instanceKeys.add(A);
	this.instance[A] = B
};
Properties.prototype.getMultilevel = function (E, B) {
	if (E == null) {
		return null
	}
	var D = E.split(".");
	function A(J, H, G) {
		try {
			if (J == null || (typeof J != "object")) {
				return null
			}
			var K = J.get(H[G]);
			if (G < H.length - 1) {
				K = A(K, H, G + 1)
			}
			return K
		} catch (I) {}
		return null
	}
	var F = A(this, D, 0);
	return F == null ? B : F
};
Properties.prototype.containsKey = function (A) {
	if (A == null) {
		return false
	}
	return this.instance[A] != null
};
Properties.prototype.keys = function () {
	return this.instanceKeys
};
Properties.prototype.values = function () {
	var E = new ArrayList();
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		if (A) {
			var D = this.instance[A];
			E.add(D)
		}
	}
	return E
};
Properties.prototype.isEmpty = function () {
	return this.instanceKeys.isEmpty()
};
Properties.prototype.clear = function () {
	this.instanceKeys.clear();
	this.instance = {}
};
Properties.prototype.swap = function (D, B) {
	if (!D || !B || D == B) {
		return
	}
	var F = -1;
	var E = -1;
	for (var A = 0; A < this.instanceKeys.instance.length; A++) {
		if (this.instanceKeys.instance[A] == D) {
			F = A
		} else {
			if (this.instanceKeys.instance[A] == B) {
				E = A
			}
		}
	}
	this.instanceKeys.instance[F] = B;
	this.instanceKeys.instance[E] = D
};
Properties.prototype.entrySet = function () {
	var A = [];
	for (var D = 0; D < this.instanceKeys.size(); D++) {
		var B = this.instanceKeys.get(D);
		var E = this.instance[B];
		if (!B) {
			continue
		}
		var F = new Object();
		F.key = B;
		F.value = E;
		A[A.length] = F
	}
	return A
};
Properties.prototype.toString = function () {
	var D = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		D += A + "=" + this.instance[A] + "\n"
	}
	return D
};
Properties.prototype.toStringTokenizer = function (F, E) {
	F = F == null ? ";" : F;
	E = E == null ? "=" : E;
	var G = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			G += F
		}
		G += A + E + D
	}
	return G
};
Properties.prototype.toQueryString = function () {
	if (this.size() < 1) {
		return ""
	}
	var E = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			E += "&"
		}
		if (typeof D == "object") {}
		else {
			E += A + "=" + encodeURIat(D)
		}
	}
	return E
};
function encodeURIat(A) {
	if ((typeof A) !== "string") {
		return ""
	}
	A = encodeURI(A);
	var B = /&|\/|\+|\?|\s|%|#|=/g;
	if (B.test(A)) {
		A = A.replace(/(\/)/g, "%2F");
		A = A.replace(/(&)/g, "%26");
		A = A.replace(/(\+)/g, "%2B");
		A = A.replace(/(\?)/g, "%3F");
		A = A.replace(/(#)/g, "%23");
		A = A.replace(/(=)/g, "%3D")
	}
	return A
}
Properties.prototype.toInputString = function () {
	if (this.size() < 1) {
		return ""
	}
	var E = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (typeof D == "object") {}
		else {
			E += "<input type='hidden' name=\"" + A + '" value="' + encodeURI(D) + ">"
		}
	}
	return E
};
function Set() {
	this.instance = new Array();
	this.key = {}
}
Set.prototype.add = function () {
	if (arguments == null || arguments.length < 1) {
		throw "arguments is null"
	}
	for (var B = 0; B < arguments.length; B++) {
		var A = arguments[B];
		if (!this.contains(A)) {
			this.instance[this.size()] = A;
			this.key[A] = "A8"
		}
	}
};
Set.prototype.size = function () {
	return this.instance.length
};
Set.prototype.contains = function (A) {
	return this.key[A] != null
};
Set.prototype.isEmpty = function () {
	return this.size() == 0
};
Set.prototype.clear = function () {
	this.instance = new Array();
	this.key = {}
};
Set.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
Set.prototype.toArray = function () {
	return this.instance
};
Set.prototype.toString = function () {
	return this.instance.join(", ")
};
function StringBuffer() {
	this._strings_ = new Array()
}
StringBuffer.prototype.append = function (A) {
	if (A) {
		if (A instanceof Array) {
			this._strings_ = this._strings_.concat(A)
		} else {
			this._strings_[this._strings_.length] = A
		}
	}
	return this
};
StringBuffer.prototype.reset = function (A) {
	this.clear();
	this.append(A)
};
StringBuffer.prototype.clear = function () {
	this._strings_ = new Array()
};
StringBuffer.prototype.isBlank = function () {
	return this._strings_.length == 0
};
StringBuffer.prototype.toString = function (A) {
	A = A == null ? "" : A;
	if (this._strings_.length == 0) {
		return ""
	}
	return this._strings_.join(A)
};
function V3X() {
	this.windowArgs = new Array();
	this.lastWindow = null;
	var A = navigator.userAgent;
	this.isMSIE = (navigator.appName == "Microsoft Internet Explorer") || A.indexOf("Trident") != -1;
	this.isMSIE5 = this.isMSIE && (A.indexOf("MSIE 5") != -1);
	this.isMSIE5_0 = this.isMSIE && (A.indexOf("MSIE 5.0") != -1);
	this.isMSIE6 = this.isMSIE && (A.indexOf("MSIE 6") != -1);
	this.isMSIE7 = this.isMSIE && (A.indexOf("MSIE 7") != -1);
	this.isMSIE8 = this.isMSIE && (A.indexOf("MSIE 8") != -1);
	this.isMSIE9 = this.isMSIE && (A.indexOf("MSIE 9") != -1);
	this.isMSIE10 = this.isMSIE && (A.indexOf("MSIE 10") != -1);
	this.isMSIE11 = this.isMSIE && (A.indexOf("rv:11") != -1);
	this.isGecko = A.indexOf("Gecko") != -1;
	this.isGecko18 = A.indexOf("Gecko") != -1 && A.indexOf("rv:1.8") != -1;
	this.isSafari = A.indexOf("Safari") != -1;
	this.isOpera = A.indexOf("Opera") != -1;
	this.isFirefox = A.indexOf("Firefox") != -1;
	this.isMac = A.indexOf("Mac") != -1;
	this.isNS7 = A.indexOf("Netscape/7") != -1;
	this.isNS71 = A.indexOf("Netscape/7.1") != -1;
	this.isIpad = A.indexOf("iPad") != -1;
	this.isChrome = A.indexOf("Chrome") != -1;
	this.currentBrowser = "";
	this.browserFlag = {
		openWindow: [true, true, false, false, false, false, false],
		sectionOpenDetail: [true, true, true, false, true, true, false],
		selectPeople: [true, true, true, false, true, true, false],
		htmlEditer: [true, true, true, false, true, true, false],
		hideMenu: [true, true, true, false, true, true, false],
		newFlash: [true, true, true, false, true, false, false],
		signature: [true, true, false, false, false, false, false],
		createProcess: [true, true, true, false, true, true, false],
		flash: [true, true, true, false, true, true, false],
		downLoad: [true, true, true, false, true, true, false],
		print: [true, true, true, false, true, true, false],
		exportExcel: [true, true, true, false, true, true, false],
		pageBreak: [true, true, true, false, true, true, false],
		menuPosition: [false, false, false, true, false, false, false],
		officeMenu: [true, true, true, false, true, false, false],
		selectPeopleShowType: [true, true, true, false, true, true, false],
		OpenDivWindow: [true, true, true, false, true, true, false],
		selectDivType: [true, true, true, false, true, true, false],
		onDbClick: [true, true, true, false, true, true, true],
		needModalWindow: [true, true, true, false, true, true, false],
		onlyIe: [true, true, false, false, false, false, false]
	};
	this.isOfficeSupport = function () {
		return this.getBrowserFlag("officeMenu") == true
	};
	this.dialogCounter = 0;
	this.defaultLanguage = "en";
	this.currentLanguage = "";
	this.baseURL = "";
	this.loadedFiles = new Array();
	this.workSpaceTop = 130;
	if (this.isMSIE8) {
		this.workSpaceTop = 140
	}
	if (!this.isMSIE7 && !this.isMSIE8) {
		this.workSpaceTop = 130
	}
	this.workSpaceLeft = 0;
	this.workSpaceWidth = screen.width - this.workSpaceLeft;
	this.workSpaceheight = screen.height - this.workSpaceTop - 20 - (this.isMSIE7 ? 35 : 0);
	if (this.isOpera) {
		this.isMSIE = true;
		this.isGecko = false;
		this.isSafari = false
	}
	this.settings = {
		dialog_type: "modal",
		resizable: "yes",
		scrollbars: "yes"
	}
}
V3X.prototype.init = function (A, B) {
	if (A) {
		this.baseURL = A
	}
	this.currentLanguage = B;
	this.loadLanguage("/common/js/i18n");
	this.getCurrentBrowser()
};
V3X.prototype.getCurrentBrowser = function () {
	if (this.isMSIE || this.isMSIE5 || this.isMSIE5_0 || this.isMSIE7 || this.isMSIE8) {
		this.currentBrowser = "MSIE"
	}
	if (this.isMSIE9) {
		this.currentBrowser = "MSIE9"
	}
	if (this.isFirefox) {
		this.currentBrowser = "FIREFOX"
	}
	if (this.isSafari) {
		this.currentBrowser = "SAFARI"
	}
	if (this.isChrome) {
		this.currentBrowser = "CHROME"
	}
	if (this.isIpad) {
		this.currentBrowser = "IPAD"
	}
	if (this.isOpera) {
		this.currentBrowser = "OPERA"
	}
};
V3X.prototype.getBrowserFlag = function (A) {
	if (A != null && A != "") {
		var B = 0;
		if (this.currentBrowser == "MSIE") {
			B = 0
		}
		if (this.currentBrowser == "MSIE9") {
			B = 1
		}
		if (this.currentBrowser == "FIREFOX") {
			B = 2
		}
		if (this.currentBrowser == "IPAD") {
			B = 3
		}
		if (this.currentBrowser == "CHROME") {
			B = 4
		}
		if (this.currentBrowser == "SAFARI") {
			B = 5
		}
		if (this.currentBrowser == "OPERA") {
			B = 6
		}
		return this.browserFlag[A][B]
	}
};
V3X.prototype.openDialog = function (A) {
	return new MxtWindow(A)
};
V3X.prototype.getEvent = function () {
	if (this.isMSIE) {
		return window.event
	}
	func = v3x.getEvent.caller;
	while (func != null) {
		var A = func.arguments[0];
		if (A) {
			if ((A.constructor == Event || A.constructor == MouseEvent) || (typeof(A) == "object" && A.preventDefault && A.stopPropagation)) {
				return A
			}
		}
		func = func.caller
	}
	return null
};
V3X.prototype.openWindow = function (B) {
	var L,
	O,
	N,
	K,
	J,
	H,
	S,
	F;
	this.windowArgs = B;
	L = B.html;
	if (B.FullScrean) {
		O = this.workSpaceWidth;
		N = this.workSpaceheight + this.workSpaceTop;
		O = O - 20;
		K = 0;
		J = 0
	} else {
		if (B.workSpace) {
			O = this.workSpaceWidth;
			N = this.workSpaceheight;
			O = O - 30;
			K = this.workSpaceLeft;
			J = this.workSpaceTop;
			J = J - 40
		} else {
			if (B.workSpaceRight) {
				O = this.workSpaceWidth - 155;
				N = this.workSpaceheight;
				if (this.isMSIE8) {
					N = this.workSpaceheight - 48
				}
				if (!this.isMSIE7 && !this.isMSIE8) {
					O = this.workSpaceWidth - 165;
					N = this.workSpaceheight - 35
				}
				K = 140;
				J = this.workSpaceTop
			} else {
				O = B.width || 320;
				N = B.height || 200;
				O = parseInt(O);
				N = parseInt(N);
				if (this.isMSIE) {
					if (this.isMSIE7 || this.isMSIE8) {
						N -= 6
					} else {
						N += 20
					}
				}
				K = B.left || parseInt(screen.width / 2) - (O / 2);
				J = B.top || parseInt(screen.height / 2) - (N / 2)
			}
		}
	}
	H = B.resizable || this.settings.resizable;
	S = B.scrollbars || this.settings.scrollbars;
	F = B.url;
	if (F.indexOf("CSRFTOKEN=") < 0) {
		F = F + CsrfGuard.getUrlSurffix(F)
	}
	if (L) {
		var E = window.open("", "v3xPopup" + new Date().getTime(), "top=" + J + ",left=" + K + ",scrollbars=" + S + ",dialog=yes,minimizable=" + H + ",modal=yes,width=" + O + ",height=" + N + ",resizable=" + H);
		if (E == null) {
			return
		}
		E.document.write(L);
		E.document.close();
		E.resizeTo(O, N);
		E.focus();
		return E
	} else {
		var A = B.dialogType || this.settings.dialog_type;
		if (A == "modal" && window.showModalDialog) {
			var G = "resizable:" + H + ";scroll:" + S + ";status:no;help:no;dialogWidth:" + O + "px;dialogHeight:" + N + "px;";
			if (B.workSpace || B.workSpaceRight || (B.left && B.top)) {
				G += "dialogTop:" + J + "px;dialogLeft:" + K + "px;"
			} else {
				var D = (parseInt(getA8Top().document.body.offsetWidth) - O) / 2;
				var M = (parseInt(getA8Top().document.body.offsetHeight) - N) / 2;
				if (D == null || M == null || D < 0 || M < 0) {
					D = 200;
					M = 200
				}
				G += this.isMSIE ? "center:yes;" : "dialogTop:" + M + "px;dialogLeft:" + D + "px;"
			}
			if (F.indexOf("?") != -1) {
				F += "&"
			} else {
				F += "?"
			}
			F += "_isModalDialog=true";
			var I = window.showModalDialog(F, window, G);
			var R = null;
			if (this.ModalDialogResultValue == undefined) {
				R = I
			} else {
				R = this.ModalDialogResultValue;
				this.ModalDialogResultValue = undefined
			}
			return R
		} else {
			var I = null;
			var Q = (H == "yes") ? "no" : "yes";
			if (this.isGecko && this.isMac) {
				Q = "no"
			}
			if (B.closePrevious != "no") {
				try {
					this.lastWindow.close()
				} catch (P) {}
			}
			if (window.dialogArguments && B.workSpace) {
				J -= 5;
				N -= 25
			}
			var E = window.open(F, "v3xPopup" + new Date().getTime(), "top=" + J + ",left=" + K + ",scrollbars=" + S + ",dialog=" + Q + ",minimizable=" + H + ",modal=" + Q + ",width=" + O + ",height=" + N + ",resizable=" + H);
			if (E == null) {
				return
			}
			if (B.closePrevious != "no") {
				this.lastWindow = E
			}
			if (this.isGecko && !this.isMSIE && !this.isFirefox) {
				if (E.document.defaultView.statusbar.visible) {
					E.resizeBy(0, this.isMac ? 10 : 24)
				}
			}
			E.focus();
			return E
		}
	}
};
V3X.prototype.setResultValue = function (A) {
	this.getParentWindow().v3x.ModalDialogResultValue = A
};
V3X.prototype.closeWindow = function (A) {
	A.close()
};
V3X.prototype.getParentWindow = function (A) {
	A = A || window;
	if (A.dialogArguments) {
		return A.dialogArguments
	} else {
		return A.opener || A
	}
};
V3X.prototype.loadLanguage = function (A) {
	this.loadScriptFile(this.baseURL + A + "/" + this.currentLanguage + ".js?V=3_50_2_29")
};
V3X.prototype.getMessage = function (key) {
	try {
		var msg = eval("" + key);
		if (msg && arguments.length > 1) {
			for (var i = 0; i < arguments.length - 1; i++) {
				var regEx = eval("messageRegEx_" + i);
				var repMe = "" + arguments[i + 1];
				if (repMe.indexOf("$_") != -1) {
					repMe = repMe.replace("$_", "$$_")
				}
				msg = msg.replace(regEx, repMe)
			}
		}
		return msg
	} catch (e) {
		try {
			var msg = "";
			if (window.localStorage) {
				msg = window.localStorage.getItem("i18n_" + key);
				if (msg == null) {
					var data = window.localStorage.getItem("i18n_DATA");
					if (data == null) {
						this.loadScriptFile(this.baseURL + "i18n_init_" + _locale + ".js")
					}
					var k = "|_" + key + ",";
					var firstIndex = data.indexOf(k);
					if (firstIndex > -1) {
						var lastIndex = data.indexOf("_|", firstIndex);
						msg = data.substring(firstIndex + k.length, lastIndex);
						localStorage.setItem("i18n_" + key, msg)
					}
					data = null
				}
			} else {
				if (!CTPLang) {
					this.loadScriptFile(this.baseURL + "i18n_" + _locale + ".js")
				}
				var lang = CTPLang[_locale];
				if (!lang) {
					return key
				}
				var msg = lang[key + _editionI18nSuffix.toUpperCase()];
				if (!msg) {
					msg = lang[key + _editionI18nSuffix.toLowerCase()]
				}
				if (!msg) {
					msg = lang[key]
				}
			}
			if (msg && arguments.length > 1) {
				for (var i = 0; i < arguments.length - 1; i++) {
					var regEx = eval("messageRegEx_" + i);
					var repMe = "" + arguments[i + 1];
					if (repMe.indexOf("$_") != -1) {
						repMe = repMe.replace("$_", "$$_")
					}
					msg = msg.replace(regEx, repMe)
				}
			}
			return msg
		} catch (e) {}
		return ""
	}
	return ""
};
V3X.prototype.loadScriptFile = function (A) {
	for (var B = 0; B < this.loadedFiles.length; B++) {
		if (this.loadedFiles[B] == A) {
			return
		}
	}
	document.write('<script language="javascript" type="text/javascript" charset="UTF-8" src="' + A + '"><\/script>');
	this.loadedFiles[this.loadedFiles.length] = A
};
V3X.prototype.getElementPosition = function (E) {
	var A = navigator.userAgent.toLowerCase();
	var B = (A.indexOf("opera") != -1);
	var F = (A.indexOf("msie") != -1 && !B);
	if (E.parentNode === null || E.style.display == "none") {
		return false
	}
	var L = null;
	var K = [];
	var I;
	if (E.getBoundingClientRect) {
		I = E.getBoundingClientRect();
		var D = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
		var G = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
		return {
			x: I.left + G,
			y: I.top + D
		}
	} else {
		if (document.getBoxObjectFor) {
			I = document.getBoxObjectFor(E);
			var J = (E.style.borderLeftWidth) ? parseInt(E.style.borderLeftWidth) : 0;
			var H = (E.style.borderTopWidth) ? parseInt(E.style.borderTopWidth) : 0;
			K = [I.x - J, I.y - H]
		} else {
			K = [E.offsetLeft, E.offsetTop];
			L = E.offsetParent;
			if (L != E) {
				while (L) {
					K[0] += L.offsetLeft;
					K[1] += L.offsetTop;
					L = L.offsetParent
				}
			}
			if (A.indexOf("opera") != -1 || (A.indexOf("safari") != -1 && E.style.position == "absolute")) {
				K[0] -= document.body.offsetLeft;
				K[1] -= document.body.offsetTop
			}
		}
	}
	if (E.parentNode) {
		L = E.parentNode
	} else {
		L = null
	}
	while (L && L.tagName != "BODY" && L.tagName != "HTML") {
		K[0] -= L.scrollLeft;
		K[1] -= L.scrollTop;
		if (L.parentNode) {
			L = L.parentNode
		} else {
			L = null
		}
	}
	return {
		x: K[0],
		y: K[1]
	}
};
function disableButton(D, A) {
	A = A || "100%";
	if (!D) {
		return false
	}
	var E = null;
	if (typeof D == "string") {
		E = document.getElementById(D)
	} else {
		E = D
	}
	if (!E) {
		return false
	}
	if (document.readyState != "complete") {
		if (typeof D == "string") {
			window.setTimeout("disableButton('" + D + "')", 2500)
		} else {
			window.setTimeout("disableButton(" + D + ")", 2500)
		}
		return
	}
	var B = E.cDisabled;
	B = (B != null);
	if (!B) {
		E.cDisabled = true;
		if (document.getElementsByTagName) {
			var F = "<span style='background: buttonshadow; filter: chroma(color=white) dropshadow(color=buttonhighlight, offx=1, offy=1); height: " + A + ";'>";
			F += "  <span style='filter: mask(color=white); height: " + A + "'>";
			F += E.innerHTML;
			F += "  </span>";
			F += "</span>";
			E.innerHTML = F
		} else {
			E.innerHTML = '<span style="background: buttonshadow; width: 100%; height: 100%; text-align: center;"><span style="filter:Mask(Color=buttonface) DropShadow(Color=buttonhighlight, OffX=1, OffY=1, Positive=0); height: 100%; width: 100%; text-align: center;">' + E.innerHTML + "</span></span>"
		}
		if (E.onclick != null) {
			E.cDisabled_onclick = E.onclick;
			E.onclick = null
		}
		if (E.onmouseover != null) {
			E.cDisabled_onmouseover = E.onmouseover;
			E.onmouseover = null
		}
		if (E.onmouseout != null) {
			E.cDisabled_onmouseout = E.onmouseout;
			E.onmouseout = null
		}
	}
}
function enableButton(B) {
	if (!B) {
		return false
	}
	var D = null;
	if (typeof B == "string") {
		D = document.getElementById(B)
	} else {
		D = B
	}
	if (!D) {
		return false
	}
	var A = D.cDisabled;
	A = (A != null);
	if (A) {
		D.cDisabled = null;
		D.innerHTML = D.children[0].children[0].innerHTML;
		if (D.cDisabled_onclick != null) {
			D.onclick = D.cDisabled_onclick;
			D.cDisabled_onclick = null
		}
		if (D.cDisabled_onmouseover != null) {
			D.onmouseover = D.cDisabled_onmouseover;
			D.cDisabled_onmouseover = null
		}
		if (D.cDisabled_onmouseout != null) {
			D.onmouseout = D.cDisabled_onmouseout;
			D.cDisabled_onmouseout = null
		}
	}
}
var attachmentConstants = {
	height: 22
};
function downloadAttachment(A, D, B) {}
function Attachment(D, G, Q, F, I, B, E, O, R, P, N, H, M, K, J, A, L) {
	this.id = D;
	this.reference = G;
	this.subReference = Q;
	this.category = F;
	this.type = I;
	this.filename = B;
	this.mimeType = E;
	this.createDate = O;
	this.size = R;
	this.fileUrl = P;
	this.description = N || "";
	this.needClone = H;
	this.extension = M;
	this.icon = K;
	this.isCanTransform = A == "enable" ? true : false;
	this.onlineView = J == null ? true : J;
	this.extReference = "";
	this.extSubReference = "";
	this.showArea = "";
	this.embedInput = "";
	this.hasSaved = false;
	this.v = L;
	this.canFavourite = true;
	this.isShowImg = false;
	this.fileUrl2 = P
}
var pw = new Object();
function loadInit() {
	var E = "ActiveXObject.Kinggrid.iWebOffice";
	var F = window.sessionStorage;
	if (F) {
		var A = F.getItem(E);
		if (A != undefined && (typeof JSON != "undefined")) {
			pw = JSON.parse(A)
		}
	}
	if (!pw.inited) {
		try {
			var D = "";
			if (navigator.cpuClass.indexOf("x86") != -1) {
				D = new ActiveXObject("Kinggrid.iWebOffice")
			} else {
				D = new ActiveXObject("Kinggrid.iWebOffice_x64")
			}
			pw.installDoc = D.WebApplication(".doc");
			pw.installXls = D.WebApplication(".xls");
			pw.installWps = D.WebApplication(".wps");
			pw.installEt = D.WebApplication(".et")
		} catch (B) {
			pw.installDoc = false;
			pw.installXls = false;
			pw.installWps = false;
			pw.installEt = false
		}
	}
	if (pw.installDoc) {
		attFileType.put("application/msword", "OfficeWord");
		attFileType.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document", "OfficeWord");
		attFileType.put(".doc", "OfficeWord");
		attFileType.put(".docx", "OfficeWord");
		attFileType.put("application/kswps", "OfficeWord");
		attFileType.put(".wps", "OfficeWord")
	}
	if (pw.installXls) {
		attFileType.put("application/vnd.ms-excel", "OfficeExcel");
		attFileType.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "OfficeExcel");
		attFileType.put(".xls", "OfficeExcel");
		attFileType.put(".xlsx", "OfficeExcel");
		attFileType.put("application/kset", "OfficeExcel");
		attFileType.put(".et", "OfficeExcel")
	}
	if (pw.installWps) {
		attFileType.put("application/kswps", "OfficeWord");
		attFileType.put(".wps", "OfficeWord");
		attFileType.put("application/msword", "OfficeWord");
		attFileType.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document", "OfficeWord");
		attFileType.put(".doc", "OfficeWord");
		attFileType.put(".docx", "OfficeWord")
	}
	if (pw.installEt) {
		attFileType.put("application/kset", "OfficeExcel");
		attFileType.put(".et", "OfficeExcel");
		attFileType.put("application/vnd.ms-excel", "OfficeExcel");
		attFileType.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "OfficeExcel");
		attFileType.put(".xls", "OfficeExcel");
		attFileType.put(".xlsx", "OfficeExcel")
	}
	pw.inited = true;
	if (typeof F !== "undefined" && (typeof JSON != "undefined")) {
		F.setItem(E, JSON.stringify(pw))
	}
}
function getMimeType(E, D) {
	var B = D.toLocaleLowerCase();
	var A = B.lastIndexOf(".");
	if (A != -1) {
		B = B.substring(A)
	}
	if (attFileType) {
		if (attFileType.get(E)) {
			return attFileType.get(E)
		}
		if (attFileType.get(B)) {
			return attFileType.get(B)
		}
	}
	return null
}
Attachment.prototype.show = function (D, B, A) {
	document.write(this.toString(D, B, A))
};
var allowTransType = ["doc", "docx", "xls", "xlsx", "ppt", "pptx", "rtf", "eio"];
Attachment.prototype.allowTrans = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var A = this.filename.toLowerCase();
	for (var B = 0; B < allowTransType.length; B++) {
		if (A.endsWith("." + allowTransType[B])) {
			return true
		}
	}
	return false
};
var imgType = ["jpg", "gif", "jpeg", "png", "bmp"];
Attachment.prototype.isImg = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var B = this.filename.toLowerCase();
	var A = B.lastIndexOf(".");
	A = B.substring(A + 1);
	for (var D = 0; D < imgType.length; D++) {
		if (A == imgType[D]) {
			return true
		}
	}
	return false
};
function initAttachmentImageShow() {
	var A = $(".attachmentImageShow");
	if (A.length > 0 && A.length == A.attr("imgLength")) {
		return
	}
	function B() {
		function G(P) {
			if (P.type != 0 && P.type != 3) {
				return false
			}
			var O = P.filename.toLowerCase();
			var N = O.lastIndexOf(".");
			N = O.substring(N + 1);
			for (var Q = 0; Q < imgType.length; Q++) {
				if (N == imgType[Q]) {
					return true
				}
			}
			return false
		}
		var H = new Array();
		var D = {};
		$(".comp").each(function () {
			var R = $(this);
			if (R.attrObj("_comp")) {
				R = R.attrObj("_comp")
			}
			var N = R.attr("comp"),
			Q,
			S;
			if (N) {
				Q = $.parseJSON("{" + N + "}");
				S = Q.type
			}
			if ("fileupload" === S) {
				var T = Q.attsdata ? Q.attsdata : R.attr("attsdata") ? $.parseJSON(R.attr("attsdata")) : null;
				if (T && T instanceof Array) {
					var O;
					for (var P = 0; P < T.length; P++) {
						O = T[P];
						if (O.type == 2) {
							continue
						}
						if (G(O)) {
							D[O.fileUrl] = {
								dataId: O.fileUrl,
								src: _ctxPath + "/fileUpload.do?method=showRTE&type=image&fileId=" + O.fileUrl + "&createdate=" + O.createdate.substring(0, 10) + "&filename=" + encodeURIComponent(O.filename)
							}
						}
					}
				}
			}
		});
		var M;
		var L = ["officeFrameDiv", "zwIframe", "mainbodyFrame", "officeDivInner"];
		for (var I = 0; I < L.length; I++) {
			var E = L[I];
			var J = document.getElementById(E);
			if (J) {
				M = J;
				break
			}
		}
		A.each(function () {
			var N = D[this.id];
			if (N !== undefined) {
				H.push(N)
			}
		}).attr("imgLength", H.length);
		if (H.length > 0) {
			var K = "";
			A.each(function (N, O) {
				var P = O.getAttribute("touchid");
				if (typeof P != "undefined" && P != null) {
					K = P;
					return
				}
			});
			if (K == "") {
				var F = new Date().getTime();
				K = H[0].dataId + F
			}
			A.attr("touchid", K);
			A.touch({
				id: K,
				datas: H,
				targetWindow: getCtpTop(),
				onShow: function () {
					if (M) {
						M.style.visibility = "hidden"
					}
					if (hideOfficeObj) {
						hideOfficeObj()
					}
				},
				onHide: function () {
					if (M) {
						M.style.visibility = "visible"
					}
					if (showOfficeObj) {
						showOfficeObj()
					}
				}
			})
		}
	}
	B()
}
var pdfType = ["pdf"];
Attachment.prototype.isPdf = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var A = this.filename.toLowerCase();
	for (var B = 0; B < pdfType.length; B++) {
		if (A.endsWith("." + pdfType[B])) {
			return true
		}
	}
	return false
};
Attachment.prototype.canEditOnline = function () {
	if (this.type != 0) {
		return false
	}
	var A = getMimeType(this.mimeType, this.filename);
	if (A) {
		return true
	}
	return false
};
Attachment.prototype.toString = function (V, B, H, X) {
	var S = _ctxPath;
	loadInit();
	var Z = "";
	var R = null;
	if (this.type != 2) {
		R = $("#attachmentArea" + this.showArea).prev()
	} else {
		R = $("#attachment2Area" + this.showArea).prev()
	}
	var f = "left";
	var T = ";height: " + attachmentConstants.height + "px; ";
	var b = "noWrap";
	var M = "";
	if (R && R.attr("comp") != undefined) {
		var J = $.parseJSON("{" + R.attr("comp") + "}");
		T = ((J.displayMode == undefined) ? T : ";");
		b = ((J.displayMode == undefined) ? b : "");
		if (!v3x.isMSIE8) {
			M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
		} else {
			if (J.type != "fileupload") {
				M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
			} else {
				if (J.canDeleteOriginalAtts == true) {
					M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
				}
			}
		}
	}
	this.filename = this.filename.replace(/&nbsp;/g, " ");
	var N = "";
	if (B) {
		N = "attachmentShowDelete"
	}
	if ($("#attachmentArea" + this.showArea).width() == 0) {
		var I = "auto"
	} else {
		var I = $("#attachmentArea" + this.showArea).width() + "px"
	}
	Z += "<div id='attachmentDiv_" + this.fileUrl2 + "' class='attachment_block" + N + "' style='font-size:12px; max-width:" + I + "; float:" + f + T + " line-height:22px;*line-height:22px;background:#e6eef7;padding:2px 10px;border-radius:3px; overflow:hidden; " + M + "' " + b + ' onmouseenter="onAttachmentMouseEnter(this)" onmouseleave="onAttachmentMouseLeave(this)">';
	var D = "";
	if (this.type != 1 && !this.isShowImg) {
		D += '&nbsp;<span style="word-wrap:break-word; word-break:break-all;" class="ico16 ' + this.icon.substring(0, this.icon.indexOf(".")) + '_16 margin_r_5"></span>'
	}
	var U = "";
	var P = "";
	if (this.isShowImg) {
		Z += "<img style=\"CURSOR: pointer\" onclick=\"openCtpWindow({'url':$(this).attr('src') + '&showType=small'})\" src=\"" + S + "/fileUpload.do?method=showRTE&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + '&type=image">'
	} else {
		if (V && (this.type == 0 || this.type == 3 || this.type == 5)) {
			if (this.type == 3) {
				U += "<a onclick='downloadAttachment(\"" + this.fileUrl2 + '","' + this.createDate.substring(0, 10) + '","' + escapeStringToHTML(this.filename) + '")\' title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' class='like-a'>"
			} else {
				U += '<a href="' + S + "/file" + (this.v ? "Download" : "Upload") + ".do?method=download&fileId=" + this.fileUrl2 + (this.v ? ("&v=" + this.v) : "") + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + CsrfGuard.getUrlSurffix() + '" title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;'>"
			}
		}
	}
	if (H && this.category != 2) {
		Z += "<a onclick=\"editOfficeOnline('" + this.id + '\')" title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' class='like-a'>";
		V = true
	}
	if ((this.type == 2 || this.type == 4) && this.description && (H != false)) {
		var Y = "";
		var G = "";
		if (this.type == 4) {
			try {
				if (parent.parent.openerSummaryId && parent.parent.openerSummaryId != this.reference) {
					G = "&openerSummaryId=" + parent.parent.openerSummaryId
				} else {
					if (noFlowRecordId) {
						G = "&noFlowRecordId=" + noFlowRecordId
					}
				}
			} catch (d) {}
		}
		if (this.mimeType == "collaboration") {
			Y = "openDetailURL('" + S + "/collaboration/collaboration.do?method=summary&openFrom=glwd&type=&affairId=" + this.description + "&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "')"
		}
		if (this.mimeType == "edoc") {
			Y = "openDetailURL('" + S + "/edocController.do?method=detailIFrame&from=Done&openFrom=glwd&affairId=" + this.description + "&isQuote=true&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "')"
		} else {
			if (this.mimeType == "km") {
				Y = "openDetailURL('" + S + "/doc.do?method=docOpenIframeOnlyId&openFrom=glwd&docResId=" + this.description + "&baseObjectId=" + this.reference + "&baseApp=" + this.category + G + CsrfGuard.getUrlSurffix() + "')"
			} else {
				if (this.mimeType == "meeting") {
					Y = "openDetailURL('" + S + "/mtMeeting.do?method=myDetailFrame&id=" + this.description + "&isQuote=true&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "&state=10')"
				} else {
					if (this.mimeType == "info") {
						Y = "openDetailURL('" + S + "/info/infoDetail.do?method=summary&baseObjectId=" + this.reference + "&refAffairId=" + this.description + CsrfGuard.getUrlSurffix() + "')"
					}
				}
			}
		}
		U += '<a class="hand" onclick="' + Y + '" title="' + escapeStringToHTML(this.filename) + "\" style='cursor: hand;font-size:12px;'>";
		V = true
	}
	if (this.type != 1 && this.category != 2) {
		var c = 15;
		if (!this.isShowImg) {
			if (this.filename.length > c) {
				P += this.filename.substring(0, c).escapeHTML() + ".."
			} else {
				P += this.filename.escapeHTML()
			}
		}
	} else {
		if (!this.isShowImg) {
			P += this.filename
		}
	}
	if (this.size && this.type == 0) {
		if (!this.isShowImg) {
			var K = "";
			if (this.size >= 1048576) {
				K = (parseInt(this.size / 1048576) + 1) + "MB"
			} else {
				K = (parseInt(this.size / 1024) + 1) + "KB"
			}
			P += "(" + K + ")"
		}
	}
	if (!this.isShowImg && this.embedInput != null && this.embedInput.indexOf("field") >= 0) {
		P = "<span id='" + this.embedInput + "_txt' style='line-height:normal'>" + P + "</span>"
	}
	var a = "";
	var F = "";
	var Q = "";
	var L = ' onmouseenter="onAttachmentButtonMouseenter(this)"  onmouseleave="onAttachmentButtonMouseleave(this)" ';
	if (V && !this.isShowImg) {
		F = '<td align="center"' + L + ">" + U + '<span class="ico24 download_24"> </span></a></td>'
	}
	if (typeof($.ctx) !== "undefined") {
		var O = $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("baseOfficeTrans") || $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("yongzhongOfficeTrans")
	}
	if (typeof(vPortal) !== "undefined") {
		var O = vPortal && vPortal.plugins.contains("baseOfficeTrans") || vPortal && vPortal.plugins && vPortal.plugins.contains("yongzhongOfficeTrans")
	}
	var O = ($ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("baseOfficeTrans") || $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("yongzhongOfficeTrans"));
	if (O && V && this.isCanTransform && this.allowTrans() && this.hasSaved) {
		a += "<td align='center'" + L + '><a href="' + S + "/officeTrans.do?method=view&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
	} else {
		if (this.hasSaved && this.isImg()) {
			a += "<td align='center'><a id =" + this.fileUrl2 + " onmouseenter='initAttachmentImageShow();' class ='attachmentImageShow' style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
		} else {
			if (this.hasSaved && this.isPdf()) {
				a += "<td align='center'><a onclick=preViewDialog(\"" + S + "/fileDownload.do?method=doDownload4Office&type=Pdf&isOpenFile=true&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + "&v=" + this.v + "\")   style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
			}
		}
	}
	if (typeof($.ctx) !== "undefined") {
		var A = $.ctx.plugins.contains("doc")
	}
	if (typeof(vPortal) !== "undefined") {
		var A = vPortal && vPortal.plugins.contains("doc")
	}
	if (A && seeyonProductId > 0 && this.hasSaved && this.canFavourite && this.type != 2 && !this.isShowImg) {
		var W = 'style="display: none;"',
		E = "";
		if (this.hasFavorite) {
			E = W;
			W = ""
		}
		Q += '<td align="center"' + L + '><span id="favoriteSpan' + this.fileUrl2 + '" class="ico24 unstore_24" ' + E + ' title="' + $.i18n("doc.jsp.knowledge.collection") + '" onclick="favorite(\'' + this.category + "', '" + this.fileUrl2 + "',false,4)\" > </span>";
		Q += '<span id="cancelFavorite' + this.fileUrl2 + '" class="ico24 stored_24" ' + W + ' title="' + $.i18n("doc.jsp.cancel.collection.js") + '" onclick="cancelFavorite(\'' + this.category + "', '" + this.fileUrl2 + "',false,4)\" > </span></td>"
	}
	if (!B && !this.isShowImg && !H && this.type != 2) {
		Z += '<div class="attachment_operate">';
		Z += '<table class="attachment_operate_btn"  title="' + escapeStringToHTML(this.filename) + '"  border="0" cellpadding="0" cellspacing="0">';
		Z += "<tr>";
		Z += Q;
		Z += F;
		Z += a;
		Z += "</tr>";
		Z += "</table>";
		Z += '<table class="attachment_operate_btn_bg" border="0" cellpadding="0" cellspacing="0">';
		Z += "<tr>";
		if (Q.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		if (F.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		if (a.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		Z += "</tr>";
		Z += "</table>";
		Z += '<div class="attachment_operate_bg">&nbsp;</div>';
		Z += "</div>"
	}
	//客开：徐矿集团【协同附件上传添加单选按钮】 chenqinag 20190328 start
	try{
		var index = this.filename.lastIndexOf(".");
		var title = this.filename.substring(0,index);
	    if(xkjtAttachmentHasRadio=="true" && canClick=="true"){
	    	
	    	Z += "<label for="+this.fileUrl+" class='margin_r_10 hand'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' title='"+title+"' fileName='"+this.filename+"'></label>";
		}else if(xkjtAttachmentHasRadio=="true" && canClick=="false"){
			if(this.fileUrl==mainAttachmentId){
		    	Z += "<label for="+this.fileUrl+" class='margin_r_10 hand'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' disabled='true' checked='checked' title='"+title+"' fileName='"+this.filename+"'></label>";
			}else{
		    	Z += "<label for="+this.fileUrl+" class='margin_r_10 hand'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' disabled='true' title='"+title+"' fileName='"+this.filename+"'></label>";
			}

		}
	}catch(e){

	}
	
	//客开：徐矿集团【协同附件上传添加单选按钮】 chenqinag 20190328 end
	if (this.type != 1 && !this.isShowImg) {
		Z += D
	}
	if (B) {
		Z += U
	} else {
		if (this.type == 2) {
			Z += U
		}
	}
	Z += P;
	if (B) {
		Z += '</a><span class="ico16 affix_del_16" title="' + $.i18n("common.button.delete.label") + '" onclick="deleteAttachment(\'' + this.fileUrl2 + "')\" ></span>"
	} else {
		Z += "</a>"
	}
	if ((B && this.canEditOnline() && this.id != undefined) && this.category == 2) {
		Z += '<iframe id=\'officeEditorIframe\' name=\'officeEditorIframe\' frameborder="0" height="0" width="0" scrolling="no" marginheight="0" marginwidth="0"></iframe>';
		Z += '<span id="editOnline_' + this.id + '" > <a class="hand" title = "' + $.i18n("common.toolbar.edit.label") + '" onclick="editOfficeOnline4Form(\'' + this.id + "','" + this.fileUrl + "','" + this.filename + "','" + this.mimeType + "','" + this.category + "','" + this.createDate + '\')"><span class="ico16 editor_16"></span></a></span>'
	}
	Z += "&nbsp;</div>";
	return Z
};
var isAttachmentFavoriteStateInited = false;
function initAttachmentFavoriteState() {
	if (isAttachmentFavoriteStateInited) {
		return
	}
	var A = [];
	$(".attachment_block").each(function () {
		var B = this.id.split("_");
		if (B.length == 2) {
			A.push(B[1])
		}
	});
	callBackendMethod("knowledgeFavoriteManager", "hasFavoriteByIds", A, {
		success: function (B) {
			if (B != null) {
				for (var D = 0; D < A.length; D++) {
					if (B[D]) {
						$("#cancelFavorite" + A[D]).show();
						$("#favoriteSpan" + A[D]).hide()
					}
				}
			}
		},
		error: function (B) {
			if (console && console.log) {
				console.log("Ajax Failed: knowledgeFavoriteManager--->hasFavoriteByIds")
			}
		}
	});
	isAttachmentFavoriteStateInited = true
}
function onAttachmentMouseEnter(B) {
	initAttachmentFavoriteState();
	var E = $(B);
	if (navigator.userAgent.indexOf("Firefox") > -1 && E.attr("isSetWidth") != "yes") {
		E.width(parseFloat(E.width()) + 1).attr("isSetWidth", "yes");
		var A = E.css("white-space");
		if (A != null) {
			E.css("white-space", A)
		}
	}
	var D = E.find(".attachment_operate_btn td").size();
	E.find("td").width(E.width() / D);
	E.find(".attachment_operate").show();
	E.find(".attachment_operate_bg").css("filter", "alpha(opacity = 30)")
}
function onAttachmentMouseLeave(A) {
	$(A).find(".attachment_operate").hide()
}
function onAttachmentButtonMouseenter(A) {
	var B = $(A);
	B.parent().closest(".attachment_block").find(".attachment_operate_btn_bg div").eq(B.index()).show()
}
function onAttachmentButtonMouseleave(A) {
	var B = $(A);
	B.parent().closest(".attachment_block").find(".attachment_operate_btn_bg div").hide()
}
function editOfficeOnline4Form(I, A, B, H, G, F) {
	getCtpTop().needShowContent = true;
	var E = getMimeType(H, B);
	B = encodeURIComponent(B);
	var D = _ctxServer + "/genericController.do?ViewPage=ctp/common/fileUpload/officeEdit&id=" + I + "&content=" + A + "&bodyType=" + E + "&createDate=" + F + "&category=" + G + "&filename=" + B;
	officeEditorIframe.location.href = D
}
function deleteAtt4Form(B) {
	var A = B.getAttribute ? B.getAttribute("fileUrl") : B.fileUrl;
	var D = B.getAttribute ? B.getAttribute("fileName") : B.fileName;
	deleteAttachmentForForm(A, D)
}
function openDetailURL(A) {
	var B = v3x.openWindow({
			url: A,
			dialogType: "open",
			workSpace: "yes"
		})
}
Attachment.prototype.toInput = function () {
	var A = "";
	A += "<input type='hidden' name='attachment_id' value='" + this.id + "'>";
	A += "<input type='hidden' name='attachment_reference' value='" + this.reference + "'>";
	A += "<input type='hidden' name='attachment_subReference' value='" + this.subReference + "'>";
	A += "<input type='hidden' name='attachment_category' value='" + this.category + "'>";
	A += "<input type='hidden' name='attachment_type' value='" + this.type + "'>";
	A += "<input type='hidden' name='attachment_filename' value='" + escapeStringToHTML(this.filename) + "'>";
	A += "<input type='hidden' name='attachment_mimeType' value='" + this.mimeType + "'>";
	A += "<input type='hidden' name='attachment_createDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='attachment_size' value='" + this.size + "'>";
	A += "<input type='hidden' name='attachment_fileUrl' value='" + this.fileUrl + "'>";
	A += "<input type='hidden' name='attachment_description' value='" + this.description + "'>";
	A += "<input type='hidden' name='attachment_needClone' value='" + this.needClone + "'>";
	A += "<input type='hidden' name='attachment_extReference' value='" + this.extReference + "'>";
	A += "<input type='hidden' name='attachment_extSubReference' value='" + this.extSubReference + "'>";
	return A
};
Attachment.prototype.toContentInput = function () {
	var A = "";
	A += "<input type='hidden' name='content_attachment_id' value='" + this.id + "'>";
	A += "<input type='hidden' name='content_attachment_reference' value='" + this.reference + "'>";
	A += "<input type='hidden' name='content_attachment_subReference' value='" + this.subReference + "'>";
	A += "<input type='hidden' name='content_attachment_category' value='" + this.category + "'>";
	A += "<input type='hidden' name='content_attachment_type' value='" + this.type + "'>";
	A += "<input type='hidden' name='content_attachment_filename' value='" + escapeStringToHTML(this.filename) + "'>";
	A += "<input type='hidden' name='content_attachment_mimeType' value='" + this.mimeType + "'>";
	A += "<input type='hidden' name='content_attachment_createDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='content_attachment_size' value='" + this.size + "'>";
	A += "<input type='hidden' name='content_attachment_fileUrl' value='" + this.fileUrl + "'>";
	A += "<input type='hidden' name='content_attachment_description' value='" + this.description + "'>";
	A += "<input type='hidden' name='content_attachment_needClone' value='" + this.needClone + "'>";
	return A
};
Attachment.prototype.toJson = function () {
	return '{id:"' + this.id + '", reference:"' + this.reference + '", subReference:"' + this.subReference + '", category:"' + this.category + '", type:"' + this.type + '", filename:"' + escapeStringToHTML(this.filename) + '", mimeType:"' + this.mimeType + '", createDate:"' + this.createDate + '", size:"' + this.size + '", fileUrl:"' + this.fileUrl + '", description:"' + this.description + '", needClone:"' + this.needClone + '",extension:"' + this.extension + '",icon:"' + this.icon + '",extReference:"' + this.extReference + '",extSubReference:"' + this.extSubReference + '"}'
};
function showAttachment(L, K, B, A, E) {
	try {
		if (!theToShowAttachments) {
			return
		}
		var D = 0;
		var J = "";
		for (var F = 0; F < theToShowAttachments.size(); F++) {
			var I = theToShowAttachments.get(F);
			if (I.subReference == L && I.type == K) {
				J += I.toString(true, false);
				D++
			}
		}
		if (!E) {
			document.write(J);
			document.close()
		} else {
			var N = document.getElementById(E);
			N.innerHTML = J
		}
		if (D > 0) {
			if (B) {
				var M = document.getElementById(B);
				if (M) {
					M.style.display = ""
				}
			}
			if (A) {
				var G = document.getElementById(A);
				if (G) {
					G.innerHTML = "" + D
				}
			}
		} else {
			if (B) {
				var M = document.getElementById(B);
				if (M) {
					M.style.display = "none"
				}
			}
		}
		if (A) {
			var G = document.getElementById(A);
			if (G) {
				G.innerHTML = "" + D
			}
		}
	} catch (H) {}
}
function exportAttachment(D) {
	if (D.getAttribute("expand")) {
		return
	}
	var B = D.className;
	D.className = "div-float";
	var A = D.scrollHeight;
	if (A >= (attachmentConstants.height * 2)) {
		D.className = "attachment-all-80"
	} else {
		D.className = B
	}
	D.setAttribute("expand", "yes")
}
var fileUploadAttachments = new Properties();
var fileUploadAttachment = null;
var fileUploadQuantity = 5;
var attachObject = "";
var atttachTr = "";
var attachDelete;
var attachCount = true;
var theHasDeleteAtt = new Properties();
var attFileType = new Properties();
function isUploadAttachment() {
	return !fileUploadAttachments.isEmpty()
}
function resetAttachment(E, B, D, A) {
	attachObject = E;
	atttachTr = B;
	attachDelete = D;
	attachCount = A;
	fileUploadAttachment = new Properties()
}
function clearUploadAttachments() {
	attachObject = "";
	atttachTr = "";
	attachDelete = null;
	attachCount = true;
	fileUploadAttachment.clear();
	fileUploadAttachment = null
}
function saveAttachment(B, F) {
	var G = null;
	if (fileUploadAttachment != null) {
		G = fileUploadAttachment.values()
	} else {
		G = fileUploadAttachments.values()
	}
	var E = B || document.getElementById("attachmentInputs") || document.getElementById("attachmentEditInputs");
	var A = "";
	for (var D = 0; D < G.size(); D++) {
		A += G.get(D).toInput()
	}
	if (E) {
		E.innerHTML = A;
		if (!F || F != "false") {
			if (attActionLog && !fileUploadAttachments.isEmpty()) {
				E.innerHTML += "<input type='hidden' name='isEditAttachment' value='1'/>"
			}
		}
	} else {
		alert("Warn: Save attachments unsuccessful");
		return false
	}
	return true
}
function saveAttachmentPart(F) {
	var H = null;
	if (fileUploadAttachment != null) {
		H = fileUploadAttachment.values()
	} else {
		H = fileUploadAttachments.values()
	}
	if (F) {
		var E = $("#" + F);
		var D = $.parseJSON("{" + E.attr("comp") + "}");
		var G = D.attachmentTrId;
		var A = "";
		for (var B = 0; B < H.size(); B++) {
			if (G == H.get(B).showArea) {
				A += H.get(B).toInput()
			}
		}
		E.append($(A))
	} else {
		alert("ERROR: \u4f20\u5165\u53c2\u6570\u9519\u8bef\uff01");
		return false
	}
	return true
}
function saveContentAttachment(B) {
	var F = null;
	if (fileUploadAttachment != null) {
		F = fileUploadAttachment.values()
	} else {
		F = fileUploadAttachments.values()
	}
	var A = "";
	for (var D = 0; D < F.size(); D++) {
		A += F.get(D).toContentInput()
	}
	var E = B || parent.detailRightFrame.document.getElementById("contentAttachmentInputs");
	if (E) {
		E.innerHTML = A;
		E.innerHTML += "<input type='hidden' name='isContentAttchmentChanged' value='1'>"
	} else {
		alert("Warn: Save attachments unsuccessful");
		return false
	}
	return true
}
function getAttachmentsToMap() {
	var D = fileUploadAttachments.values();
	if (!D || D.isEmpty()) {
		return true
	}
	var A = "";
	for (var B = 0; B < D.size(); B++) {
		A += D.get(B).toMap()
	}
	if (A != null) {
		return A
	}
}
Attachment.prototype.toMap = function () {
	var A = "#attachment_id=" + this.id + ";";
	A += "attachment_reference" + this.reference + ";";
	A += "attachment_subReference=" + this.subReference + ";";
	A += "attachment_category=" + this.category + ";";
	A += "attachment_type=" + this.type + ";";
	A += "attachment_filename=" + escapeStringToHTML(this.filename) + ";";
	A += "attachment_mimeType=" + this.mimeType + ";";
	A += "attachment_createDate=" + this.createDate + ";";
	A += "attachment_size=" + this.size + ";";
	A += "attachment_fileUrl=" + this.fileUrl + ";";
	A += "attachment_description=" + this.description + ";";
	A += "attachment_needClone=" + this.needClone + ";";
	return A
};
function cloneAllAttachments() {
	var B = fileUploadAttachments.values();
	for (var A = 0; A < B.size(); A++) {
		B.get(A).needClone = true
	}
}
function deleteAttachment(fileUrl, showAlert) {
	var file = fileUploadAttachments.get(fileUrl);
	if (file == null) {
		return
	}
	if (showAlert != false) {
		if (file.type == 2) {
			if (!confirm($.i18n("assdoc.isdeletesomeone.mesg").format(file.filename))) {
				return 1
			}
		} else {
			if (!confirm($.i18n("common.isdeletesomeone.label").format(file.filename))) {
				return 1
			}
		}
	}
	//客开：徐矿集团【删除主附件时清空标题】 chenqiang 2019年3月28日 start
    var fileName = file.filename;
    var hadChoosed = $("input[name='option']:checked").attr("filename");//是否勾选
    if(hadChoosed!=undefined){
    	if(hadChoosed==fileName){
        	document.getElementById("subject").value = "";
        }
    }
    //客开：徐矿集团【删除主附件时清空标题】 chenqiang 2019年3月28日 end
	fileUploadAttachments.remove(fileUrl);
	document.getElementById("attachmentDiv_" + fileUrl).parentNode.removeChild(document.getElementById("attachmentDiv_" + fileUrl));
   
	showAttachmentNumber(file.type, file);
	var num = getFileAttachmentNumber(file.type, file.showArea);
	if (num < 1) {
		if (!(typeof(_updateAttachmentState) != "undefined" && _updateAttachmentState)) {
			showAtachmentTR(file.type, "none", file.showArea)
		}
	}
	var attachmentInputsObj = document.getElementById("attachmentInputs");
	var canUpdateAttachmentFromSended = document.getElementById("canUpdateAttachmentFromSended");
	if (canUpdateAttachmentFromSended && canUpdateAttachmentFromSended.value == "submit") {
		updateAttachment("del", attachmentInputsObj)
	}
	if (typeof(removeChanged) != "undefined") {
		removeChanged = true
	}
	try {
		quoteDocumentFrame.window.deselectItem(fileUrl)
	} catch (e) {}
	try {
		var attdiv = "attachment2Area";
		if (file.showArea != null) {
			attdiv += file.showArea
		}
		eval($("#" + attdiv).attr("callMethod"))()
	} catch (e) {}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
	try {
		var attdiv = "attachmentArea";
		if (file.showArea != null) {
			attdiv += file.showArea
		}
		eval($("#" + attdiv).attr("delCallMethod"))(fileUrl)
	} catch (e) {}
}
function deleteAttachmentForImage(A, D) {
	deleteAttachment(A, D);
	var B = document.getElementById("imageId");
	if (B) {
		B.value = ""
	}
}
function dymcCreateFileUpload(L, S, T, J, D, G, P, R, N, O, F, B, E, M) {
	var A = _ctxPath + "/fileUpload.do?type=" + ((R == null) ? "" : ("&firstSave=" + R)) + "&applicationCategory=" + S + "&extensions=" + ((T == null) ? "" : T) + ((J == null) ? "" : ("&quantity=" + J)) + ((D == null) ? "" : ("&isEncrypt=" + D)) + ((P == null) ? "" : ("&attachmentTrId=" + P)) + ((G == null) ? "" : ("&callMethod=" + G)) + ((E == null) ? "" : ("&maxSize=" + E)) + ((B == null) ? "" : ("&takeOver=" + B));
	var I = false;
	try {
		var K = new ActiveXObject("UFIDA_Upload.A8Upload.2");
		K.SetLimitFileSize(1024);
		I = true
	} catch (Q) {
		I = false
	}
	A += ((!I) ? "" : ("&isA8geniusAdded=" + I));
	var H = "<div id='attachmentArea" + ((P == null) ? "" : P) + "' style=\"overflow: auto;\" requrl='" + A + "'></div>";
	if ($("#downloadFileFrame").length == 0) {
		H = H + '<div style="display:none;"><iframe name="downloadFileFrame" id="downloadFileFrame" frameborder="0" width="0" height="0"></iframe></div>'
	}
	$("#" + L).replaceWith(H);
	parseAttData(O, P, true, N, F, M)
}
function parseAttData(I, H, G, B, E, F) {
	if (I != null && I != "") {
		I = $.parseJSON(I)
	}
	if (I && I instanceof Array) {
		var A;
		for (var D = 0; D < I.length; D++) {
			A = I[D];
			if (G) {
				if (A.type == 2) {
					continue
				}
			} else {
				if (A.type != 2) {
					continue
				}
			}
			if (F == null) {
				F = true
			}
			if (H) {
				addAttachmentPoi(A.type, A.filename, A.mimeType, A.createdate ? A.createdate.toString() : null, A.size, A.fileUrl, B, E, A.description, A.extension, A.icon, H, A.reference, A.category, false, null, "", true, A.officeTransformEnable, A.v, F)
			} else {
				addAttachment(A.type, A.filename, A.mimeType, A.createdate ? A.createdate.toString() : null, A.size, A.fileUrl, B, E, A.description, A.extension, A.icon, A.reference, A.category, false, null, true, A.officeTransformEnable, A.v, F)
			}
		}
	}
}
function dymcCreateAssdoc(E, H, A, G, F, D) {
	var B = '<div id="attachment2Area' + (H ? H : "") + '" poi="' + (H ? H : "") + '" requestUrl="' + _ctxPath + "/ctp/common/associateddoc/assdocFrame.do?isBind=" + (A ? A : "") + "&referenceId=" + (F ? F : "") + "&applicationCategory=" + (D ? D : "") + "&poi=" + (H ? H : "") + '" style="overflow: auto;"></div>';
	$("#" + E).replaceWith(B);
	parseAttData(G, H, false)
}
function insertAttachment(D, B) {
	var A = $("#attachmentArea").attr("requrl");
	if (D != null && D != "") {
		A += "&targetAction=" + D
	}
	if (B) {
		A += "&importExplain=" + B
	}
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("fileupload.page.title"),
			transParams: {
				parentWin: window
			},
			url: A + CsrfGuard.getUrlSurffix(A),
			width: 400,
			height: 250
		})
}
function preViewDialog(A) {
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("officeTrans.view.label"),
			transParams: {
				parentWin: window
			},
			url: A,
			width: 1280,
			height: 800
		})
}
function insertAttachmentPoi(D) {
	//客开：徐矿集团【协同附件是否添加单选按钮】 chenqiang 2019年4月1日  start
	try{
		xkjtAttachmentHasRadio = "true";
	}catch(e){
		
	}
	
	//客开：徐矿集团【协同附件是否添加单选按钮】 chenqiang 2019年4月1日  start
	var B = "attachmentArea" + D;
	var A = $("#" + B).attr("requrl");
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("fileupload.page.title"),
			transParams: {
				parentWin: window
			},
			url: A + CsrfGuard.getUrlSurffix(A),
			width: 400,
			height: 250
		})
}
function quoteDocument(E) {
	if (v3x.getBrowserFlag("OpenDivWindow") == true) {
		var D = "attachment2Area";
		if (E != undefined) {
			D += E
		}
		var A = $("#" + D).attr("requestUrl");
		try {
			hideOfficeObj()
		} catch (B) {}
		getCtpTop().addassDialog = null;
		getCtpTop().addassDialog = getCtpTop().$.dialog({
				title: $.i18n("common.mydocument.label"),
				transParams: {
					parentWin: window,
					divid: E
				},
				url: A + CsrfGuard.getUrlSurffix(A),
				width: 1000,
				height: 800
			})
	}
}
function quoteDocumentCallback(atts, divid) {
	var attdiv = "attachment2Area";
	if (divid != undefined) {
		attdiv += divid
	}
	if (atts) {
		deleteAllAttachment(2, $("#" + attdiv).attr("poi"));
		for (var i = 0; i < atts.length; i++) {
			var att = atts[i];
			if ($("#" + attdiv).attr("poi") == att.showArea) {
				addAttachmentPoi(att.type, att.filename, att.mimeType, att.createDate, att.size, att.fileUrl, true, false, att.description, null, att.mimeType + ".gif", $("#" + attdiv).attr("poi"), att.reference, att.category, null, null, $("#" + attdiv).attr("embedInput"))
			}
		}
		if ($("#" + attdiv).attr("callMethod")) {
			try {
				eval($("#" + attdiv).attr("callMethod"))()
			} catch (e) {}
		}
	}
	if (typeof(setCssOverFlow) == "function") {
		setCssOverFlow()
	}
}
function favorite(A, F, E, D, B) {
	getA8Top().dialog = $.dialog({
			id: "docFavoriteDialog",
			url: _ctxPath + "/doc/knowledgeController.do?method=toFavorite&sourceId=" + F + "&appName=" + A + "&hasAtts=" + E + "&favoriteType=" + D + "&t=" + getUUID(),
			isClear: false,
			targetWindow: getA8Top(),
			width: 300,
			height: 95,
			closeParam: {
				show: true,
				handler: function () {
					try {
						hideMask()
					} catch (G) {}
					getA8Top().dialog.getReturnValue()
				}
			},
			title: $.i18n("doc.collect")
		});
	favoriteTip(true, F, B)
}
function cancelFavorite(A, G, F, E, D) {
	if (typeof(D) === "undefined") {
		D = ""
	}
	var B = $("#cancelFavorite" + String(G) + String(D));
	B.attr("disabled", "disabled");
	B.jsonSubmit({
		action: _ctxPath + "/doc/knowledgeController.do?method=favoriteCancel",
		paramObj: {
			docId: -1,
			sourceId: G
		},
		callback: function (H) {
			favoriteTip(false, G, D)
		}
	})
}
function favoriteTip(E, F, A, D, B) {
	if (typeof(F) === "undefined") {
		F = ""
	}
	if (typeof(A) !== "undefined") {
		F = String(F) + String(A)
	}
	if (!D) {
		D = $.i18n("doc.cancel.collect.success.js")
	}
	if (typeof(B) === "undefined") {
		B = -30
	}
	if (E) {
		$("#favoriteSpan" + F).hide();
		$("#cancelFavorite" + F).show()
	} else {
		new MxtTip({
			targetId: "cancelFavorite" + F,
			content: D,
			offsetTop: B,
			targetWindow: getA8Top(),
			beforeShowCallBack: function () {
				$("#favoriteSpan" + F).show();
				$("#cancelFavorite" + F).hide();
				$("#cancelFavorite" + F).removeAttr("disabled")
			}
		})
	}
	return
}
function addAttachment(E, S, G, F, O, N, U, D, T, I, V, H, R, A, Q, K, B, M, L, P) {
	U = U == null ? true : U;
	D = D == null ? false : D;
	T = T == null ? "" : T;
	if (attachDelete != null) {
		U = attachDelete
	}
	if (!H) {
		H = ""
	}
	if (!R) {
		R = ""
	}
	if (N == null) {
		N = S
	}
	var J = new Attachment("", H, "", R, E, S, G, F, O, N, T, D, I, V, A, B, M);
	J.hasSaved = K;
	J.hasFavorite = P;
	if (L != null) {
		J.canFavourite = L
	}
	if (fileUploadAttachment != null) {
		if (fileUploadAttachment.containsKey(N)) {
			return
		}
		fileUploadAttachment.put(N, J)
	} else {
		if (fileUploadAttachments.containsKey(N)) {
			return
		}
		fileUploadAttachments.put(N, J)
	}
	showAtachmentObject(J, U, Q);
	showAtachmentTR(E, "", "");
	if (attachCount) {
		showAttachmentNumber(E, J)
	}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
}
function addAttachmentPoi(E, W, G, F, Q, O, Y, D, X, J, Z, P, I, V, A, U, T, L, B, N, M, H, S, R) {
	Y = Y == null ? true : Y;
	D = D == null ? false : D;
	X = X == null ? "" : X;
	if (attachDelete != null) {
		Y = attachDelete
	}
	if (O == null) {
		if (X != null && X != "") {
			O = X
		} else {
			O = W
		}
	}
	var K = new Attachment(S, I, P, V, E, W, G, F, Q, O, X, D, J, Z, false, B, N);
	K.showArea = P;
	K.embedInput = T;
	K.hasSaved = L;
	K.hasFavorite = R;
	if (M != null) {
		K.canFavourite = M
	}
	if (H != null) {
		K.isShowImg = H
	}
	if (fileUploadAttachment != null) {
		if (fileUploadAttachment.containsKey(O)) {
			return
		}
		fileUploadAttachment.put(O, K)
	} else {
		if (fileUploadAttachments.containsKey(O)) {
			O += P
		}
		fileUploadAttachments.put(O, K)
	}
	showAtachmentObject(K, Y, null);
	var a = K;
	if ($("#" + a.embedInput).size() > 0) {
		$("#attachmentArea" + a.showArea).prev().children("#" + a.embedInput).attr("value", P);
		$("#attachment2Area" + a.showArea).prev().children("#" + a.embedInput).attr("value", P)
	}
	showAtachmentTR(E, "", P);
	if (attachCount) {
		showAttachmentNumber(E, K)
	}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
}
function AttActionLog(A, E, B, D) {
	this.reference = A;
	this.subReference = E;
	this.logs = B;
	this.editAtt = D
}
AttActionLog.prototype.toInput = function () {
	var A = "";
	if (this.logs && !this.logs.isEmpty()) {
		A += "<input type='hidden' name='reference' value='" + this.reference + "'>";
		A += "<input type='hidden' name='subReference' value='" + this.subReference + "'>";
		A += "<input type='hidden' name='isEditAttachment' value='1'/>";
		A += "<input type='hidden' name='editAttachmentSize' value='" + this.editAtt.size() + "'/>";
		for (var B = 0; B < this.logs.size(); B++) {
			A += this.logs.get(B).toInput()
		}
		for (var B = 0; B < this.editAtt.size(); B++) {
			A += this.editAtt.get(B).toInput()
		}
	}
	return A
};
function ActionLog(D, A, B) {
	this.action = D;
	this.createDate = A;
	this.des = B
}
ActionLog.prototype.toInput = function () {
	var A = "";
	A += "<input type='hidden' name='logAction' value='" + this.action + "'>";
	A += "<input type='hidden' name='logCreateDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='logDesc' value='" + this.des + "'>";
	return A
};
function copyActionLog(B) {
	var A = new ActionLog(B.action, B.createDate, B.des);
	return A
}
function copyAttachment(B) {
	var A = new Attachment(B.id, B.reference, B.subReference, B.category, B.type, B.filename, B.mimeType, B.createDate, B.size, B.fileUrl, B.description, B.needClone, B.extension, B.icon);
	A.onlineView = B.onlineView;
	A.extReference = B.extReference;
	A.v = B.v;
	A.extSubReference = B.extSubReference;
	return A
}
var attActionLog = null;
function editAttachments(G, D, K, A) {
	if (attActionLog == null) {
		attActionLog = new AttActionLog(D, K, null, G)
	}
	D = D || "";
	K = K || "";
	var L = v3x.openWindow({
			url: getA8Top().v3x.baseURL + "/genericController.do?ViewPage=apps/collaboration/fileUpload/attEdit&category=" + A + "&reference=" + D + "&subReference=" + K + "&_isModalDialog=true",
			width: 550,
			height: 430,
			resizable: "yes"
		});
	if (L) {
		var B = new ArrayList();
		var F = L[0].instance;
		for (var E = 0; E < F.length; E++) {
			var I = copyAttachment(F[E]);
			I.onlineView = false;
			B.add(I)
		}
		var J = new ArrayList();
		F = L[1].instance;
		if (F.length == 0) {
			return false
		}
		for (var E = 0; E < F.length; E++) {
			var I = copyActionLog(F[E]);
			J.add(I)
		}
		var H = saveEditAttachments(J, B);
		if (!H) {
			return null
		}
		return attActionLog.editAtt
	}
	return null
}
function saveEditAttachments(B, A) {
	if (!attActionLog || B.size() == 0) {
		return false
	}
	if (attActionLog.logs) {
		attActionLog.logs.addList(B)
	} else {
		attActionLog.logs = B
	}
	attActionLog.editAtt = A;
	return true
}
function getAttachment(B, G, F) {
	var A = new ArrayList();
	for (var E = 0; E < theToShowAttachments.size(); E++) {
		var D = theToShowAttachments.get(E);
		if (((B && D.reference == B) || !B) && ((G && D.subReference == G) || !G) && ((F && D.type == F) || !F)) {
			A.add(D)
		}
	}
	return A
}
function updateAttachmentMemory(D, A, H, F) {
	var G = getAttachment(A, H, F);
	for (var E = 0; E < G.size(); E++) {
		var B = G.get(E);
		theToShowAttachments.remove(B)
	}
	for (var E = 0; E < D.size(); E++) {
		theToShowAttachments.add(D.get(E))
	}
}
function updateAttachment(A, B) {
	saveContentAttachment(B);
	updateAttachmentOnly(A)
}
function updateAttachmentOnly(A) {
	$("#attchmentForm").ajaxSubmit({
		url: genericURL + "?method=updateAttachment&edocSummaryId=" + edocSummaryId + "&affairId=" + affairId,
		type: "POST",
		success: function (B) {}
	})
}
function deleteAllAttachment(B, H) {
	var E = fileUploadAttachments.keys();
	for (var D = 0; D < E.size(); D++) {
		var A = fileUploadAttachments.get(E.get(D));
		if (A.type == B) {
			if (H != undefined && H != A.showArea) {
				continue
			}
			fileUploadAttachments.remove(E.get(D));
			D -= 1
		}
	}
	var I = "attachmentArea";
	if (B != 0) {
		I = "attachment" + B + "Area"
	}
	if (H != undefined) {
		I = I + H
	}
	var G = document.getElementById(I);
	if (G) {
		G.style.display = "";
		G.innerHTML = ""
	}
	var I = "attachmentTR";
	if (B != 0) {
		I = "attachment" + B + "TR"
	}
	if (H != undefined) {
		I = I + H
	}
	var F = document.getElementById(I);
	if (F) {
		F.style.display = "none"
	}
}
function showUpdateAttachment(K) {
	if (_updateAttachmentState) {
		return
	}
	var M = document.getElementById("attachmentTr");
	if (M) {
		M.style.display = ""
	}
	var H = document.getElementById("normalText");
	if (H) {
		H.style.display = "none"
	}
	var E = document.getElementById("uploadAttachmentTR");
	if (E) {
		E.style.display = ""
	}
	if (!theToShowAttachments) {
		return
	}
	var F = document.getElementById("attachmentArea");
	var A = document.getElementById("attachment2Area");
	var D = _ctxPath;
	for (var G = 0; G < theToShowAttachments.size(); G++) {
		var J = theToShowAttachments.get(G);
		if (J.type == 0 && J.type == K) {
			var I = document.getElementById("attachmentDiv_" + J.fileUrl);
			if (I) {
				var L = I.getElementsByTagName("a");
				if (L) {
					var B = '<span class="ico16 affix_del_16" onclick="deleteAttachment(\'' + J.fileUrl + "')\" ></span>";
					L[0].insertAdjacentHTML("afterEnd", B)
				}
			}
		} else {
			if (J.type == 2 && J.type == K) {
				var I = document.getElementById("attachmentDiv_" + J.fileUrl);
				if (I) {
					var L = I.getElementsByTagName("a");
					if (L) {
						var B = '<span class="ico16 affix_del_16" onclick="deleteAttachment(\'' + J.filename + "')\" ></span>";
						L[0].insertAdjacentHTML("afterEnd", B)
					}
				}
			}
		}
	}
	_updateAttachmentState = true
}
function showAtachmentObject(E, A, B) {
	if (!E) {
		return
	}
	var G = "attachmentArea";
	if (E.type != 0) {
		G = "attachment" + E.type + "Area"
	}
	if (E.showArea != "") {
		G = G + E.showArea
	}
	if (attachObject) {
		G = attachObject
	}
	var D = document.getElementById(G);
	var F = $("div[id='" + G + "']");
	if (F.length > 1) {
		F[F.length - 1].style.display = "";
		F[F.length - 1].innerHTML += E.toString(true, A, undefined, B)
	} else {
		if (D) {
			D.style.display = "";
			D.innerHTML += E.toString(true, A, undefined, B);
			if ($.browser.msie && (parseInt($.browser.version, 10) < 9) && $(D).parent(".edit_class").length > 0) {
				setTimeout(function () {
					$(D).css("display", "inline-block")
				}, 300)
			}
		}
		$(".attachment_operate td>a").each(function () {
			$(this).css({
				display: "inline-block",
				width: "100%",
				height: "100%"
			})
		})
	}
}
function showAtachmentTR(B, A, E) {
	var F = "attachmentTR";
	if (B != 0) {
		F = "attachment" + B + "TR"
	}
	if (atttachTr) {
		F = atttachTr
	}
	if (E != "") {
		F += E
	}
	var D = document.getElementById(F);
	if (D) {
		A = A || "";
		D.style.display = A
	}
}
function showAttachmentNumber(B, A) {
	var F = "attachmentNumberDiv";
	if (B != 0) {
		F = "attachment" + B + "NumberDiv"
	}
	if (A.showArea != "") {
		F = F + A.showArea
	}
	var D = document.getElementById(F);
	if (D) {
		try {
			D.innerText = getFileAttachmentNumber(B, A.showArea)
		} catch (E) {}
	}
}
function getFileAttachmentNumber(D, A) {
	var F = 0;
	var E = fileUploadAttachments.values();
	if (!E) {
		return F
	}
	for (var B = 0; B < E.size(); B++) {
		if (E.get(B).type == D && E.get(B).showArea == A) {
			F++
		}
	}
	return F
}
function getFileAttachmentName(D) {
	var F = fileUploadAttachments.values();
	if (!F) {
		return ""
	}
	var E = "";
	for (var B = 0; B < F.size(); B++) {
		var A = F.get(B);
		if (A.type == D) {
			E += "<div id='attachmentDiv_" + A.fileUrl + "' style='float: left;px; line-height: 14px;' noWrap>";
			E += "<img src='" + v3x.baseURL + "/common/images/attachmentICON/" + A.icon + "' border='0' height='16' width='16'                                                    align='absmiddle' style='margin-right: 3px;'/>";
			E += escapeStringToHTML(A.filename);
			E += "&nbsp;</div>"
		}
	}
	return E
}
function getSenderAttachmentName(A, E) {
	var G = parent.theToShowAttachments;
	if (!G) {
		return ""
	}
	var F = "";
	for (var D = 0; D < G.size(); D++) {
		var B = G.get(D);
		if (B.type == E && B.subReference == A) {
			F += "<div id='attachmentDiv_" + B.fileUrl + "' style='float: left;height: " + attachmentConstants.height + "px; line-height: 14px;' noWrap>";
			F += "<img src='" + v3x.baseURL + "/common/images/attachmentICON/" + B.icon + "' border='0' height='16' width='16'                                                    align='absmiddle' style='margin-right: 3px;'/>";
			F += B.filename;
			F += "&nbsp;</div>"
		}
	}
	return F
}
function Element(E, H, D, B, G, A, F) {
	this.type = E;
	this.id = H;
	this.name = D;
	this.typeName = B;
	this.accountId = G || "";
	this.accountShortname = A || "";
	this.description = F;
	this.externalType = "0";
	this.entity = null;
	this.isEnabled = true;
	this.excludeChildDepartment = false
}
Element.prototype.copy = function (A) {
	this.type = A.type;
	this.id = A.id;
	this.name = A.name;
	this.typeName = A.typeName;
	this.accountId = A.accountId;
	this.accountShortname = A.accountShortname;
	this.description = A.description;
	this.externalType = A.externalType;
	this.isEnabled = A.isEnabled;
	this.excludeChildDepartment = A.excludeChildDepartment
};
Element.prototype.toString = function () {
	return this.type + "\t" + this.id + "\t" + this.name + "\t" + this.typeName + "\t" + this.accountId + "\t" + this.accountShortname
};
function getNamesString(F, B) {
	if (!F) {
		return ""
	}
	var E = v3x.getMessage("V3XLang.common_separator_label") || B;
	var H = [];
	for (var D = 0; D < F.length; D++) {
		var G = F[D];
		var A = null;
		if (G.accountShortname) {
			A = G.name + "(" + G.accountShortname + ")"
		} else {
			A = G.name
		}
		H[H.length] = A
	}
	return H.join(E)
}
function getFullNamesString(A) {
	if (!A) {
		return ""
	}
	var B = v3x.getMessage("V3XLang.common_separator_label");
	var N = [];
	var L = "";
	for (var G = 0; G < A.length; G++) {
		if (A[G].type == "Department") {
			L += A[G].id + ","
		}
	}
	if (L != "") {
		L = L.substring(0, L.length - 1);
		var E = document.getElementById("orgAccountId");
		var J = new XMLHttpRequestCaller(this, "ajaxOrgManager", "getParentDepartmentFullName", false);
		J.addParameter(1, "String", L);
		J.addParameter(2, "long", E.value);
		var F = J.serviceRequest();
		if (F != null) {
			N = F.split(",")
		}
	}
	var D = 0;
	var K = [];
	for (var G = 0; G < A.length; G++) {
		var H = A[G];
		var M = null;
		if (H.type == "Department") {
			M = N[D];
			D++
		} else {
			if (H.accountShortname) {
				var I = document.getElementById("appName");
				if (I && I.value == "4") {
					if (H.type == "Account" || (E && E.value == H.accountId)) {
						M = H.name
					} else {
						M = H.accountShortname + H.name
					}
				} else {
					M = H.name + "(" + H.accountShortname + ")"
				}
			} else {
				M = H.name
			}
		}
		K[K.length] = M
	}
	return K.join(B)
}
function getIdsString(D, F) {
	if (!D) {
		return ""
	}
	if (F == null) {
		F = true
	}
	var E = [];
	for (var B = 0; B < D.length; B++) {
		var A = null;
		if (F) {
			A = D[B].type + "|" + D[B].id
		} else {
			A = D[B].id
		}
		E[E.length] = A + (D[B].excludeChildDepartment ? "|1" : "")
	}
	return E.join(",")
}
function parseElements(G) {
	if (!G || G == "null") {
		return null
	}
	var E = [];
	var A = G.split(",");
	for (var D = 0; D < A.length; D++) {
		if (!A[D]) {
			continue
		}
		var F = A[D].split("|");
		if (F.length > 3) {
			var B = new Element(F[0], F[1], F[2], null, F[3], null, "");
			if (F.length > 4) {
				B.isEnabled = (F[4] == "true")
			}
			E[E.length] = B
		}
	}
	return E
}
function parseElements4Exclude(H, E) {
	if (!H || H == "null") {
		return null
	}
	var F = [];
	var A = H.split(",");
	for (var D = 0; D < A.length; D++) {
		if (!A[D]) {
			continue
		}
		if (E) {
			F[F.length] = new Element(E, A[D])
		} else {
			var G = A[D].split("|");
			if (G.length == 2) {
				var B = new Element(G[0], G[1]);
				F[F.length] = B
			}
		}
	}
	return F
}
function getIdsInput(D, A, F) {
	if (!D) {
		return ""
	}
	if (F == null) {
		F = true
	}
	var E = "";
	for (var B = 0; B < D.length; B++) {
		if (F) {
			E += "<input type='hidden' name='" + A + "' value=\"" + D[B].type + "|" + D[B].id + '">'
		} else {
			E += "<input type='hidden' name='" + A + "' value=\"" + D[B].id + '">'
		}
	}
	return E
}
var AJAX_XMLHttpRequest_DEFAULT_METHOD = "POST";
var AJAX_XMLHttpRequest_DEFAULT_async = true;
var AJAX_RESPONSE_XML_TAG_BEAN = "B";
var AJAX_RESPONSE_XML_TAG_LIST = "L";
var AJAX_RESPONSE_XML_TAG_Value = "V";
var AJAX_RESPONSE_XML_TAG_Property = "P";
var AJAX_RESPONSE_XML_TAG_Name = "n";
function AjaxParameter() {
	this.instance = []
}
AjaxParameter.prototype.put = function (B, D, E) {
	var A = D.indexOf("[]") > -1;
	this.instance[this.instance.length] = {
		index: B,
		type: A ? D.substring(0, D.length - 2) : D,
		value: E,
		isArray: A
	}
};
AjaxParameter.prototype.toAjaxParameter = function (G, J, I, B) {
	I = I == null ? "false" : I;
	if (!G || !J) {
		return null
	}
	var H = "";
	H += "S=" + G;
	H += "&M=" + J;
	H += "&CL=" + I;
	H += "&RVT=" + B;
	if (this.instance != null && this.instance.length > 0) {
		for (var E = 0; E < this.instance.length; E++) {
			var D = this.instance[E];
			var F = "P_" + D.index + "_" + D.type;
			if (D.isArray) {
				if (D.value == null || D.value.length == 0) {
					H += "&" + F + "_A_N="
				} else {
					if (D.value instanceof Array) {
						for (var A = 0; A < D.value.length; A++) {
							H += "&" + F + "_A=" + encodeURIComponent(D.value[A])
						}
					}
				}
			} else {
				var K = D.value == null ? "" : D.value;
				H += "&" + F + "=" + encodeURIComponent(K)
			}
		}
	}
	return H
};
function XMLHttpRequestCaller(F, D, A, B, H, G, E) {
	if ((!D || !A) && !E) {
		alert("AJAX Service name or method, actionUrl is not null.");
		throw new Error(3, "AJAX Service name or method is not null.")
	}
	this.params = new AjaxParameter();
	this.serviceName = D;
	this.methodName = A;
	this.needCheckLogin = G == null ? "true" : G;
	this.returnValueType = "XML";
	this.method = H || AJAX_XMLHttpRequest_DEFAULT_METHOD;
	this.async = (B == null ? AJAX_XMLHttpRequest_DEFAULT_async : B);
	this._caller = F;
	this.actionUrl = E;
	this.filterLogoutMessage = true;
	this.closeConnection = false
}
XMLHttpRequestCaller.prototype.addParameter = function (A, B, D) {
	this.params.put(A, B, D)
};
XMLHttpRequestCaller.prototype.serviceRequest = function () {
	var A = null;
	var D = null;
	if (this.actionUrl) {
		A = getBaseURL() + this.actionUrl;
		D = this.sendData
	} else {
		var B = getBaseURL() + "/getAjaxDataServlet";
		var F = this.params.toAjaxParameter(this.serviceName, this.methodName, this.needCheckLogin, this.returnValueType);
		if (!F) {
			throw new Error(5, "\u6ca1\u6709\u4efb\u4f55\u53c2\u6570")
		}
		if (F.length < 500) {
			this.method = "GET"
		}
		if (this.method.toUpperCase() == "POST") {
			A = B;
			D = F
		} else {
			if (this.method.toUpperCase() == "GET") {
				A = B + "?" + F
			}
		}
	}
	var G = getHTTPObject();
	var H = (typeof this.invoke != "undefined") ? this : this._caller;
	var E = this.filterLogoutMessage;
	if (!G) {
		throw new Error(2, "\u5f53\u524d\u6d4f\u89c8\u5668\u4e0d\u652f\u6301XMLHttpRequest")
	}
	if (this.async) {
		G.onreadystatechange = function () {
			if (G.readyState == 4) {
				if (G.status == 200) {
					var I = getXMLHttpRequestData(G, E);
					H.invoke(I)
				} else {
					if (H && H.showAjaxError) {
						H.showAjaxError(G.status)
					} else {
						H.invoke(null)
					}
				}
			}
		}
	}
	G.open(this.method, A, this.async);
	G.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	G.setRequestHeader("RequestType", "AJAX");
	if (this.closeConnection) {
		G.setRequestHeader("Connection", "close")
	}
	G.send(D);
	if (!this.async) {
		if (G.readyState == 4) {
			if (G.status == 200) {
				return getXMLHttpRequestData(G, E)
			} else {}
		}
	}
};
function getXMLHttpRequestData(E, A) {
	var B = E.getResponseHeader("content-type");
	var F = B && B.indexOf("xml") >= 0;
	var D = F ? E.responseXML : E.responseText;
	if (F) {
		D = xmlHandle(D) || E.responseText
	}
	if (A == true && D != null && D.toString().indexOf("[LOGOUT]") == 0) {
		return null
	}
	return D
}
function xmlHandle(E) {
	if (!E) {
		return null
	}
	try {
		var A = E.documentElement;
		if (null != A) {
			var B = A.nodeName;
			if (B == AJAX_RESPONSE_XML_TAG_BEAN) {
				return beanXmlHandle(A)
			} else {
				if (B == AJAX_RESPONSE_XML_TAG_LIST) {
					return listXmlHandle(A)
				} else {
					if (B == AJAX_RESPONSE_XML_TAG_Value) {
						return A.firstChild.nodeValue
					}
				}
			}
		}
	} catch (D) {
		throw D.message
	}
	return null
}
function beanXmlHandle(F) {
	if (!F) {
		return null
	}
	var E = new Properties();
	E.type = "";
	var I = F.childNodes;
	if (I != null && I.length > 0) {
		for (var D = 0; D < I.length; D++) {
			var B = I[D].attributes.getNamedItem(AJAX_RESPONSE_XML_TAG_Name).nodeValue;
			var H = "";
			var A = I[D].firstChild;
			if (A != null) {
				if (A.childNodes != null && A.childNodes.length > 0) {
					var G = A.nodeName;
					if (G == AJAX_RESPONSE_XML_TAG_BEAN) {
						H = beanXmlHandle(A)
					} else {
						if (G == AJAX_RESPONSE_XML_TAG_LIST) {
							H = listXmlHandle(A)
						} else {
							if (G == AJAX_RESPONSE_XML_TAG_Value) {
								H = A.firstChild.nodeValue
							}
						}
					}
				} else {
					H = A.nodeValue
				}
			}
			E.putRef(B, (H))
		}
	}
	return E
}
function listXmlHandle(E) {
	var H = new Array();
	if (E != null) {
		var D = new Properties();
		var A = E.childNodes;
		if (A != null && A.length > 0) {
			for (var B = 0; B < A.length; B++) {
				var G = A[B].nodeName;
				var F = "";
				if (G == AJAX_RESPONSE_XML_TAG_BEAN) {
					F = beanXmlHandle(A[B])
				} else {
					if (G == AJAX_RESPONSE_XML_TAG_LIST) {
						F = listXmlHandle(A[B])
					} else {
						if (G == AJAX_RESPONSE_XML_TAG_Value) {
							F = A[B].firstChild.nodeValue
						}
					}
				}
				H[B] = F
			}
		}
	}
	return H
}
function getHTTPObject() {
	var xmlhttp;
	/*@cc_on
	@if (@_jscript_version >= 5)
	try {
	xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
	}
	catch (e) {
	try {
	xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}
	catch (E) {
	xmlhttp = false;
	}
	}
	@else
	xmlhttp = false;
	@end @*/
	if (!xmlhttp && typeof XMLHttpRequest != "undefined") {
		try {
			xmlhttp = new XMLHttpRequest()
		} catch (e) {
			xmlhttp = false
		}
	}
	return xmlhttp
}
function getBaseURL() {
	try {
		if (v3x) {
			return v3x.baseURL
		} else {
			if (parent.v3x) {
				return parent.v3x.baseURL
			} else {
				if (getA8Top().v3x) {
					return getA8Top().v3x.baseURL
				} else {
					if (getA8Top().conextPath) {
						return getA8Top().conextPath
					} else {
						return _ctxPath
					}
				}
			}
		}
	} catch (A) {}
	return "/seeyon"
}
function ajaxFormSubmit(A) {
	var D = new AjaxParameter();
	var F = getHTTPObject();
	var E = D.FormToAjaxParameter(A);
	F.open("post", A.action, false);
	F.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	F.send(E);
	if (F.readyState == 4) {
		if (F.status == 200) {
			var B = xmlHandle(F.responseXML);
			if (B == null) {
				B = F.responseText;
				if (B.search("<") > 0) {
					B = B.substr(B.search("<"));
					B = getXMLDoc(B);
					B = xmlHandle(B)
				} else {
					return B
				}
			}
			if (!B) {
				B = F.responseTEXT
			}
			return B
		} else {
			return false
		}
	}
	return false
}
function getXMLDoc(B) {
	var D = null;
	if (window.ActiveXObject || "ActiveXObject" in window) {
		D = new ActiveXObject("MSXML2.DOMDocument");
		D.async = false;
		if (B != null) {
			D.loadXML(B)
		}
	} else {
		if (document.implementation && document.implementation.createDocument) {
			D = document.implementation.createDocument("", "", null);
			var A = new DOMParser();
			D.async = false;
			if (B != null) {
				D = A.parseFromString(B, "text/xml")
			}
		}
	}
	return D
}
function getXSLDoc(M, K) {
	if (typeof(XSLTProcessor) != "undefined") {
		var H = new XSLTProcessor();
		H.importStylesheet(K);
		var E = H.transformToFragment(M, document);
		if (typeof(GetXmlStringFromXmlDoc) != "undefined") {
			return GetXmlStringFromXmlDoc(E)
		} else {
			var L = new XMLSerializer();
			var G = L.serializeToString(E);
			if (G.indexOf("<transformiix:result") > -1) {
				G = G.substring(G.indexOf(">") + 1, G.lastIndexOf("<"))
			}
			return G
		}
	}
	if (typeof(M.transformNode) != "undefined") {
		return M.transformNode(K)
	} else {
		var D = null;
		try {
			D = new ActiveXObject("Msxml2.XSLTemplate")
		} catch (J) {}
		try {
			if (D) {
				var B = D;
				var F = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
				F.loadXML(K.xml);
				B.stylesheet = F;
				var A = B.createProcessor();
				A.input = M;
				A.transform();
				return A.output
			}
		} catch (I) {
			alert("The type [XSLTProcessor] and the function [XmlDocument.transformNode] are not supported by this browser, can't transform XML document to HTML string!");
			return null
		}
	}
}
function getXmlString(A) {
	if (window.ActiveXObject) {
		return A.xml
	} else {
		var B = document.createElement("div");
		B.appendChild(A.cloneNode(true));
		return B.innerHTML
	}
}
AjaxParameter.prototype.FormToAjaxParameter = function (B) {
	var E = "";
	var H = new Properties();
	var F;
	var I,
	D;
	var G;
	var A;
	for (F = 0; F < B.elements.length; F++) {
		I = B.elements[F];
		A = I.getAttribute("canSubmit");
		if (I.disabled || (I.readOnly && A != "true")) {
			continue
		}
		if (I.type == "select-one" || I.type == "hidden" || I.type == "password" || I.type == "text" || I.type == "textarea") {
			H.put(I.name, I.value)
		} else {
			if (I.type == "select-multiple" || I.type == "checkbox" || I.type == "radio") {
				D = H.get(I.name);
				G = getFormInputValue(I);
				if (G != "") {
					if (D != null && D != "") {
						D += ","
					} else {
						D = G
					}
				}
				if (D == null) {
					D = ""
				}
				H.put(I.name, D)
			}
		}
		E = H.toQueryString()
	}
	return E
};
function getFormInputValue(A) {
	var D = "";
	var B;
	var E;
	if (A.type == "select-multiple") {
		for (B = 0; B < A.options.length; B++) {
			if (A.options[B].selected == true) {
				if (D != "") {
					D += ","
				}
				D += A.options[B].value
			}
		}
	} else {
		if (A.type == "checkbox" || A.type == "radio") {
			E = document.getElementsByName(A.name);
			for (B = 0; B < E.length; B++) {
				if (E[B].checked == true) {
					if (D != "") {
						D += ","
					}
					D += E[B].value
				}
			}
		}
	}
	return D
}
var dom = (document.getElementsByTagName) ? true : false;
var ie5 = (document.getElementsByTagName && document.all) ? true : false;
var arrowUp, arrowDown;
if (ie5 || dom) {
	initSortTable()
}
function initSortTable() {
	arrowUp = document.createDocumentFragment("SPAN");
	arrowUp.className = "arrowAsc";
	arrowUp.innerHTML = "&nbsp;&nbsp;";
	arrowDown = document.createDocumentFragment("SPAN");
	arrowDown.className = "arrowDesc";
	arrowDown.innerHTML = "&nbsp;&nbsp;"
}
function getNextSibByClass(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.className == A) {
			return B
		} else {
			return getNextSibByClass(B.nextSibling, A)
		}
	}
}
function getParentByClass(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.className == A) {
			return B
		} else {
			return getParentByClass(B.parentNode, A)
		}
	}
}
function sortTable(M, H, E, A, I) {
	var L;
	if (I) {
		var D = getParentByClass(M, "hDiv");
		var N = getNextSibByClass(D, "bDiv");
		L = N.childNodes[0].childNodes[0]
	} else {
		L = M.tBodies[0]
	}
	var G = L.rows;
	var K = new Array();
	var J = new Array();
	for (var F = 0; F < G.length; F++) {
		var B = G[F];
		if (B.id.indexOf("off") != -1) {
			J[J.length] = G[F]
		} else {
			K[K.length] = G[F]
		}
	}
	K.sort(compareByColumn(H, E, A));
	J.sort(compareByColumn(H, E, A));
	for (var F = 0; F < K.length; F++) {
		if (F % 2 == 0) {
			K[F].className = "erow"
		} else {
			K[F].className = ""
		}
		L.appendChild(K[F])
	}
	for (var F = 0; F < J.length; F++) {
		L.appendChild(J[F])
	}
}
function CaseInsensitiveString(A) {
	return String(A).toLocaleString()
}
function parseDate(A) {
	return Date.parse(A.replace(/\-/g, "/"))
}
function toNumber(A) {
	return Number(A.replace(/[^0-9\.]/g, ""))
}
function compareByColumn(G, A, F) {
	var E = G;
	var D = A;
	var B = String;
	if (F == "Number") {
		B = parseInt
	} else {
		if (F == "Date") {
			B = compareMyDate
		} else {
			if (F == "CaseInsensitiveString") {
				B = CaseInsensitiveString
			} else {
				if (F == "Size") {
					B = compareSize
				} else {
					if (F == "Percent") {
						B = comparePercent
					} else {
						if (F == "Month") {
							B = compareMonth
						} else {
							if (F == "Number") {
								B = compareNumber
							}
						}
					}
				}
			}
		}
	}
	return function (I, H) {
		if (B == String || B == CaseInsensitiveString) {
			var J = B(getInnerText(I.cells[E])).localeCompare(B(getInnerText(H.cells[E])));
			if (D) {
				return J * -1
			} else {
				return J
			}
		} else {
			if (B == compareMyDate) {
				var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
				if (D) {
					return J * -1
				} else {
					return J
				}
			} else {
				if (B == compareSize) {
					var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
					if (D) {
						return J * -1
					} else {
						return J
					}
				} else {
					if (B == comparePercent) {
						var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
						if (D) {
							return J * -1
						} else {
							return J
						}
					} else {
						if (B == compareMonth) {
							var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
							if (D) {
								return J * -1
							} else {
								return J
							}
						} else {
							if (B == compareNumber) {
								var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
								if (D) {
									return J * -1
								} else {
									return J
								}
							} else {
								if (B(getInnerText(I.cells[E])) > B(getInnerText(H.cells[E]))) {
									return D ? -1 : +1
								}
								if (B(getInnerText(I.cells[E])) < B(getInnerText(H.cells[E]))) {
									return D ? +1 : -1
								}
								return 0
							}
						}
					}
				}
			}
		}
	}
}
function compareNumber(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = parseFloat(B);
	var D = parseFloat(A);
	if (E > D) {
		return 1
	} else {
		if (E < D) {
			return -1
		} else {
			return 0
		}
	}
}
function compareMonth(E, D) {
	if ((E == null || E == "  ") && (D != null && D != "  ")) {
		return -1
	}
	if ((D == null || D == "  ") && (E != null && E != "  ")) {
		return 1
	}
	if ((E == null || E == "  ") && (D == null || D == "  ")) {
		return 0
	}
	var B = E.split("-");
	var A = D.split("-");
	var I = B[0];
	var G = A[0];
	var H = parseInt(parseFloat(B[1]));
	var F = parseInt(parseFloat(A[1]));
	if (I > G) {
		return 1
	}
	if (I < G) {
		return -1
	}
	if (I == G) {
		if (H > F) {
			return 1
		} else {
			if (H < F) {
				return -1
			} else {
				return 0
			}
		}
	}
}
function compareSize(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = F(B);
	var D = F(A);
	if (E - D > 0) {
		return 1
	} else {
		if (E - D < 0) {
			return -1
		} else {
			return 0
		}
	}
	function F(G) {
		if (G.indexOf("MB") > -1) {
			return parseFloat(G) * 1000
		} else {
			if (G.indexOf("KB") > -1) {
				return parseFloat(G)
			}
		}
	}
}
function comparePercent(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = F(B);
	var D = F(A);
	if (E - D > 0) {
		return 1
	} else {
		if (E - D < 0) {
			return -1
		} else {
			return 0
		}
	}
	function F(G) {
		if (G.indexOf("%") > -1) {
			return parseFloat(G) * 10000
		}
		return 0
	}
}
function compareMyDate(D, A) {
	if ((D == null || D == "  " || D == " ") && (A != null && A != "  " && A != " ")) {
		return -1
	}
	if ((A == null || A == "  " || A == " ") && (D != null && D != "  " && D != " ")) {
		return 1
	}
	if ((D == null || D == "  " || D == " ") && (A == null || A == "  " || A == " ")) {
		return 0
	}
	var E = initDate(D);
	var B = initDate(A);
	if (E - B > 0) {
		return 1
	} else {
		if (E - B < 0) {
			return -1
		} else {
			return 0
		}
	}
}
function initDate(G) {
	if (G.indexOf("/") > -1 && G.indexOf(":") > -1) {
		var A = parseFloat(G.substr(0, 2));
		var K = parseFloat(G.substr(3, 2));
		var I = parseFloat(G.substr(6, 2));
		var L = parseFloat(G.substr(9, 2));
		var N = parseFloat(G.substr(12, 2));
		var H = 0;
		return new Date(A, K, I, L, N, H)
	} else {
		if (G.indexOf("-") > -1 && G.indexOf(":") > -1) {
			G = G.trim();
			var B = G.split(" ");
			var J = B[0].split("-");
			var D = B[1].split(":");
			var M = parseInt(J[1]);
			if (J[1].length == 2 && J[1].substr(0, 1) == "0") {
				M = parseInt(J[1].substr(1, 1))
			}
			var F = parseInt(J[2]);
			if (J[2].length == 2 && J[2].substr(0, 1) == "0") {
				F = parseInt(J[2].substr(1, 1))
			}
			var L = parseInt(D[0]);
			if (D[0].length == 2 && D[0].substr(0, 1) == "0") {
				L = parseInt(D[0].substr(1, 1))
			}
			var E = parseInt(D[1]);
			if (D[1].length == 2 && D[1].substr(0, 1) == "0") {
				E = parseInt(D[1].substr(1, 1))
			}
			var H = 0;
			if (D.length == 3 && D[2].length > 0) {
				H = parseInt(D[2]);
				if (D[2].length == 2 && D[2].substr(0, 1) == "0") {
					H = parseInt(D[2].substr(1, 1))
				}
			}
			return new Date(parseInt(J[0]), M - 1, F, L, E, H)
		} else {
			if (G.indexOf("-") > -1 && G.indexOf(":") == -1) {
				var B = G.split("-");
				var M = parseInt(B[1]);
				if (B[1].length == 2 && B[1].substr(0, 1) == "0") {
					M = parseInt(B[1].substr(1, 1))
				}
				var F = parseInt(B[2]);
				if (B[2].length == 2 && B[2].substr(0, 1) == "0") {
					F = parseInt(B[2].substr(1, 1))
				}
				return new Date(parseInt(B[0]), M - 1, F, 0, 0, 0)
			} else {
				if (isChina(G)) {
					var A = G.substr(0, 4);
					var K = null;
					var I = null;
					if (isChina(G.substr(6, 1)) && isChina(G.substr(8, 1))) {
						K = G.substr(5, 1);
						I = G.substr(7, 1)
					} else {
						if (isChina(G.substr(6, 1)) && isChina(G.substr(9, 1))) {
							K = G.substr(5, 1);
							I = G.substr(7, 2)
						} else {
							if (isChina(G.substr(7, 1)) && isChina(G.substr(9, 1))) {
								K = G.substr(5, 2);
								I = G.substr(8, 1)
							} else {
								if (isChina(G.substr(7, 1)) && isChina(G.substr(10, 1))) {
									K = G.substr(5, 2);
									I = G.substr(8, 2)
								}
							}
						}
					}
					return new Date(parseInt(A), parseInt(K) - 1, parseInt(I), 0, 0, 0)
				}
			}
		}
	}
}
function isChina(B) {
	var A = /[\u4E00-\u9FA5]|[\uFE30-\uFFA0]/gi;
	if (!A.exec(B)) {
		return false
	} else {
		return true
	}
}
function sortColumn(G, A, F) {
	try {
		var D,
		E;
		if (ie5) {
			D = G.srcElement
		} else {
			if (dom) {
				D = G.target
			}
		}
		if (F) {
			E = getParent(D, "TH")
		} else {
			E = getParent(D, "TD")
		}
		var B = E.orderBy;
		if (E == null || B == null || B == "") {
			sortColumnCurrentPage(G, A, F)
		} else {
			sortColumnAll(E, B, F)
		}
	} catch (G) {}
}
function sortColumnAll(F, D, G) {
	if (!E) {
		var E = new Properties()
	}
	var B = E.get("orderByColumn");
	var A = E.get("orderByDESC");
	if (A == null) {
		A = "ASC"
	} else {
		if (D != B) {
			A = "ASC";
			E.put("page", 1)
		} else {
			A = A == "DESC" ? "ASC" : "DESC"
		}
	}
	E.put("orderByColumn", D);
	E.put("orderByDESC", A);
	getPageAction(F)
}
function sortColumnCurrentPage(J, E, L) {
	var I,
	D,
	N,
	L,
	G;
	if (ie5) {
		I = J.srcElement
	} else {
		if (dom) {
			I = J.target
		}
	}
	G = getParent(I, "TABLE");
	N = getParent(I, "THEAD");
	if (L) {
		D = getParent(I, "TH")
	} else {
		var K = getParent(I, "TFOOT");
		if (I.tagName == "TD" && K == null && N == null && E == true) {
			selectRow(I)
		}
		D = getParent(I, "TD")
	}
	if (D == null || D.getAttribute("type") == null || D.getAttribute("type") == "") {
		return
	}
	if (N == null) {
		return
	}
	if (!F) {
		var F = new Properties()
	}
	var P = F.get("orderByColumn");
	if (P) {
		var M = document.getElementById("OrderByColumn_" + P);
		if (M) {
			M.parentNode.removeChild(M)
		}
	}
	if (D != null) {
		var A = D.parentNode;
		var H;
		if (D._descending) {
			D._descending = false
		} else {
			D._descending = true
		}
		if (N.arrow != null) {
			if (L) {
				N.arrow.className = ""
			} else {
				if (N.arrow.parentNode == null) {
					N.arrow = null
				} else {
					if (N.arrow.parentNode != D) {
						N.arrow.parentNode._descending = null
					}
					N.arrow.parentNode.removeChild(N.arrow)
				}
			}
		}
		var B = D.firstChild;
		if (L) {
			if (D._descending) {
				B.className = "sdesc"
			} else {
				B.className = "sasc"
			}
			N.arrow = B
		} else {
			if (D._descending) {
				N.arrow = arrowDown.cloneNode(true)
			} else {
				N.arrow = arrowUp.cloneNode(true)
			}
			D.appendChild(N.arrow)
		}
		for (H = 0; H < A.cells.length; H++) {
			if (A.cells[H] == D) {
				break
			}
		}
		var O = getParent(D, "TABLE");
		sortTable(O, H, D._descending, D.getAttribute("type"), L)
	}
}
function getInnerText(B) {
	if (ie5) {
		return B.innerText
	}
	var D = "";
	for (var A = 0; A < B.childNodes.length; A++) {
		switch (B.childNodes.item(A).nodeType) {
		case 1:
			D += getInnerText(B.childNodes.item(A));
			break;
		case 3:
			D += B.childNodes.item(A).nodeValue;
			break
		}
	}
	return D
}
function getParent(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.tagName.toLowerCase() == A.toLowerCase()) {
			return B
		} else {
			return getParent(B.parentNode, A)
		}
	}
}
var currentSelectTr = null;
function clearSiblingStyle(A) {
	var E = A.parentNode.childNodes;
	if (E != null) {
		for (var B = 0; B < E.length; B++) {
			var D = E[B];
			redoStyle(D)
		}
	}
}
function redoStyle() {
	var I = currentSelectTr;
	if (!I) {
		return
	}
	var A = I.className;
	var B = I.className2;
	if (B != null && A != B) {
		I.className = B
	}
	var K = getCheckboxFromTr(I);
	if (K && K.disabled != true) {
		K.checked = false
	}
	var D = I.cells;
	for (var J = 0; J < D.length; J++) {
		var G = D.item(J);
		var L = G.className;
		var E = L.split(" ");
		var F = "";
		for (var H = 0; H < E.length; H++) {
			if (E[H] != "no-read") {
				F += E[H] + " "
			}
		}
		G.className = F
	}
}
function changeSelectedStyle(D) {
	if (D == null) {
		return
	}
	var A = D.className;
	var B = D.className2;
	if (B == null) {
		D.className2 = A;
		if (D.id.indexOf("off") != -1) {
			D.className = "tr-select-offline"
		} else {
			D.className = "sort-select"
		}
	} else {
		if (A == B) {
			if (D.id.indexOf("off") != -1) {
				D.className = "tr-select-offline"
			} else {
				D.className = "sort-select"
			}
		} else {
			D.className = B
		}
	}
}
function selectRow(A) {
	if (A.tagName == "INPUT") {
		unselectAll();
		return
	}
	var G = getParent(A, "TR");
	var B = getParent(G, "tbody");
	var F = v3x.getEvent();
	var E;
	if (ie5) {
		E = F.srcElement
	} else {
		if (dom) {
			E = F.target
		}
	}
	if (E.tagName == "INPUT") {
		return
	}
	if (G != null && B != null) {
		redoStyle();
		changeSelectedStyle(G);
		currentSelectTr = G;
		var D = getCheckboxFromTr(G);
		if (D != undefined && D != null) {
			noSelected(D.name);
			if (D.disabled != true) {
				D.checked = true
			}
			unselectAll()
		}
	}
}
function getCheckboxFromTr(E) {
	if (E == null || E.childNodes.length == 0) {
		return null
	} else {
		for (var D = 0; D < E.childNodes.length; D++) {
			var B = E.childNodes[D];
			if (B.type == "checkbox" || B.type == "radio") {
				return B
			} else {
				var A = getCheckboxFromTr(B);
				if (A != null) {
					return A
				}
			}
		}
	}
}
function selectAll(B, E) {
	var A = document.getElementsByName(E);
	if (A != null) {
		for (var D = 0; D < A.length; D++) {
			if (A[D].disabled == true) {
				continue
			}
			A[D].checked = B.checked
		}
	}
}
function noSelected(A) {
	var D = document.getElementsByName(A);
	if (D) {
		for (var B = 0; B < D.length; B++) {
			if (D[B].disabled == true) {
				continue
			}
			D[B].checked = false
		}
	}
}
function unselectAll() {
	var A = document.getElementById("allCheckbox");
	if (A && A.disabled != true) {
		if (A.checked) {
			A.click();
			A.checked = false
		}
	}
}
var canDoAction = true;
function getPageAction(E) {
	var M = pageFormMethod || "get";
	var A = getForm(E);
	var B = A.attributes.getNamedItem("ACTION");
	var D = B ? (B.nodeValue) : "" || "";
	var K = document.createElement("form");
	K.setAttribute("action", D);
	K.setAttribute("target", "_self");
	K.setAttribute("method", M);
	if (!canDoAction) {
		return
	}
	var L = pageQueryMap.keys();
	for (var F = 0; F < L.size(); F++) {
		var J = L.get(F);
		var H = pageQueryMap.get(J);
		if (!J || J == "pageSize") {
			continue
		}
		if (H instanceof Array) {
			for (var I = 0; I < H.length; I++) {
				var G = document.createElement("input");
				G.setAttribute("type", "hidden");
				G.setAttribute("name", J);
				G.value = H[I];
				K.appendChild(G)
			}
		} else {
			var G = document.createElement("input");
			G.setAttribute("type", "hidden");
			G.setAttribute("name", J);
			G.value = H;
			K.appendChild(G)
		}
	}
	var I = A.pageSize.value || 20;
	var G = document.createElement("input");
	G.setAttribute("type", "hidden");
	G.setAttribute("name", "pageSize");
	G.setAttribute("value", I);
	K.appendChild(G);
	if (!new RegExp("^-?[0-9]*$").test(I) || parseInt(I, 10) < 1) {}
	document.body.appendChild(K);
	K.submit();
	canDoAction = false
}
function enterSubmit(B, A) {
	if (v3x.getEvent().keyCode == 13) {
		if (A == "pageSize") {
			pagesizeChange(B)
		} else {
			if (A == "intpage") {
				pageChange(B)
			}
		}
	}
}
function getForm(A) {
	return document.getElementsByName("pageSize")[0].form
}
function pageGo(A) {
	getPageAction(A)
}
function first(A) {
	pageQueryMap.put("page", 1);
	getPageAction(A)
}
function pageChange(B) {
	if (!new RegExp("^-?[0-9]*$").test(B.value)) {
		return
	}
	var A = B.getAttribute("pageCount");
	if (B.value > parseInt(A, 10)) {
		B.value = A
	}
	pageQueryMap.put("page", B.value);
	getPageAction(B)
}
function last(B, A) {
	pageQueryMap.put("page", A);
	getPageAction(B)
}
function next(B) {
	var A = parseInt(pageQueryMap.get("page"));
	pageQueryMap.put("page", A + 1);
	getPageAction(B)
}
function pagesizeChange(B) {
	var A = B.value;
	if (!new RegExp("^-?[0-9]*$").test(A) || parseInt(A, 10) < 1) {
		return
	}
	pageQueryMap.put("pageSize", A);
	pageQueryMap.put("page", 1);
	getPageAction(B)
}
function prev(B) {
	var A = parseInt(pageQueryMap.get("page"));
	pageQueryMap.put("page", A - 1);
	getPageAction(B)
}
var formValidate = {
	unCharactor: "\"\\/|><:*?'&%$",
	integerDigits: "10",
	decimalDigits: "0"
};
V3X.prototype.checkFormAdvanceAttribute = "";
function checkForm(formObj) {
	var elements = formObj.elements;
	var clearValueElements = [];
	if (elements != null) {
		for (var i = 0; i < elements.length; i++) {
			var e = elements[i];
			var clearValue = e.getAttribute("clearValue");
			if (clearValue == "true") {
				clearValueElements[clearValueElements.length] = e;
				continue
			}
			V3X.checkFormAdvanceAttribute = e.getAttribute("advance");
			var validateAtt = e.getAttribute("validate");
			if (validateAtt != null && validateAtt != "" && validateAtt != "undefined") {
				var validateFuns = validateAtt.split(",");
				for (var f = 0; f < validateFuns.length; f++) {
					var fun = validateFuns[f];
					if (fun) {
						var result = eval(fun + "(e)");
						if (!result) {
							return false
						}
					}
				}
			}
		}
	}
	for (var j = 0; j < clearValueElements.length; j++) {
		clearDefaultValueWhenSubmit(clearValueElements[j])
	}
	return true
}
function testRegExp(B, A) {
	return new RegExp(A).test(B)
}
function clearDefaultValueWhenSubmit(D) {
	var A = getDefaultValue(D);
	var B = D.value;
	if (B == A) {
		D.value = ""
	}
}
function writeValidateInfo(element, message) {
	alert(message);
	var onAfterAlert = element.getAttribute("onAfterAlert");
	if (onAfterAlert) {
		try {
			eval(onAfterAlert)
		} catch (e) {}
	} else {
		try {
			element.focus();
			element.select()
		} catch (e) {}
	}
}
function notSpecChar(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (/^[^\|\\"'<>]*$/.test(D)) {
		return true
	} else {
		writeValidateInfo(B, $.i18n("formValidate_specialCharacter", A));
		return false
	}
}
function notSpecCharWithoutApos(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (/^[^\|\\\/"<>]*$/.test(D)) {
		return true
	} else {
		writeValidateInfo(B, $.i18n("formValidate_specialCharacter_withoutApos", A));
		return false
	}
}
function notNull(D) {
	var E = D.value;
	E = E.replace(/[\r\n]/g, "");
	var B = D.getAttribute("inputName");
	if (E == null || E == "" || E.trim() == "" || E == $.i18n("section.hasNoSet")) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	var A = D.getAttribute("maxSize");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A, E.length));
		return false
	}
	return true
}
function maxLength(D) {
	var E = D.value;
	if (!E) {
		return true
	}
	var B = D.getAttribute("inputName");
	var A = D.getAttribute("maxSize");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A, E.length));
		return false
	}
	return true
}
function minLength(D) {
	var E = D.value;
	if (!E) {
		return true
	}
	var B = D.getAttribute("inputName");
	var A = D.getAttribute("minLength");
	if (A && E.length < A) {
		writeValidateInfo(D, $.i18n("formValidate_minLength", B, A, E.length));
		return false
	}
	return true
}
function isNumber(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var H = B.getAttribute("integerDigits") || formValidate.integerDigits;
	var G = B.getAttribute("decimalDigits") || formValidate.decimalDigits;
	var D = B.getAttribute("integerMax");
	var F = B.getAttribute("integerMin");
	if (E == "0") {
		return true
	}
	if (!testRegExp(E, "^-?[0-9]{0," + H + "}\\.?[0-9]{0," + G + "}$")) {
		writeValidateInfo(B, $.i18n("formValidate_isNumber", A));
		return false
	}
	if (D && parseInt(E) > D) {
		writeValidateInfo(B, $.i18n("formValidate_too_max", A, D, E));
		return false
	}
	if (F && parseInt(E) < F) {
		writeValidateInfo(B, $.i18n("formValidate_too_min", A, F, E));
		return false
	}
	return true
}
function positive(B) {
	var E = B.value.trim();
	if (E != "") {
		var D = parseFloat(B.value.trim());
		var A = B.getAttribute("inputName");
		if (D <= 0) {
			writeValidateInfo(B, $.i18n("formValidate_positive", A));
			return false
		}
	}
	return true
}
function percent(B) {
	var E = B.value.trim();
	if (E != "") {
		var D = parseFloat(B.value.trim());
		var A = B.getAttribute("inputName");
		if (D < 0 || D > 100) {
			writeValidateInfo(B, $.i18n("formValidate_percent", A, E));
			return false
		}
	}
	return true
}
function notNum(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	var F = B.getAttribute("integerDigits") || formValidate.integerDigits;
	var E = B.getAttribute("decimalDigits") || formValidate.decimalDigits;
	if (D == "0") {
		return true
	}
	if (testRegExp(D, "^-?[0-9]{0," + F + "}\\.?[0-9]{0," + E + "}$")) {
		writeValidateInfo(B, $.i18n("formValidate_isNotNumber", A));
		return false
	}
	return true
}
function isEmail(B) {
	var D = B.value;
	if (!D) {
		return true
	}
	var A = B.getAttribute("inputName");
	if (D.indexOf("@") == -1 || D.indexOf(".") == -1) {
		writeValidateInfo(B, $.i18n("formValidate_isEmail", A));
		return false
	}
	return true
}
function notNullWithoutTrim(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	if (E == null || E == "") {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	var A = D.getAttribute("maxLength");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A));
		return false
	}
	return true
}
function isInteger(E) {
	var F = E.value;
	var B = E.getAttribute("inputName");
	var A = E.getAttribute("max");
	var D = E.getAttribute("min");
	if (F != "0" && (isNaN(F) || F.indexOf("0") == 0 || !testRegExp(F, "^-?[0-9]*$"))) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger", B));
		return false
	}
	if (A != null && A != "" && parseInt(F) > parseInt(A)) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger_max", B, A));
		return false
	}
	if (D != null && D != "" && parseInt(F) < parseInt(D)) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger_min", B, D));
		return false
	}
	return true
}
function isWord(E) {
	var G = E.value;
	var B = E.getAttribute("inputName");
	var F = E.getAttribute("character") || formValidate.unCharactor;
	var A = "";
	for (var D = 0; D < F.length; D++) {
		if (G.indexOf(F.charAt(D)) > -1) {
			A += F.charAt(D)
		}
	}
	if (A.length > 0) {
		writeValidateInfo(E, $.i18n("formValidate_isWord", B, A, F));
		return false
	}
	return true
}
function isSepcialWord(E) {
	var G = E.value;
	var B = E.getAttribute("inputName");
	var F = E.getAttribute("character") || "\\!@#$|%^&*?:<>/'";
	var A = "";
	for (var D = 0; D < F.length; D++) {
		if (G.indexOf(F.charAt(D)) > -1) {
			A += F.charAt(D)
		}
	}
	if (A.length > 0) {
		writeValidateInfo(E, $.i18n("formValidate_isWord", B, A, F));
		return false
	}
	return true
}
function isCriterionWord(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (!testRegExp(D, "^[\\w-]+$")) {
		writeValidateInfo(B, $.i18n("formValidate_isCriterionWord", A));
		return false
	}
	return true
}
function isUrl(B) {
	var D = B.value;
	if (!D) {
		return true
	}
	var A = B.getAttribute("inputName");
	if (!testRegExp(D, "^http://{1}([\\w-]+.)+[\\w-]+")) {
		writeValidateInfo(B, $.i18n("formValidate_isUrl", A));
		return false
	}
	return true
}
function startsWith(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var D = B.getAttribute("prefix");
	if (E.indexOf(D) != 0) {
		writeValidateInfo(B, $.i18n("formValidate_startsWith", A, D));
		return false
	}
	return true
}
function isDeaultValue(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	var A = getDefaultValue(D);
	if (E == A) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	return true
}
function isDefaultValue(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	var A = getDefaultValue(D);
	if (E == A) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	return true
}
var __addDataEventObject = null;
function whenstart(E, M, G, I, H, F, A, L) {
	H = H || "date";
	if (F == null) {
		F = true
	}
	__addDataEventObject = M;
	var J = v3x.getEvent();
	if (v3x.getBrowserFlag("openWindow") == false || typeof(window.showModalDialog) == "undefined") {
		var K = J.currentTarget;
		var B = new MxtWindow({
				id: "date_win",
				title: v3x.getMessage("V3XLang.calendar_page_title"),
				url: E + "/common/js/addDate/date.jsp?type=" + H + "&allowEmpty=" + F + "&showButton=false",
				height: L + 5 || 320,
				width: A + 5 || 320,
				relativeElement: M,
				targetWindow: getA8Top(),
				type: "window",
				isDrag: false,
				buttons: [{
						id: "btn1",
						text: "\u786e\u5b9a",
						handler: function () {
							var N = B.getReturnValue();
							if (N) {
								K.value = N
							}
							B.close()
						}
					}, {
						id: "btn2",
						text: "\u6e05\u7a7a",
						handler: function () {
							K.value = "";
							B.close()
						}
					}
				]
			})
	} else {
		var D = v3x.openWindow({
				url: E + "/common/js/addDate/date.jsp?type=" + H + "&allowEmpty=" + F + "&showButton=true",
				height: 230,
				width: 250,
				top: J.screenY + 20,
				left: J.screenX - 50
			});
		if (D == null) {
			D = ""
		}
		if (!M && D) {
			return D
		}
		return D
	}
}
Date.prototype.isDate = function (D, B) {
	var K,
	E;
	var I,
	A,
	F,
	H;
	var G;
	var J = new String(D);
	if (J.length < 8 || J.length > 10) {
		return false
	}
	E = "^([0-9]){4}(-|/)([0-9]){1,2}(-|/)([0-9]){1,2}$";
	K = new RegExp(E);
	if (J.search(K) == -1) {
		return false
	}
	I = J.charAt(4);
	G = J.split(I);
	if (G.length != 3) {
		return false
	}
	A = parseInt(G[0], 10);
	F = parseInt(G[1], 10);
	H = parseInt(G[2], 10);
	if (A < 1900 || A > 2500) {
		return false
	}
	if (F < 1 || F > 12) {
		return false
	}
	if (H < 1 || H > 31) {
		return false
	}
	switch (F) {
	case 4:
	case 6:
	case 9:
	case 11:
		if (H > 30) {
			return false
		}
		break;
	case 2:
		if ((A % 4 == 0 && A % 100 != 0) || A % 400 == 0) {
			if (H > 29) {
				return false
			}
		} else {
			if (H > 28) {
				return false
			}
		}
		break;
	default:
		break
	}
	if (B) {
		this.setDate(H);
		this.setMonth(F - 1);
		this.setYear(A)
	}
	return true
};
function parseDate(B) {
	var D = B.split("-");
	var F = parseInt(D[0], 10);
	var A = parseInt(D[1], 10) - 1;
	var E = parseInt(D[2], 10);
	return new Date(F, A, E)
}
Date.prototype.dateAdd = function (J, I) {
	var M;
	var H = J;
	var G,
	A,
	E;
	var D;
	var F = false;
	var K;
	var B;
	var L;
	if (this.isDate(J, true) == false) {
		return J
	}
	L = new String(J);
	K = L.charAt(4);
	B = L.split(K);
	G = parseInt(B[0], 10);
	A = parseInt(B[1], 10);
	E = parseInt(B[2], 10);
	while (I != 0) {
		if (I > 0) {
			E++
		} else {
			E--
		}
		if (E <= 0 || E > 31) {
			F = true;
			if (E <= 0) {
				E = 31
			} else {
				E = 1
			}
		} else {
			F = false
		}
		if (F) {
			if (I > 0) {
				A++
			} else {
				A--
			}
			if (A <= 0 || A > 12) {
				F = true;
				if (A <= 0) {
					A = 12
				} else {
					A = 1
				}
			} else {
				F = false
			}
		}
		if (F) {
			if (I > 0) {
				G++
			} else {
				G--
			}
		}
		H = G + "-" + A + "-" + E;
		if (this.isDate(H, false)) {
			if (I > 0) {
				I--
			} else {
				I++
			}
		}
	}
	return H
};
Date.prototype.getWeekStart = function (A) {
	this.isDate(A, true);
	var B = this.getDay();
	var D = B;
	if (D != 0) {
		D = -D
	}
	return formatDate(this.dateAdd(A, D))
};
Date.prototype.getWeekEnd = function (A) {
	this.isDate(A, true);
	var B = this.getDay();
	var D = 6 - B;
	return formatDate(this.dateAdd(A, D))
};
Date.prototype.getMonthStart = function (A) {
	this.isDate(A, true);
	A = this.getFullYear() + "-" + (this.getMonth() + 1) + "-1";
	return formatDate(A)
};
Date.prototype.getMonthEnd = function (D) {
	this.isDate(D, true);
	var A = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	var E = this.getFullYear();
	var F = this.getMonth() + 1;
	var B = A[this.getMonth()];
	if (E % 4 == 0 && F == 2) {
		B++
	}
	D = E + "-" + F + "-" + B;
	return formatDate(D)
};
Date.prototype.getSeasonStart = function (B) {
	var A = [1, 1, 1, 4, 4, 4, 7, 7, 7, 10, 10, 10];
	this.isDate(B, true);
	B = this.getFullYear() + "-" + A[this.getMonth()] + "-1";
	return formatDate(B)
};
Date.prototype.getSeasonEnd = function (D) {
	this.isDate(D, true);
	var B = [3, 3, 3, 6, 6, 6, 9, 9, 9, 12, 12, 12];
	var A = [31, 31, 31, 30, 30, 30, 30, 30, 30, 31, 31, 31];
	this.isDate(D, true);
	D = this.getFullYear() + "-" + B[this.getMonth()] + "-" + A[this.getMonth()];
	return formatDate(D)
};
Date.prototype.getWeekOfMonth = function () {
	var A = this.getDay();
	var B = this.getDate();
	return Math.ceil((B + 6 - A) / 7)
};
function formatDate(A) {
	var E = A.split("-");
	var D = parseInt(E[1], 10);
	var B = parseInt(E[2], 10);
	return E[0] + "-" + (D < 10 ? "0" + D : D) + "-" + (B < 10 ? "0" + B : B)
}
Date.prototype.format = function (D) {
	var A = this.getHours();
	var E = {
		"M+": this.getMonth() + 1,
		"d+": this.getDate(),
		"H+": A,
		"h+": (A > 12 ? A - 12 : A),
		"m+": this.getMinutes(),
		"s+": this.getSeconds(),
		"q+": Math.floor((this.getMonth() + 3) / 3),
		S: this.getMilliseconds()
	};
	if (/(y+)/.test(D)) {
		D = D.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length))
	}
	for (var B in E) {
		if (new RegExp("(" + B + ")").test(D)) {
			D = D.replace(RegExp.$1, RegExp.$1.length == 1 ? E[B] : ("00" + E[B]).substr(("" + E[B]).length))
		}
	}
	return D
};
function compareDate(B, A) {
	return Date.parse(B.replace(/\-/g, "/")) - Date.parse(A.replace(/\-/g, "/"))
}
var chinese = ["\u96f6", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d", "\u4e03", "\u516b", "\u4e5d"];
var len = ["\u5341"];
var ydm = ["\u5e74", "\u6708", "\u65e5"];
function num2chinese(D) {
	D = "" + D;
	slen = D.length;
	var A = "";
	for (var B = 0; B < slen; B++) {
		A += chinese[D.charAt(B)]
	}
	return A
}
function n2c(B) {
	B = "" + B;
	var A = "";
	if (B.length == 2) {
		if (B.charAt(0) == "1") {
			if (B.charAt(1) == "0") {
				return len[0]
			}
			return len[0] + chinese[B.charAt(1)]
		}
		if (B.charAt(1) == "0") {
			return chinese[B.charAt(0)] + len[0]
		}
		return chinese[B.charAt(0)] + len[0] + chinese[B.charAt(1)]
	}
	return num2chinese(B)
}
function date2chinese0(B) {
	var A = date2chinese(B);
	A = A.replace(/\u96f6/g, "\u3007");
	return A
}
function date2chinese1(B) {
	var D;
	var A = B.split("-");
	if (A.length != 3) {
		A = B.split("/")
	}
	if (A.length != 3) {
		return B
	}
	if (A[1].charAt(0) == "0") {
		A[1] = A[1].substr(1)
	}
	if (A[2].charAt(0) == "0") {
		A[2] = A[2].substr(1)
	}
	D = A[0] + "\u5e74" + A[1] + "\u6708" + A[2] + "\u65e5";
	return D
}
function date2chinese(D) {
	var F = /^(\d{2}|\d{4})(\/|-)(\d{1,2})(\2)(\d{1,2})$/;
	var E = D.match(F);
	var B = "";
	if (E == null) {
		return false
	}
	for (var A = 1; A < E.length; A = A + 2) {
		B += n2c(E[A] - 0) + ydm[(A - 1) / 2]
	}
	return B
}
function chanageBodyType(F, B) {
	var E = document.getElementById("bodyType");
	if (E && E.value == F) {
		return true
	}
	var A = document.getElementById("appName");
	if (A && A.value == "4" && F == "HTML") {
		var D = document.getElementById("content");
		if (D) {
			D.value = ""
		}
	}
	if (confirm(v3x.getMessage("V3XLang.common_confirmChangBodyType"))) {
		var G = document.getElementById("changePdf");
		if (G) {
			if (F == "OfficeWord" || F == "WpsWord") {
				G.style.display = ""
			} else {
				G.style.display = "none"
			}
		}
		var H = {};
		if (typeof(officeParams) != "undefined") {
			H = officeParams
		}
		H.needReadFile = false;
		if (F == "Pdf") {
			needReadFile = false
		}
		showEditor(F, true, H);
		return true
	}
	return false
}
function getA8Top() {
	try {
		var A = getA8ParentWindow(window);
		if (A) {
			return A
		} else {
			return top
		}
	} catch (B) {
		return top
	}
}
function getA8ParentWindow(D) {
	var A = D;
	for (var B = 0; B < 20; B++) {
		if (typeof A.isCtpTop != "undefined" && A.isCtpTop) {
			return A
		} else {
			if (A == window.top) {
				break
			}
			A = A.parent
		}
	}
}
function showEditor(D, B, H) {
	B = (B == null) ? true : false;
	if (D == "HTML") {
		removeOfficeDiv(B);
		oFCKeditor.ReplaceTextarea()
	} else {
		if (D == "OfficeWord") {
			oFCKeditor.remove();
			var A = getInstallOfficeStatus();
			if (A.installDoc) {
				H.fileType = "doc"
			} else {
				H.fileType = "wps"
			}
			H.fileType = "doc";
			initBaseOffice(H)
		} else {
			if (D == "OfficeExcel") {
				oFCKeditor.remove();
				H.fileType = "xls";
				initBaseOffice(H)
			} else {
				if (D == "WpsWord") {
					oFCKeditor.remove();
					H.fileType = "wps";
					initBaseOffice(H)
				} else {
					if (D == "WpsExcel") {
						oFCKeditor.remove();
						H.fileType = "et";
						initBaseOffice(H)
					} else {
						if (D == "Pdf") {
							oFCKeditor.remove();
							showPdfDiv("pdf")
						}
					}
				}
			}
		}
	}
	var E = document.getElementById("bodyType");
	if (E) {
		setContentTypeState(E.value, D);
		E.value = D
	}
	try {
		var F = document.getElementById("bulBottPre").value;
		if (F && F == "1") {
			if (D == "HTML") {
				myBar.enabled("preview")
			} else {
				myBar.disabled("preview")
			}
		}
	} catch (G) {}
}
function initContentTypeState() {
	try {
		bodyType = document.getElementById("bodyType").value;
		bodyTypeSelector.disabled("menu_bodytype_" + bodyType)
	} catch (A) {}
}
function setContentTypeState(A, B) {
	try {
		if (A == B) {
			bodyTypeSelector.disabled("menu_bodytype_" + B)
		} else {
			bodyTypeSelector.disabled("menu_bodytype_" + B);
			bodyTypeSelector.enabled("menu_bodytype_" + A)
		}
	} catch (D) {}
}
function getInstallOfficeStatus() {
	var B = {};
	try {
		var A = (navigator.appName == "Microsoft Internet Explorer") || ua.indexOf("Trident") != -1;
		if (A) {
			var E = "";
			if (navigator.cpuClass.indexOf("x86") != -1) {
				E = new ActiveXObject("Kinggrid.iWebOffice")
			} else {
				E = new ActiveXObject("Kinggrid.iWebOffice_x64")
			}
			B.installDoc = E.WebApplication(".doc");
			B.installWps = E.WebApplication(".wps")
		} else {
			B.installDoc = true;
			B.installWps = true
		}
	} catch (D) {
		B.installDoc = true;
		B.installWps = true
	}
	return B
}
function showNextCondition(A) {
	if (!A) {
		return
	}
	var B = A.options;
	for (var D = 0; D < B.length; D++) {
		var E = document.getElementById(B[D].value + "Div");
		if (E) {
			E.style.display = "none"
		}
	}
	if (!document.getElementById(A.value + "Div")) {
		return
	}
	document.getElementById(A.value + "Div").style.display = "block"
}
function showCondition(conditionValue, textfieldValue, textfield1Value) {
	if (!conditionValue) {
		return
	}
	var conditionObj = document.getElementById("condition");
	selectUtil(conditionObj, conditionValue);
	showNextCondition(conditionObj);
	var theDiv = document.getElementById(conditionValue + "Div");
	if (theDiv) {
		var nodes = theDiv.childNodes;
		if (nodes) {
			for (var j = 0; j < nodes.length; j++) {
				var node = nodes.item(j);
				if (node.tagName == "INPUT") {
					eval("node.value = " + node.name + "Value;")
				} else {
					if (node.tagName == "SELECT") {
						eval("selectUtil(node, " + node.name + "Value)")
					}
				}
			}
		}
	}
}
function selectUtil(E, B) {
	if (!E) {
		return false
	}
	var D = E.options;
	for (var A = D.length - 1; A >= 0; A--) {
		if (D[A].value == B) {
			E.selectedIndex = A;
			return true
		}
	}
	return false
}
function dateCheck() {
	var B = document.getElementById("startdate").value;
	var A = document.getElementById("enddate").value;
	if (compareDate(B, A) > 0) {
		window.alert($.i18n("calendar_endTime_startTime"));
		return false
	}
	doSearch()
}
var SearchEnter = {
	submitCount: 0
};
function doSearch() {
	var L = document.getElementsByName("searchForm")[0];
	var F = document.getElementById("createDateDiv");
	if (L) {
		if (SearchEnter.submitCount > 2) {
			return
		}
		var R = L.condition.options;
		for (var I = 0; I < R.length; I++) {
			if (L.condition.value == R[I].value) {
				var M = true;
				if ("createDate" == L.condition.value) {
					var G = document.getElementById(R[I].value + "Div");
					var D;
					if (G != null) {
						D = G.childNodes
					}
					var Q = new Array();
					if (D != null) {
						D = F.childNodes;
						for (var H = 0; H < D.length; H++) {
							var K = D[H];
							if (K.type == "text") {
								Q.push(K)
							}
						}
					}
					if ((Q.length > 0) && (Q.length < 3)) {
						var B = Q[0].value;
						var A = B.split("-");
						var O = new Date();
						O.setFullYear(A[0], A[1] - 1, A[2]);
						var P = Q[1].value;
						var J = P.split("-");
						var E = new Date();
						E.setFullYear(J[0], J[1] - 1, J[2]);
						if (E < O) {
							M = false
						}
					}
				}
				if (M) {
					continue
				} else {
					return
				}
			}
			var N = document.getElementById(R[I].value + "Div");
			if (N) {
				N.innerHTML = ""
			}
		}
		L.target = L.target || "_self";
		SearchEnter.submitCount++;
		L.submit()
	}
}
function doSearchEnter() {
	var A = v3x.getEvent();
	if (A.keyCode == 13) {
		doSearch()
	}
}
function listenerKeyESC() {
	var A = v3x.getEvent();
	if (A.keyCode == 27) {
		window.close()
	}
}
function validateCheckbox(B) {
	B = B || "id";
	var F = document.getElementsByName(B);
	if (!F) {
		return 0
	}
	var D = 0;
	var A = F.length;
	for (var E = 0; E < A; E++) {
		if (F[E].checked) {
			D++
		}
	}
	return D
}
function getCheckboxSingleValue(A) {
	var B = getCheckboxSingleObject(A);
	return B == null ? null : B.value
}
function getCheckboxSingleObject(B) {
	B = B || "id";
	var F = document.getElementsByName(B);
	if (!F) {
		return 0
	}
	var D = 0;
	var A = F.length;
	for (var E = 0; E < A; E++) {
		if (F[E].checked) {
			return F[E]
		}
	}
	return null
}
var currentOpinionId = "";
function hiddenReplyDiv() {
	var A = document.getElementById("replyDiv" + currentOpinionId);
	if (A) {
		A.innerHTML = "";
		A.style.display = "none"
	}
	fileUploadAttachments.clear()
}
function reply(T, U, G, P, E, O, K, D) {
	var Q = document.getElementById("replyDiv" + currentOpinionId);
	if (Q && Q.innerHTML != "") {
		return
	}
	hiddenReplyDiv();
	opinionId5 = T;
	var B = document.getElementById("uploadAttachmentSpan");
	if (B != null) {
		B.style.display = (G == true ? "" : "none")
	}
	var L = document.getElementById("myDocumentSpan");
	if (L) {
		L.style.display = (P == true ? "" : "none")
	}
	var J = document.getElementById("replyDiv" + T);
	if (J) {
		J.innerHTML = document.getElementById("replyCommentHTML").innerHTML;
		J.style.display = "";
		var M = document.getElementById("reply-table");
		if (M != null) {
			M.style.display = ""
		}
		var S = document.getElementsByName("repform")[0];
		S.isHidden.id = "isHidden";
		try {
			S.isSendMessage.id = "isSendMessage"
		} catch (R) {}
		if (E) {
			document.getElementById("isHiddenDiv").style.display = "none"
		}
		if (S.b11) {
			S.b11.focus()
		}
		S.content.focus();
		S.opinionId.value = T;
		if (U) {
			S.memberId.value = U
		}
		var H = document.getElementById("affairMemberId");
		var I = document.getElementById("sendMessagePeopleSpan");
		if (H) {
			if (O) {
				var N = document.getElementById("pushMessageMemberNames");
				if (N && currentUserId != U) {
					N.value = O
				}
				if (N && currentUserId == U) {
					S.isSendMessage.checked = false;
					I.style.display = "none"
				}
			}
			if (K) {
				var A = document.getElementById("pushMessageMemberIds");
				if (A) {
					A.value = K + "," + U
				}
				var F = document.getElementById("replyedAffairId");
				if (F) {
					F.value = K
				}
			}
		} else {
			if (S.isSendMessage) {
				S.isSendMessage.checked = false
			}
			if (I) {
				I.style.display = "none"
			}
		}
	}
	currentOpinionId = T
}
function checkReplyForm(A) {
	if (checkForm(A)) {
		return true
	}
	return false
}
function checkDefSubject(B, D) {
	var A = getDefaultValue(B);
	if (D && B.value == A) {
		B.value = ""
	} else {
		if (!B.value) {
			B.value = A
		}
	}
}
function getDefaultValue(B) {
	if (!B) {
		return null
	}
	var A = B.attributes.getNamedItem("defaultValue");
	if (!A) {
		A = B.attributes.getNamedItem("deaultValue")
	}
	if (A) {
		return A.nodeValue
	}
	return null
}
function Panel(D, B, A) {
	this.id = D;
	this.label = B;
	this.onclick = A || ""
}
Panel.prototype.toString = function () {
	return "<div id='button-L" + this.id + "' class=\"sign-button-L\"></div><div id='button" + this.id + "' onClick=\"changeLocation('" + this.id + "');" + this.onclick + '" class="sign-button-M">' + this.label + "</div><div id='button-R" + this.id + '\' class="sign-button-R"></div><div class="sign-button-line"></div>'
};
Panel.prototype.toMinString = function () {
	return '<div class="sign-min-label" onclick="changeLocation(\'' + this.id + "');" + this.onclick + '" title="' + this.label + '">' + this.label + '</div><div class="separatorDIV"></div>'
};
function showPanels(B) {
	if (B != false) {
		document.write('<div id="hiddenPrecessAreaDiv" onclick="hiddenPrecessArea()" title="' + v3x.getMessage("V3XLang.common_hiddenPrecessArea") + '"></div>')
	}
	for (var A = 0; A < panels.size(); A++) {
		document.write(panels.get(A).toString())
	}
	document.close()
}
function showMinPanels() {
	for (var A = 0; A < panels.size(); A++) {
		document.write(panels.get(A).toMinString())
	}
	document.close();
	setNoOrResize(true)
}
function setNoOrResize(B) {
	try {
		var A = parent.document.getElementById("detailRightFrame");
		if (A) {
			A.noResize = B
		} else {
			return
		}
	} catch (D) {}
}
function changeLocation(G) {
	for (var B = 0; B < panels.size(); B++) {
		var A = panels.get(B).id;
		if (A == G) {
			continue
		}
		document.getElementById("button-L" + A).className = "sign-button-L";
		document.getElementById("button" + A).className = "sign-button-M";
		document.getElementById("button-R" + A).className = "sign-button-R";
		var F = document.getElementById(A + "TR");
		if (F) {
			F.style.display = "none"
		}
	}
	var E = document.getElementById("button" + G);
	if (E) {
		document.getElementById("button-L" + G).className = "sign-button-L-sel";
		E.className = "sign-button-M-sel";
		document.getElementById("button-R" + G).className = "sign-button-R-sel"
	}
	var D = document.getElementById(G + "TR");
	if (D) {
		D.style.display = ""
	}
	setNoOrResize(false)
}
function showPrecessArea(B) {
	try {
		parent.detailMainFrame.contentIframe.SeeyonForm_HideArrow()
	} catch (E) {}
	B = B || "32%";
	try {
		parent.document.getElementById("zy").cols = "*," + B
	} catch (E) {}
	var D = document.getElementById("signAreaTable");
	if (D) {
		D.style.display = ""
	}
	var A = document.getElementById("signMinDiv");
	if (A) {
		A.style.display = "none";
		A.style.height = "0px"
	}
}
function hiddenPrecessArea() {
	try {
		parent.detailMainFrame.contentIframe.SeeyonForm_HideArrow()
	} catch (D) {}
	try {
		parent.document.getElementById("zy").cols = "*,45"
	} catch (D) {}
	var B = document.getElementById("signAreaTable");
	if (B) {
		B.style.display = "none"
	}
	var A = document.getElementById("signMinDiv");
	if (A) {
		A.style.display = "";
		A.style.height = "100%"
	}
	setNoOrResize(true)
}
function refreshIt() {
	location.reload(true)
}
function refreshWorkSpace() {
	var A = getA8Top().reFlesh()
}
function locationBack() {
	history.back()
}
function escapeStringToHTML(D, B, A) {
	if (!D) {
		return ""
	}
	D = D.replace(/&/g, "&amp;");
	D = D.replace(/</g, "&lt;");
	D = D.replace(/>/g, "&gt;");
	D = D.replace(/\r/g, "");
	if (typeof(A) == "undefined" || (A == true || A == "true")) {
		D = D.replace(/\n/g, "<br/>")
	}
	D = D.replace(/\'/g, "&#039;");
	D = D.replace(/"/g, "&#034;");
	if (typeof(B) != "undefined" && (B == true || B == "true")) {
		D = D.replace(/ /g, "&nbsp;")
	}
	return D
}
function escapeStringToJavascript(A) {
	if (!A) {
		return A
	}
	A = A.replace(/\\/g, "\\\\");
	A = A.replace(/\r/g, "");
	A = A.replace(/\n/g, "");
	A = A.replace(/\'/g, "\\'");
	A = A.replace(/"/g, '\\"');
	return A
}
function getParameter(D) {
	var F = document.location.search;
	if (F) {
		F = F.substring(1);
		var E = F.split("&");
		for (var B = 0; B < E.length; B++) {
			var A = E[B].split("=");
			if (D == A[0]) {
				return A[1]
			}
		}
	}
}
function setSelectValue(D, F) {
	var A = document.getElementById(D);
	if (!A) {
		return
	}
	var E = A.options;
	if (!E) {
		return
	}
	for (var B = 0; B < E.length; B++) {
		var G = E[B];
		if (G.value == F) {
			G.selected = true;
			break
		}
	}
}
var sxUpConstants = {
	status_0: "0,*",
	status_1: "35%,*"
};
var sxDownConstants = {
	status_0: "*,9",
	status_1: "35%,*"
};
var sxMiddleConstants = {
	status_0: "35%,*",
	status_1: "35%,*"
};
var indexFlag = 0;
function previewFrame(direction) {
	if (!direction) {
		return
	}
	var obj = parent.parent.document.getElementById("sx");
	if (obj == null) {
		obj = parent.document.getElementById("sx")
	}
	if (obj == null) {
		return
	}
	if (indexFlag > 1) {
		indexFlag = 0
	}
	var status = eval("sx" + direction + "Constants.status_" + indexFlag);
	obj.rows = status;
	if (direction != "Middle") {
		indexFlag++
	}
}
function checkImageSize(A) {
	if (A.width > 540) {
		A.width = 540
	}
}
function getDetailPageBreak(F, E) {
	var A = true;
	if (F != true && (getA8Top().window.dialogArguments || window.opener)) {
		A = false
	}
	var D = "";
	try {
		D = v3x == null ? "" : v3x.baseURL + "/common/"
	} catch (B) {}
	document.write('<table id=\'pagebreakspare\' border="0" cellpadding="0" cellspacing="0" width="100%"  height="10" align="center">');
	document.write('<tr align="center">');
	document.write("<td style='height:10px; overflow:hidden;' class=\"detail-top\">");
	if (A) {
		document.write('<table border="0" cellpadding="0" cellspacing="0" width="100%"  height="10">');
		document.write("<tr>");
		document.write("<td>");
		document.write("<div class='break-up' onclick=\"previewFrame('Up')\"></div>");
		document.write("</td>");
		document.write("<td>");
		document.write("<div class='break-down' onclick=\"previewFrame('Down')\"></div>");
		document.write("</td>");
		document.write("</tr>");
		document.write("</table>")
	} else {
		document.write("&nbsp;")
	}
	document.write("</td>");
	document.write("</tr>");
	document.write("</table>");
	document.close();
	if (E == "Down") {
		previewFrame("Down")
	} else {
		previewFrame("Middle")
	}
}
function getLimitLength(D, A, B) {
	return D.getLimitLength(A, B)
}
function changeMenuTab(D) {
	var G = document.getElementById("menuTabDiv");
	var F = D.className;
	if (F == "tab-tag-middel-sel") {
		return
	}
	var E = G.getElementsByTagName("div");
	var B;
	for (B = 0; B < E.length; B++) {
		F = E[B].className;
		if (F.substr(F.length - 4) == "-sel") {
			E[B].className = F.substr(0, F.length - 4)
		}
	}
	for (B = 0; B < E.length; B++) {
		if (D == E[B]) {
			E[B - 1].className = E[B - 1].className + "-sel";
			E[B].className = E[B].className + "-sel";
			E[B + 1].className = E[B + 1].className + "-sel"
		}
	}
	var A = document.getElementById("detailIframe").contentWindow;
	A.location.href = D.getAttribute("url")
}
function setDefaultTab(E) {
	var D = document.getElementById("menuTabDiv");
	var B = D.getElementsByTagName("div");
	B[E * 4].className = B[E * 4].className + "-sel";
	B[E * 4 + 1].className = B[E * 4 + 1].className + "-sel";
	B[E * 4 + 2].className = B[E * 4 + 2].className + "-sel";
	var A = document.getElementById("detailIframe").contentWindow;
	A.location.href = B[E * 4 + 1].getAttribute("url")
}
function getRadioValue(B) {
	var D = document.getElementsByName(B);
	if (!D) {
		return null
	}
	for (var A = 0; A < D.length; A++) {
		if (D[A].checked) {
			return D[A].value
		}
	}
	return null
}
var sx_variable = {
	detailFrameName: "",
	title: "",
	imgSrc: "",
	count: 0,
	description: "",
	isShow: false
};
function showDetailPageBaseInfo(A, F, B, E, D) {
	parent.sx_variable.detailFrameName = A;
	parent.sx_variable.title = F;
	parent.sx_variable.imgSrc = B;
	parent.sx_variable.count = E;
	parent.sx_variable.description = D;
	parent.doDetailPageBaseInfo()
}
function doDetailPageBaseInfo() {
	if (!sx_variable.detailFrameName) {
		return
	}
	var detailDocument = null;
	try {
		detailDocument = document.getElementById(sx_variable.detailFrameName).contentWindow
	} catch (e) {}
	if (detailDocument && detailDocument.document.readyState == "complete") {
		var flag = eval("detailDocument.detailPageBaseInfoFlag");
		if (!flag) {
			detailDocument.location.href = v3x.baseURL + "/common/detail.jsp";
			window.setTimeout("doDetailPageBaseInfo()", 500);
			return
		}
		detailDocument.document.getElementById("titlePlace").innerHTML = sx_variable.title;
		if (sx_variable.count != null && sx_variable.count >= 0) {
			detailDocument.document.getElementById("countPlace").innerHTML = v3x.getMessage("V3XLang.common_detailPage_count_label", "<span class='countNumber'>" + sx_variable.count + "</span>")
		}
		detailDocument.document.getElementById("descriptionPlace").innerHTML = sx_variable.description || "";
		detailDocument.document.getElementById("allDiv").style.display = ""
	} else {
		window.setTimeout("doDetailPageBaseInfo()", 500)
	}
}
function reloadDetailPageBaseInfo() {
	try {
		parent.doDetailPageBaseInfo()
	} catch (A) {}
}
function changeTabUnSelected(A) {
	if (A) {
		document.getElementById("l-" + A).className = "tab-tag-left";
		document.getElementById("m-" + A).className = "tab-tag-middel cursor-hand";
		document.getElementById("r-" + A).className = "tab-tag-right"
	}
}
function changeTabSelected(A) {
	if (A) {
		document.getElementById("l-" + A).className = "tab-tag-left-sel";
		document.getElementById("m-" + A).className = "tab-tag-middel-sel";
		document.getElementById("r-" + A).className = "tab-tag-right-sel"
	}
}
var newIdes;
var pigeonholeItem = {};
function pigeonhole(B, E, H, F, D, A) {
	pigeonholeItem.collBackFuns = A;
	newIdes = E;
	if (typeof(D) == "undefined") {
		D = ""
	}
	if (typeof(A) != "undefined") {
		getA8Top().pigeonholeWin = getA8Top().$.dialog({
				title: getA8Top().$.i18n("doc.tree.move.title"),
				transParams: {
					parentWin: window
				},
				closeParam: {
					show: true,
					handler: function () {
						pigeonholeChromeCollBack("cancel")
					}
				},
				url: v3x.baseURL + "/doc.do?method=docPigeonhole&appName=" + B + "&atts=" + H + "&validAcl=" + F + "&pigeonholeType=" + D + CsrfGuard.getUrlSurffix(),
				width: 500,
				height: 500,
				isDrag: false
			})
	} else {
		var G = v3x.openWindow({
				url: v3x.baseURL + "/doc.do?method=docPigeonhole&appName=" + B + "&atts=" + H + "&validAcl=" + F + "&pigeonholeType=" + D + CsrfGuard.getUrlSurffix(),
				width: "500",
				height: "500",
				resizable: "true",
				scrollbars: "true"
			});
		if (G == undefined) {
			G = "cancel"
		}
		return G
	}
}
function pigeonholeChromeCollBack(B) {
	var A = $("#officeFrameDiv");
	if (A.length > 0) {
		A.css("visibility", "visible")
	}
	getA8Top().pigeonholeWin.close();
	var D = new Function(pigeonholeItem.collBackFuns + "('" + B + "');");
	D()
}
function projectPigeonhole(A, D, B, F) {
	var E = v3x.openWindow({
			url: _ctxPath + "/doc.do?method=docTreeProjectIframe&appName=" + A + "&ids=" + D + "&projectId=" + B + "&atts=" + F,
			width: "500",
			height: "500",
			resizable: "true",
			scrollbars: "true"
		});
	if (E == undefined) {
		E = "cancel"
	}
	return E
}
function isPhoneNumber(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var D = /^([\d]*)$/;
	if (!D.test(E)) {
		writeValidateInfo(B, $.i18n("formValidate_isNumber", A));
		return false
	}
	return true
}
function Avacount(A) {
	var D = A.value;
	var B = document.getElementById("Avacount").value;
	if (parseInt(D) > parseInt(B)) {
		alertAvacount();
		return false
	}
	return true
}
function setScrollPosition(A, E, D) {
	var B = (D != null) ? document.getElementById(D) : document.body;
	B.scrollLeft = A;
	B.scrollTop = E
}
function resizeBody(D, A, B, G) {
	try {
		B = (B == "min") ? "min" : "max";
		G = (G == "left") ? "left" : "right";
		var F = parent.document.getElementById(A);
		if (F == null) {
			F = parent.parent.document.getElementById(A)
		}
		if (B == "max") {
			if (document.body.clientWidth > D) {
				if (G == "left") {
					F.cols = "" + D + ",*"
				} else {
					F.cols = "*," + D + ""
				}
			}
		} else {
			if (document.body.clientWidth < D) {
				if (G == "left") {
					F.cols = "" + D + ",*"
				} else {
					F.cols = "*," + D + ""
				}
			}
		}
	} catch (E) {}
}
function resizeRightBody(D, A, B) {
	try {
		var F = parent.document.getElementById(A);
		if (F == null) {
			F = parent.parent.document.getElementById(A)
		}
		if (document.body.clientWidth < D) {
			F.cols = "*," + B + ""
		}
	} catch (E) {}
}
function cancelOk() {
	try {
		var E = arguments[0];
		if (E != null) {
			if (E.page != null && E.page == "new") {
				window.location.href = v3x.baseURL + "/common/detail.jsp"
			} else {
				if (E.page != null && E.page == "edit") {
					var H = document.forms;
					for (var D = 0; D < H.length; D++) {
						for (var A = 0; A < H[D].length; A++) {
							if (E.enable != null) {
								for (var B = 0; B < E.enable.length; B++) {
									if (H[D][A].id == E.enable[B]) {
										break
									} else {
										H[D][A].disabled = true
									}
								}
							} else {
								H[D][A].disabled = true
							}
						}
					}
					if (E.hidden != null) {
						for (var F = 0; F < E.hidden.length; F++) {
							document.getElementById(E.hidden[F]).style.display = "none"
						}
					}
				} else {
					window.close()
				}
			}
		} else {
			window.location.href = v3x.baseURL + "/common/detail.jsp"
		}
	} catch (G) {}
}
function canShowPeopleCard(A) {
	var D = false;
	var B = new XMLHttpRequestCaller(this, "ajaxOrgManager", "canShowPeopleCard", false);
	B.addParameter(1, "Long", null);
	B.addParameter(2, "Long", A);
	var E = B.serviceRequest();
	if (E == true || E == "true") {
		D = true
	}
	return D
}
function showV3XMemberCard(A, B) {
	if (!canShowPeopleCard(A)) {
		return
	}
	newPeopleCardDialog = getA8Top().$.dialog({
			id: "newPeopleCardDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: 530,
			top: 50,
			closeParam: {
				show: false
			}
		})
}
function showV3XMemberCardWithOutButton(A, B) {
	if (!canShowPeopleCard(A)) {
		return
	}
	if (getA8Top().isCtpTop) {
		getA8Top().newPeopleCardWithoutButtonDialog = getA8Top().$.dialog({
				id: "newPeopleCardWithoutButtonDialog",
				transParams: {
					parentWin: window
				},
				title: " ",
				isHead: false,
				url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
				width: 455,
				height: 465,
				top: 50,
				closeParam: {
					show: false
				}
			})
	} else {
		getA8Top().newPeopleCardWithoutButtonDialog = v3x.openDialog({
				id: "newPeopleCardWithoutButtonDialog",
				title: " ",
				isHead: false,
				transParams: {
					parentWin: window
				},
				targetWindow: B == undefined ? getA8Top() : B,
				url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
				width: 455,
				height: 515,
				closeParam: {
					show: false
				}
			})
	}
}
function ajaxCheckAccountExchangePendingAffair(D, F) {
	try {
		var A = new XMLHttpRequestCaller(this, "ajaxEdocExchangeManager", "checkEdocExchangeHasPendingAffair", false);
		A.addParameter(1, "Long", D);
		var B = A.serviceRequest();
		if (B != "0") {
			if (F != "") {
				alert(v3x.getMessage("MainLang.edoc_alert_hasExchangePendingAffair", F))
			} else {
				alert(v3x.getMessage("MainLang.edoc_alert_notdelteAllExchanger"))
			}
			return true
		}
		return false
	} catch (E) {
		alert("Exception : " + E);
		return false
	}
}
function isOpenFromGenius() {
	var B = false;
	try {
		B = getA8Top().location.href.indexOf("a8genius.do") > -1
	} catch (A) {
		alert(A)
	}
	return B
}
if (navigator.userAgent.indexOf("iPad") != -1) {
	window.addEventListener("load", function () {
		getA8Top().document.body.style.height = "690px"
	})
}
function setFFGrid(A, B) {
	if (A == "" || B == false) {
		return
	}
	if (document.all) {
		window.attachEvent("onload", function () {
			mxtgrid(A)
		});
		window.attachEvent("onresize", function () {
			resizeGrid(A, B)
		})
	} else {
		mxtgrid(A);
		window.addEventListener("resize", function () {
			resizeGrid(A, B)
		}, false)
	}
}
function mxtgrid(F) {
	var D = {
		id: "",
		srollLeft: 0,
		_srollLeft: 0,
		dragLeft: 0,
		xStart: 0,
		xEnd: 0,
		eStart: 0,
		oMove: null,
		iIndex: 0,
		_drag: 0,
		stopDrag: false,
		dragFlag: false,
		scroll: function () {
			D.hDiv.scrollLeft = D.bDiv.scrollLeft
		},
		setPosition: function () {
			var G = parseInt(D.hDiv.scrollLeft);
			var J = D.srollLeft - G;
			D.cDrag.style.display = "none";
			var L = D.cDrag.childNodes;
			for (var I = 0; I < L.length; I++) {
				var K = L[I];
				if (typeof K == "object" && K.nodeType != 3) {
					var H = parseInt(K.style.left) + J;
					K.style.left = H + "px"
				}
			}
			D.srollLeft = G;
			D.cDrag.style.display = ""
		},
		setDragPosition: function () {
			var G = parseInt(D.hDiv.scrollLeft);
			var I = D.srollLeft - G;
			D.cDrag.style.display = "none";
			var L = D.cDrag.childNodes;
			for (var H = 0; H < L.length; H++) {
				var K = L[H];
				if (typeof K == "object" && K.nodeType != 3) {
					var J = parseInt(K.style.left) + I;
					K.style.left = J + "px"
				}
			}
			D.srollLeft = G;
			D.cDrag.style.display = ""
		},
		attEvt: function () {
			var I = D.cDrag.childNodes;
			for (var G = 0; G < I.length; G++) {
				var H = I[G];
				if (typeof H == "object" && H.nodeType != 3) {
					H.onmousedown = D.dragStart
				}
			}
		},
		getIndex: function () {
			if (D.oMove != null && D.cDrag != null) {
				var H = D.cDrag.childNodes;
				for (var G = 0; G < H.length; G++) {
					if (H[G] == D.oMove) {
						D.iIndex = G
					}
				}
			}
		},
		dragStart: function () {
			D.oMove = this;
			D.moveOrigintLeft = parseInt(D.oMove.style.left);
			D.getIndex();
			document.onmousedown = D.mousedown;
			document.onmousemove = D.mousemove;
			document.onmouseup = D.mouseup;
			document.onselectstart = function () {
				return false
			};
			document.onselect = function () {
				document.selection.empty()
			}
		},
		mousedown: function (H) {
			D.bDiv.style.overflowY = "auto";
			D.bDiv.style.overflowX = "auto";
			D.dragFlag = true;
			var G = D.getEvent();
			D.eStart = D.xStart = document.all ? G.x : G.pageX;
			document.body.style.cursor = "col-resize"
		},
		mousemove: function (L) {
			if (!D.dragFlag) {
				return
			}
			var K = D.getEvent();
			var H = document.all ? K.x : K.pageX;
			var G = H - D.eStart;
			var J = D.oMove.previousSibling;
			var I = parseInt(D.oMove.style.left) + G;
			if (I > D.clientWidth || I < 50) {
				D.xEnd = D.eStart;
				D.oMove.style.left = D.moveOrigintLeft + "px";
				document.body.style.cursor = "default";
				D.dragFlag = false;
				D.stopDrag = false;
				D.oMove = null;
				document.onmousedown = null;
				document.onmousemove = null;
				document.onmouseup = null;
				document.onselectstart = null;
				document.onselect = null
			} else {
				if (J != null) {
					if (I > (parseInt(J.style.left) + 50)) {
						D.oMove.style.left = I + "px";
						D.eStart = H
					} else {
						D.stopDrag = true
					}
				} else {
					if (I > 50) {
						D.oMove.style.left = I + "px";
						D.eStart = H
					} else {
						D.stopDrag = true
					}
				}
			}
		},
		mouseup: function (H) {
			if (!D.dragFlag) {
				return
			}
			var G = D.getEvent();
			D.xEnd = document.all ? G.x : G.pageX;
			if (D.stopDrag) {
				D.xEnd = D.eStart
			}
			D.setDragPosition();
			D.setHeadWidth();
			D.setListWidth();
			if (D._drag < 0 && D.hDiv.scrollLeft == 0) {
				D.bDiv.scrollLeft = 0
			} else {
				D.hDiv.scrollLeft = D.bDiv.scrollLeft
			}
			D.setPosition();
			document.body.style.cursor = "default";
			D.dragFlag = false;
			D.stopDrag = false;
			D.oMove = null;
			document.onmousedown = null;
			document.onmousemove = null;
			document.onmouseup = null;
			document.onselectstart = null;
			document.onselect = null;
			if (!document.all) {}
		},
		setHeadWidth: function () {
			var G = D.oHead.childNodes[D.iIndex];
			var H = G.childNodes[0];
			var I = parseInt(H.style.width) + D._drag;
			H.style.width = I + "px";
			G.setAttribute("width", I);
			D.globalWidth = D.bTable.clientWidth;
			D.hTable.setAttribute("width", D.globalWidth + D._drag);
			if (D.noBody == true) {
				D.bDiv.innerHTML = "<div style='width:" + (D.holeWidth + D._drag) + "px'>&nbsp;</div>"
			}
		},
		setListWidth: function () {
			var H = D.oBody.childNodes;
			for (var K = 0; K < H.length; K++) {
				var J = H[K].childNodes[D.iIndex];
				var G = J.childNodes[0];
				var I = parseInt(G.style.width) + D._drag;
				G.style.width = I + "px";
				J.setAttribute("width", I)
			}
			D.bTable.setAttribute("width", D.globalWidth + D._drag)
		},
		setDragPosition: function () {
			D._srollLeft = parseInt(D.hDiv.scrollLeft);
			D._drag = D.xEnd - D.xStart;
			var J = D.cDrag.childNodes;
			for (var H = (D.iIndex + 1); H < J.length; H++) {
				var I = J[H];
				if (typeof I == "object" && I.nodeType != 3) {
					var G = parseInt(I.style.left) + D._drag;
					I.style.left = G + "px"
				}
			}
		},
		getEvent: function () {
			if (document.all) {
				return window.event
			}
			func = D.getEvent.caller;
			while (func != null) {
				var G = func.arguments[0];
				if (G) {
					if ((G.constructor == Event || G.constructor == MouseEvent) || (typeof(G) == "object" && G.preventDefault && G.stopPropagation)) {
						return G
					}
				}
				func = func.caller
			}
			return null
		},
		removeTextNode: function (H) {
			var J = H.childNodes;
			for (var G = 0; G < J.length; ++G) {
				var I = J[G];
				if (I.nodeType != 1) {
					I.parentNode.removeChild(I)
				}
			}
		},
		setWidth: function () {
			var M = new ArrayList();
			var R = D.oHead.childNodes;
			var I = D.subHeight == 0 ? Math.floor(D.clientWidth - R.length * 12 - 2) : Math.floor(D.clientWidth - R.length * 12 - 20);
			var W = 27;
			D.cDrag.style.display = "none";
			var V = 0;
			var N = 0;
			for (var L = 0; L < R.length; ++L) {
				var G = R[L];
				if (G.nodeType != 1) {
					continue
				}
				var Q = G.childNodes[0];
				var P = D.cDrag.childNodes[L];
				var J = null;
				J = G.getAttribute("width");
				if (J == null || J == undefined || J == "") {
					J = "5%"
				}
				var U;
				if (J.indexOf("%") != -1) {
					U = Math.floor(I * (parseInt(J)) / 100)
				} else {
					U = Math.floor(J)
				}
				V += U + 10;
				M.add(U);
				N += U;
				G.setAttribute("width", "");
				Q.style.width = U + "px";
				P.style.left = (V + L * 2 - 1) + "px";
				P.style.height = W + "px"
			}
			D.holeWidth = N + R.length * 12 + 2;
			D.cDrag.style.display = "";
			var S = D.oBody.childNodes;
			if (S.length != 0) {
				for (var K = 0; K < S.length; ++K) {
					var T = S[K].childNodes;
					for (var H = 0; H < T.length; ++H) {
						var O = T[H];
						if (O.childNodes.length == 0) {
							continue
						}
						O.childNodes[0].style.width = M.get(H) + "px";
						if (v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9) {
							O.setAttribute("width", (M.get(H) + 10))
						}
					}
				}
			} else {
				D.noBody = true;
				D.bDiv.innerHTML = "<div style='width:" + D.holeWidth + "px'>&nbsp;</div>"
			}
		},
		setTitle: function () {
			var K = D.oHead.childNodes;
			for (var G = 0; G < K.length; ++G) {
				var J = K[G];
				var I = J.childNodes[0];
				if (I) {
					var H = I.innerHTML;
					if (H.indexOf("<INPUT") != -1 || H.indexOf("<IMG") != -1 || H.indexOf("<FONT") != -1 || H.indexOf("<SPAN") != -1) {
						H = ""
					}
					I.setAttribute("title", H)
				}
			}
		}
	};
	D.id = F;
	D.layoutdiv = document.getElementById("scrollListDiv");
	if (D.layoutdiv == null) {
		D.layoutdiv = document.body
	} else {
		D.layoutdiv.style.overflow = "hidden"
	}
	D.clientWidth = parseInt(D.layoutdiv.clientWidth);
	D.clientHeight = parseInt(D.layoutdiv.clientHeight);
	if (D.clientHeight <= 0 || D.clientWidth <= 0) {
		setTimeout(function () {
			mxtgrid(D.id)
		}, 100)
	}
	D.mxtgrid = document.getElementById("mxtgrid_" + F);
	D.mxtgrid.style.display = "none";
	D.hTable = document.getElementById("hTable" + F);
	D.bTable = document.getElementById("bTable" + F);
	D.bDiv = document.getElementById("bDiv" + F);
	D.hDiv = document.getElementById("hDiv" + F);
	D.cDrag = document.getElementById("cDrag" + F);
	D.oHead = document.getElementById("headID" + F);
	D.oBody = document.getElementById("bodyID" + F);
	D.subHeight = parseInt(D.mxtgrid.getAttribute("subHeight"));
	if (D.subHeight != 0) {
		D.mxtgrid.style.width = D.clientWidth + "px"
	}
	if (D.clientHeight - 90 - D.subHeight <= 0) {
		return
	}
	var E = v3x.isMSIE6 && !v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9;
	if ((D.oBody.childNodes.length * 28 + 90) > D.clientHeight) {
		D.clientWidth = D.clientWidth - 17
	}
	D.bDivHeight = D.clientHeight - 90 - D.subHeight;
	D.bDiv.style.height = D.bDivHeight + "px";
	setTimeout(function () {
		if (parseInt(D.layoutdiv.clientHeight) != D.clientHeight && v3x.isMSIE) {
			resizeGrid(D.id, true)
		}
	}, 0);
	if (E) {
		D.layoutdivParent = D.layoutdiv.parentNode;
		D.bDiv.style.height = (D.bDivHeight - parseInt(D.layoutdivParent.currentStyle.paddingTop)) + "px"
	}
	D.removeTextNode(D.cDrag);
	D.removeTextNode(D.oHead);
	D.removeTextNode(D.oBody);
	var B = D.oBody.childNodes;
	for (var A = 0; A < B.length; ++A) {
		D.removeTextNode(B[A])
	}
	D.setTitle();
	D.setWidth();
	D.attEvt();
	D.bDiv.onscroll = function () {
		D.scroll();
		D.setPosition()
	};
	if (D.bTable.clientWidth < D.bDiv.clientWidth) {
		D.bDiv.style.overflowY = "auto";
		D.bDiv.style.overflowX = "hidden"
	}
	D.mxtgrid.style.display = ""
}
function setTablePosition(A, B) {
	if (B == null) {
		if (A != null && A.document != null && A.document.rowPositionObj) {
			A.document.rowPositionObj.focus()
		} else {
			return
		}
	} else {
		A.target.focus()
	}
}
function setPositionObj(A) {
	document.rowPositionObj = A
}
function resizeGrid(N, G) {
	try {
		var M = N;
		var O = document.getElementById("scrollListDiv");
		if (O == null || O.clientHeight <= 0) {
			O = document.body
		}
		var Q = Math.floor(O.clientWidth);
		var H = Math.floor(O.clientHeight);
		if (H <= 0) {
			return
		}
		var R = document.getElementById("mxtgrid_" + M);
		var S = document.getElementById("hTable" + M);
		var A = document.getElementById("bTable" + M);
		R.style.display = "none";
		var K = document.getElementById("bDiv" + M);
		var I = document.getElementById("hDiv" + M);
		var B = document.getElementById("cDrag" + M);
		var X = document.getElementById("headID" + M);
		var E = document.getElementById("bodyID" + M);
		var W = parseInt(R.getAttribute("subHeight"));
		if (W != 0) {
			R.style.width = Q + "px"
		}
		if (H - 90 - W <= 0) {
			return
		}
		var L = v3x.isMSIE6 && !v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9;
		if (L) {
			Q = Q - 15
		}
		var D = H - 90 - W;
		K.style.height = D + "px";
		if (L) {
			layoutdivParent = O.parentNode;
			K.style.height = (D - parseInt(layoutdivParent.currentStyle.paddingTop)) + "px"
		}
		var J = H - 35;
		var V = Math.floor(A.clientHeight);
		if (V < H) {
			J = V + 29
		}
		if (J <= 0) {
			return
		}
		B.style.display = "none";
		var U = B.childNodes;
		for (var P = 0; P < U.length; ++P) {
			var F = U[P];
			F.style.height = J + "px"
		}
		B.style.display = "";
		R.style.display = ""
	} catch (T) {}
}
function MxtWindow(D) {
	if (D == null) {
		return
	}
	this.id = D.id ? D.id : Math.floor(Math.random() * 100000000);
	this.title = D.title;
	this.url = D.url;
	this.height = D.height == null ? 250 : D.height;
	this.width = D.width == null ? 300 : D.width;
	this.titleHeight = 50;
	this.footerHeight = 50;
	this.top = D.top;
	this.left = D.left;
	this.model = D.model == null ? true : false;
	this.className = D.calssName == null ? "mxt-window" : D.classNam;
	this.element = D.obj;
	this.relativeElement = D.relativeElement;
	this.isCeate = true;
	this.buttons = D.buttons;
	this.isSynchronization = D.isSynchronization == null ? false : true;
	this.userAgent = navigator.userAgent.toLowerCase();
	this.isOpera = this.userAgent.indexOf("opera") > -1;
	this.isIE = this.userAgent.indexOf("msie") > -1 && !this.isOpera;
	this.isNS = this.userAgent.indexOf("netscape") > -1;
	this.dragDiv = null;
	this.isIframe = false;
	this.iframe = null;
	this.iframeId = null;
	this.html = D.html;
	this.offsetTop = 0;
	this.offsetLeft = 0;
	this.discription = D.discription == undefined ? "" : D.discription;
	this.closeParam = D.closeParam;
	this.closeHidden = D.closeHidden == undefined ? false : D.closeHidden;
	this.transParams = D.transParams == undefined ? null : D.transParams;
	this.targetWindow = D.targetWindow == undefined ? window : D.targetWindow;
	this.maskIndex = this.targetWindow.getMaxZindex(2);
	var F = parseInt(this.targetWindow.document.documentElement.clientWidth);
	var E = parseInt(this.targetWindow.document.body.clientWidth);
	if (E > F) {
		F = E
	}
	if (F < this.width) {
		this.width = F
	}
	var A = parseInt(this.targetWindow.document.documentElement.clientHeight);
	var B = parseInt(this.targetWindow.document.body.clientHeight);
	if (B > A) {
		A = B
	}
	if (A < this.height) {
		this.height = A
	}
	this.type = D.type == null ? "window" : D.type;
	this.isDrag = D.isDrag == null ? true : D.isDrag;
	this.initWindow();
	this.isModel();
	this.showWindow();
	this.addEffect();
	this.showWindow()
}
MxtWindow.prototype.setTitle = function (B) {
	var A = this.targetWindow.document.getElementById(this.id + "-mxtwindow-title");
	if (A) {
		A.innerHTML = B
	}
};
MxtWindow.prototype.setIndex = function () {};
MxtWindow.prototype.getClass = function (D, B) {
	if (this.targetWindow.document.getElementsByClassName) {
		return this.targetWindow.document.getElementsByClassName(B)
	} else {
		var D = this.targetWindow.document.getElementsByTagName(D);
		var E = [];
		for (var A = 0; A < D.length; A++) {
			if (D[A].className == B) {
				E[E.length] = D[A]
			}
		}
		return E
	}
};
MxtWindow.prototype.getReturnValue = function (E) {
	var D = null;
	var B = this.targetWindow;
	var H = null;
	if (this.isIE) {
		try {
			H = B.document.frames(this.iframeId)
		} catch (G) {
			H = B.frames[this.iframeId]
		}
	} else {
		H = B.frames[this.iframeId]
	}
	if (H == null) {
		try {
			for (var F = 0; F < B.frames.length; F++) {
				if (B.frames[F].name == this.iframeId) {
					D = F;
					break
				}
			}
			if (D != null) {
				H = B.frames[D]
			}
		} catch (G) {
			H = B.document.getElementById(this.iframeId)
		}
	}
	if (H == null) {
		H = document.getElementById(this.iframeId)
	}
	if (H != null) {
		var A = null;
		if (H.contentWindow) {
			if (typeof(E) != "undefined" && E != null) {
				A = H.contentWindow.OK(E)
			} else {
				A = H.contentWindow.OK()
			}
		} else {
			if (typeof(E) != "undefined" && E != null) {
				A = H.OK(E)
			} else {
				A = H.OK()
			}
		}
		return A
	} else {
		return null
	}
};
MxtWindow.prototype.initWindow = function () {
	var A = this.getElement(this.id);
	if (A != null) {
		this.removeElement(A)
	}
	if (this.url == null) {
		this.isIframe = false
	} else {
		this.isIframe = true
	}
	if (this.relativeElement != null) {
		var E = this.relativeElement.offsetLeft;
		var D = this.relativeElement.offsetTop;
		var B = this.relativeElement;
		do {
			B = B.offsetParent;
			E += B.offsetLeft;
			D += B.offsetTop
		} while (B.tagName != "BODY");
		this.offsetLeft = E;
		this.offsetTop = D
	}
	if (this.buttons == null || this.buttons == undefined) {
		this.footerHeight = 0
	}
	if (this.type == "window") {
		this.getWindow()
	} else {
		this.getPanel()
	}
};
MxtWindow.prototype.addEffect = function () {
	if (this.isDrag) {
		new this.targetWindow.MxtWindow.divDrag([this.dragDiv, this.element])
	}
};
MxtWindow.prototype.showWindow = function () {
	if (this.targetWindow.document.getElementById(this.id) != null) {
		return
	}
	if (this.isSynchronization) {
		if (this.targetWindow.document.getElementById("_isSynchronization") != null) {
			return
		}
	}
	this.targetWindow.document.body.appendChild(this.element);
	if (this.transParams != null) {
		try {
			this.iframe.contentWindow.transParams = this.transParams
		} catch (A) {
			this.iframe.contentWindow.transParams = this.transParams
		}
	}
};
MxtWindow.prototype.isModel = function () {
	if (this.model) {
		if (this.targetWindow.document.getElementById(this.id + "_oMxtMask") != null) {
			return
		}
		var D = this.targetWindow.document.createElement("div");
		D.id = this.id + "_oMxtMask";
		D.className = "shield";
		var B = parseInt(this.targetWindow.document.body.scrollWidth);
		var A = parseInt(this.targetWindow.document.body.scrollHeight);
		var E = "top:0px;left:0px;position:absolute;z-index:" + this.maskIndex + ";background:#000000;width:" + B + "px;height:" + A + "px;filter: alpha(opacity=25);-moz-opacity: 0.25;opacity: 0.25;";
		D.style.cssText = E;
		this.targetWindow.document.body.appendChild(D)
	} else {
		return
	}
};
MxtWindow.prototype.close = function (A) {
	try {
		this.targetWindow.document.getElementById(this.iframeId).contentWindow.document.getElementById("docOpenBodyFrame").contentWindow.document.getElementById("officeEditorFrame").contentWindow.pdfOcxUnLoad()
	} catch (A) {}
	try {
		this.targetWindow.document.getElementById(this.iframeId).contentWindow.document.getElementById("docOpenBodyFrame").contentWindow.document.getElementById("officeEditorFrame").contentWindow.OcxUnLoad()
	} catch (A) {}
	this.targetWindow.document.getElementById(this.iframeId).src = "";
	this.removeElement(this.targetWindow.document.getElementById(this.id));
	if (this.model) {
		if (this.targetWindow.document.getElementById(this.id + "_oMxtMask") != null) {
			this.removeElement(this.targetWindow.document.getElementById(this.id + "_oMxtMask"))
		}
	}
};
MxtWindow.prototype.getPanel = function () {
	this.element = this.createObj("div");
	this.element.className = this.className;
	this.element.id = this.id;
	if (this.isIE) {
		this.element.style.width = this.width + 2 + "px";
		this.element.style.height = this.height - 8 + "px"
	} else {
		this.element.style.width = this.width + "px";
		this.element.style.height = this.height - 5 + "px"
	}
	if (this.relativeElement != null) {
		this.top = parseInt(this.offsetTop) + parseInt(this.relativeElement.offsetHeight) + "px";
		this.left = parseInt(this.offsetLeft) + "px";
		if (parseInt(this.offsetLeft) + parseInt(this.relativeElement.offsetWidth) + parseInt(this.width) > parseInt(this.targetWindow.document.body.clientWidth)) {
			this.left = parseInt(this.offsetLeft) - this.width + "px"
		}
	}
	if (this.top == null) {
		this.top = (parseInt(this.targetWindow.document.body.clientHeight) - this.height) / 2 + "px";
		this.left = (parseInt(this.targetWindow.document.body.clientWidth) - this.width) / 2 + "px"
	}
	this.element.style.top = this.top;
	this.element.style.left = this.left;
	var J = this.createObj("div");
	J.className = "mxt-panel-head";
	J.style.height = "20px";
	J.onselectstart = function () {
		return false
	};
	this.dragDiv = J;
	var L = this.createObj("span");
	L.className = "mxt-panel-head-close";
	var M = this;
	MxtWindow.addEvent(L, "click", function (O) {
		return M.close(O)
	}, false);
	J.appendChild(L);
	var E = this.createObj("div");
	E.className = "mxt-panel-body";
	E.style.height = this.height - this.footerHeight - 10 + "px";
	E.appendChild(J);
	if (this.isIframe) {
		this.iframeId = parseInt(Math.random() * 10000) + "-iframe";
		var F = this.targetWindow.document.createElement("iframe");
		F.setAttribute("src", this.url);
		F.id = this.iframeId;
		F.name = this.iframeId;
		F.setAttribute("frameborder", "0");
		F.className = "mxt-window-body-iframe";
		F.style.height = parseInt(E.style.height) - 0 + "px";
		F.style.width = this.width - 0 + "px";
		this.iframe = F;
		E.appendChild(this.iframe)
	} else {
		var G = this.createObj("div");
		G.className = "mxt-panel-body-content";
		G.style.height = parseInt(E.style.height) - 10 + "px";
		if (this.html) {
			G.innerHTML = this.html
		}
		E.appendChild(G)
	}
	this.element.appendChild(E);
	var K = this.createObj("div");
	K.className = "mxt-panel-footer";
	K.style.height = this.footerHeight + "px";
	if (this.discription != null) {
		var D = this.createObj("div");
		D.className = "discriptionDiv";
		D.innerHTML = this.discription;
		K.appendChild(D)
	}
	if (this.buttons != null && this.buttons.length > 0) {
		var I = this.createObj("div");
		I.className = "buttonsDiv";
		for (var B = 0; B < this.buttons.length; B++) {
			var A = this.buttons[B];
			var N = this.createObj("input");
			N.setAttribute("type", "button");
			N.className = "button-default-2";
			if (A.text) {
				N.setAttribute("value", A.text)
			}
			if (A.id) {
				N.setAttribute("id", A.id)
			}
			if (A.disabled) {
				N.setAttribute("disabled", A.disabled)
			}
			if (A.handler) {
				MxtWindow.addEvent(N, "click", A.handler, false)
			}
			I.appendChild(N)
		}
		K.appendChild(I)
	}
	this.element.appendChild(K);
	if (this.isSynchronization) {
		var H = this.createObj("input");
		H.setAttribute("type", "hidden");
		H.setAttribute("id", "_isSynchronization");
		this.element.appendChild(H)
	}
};
MxtWindow.prototype.getWindow = function () {
	this.element = this.createObj("div");
	this.element.className = this.className;
	this.element.id = this.id;
	this.element.style.width = this.width + "px";
	this.element.style.height = this.height + "px";
	this.element.style.zIndex = this.maskIndex + 1;
	this.elementContent = this.createObj("div");
	this.elementContent.style.position = "absolute";
	this.elementContent.style.zIndex = "10";
	this.elementContent.style.width = "100%";
	this.element.appendChild(this.elementContent);
	this.iframeMask = this.targetWindow.document.createElement("iframe");
	this.iframeMask.style.position = "absolute";
	this.iframeMask.style.zIndex = "1";
	this.iframeMask.id = this.iframeId + "_iframeMask";
	this.iframeMask.setAttribute("frameBorder", "0");
	this.iframeMask.style.width = (this.width + 3) + "px";
	this.iframeMask.style.height = this.height + "px";
	this.element.appendChild(this.iframeMask);
	if (this.relativeElement != null) {
		this.top = parseInt(this.offsetTop) + parseInt(this.relativeElement.offsetHeight) + "px";
		this.left = parseInt(this.offsetLeft) + "px";
		if (parseInt(this.offsetLeft) + parseInt(this.relativeElement.offsetWidth) / 2 + parseInt(this.width) > parseInt(this.targetWindow.document.body.clientWidth)) {
			this.left = parseInt(this.offsetLeft) - this.width + "px"
		}
	}
	if (this.top == null) {
		this.top = (parseInt(this.targetWindow.document.body.clientHeight) - this.height) / 2 + "px";
		this.left = (parseInt(this.targetWindow.document.body.clientWidth) - this.width) / 2 + "px"
	}
	this.element.style.top = this.top;
	this.element.style.left = this.left;
	var J = this.createObj("div");
	J.className = "mxt-window-head";
	J.style.height = this.titleHeight + "px";
	if (!this.isDrag) {
		J.style.cursor = "default"
	}
	J.onselectstart = function () {
		return false
	};
	this.dragDiv = J;
	var K = this.createObj("span");
	K.id = this.id + "-mxtwindow-title";
	K.className = "mxt-window-head-title";
	K.innerHTML = this.title;
	K.style.width = this.width - 80 + "px";
	var M = this.createObj("span");
	M.className = "mxt-window-head-close";
	var N = this;
	if (this.closeParam && this.closeParam.handler) {
		MxtWindow.addEvent(M, "click", this.closeParam.handler, false)
	} else {
		MxtWindow.addEvent(M, "click", function (P) {
			return N.close(P)
		}, false)
	}
	if (this.closeHidden) {
		M.style.display = "none"
	}
	J.appendChild(K);
	J.appendChild(M);
	var E = this.createObj("div");
	E.className = "mxt-window-body";
	E.style.height = this.height - this.titleHeight - this.footerHeight - 0 + "px";
	if (this.isIframe) {
		this.iframeId = parseInt(Math.random() * 10000) + "-iframe";
		var F = this.targetWindow.document.createElement("iframe");
		F.setAttribute("src", this.url);
		F.id = this.iframeId;
		F.name = this.iframeId;
		F.setAttribute("frameBorder", "0");
		F.className = "mxt-window-body-iframe";
		F.style.height = parseInt(E.style.height) - 5 + "px";
		F.style.width = this.width + "px";
		this.iframe = F;
		E.appendChild(this.iframe)
	} else {
		var G = this.createObj("div");
		G.className = "mxt-window-body-content";
		G.style.height = parseInt(E.style.height) - 10 + "px";
		if (this.html) {
			G.innerHTML = this.html
		}
		E.appendChild(G)
	}
	this.elementContent.appendChild(J);
	this.elementContent.appendChild(E);
	var L = this.createObj("div");
	L.className = "mxt-window-footer";
	L.style.height = this.footerHeight + "px";
	L.style.background = "#4D4D4D";
	if (this.discription != null || this.discription != "") {
		var D = this.createObj("div");
		D.className = "discriptionDiv";
		D.innerHTML = this.discription;
		L.appendChild(D)
	}
	if (this.buttons != null && this.buttons.length > 0) {
		var I = this.createObj("div");
		I.className = "buttonsDiv";
		for (var B = 0; B < this.buttons.length; B++) {
			var A = this.buttons[B];
			var O = this.createObj("input");
			O.setAttribute("type", "button");
			O.className = "button-default-2 margin_l_10";
			if (A.emphasize) {
				O.className = "button-default_emphasize margin_l_10"
			}
			if (A.text) {
				O.setAttribute("value", A.text)
			}
			if (A.id) {
				O.setAttribute("id", A.id)
			}
			if (A.disabled) {
				O.setAttribute("disabled", A.disabled)
			}
			if (A.handler) {
				MxtWindow.addEvent(O, "click", A.handler, false)
			}
			I.appendChild(O)
		}
		L.appendChild(I)
	}
	this.elementContent.appendChild(L);
	if (this.isSynchronization) {
		var H = this.createObj("input");
		H.setAttribute("type", "hidden");
		H.setAttribute("id", "_isSynchronization");
		this.element.appendChild(H)
	}
};
MxtWindow.prototype.reloadUrl = function (A) {
	var B = A;
	B ? null : B = this.url;
	var D = this.targetWindow.document.getElementById(this.iframeId);
	D.setAttribute("src", B)
};
MxtWindow.addEvent = function (D, B, E, A) {
	try {
		if (D.addEventListener) {
			D.addEventListener(B, E, A)
		} else {
			if (D.attachEvent) {
				D.attachEvent("on" + B, E)
			}
		}
	} catch (F) {}
};
MxtWindow.prototype.removeElement = function (A) {
	A.parentNode.removeChild(A)
};
MxtWindow.prototype.createObj = function (A, D) {
	var B = this.targetWindow.document.createElement(A);
	B.id = D == null ? "" : D;
	return B
};
MxtWindow.prototype.getElement = function (A) {
	if (A == null) {
		return null
	} else {
		return document.getElementById(A)
	}
};
Array.prototype.extend = function (E) {
	for (var F = 0, D = E.length; F < D; F++) {
		this.push(E[F])
	}
	return this
};
MxtWindow.divDrag = function () {
	var D,
	G,
	E;
	var F = 2000;
	this.dragStart = function (A) {
		A = A || window.event;
		if ((A.which && (A.which != 1)) || (A.button && (A.button != 1))) {
			return
		}
		var B = this.$pos;
		E = this.parent || this;
		if (document.defaultView) {
			_top = document.defaultView.getComputedStyle(E, null).getPropertyValue("top");
			_left = document.defaultView.getComputedStyle(E, null).getPropertyValue("left")
		} else {
			if (E.currentStyle) {
				_top = E.currentStyle.top;
				_left = E.currentStyle.left
			}
		}
		B.ox = (A.pageX || (A.clientX + document.documentElement.scrollLeft)) - parseInt(_left);
		B.oy = (A.pageY || (A.clientY + document.documentElement.scrollTop)) - parseInt(_top);
		if (!!D) {
			if (document.removeEventListener) {
				document.removeEventListener("mousemove", D, false);
				document.removeEventListener("mouseup", G, false);
				document.onselectstart = function () {
					return true
				}
			} else {
				document.detachEvent("onmousemove", D);
				document.detachEvent("onmouseup", G)
			}
		}
		D = this.dragMove.create(this);
		G = this.dragEnd.create(this);
		if (document.addEventListener) {
			document.addEventListener("mousemove", D, false);
			document.addEventListener("mouseup", G, false)
		} else {
			document.attachEvent("onmousemove", D);
			document.attachEvent("onmouseup", G)
		}
		this.stop(A)
	};
	this.dragMove = function (A) {
		A = A || window.event;
		var B = this.$pos;
		E = this.parent || this;
		E.style.top = (A.pageY || (A.clientY + document.documentElement.scrollTop)) - parseInt(B.oy) + "px";
		E.style.left = (A.pageX || (A.clientX + document.documentElement.scrollLeft)) - parseInt(B.ox) + "px";
		this.stop(A)
	};
	this.dragEnd = function (A) {
		var B = this.$pos;
		A = A || window.event;
		if ((A.which && (A.which != 1)) || (A.button && (A.button != 1))) {
			return
		}
		E = this.parent || this;
		if (!!(this.parent)) {
			this.style.backgroundColor = B.color
		}
		if (document.removeEventListener) {
			document.removeEventListener("mousemove", D, false);
			document.removeEventListener("mouseup", G, false)
		} else {
			document.detachEvent("onmousemove", D);
			document.detachEvent("onmouseup", G)
		}
		D = null;
		G = null;
		this.stop(A)
	};
	this.shiftColor = function () {};
	this.position = function (H) {
		var B = H.offsetTop;
		var A = H.offsetLeft;
		while (H = H.offsetParent) {
			B += H.offsetTop;
			A += H.offsetLeft
		}
		return {
			x: A,
			y: B,
			ox: 0,
			oy: 0,
			color: null
		}
	};
	this.stop = function (A) {
		if (A.stopPropagation) {
			A.stopPropagation()
		} else {
			A.cancelBubble = true
		}
		if (A.preventDefault) {
			A.preventDefault()
		} else {
			A.returnValue = false
		}
	};
	this.stop1 = function (A) {
		A = A || window.event;
		if (A.stopPropagation) {
			A.stopPropagation()
		} else {
			A.cancelBubble = true
		}
	};
	this.create = function (J) {
		var I = this;
		var H = J;
		return function (A) {
			return I.apply(H, [A])
		}
	};
	this.dragStart.create = this.create;
	this.dragMove.create = this.create;
	this.dragEnd.create = this.create;
	this.shiftColor.create = this.create;
	this.initialize = function () {
		for (var H = 0, I = arguments.length; H < I; H++) {
			C = arguments[H];
			if (!(C.push)) {
				C = [C]
			}
			$C = (typeof(C[0]) == "object") ? C[0] : (typeof(C[0]) == "string" ? $(C[0]) : null);
			if (!$C) {
				continue
			}
			$C.$pos = this.position($C);
			$C.dragMove = this.dragMove;
			$C.dragEnd = this.dragEnd;
			$C.stop = this.stop;
			if (!!C[1]) {
				$C.parent = C[1];
				$C.$pos.color = $C.style.backgroundColor
			}
			if ($C.addEventListener) {
				$C.addEventListener("mousedown", this.dragStart.create($C), false);
				if (!!C[1]) {
					$C.addEventListener("mousedown", this.shiftColor.create($C), false)
				}
			} else {
				$C.attachEvent("onmousedown", this.dragStart.create($C));
				if (!!C[1]) {
					$C.attachEvent("onmousedown", this.shiftColor.create($C))
				}
			}
		}
	};
	this.initialize.apply(this, arguments)
};
MxtWindow.prototype.addShadow = function () {
	obj = this.element;
	if (!obj) {
		return false
	}
	var R = navigator.userAgent.toLowerCase();
	var B = R.indexOf("opera") > -1;
	var F = R.indexOf("msie") > -1 && !B;
	var P = R.indexOf("netscape") > -1;
	var K = obj.offsetWidth;
	var O = obj.offsetHeight;
	var D = 0;
	var M = 0;
	var L = function (S) {
		if (!S) {
			return false
		}
		var U = 0,
		T = 0;
		if (F || B) {
			while (S != null && S.nodeName != "#document") {
				U += S.offsetLeft;
				T += S.offsetTop;
				S = S.parentNode
			}
		} else {
			T = S.offsetTop;
			U = S.offsetLeft
		}
		return {
			T: T,
			L: U
		}
	};
	var Q = L(obj);
	D = Q.L;
	M = Q.T;
	var J = this.targetWindow.document.createElement("div");
	var I = this.targetWindow.document.createElement("div");
	var H = this.targetWindow.document.createElement("div");
	var G = this.targetWindow.document.createElement("div");
	var A = function (U, T, S) {
		if (!U) {
			return false
		}
		if (!B) {
			if (!S) {
				U.style.cssText = T
			} else {
				U.style.cssText += T
			}
		} else {
			if (!S) {
				U.setAttribute("style", T)
			} else {
				U.setAttribute("style", U.getAttribute("style") + ";" + T)
			}
		}
	};
	var E = "width:100%;height:100%;position:absolute;margin:0px;padding:0px;top:-1px;left:-1px";
	A(J, "position:absolute;left:" + (D + 3) + "px;top:" + (M + 3) + "px;width:" + K + "px;height:" + O + "px;background:#eee");
	A(I, E + ";background:#ddd");
	A(H, E + ";background:#ccc");
	A(G, E + ";background:#fff");
	if (F || P) {
		A(J, ";z-index:-1", 1)
	} else {
		A(obj, "position:absolute;z-index:2;left:+" + D + "px;top:" + M + "px", 1)
	}
	J.appendChild(I);
	I.appendChild(H);
	H.appendChild(G);
	var N = this.targetWindow.document.createElement("div");
	N.className = "mxt-window";
	N.appendChild(J);
	N.appendChild(obj);
	this.element = N
};
function initIpadScroll(E, A, B) {
	if (v3x.isIpad) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto";
			touchScroll(E)
		}
	}
}
function initIe10AutoScroll(E, D) {
	var A = window.top.document.getElementById("main");
	var B = A != null ? A.offsetHeight - D : parseInt(window.top.document.body.offsetHeight) - D;
	if (B < 0) {
		return
	}
	initIe10Scroll(E, B)
}
function initIe10Scroll(E, A, B) {
	var D = document.getElementById(E);
	if (D) {
		if (A) {
			D.style.height = A + "px"
		}
		if (B) {
			D.style.width = B + "px"
		}
	}
}
function initFFScroll(E, A, B) {
	if (v3x.isFirefox) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function initSafariScroll(E, A, B) {
	if (v3x.isSafari) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function initChromeScroll(E, A, B) {
	if (v3x.isChrome) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function isTouchDevice() {
	try {
		document.createEvent("TouchEvent");
		return true
	} catch (A) {
		return false
	}
}
function touchScroll(E) {
	if (isTouchDevice()) {
		var A = document.getElementById(E);
		var B = 0;
		var D = 0;
		A.addEventListener("touchstart", function (F) {
			B = this.scrollTop + F.touches[0].pageY;
			D = this.scrollLeft + F.touches[0].pageX
		}, false);
		A.addEventListener("touchmove", function (F) {
			this.scrollTop = B - F.touches[0].pageY;
			this.scrollLeft = D - F.touches[0].pageX;
			F.preventDefault()
		}, false)
	}
}
function isDecimal(B, A, E, D) {
	if (!testRegExp(B, "^-?[0-9]{0," + (E ? E : "") + "}\\.?[0-9]{1," + (D ? D : "") + "}$")) {
		if (A) {
			alert($.i18n("formValidate_isNumber", A))
		}
		return false
	}
	return true
}
function showPushWindow(J) {
	var H = "";
	var G = document.getElementById("edocType");
	var E = document.getElementById("pushMessageMemberIds");
	if (G) {
		H = G.value
	}
	var F = document.getElementById("pushMessageMemberIds").value;
	var A = colWorkFlowURL + "?method=showPushWindow&summaryId=" + J + "&edocType=" + H + "&sel=" + encodeURIat(F);
	var B = document.getElementById("replyedAffairId");
	if (B != null && typeof(B) != "undefined") {
		A += "&replyedAffairId=" + B.value
	}
	var I = v3x.openWindow({
			url: A,
			height: 350,
			width: 300
		});
	if (typeof(I) != "undefined" && I != null) {
		var L = I[0];
		var K = I[1];
		document.getElementById("pushMessageMemberIds").value = L;
		var D = document.getElementById("pushMessageMemberNames");
		if (D && B != B.value) {
			D.value = K;
			D.title = K
		}
	}
}
function sendSMSV3X(A) {
	var B = getBaseURL() + "/message.do?method=showSendSMSDlg";
	if (A) {
		B += "&receiverIds=" + A
	}
	if (getA8Top().isCtpTop) {
		getA8Top().senSmsWin = getA8Top().$.dialog({
				title: "\u53d1\u9001\u77ed\u4fe1",
				transParams: {
					parentWin: window
				},
				url: B,
				width: 420,
				height: 280,
				isDrag: false
			})
	} else {
		getA8Top().senSmsWin = v3x.openDialog({
				title: "\u53d1\u9001\u77ed\u4fe1",
				transParams: {
					parentWin: window
				},
				url: B,
				width: 420,
				height: 280,
				isDrag: false
			})
	}
}
function sendSmsCollBack(A) {
	getA8Top().senSmsWin.close();
	if (!A) {
		return
	}
	alert(A)
}
function sendMessageForCard(A, D) {
	var B;
	if (A) {
		B = "/seeyon/message.do?method=showSendDlg&getData=fromParent"
	} else {
		B = "/seeyon/message.do?method=showSendDlg&receiverIds=" + D
	}
	v3x.openWindow({
		url: B,
		width: "440",
		height: "300"
	})
}
function sendMessageForIMTab(E, A) {
	if (!getA8Top().contentFrame.topFrame.onlineWin) {
		var D = 50;
		var B = (window.screen.availHeight - 600) / 2;
		getA8Top().contentFrame.topFrame.onlineWin = getA8Top().contentFrame.topFrame.open("/seeyon/message.do?method=showOnlineUser&id=" + E + "&name=" + A, "", "left=" + D + ",top=" + B + ",width=600,height=600,toolbar=no,menubar=no,scrollbars=no,resizable=yes,location=no,status=no")
	} else {
		getA8Top().contentFrame.topFrame.onlineWin.focus();
		getA8Top().contentFrame.topFrame.onlineWin.showIMTab("1", E, A, "false")
	}
}
function forwardColV3X(A, D, B) {
	var E = v3x.openWindow({
			url: "/seeyon/collaboration.do?method=showForward&showType=model&data=" + A + "_" + D,
			width: 511,
			height: 400
		});
	if (B == "self") {
		if (E == "true") {
			document.location.reload(true)
		}
	} else {
		if (B == "list") {
			if (E && E == "true" && (getParameter("method") == "listSent")) {
				document.location.reload(true)
			}
		}
	}
}
function showDetailAndLog(A, F, D, E) {
	var B = "";
	if (E && (E == "recEdoc" || E == "sendEdoc" || E == "signReport" || E == "edocSend" || E == "edocRec" || E == "edocSign")) {
		B = "&appName=4&appTypeName=" + E
	}
	getA8Top().v3x.openWindow({
		url: colWorkFlowURL + "?method=showFlowNodeDetailFrame&summaryId=" + A + "&processId=" + F + "&defaultTab=" + D + B,
		dialogType: v3x.getBrowserFlag("openWindow") == true ? "modal" : "1",
		width: "750",
		height: "500"
	})
}
function confirmToOffice2003() {
	if (confirm(_("V3XLang.OfficeSaveTo2003"))) {
		return true
	} else {
		return false
	}
}
function isOffice2007(A) {
	if (typeof(A) == "undefined" || A == null) {
		return false
	}
	if (A.indexOf(".docx") != -1 || A.indexOf(".xlsx") != -1 || A.indexOf(".pptx") != -1) {
		return true
	} else {
		return false
	}
}
function V3XAutocomplete() {
	this._disableEvent = false;
	this._onchange = function (D, G, B, A) {
		if (v3xautocomplete._disableEvent) {
			return
		}
		if (D) {
			if (D.select) {
				var E = {
					label: G.value,
					value: G.id
				};
				D.select(E, B)
			}
			if (D.bindSelect) {
				var F = jQuery.Event("change");
				if (jQuery.isFunction(D.bindSelect)) {
					F.target = D.bindSelect(jQuery(A))
				} else {
					F.target = jQuery(D.bindSelect)
				}
				try {
					jQuery(F.target).val(G.id).trigger(F, jQuery(F.target));
					jQuery(F.target).blur()
				} catch (F) {}
			}
		}
	};
	this._getViewElement = function (B) {
		var A;
		if (typeof B == "string") {
			A = jQuery(document.getElementById(B + "_autocomplete"))
		} else {
			A = jQuery(B)
		}
		return A
	}
}
var v3xautocomplete = new V3XAutocomplete();
V3XAutocomplete.prototype.autocomplete = function (L, Y, E) {
	var M = this._getViewElement(L);
	if (typeof(M) == "undefined" || M == null || M[0] == null) {
		return
	}
	if (!M) {
		return false
	}
	var O = true;
	var W = true;
	var Q = 240;
	var R = 0;
	var F = false;
	var D = 0;
	var J = {
		id: "",
		value: ""
	};
	var U = 17;
	var P = Y.length == 0;
	if (!P && Y.length == 1 && Y[0].value == "" && !Y[0].label) {
		P = true
	}
	if (E) {
		jQuery(M).data("options", E);
		if (E.button !== undefined) {
			W = true
		}
		if (E.maxHeight !== undefined) {
			Q = E.maxHeight
		}
		if (E.width !== undefined) {
			R = E.width
		}
		if (E.autoSize !== undefined) {
			F = E.autosize
		}
		if (E.appendBlank !== undefined) {
			O = E.appendBlank
		}
	}
	var I = new Array();
	var T = Y == null ? I : Y;
	if (T.length > 0) {
		if (O) {
			I.push(J)
		}
		jQuery.each(T, function (a, c) {
			var b = {
				id: c.value,
				value: c.label
			};
			if (b.value) {
				I.push(b);
				var Z = b.value.length;
				if (Z > D) {
					D = Z
				}
			}
		})
	}
	var B = function (b) {
		for (var Z in I) {
			var a = I[Z];
			if (a.id == b.id && a.value == b.value) {
				return true
			}
		}
		return false
	};
	var H = jQuery(M).data("current");
	jQuery(M).data("current", null);
	var K = function (Z, a) {
		if (!a.item) {
			return false
		}
		jQuery(document.getElementById(L)).val(a.item.id);
		jQuery(M).val(a.item.value);
		jQuery(M).data("current", a.item);
		X(E, a.item, L, M);
		return false
	};
	var A = function () {
		K(null, {
			item: J
		});
		jQuery(M).data("current", null)
	};
	if (W) {
		var N = M.next('button[name="acToggle"]').length > 0;
		if (!N) {
			var V = "background-image:url('common/images/desc.gif');background-repeat:no-repeat;background-color: #ececec;background-position:center;width:" + U + "px;height:21px;border:1px #d1d1d1 solid;";
			M.after('<button name="acToggle" tabindex="-1" onclick="v3xautocomplete.toggle(this.previousSibling);this.blur();" style="' + V + '"/>')
		}
	}
	var X = this._onchange;
	jQuery(M).bind("blur", function () {
		var Z = jQuery(M).data("current");
		if (Z) {
			if (jQuery(M).val() != Z.value) {
				jQuery(M).val(Z.value)
			}
		} else {
			A()
		}
	});
	jQuery(M).bind("click", function () {
		this.select()
	});
	M.autocomplete({
		minLength: 0,
		source: I,
		autoFocus: true,
		delay: 0,
		focus: function (Z, a) {
			return false
		},
		position: {
			collision: "flip"
		},
		select: K,
		search: function () {
			var Z = jQuery(this).autocomplete("widget");
			Z.css("height", "auto")
		},
		beforePosition: function () {
			var Z = jQuery(this).autocomplete("widget");
			if (Z.outerHeight() > Q) {
				Z.css("overflow-y", "auto");
				Z.css("overflow-x", "hidden");
				Z.css("height", Q + "px")
			}
		},
		open: function () {
			var g = jQuery(this).autocomplete("widget");
			var h;
			if (F) {
				h = D * 8 + 20
			} else {
				if (R) {
					h = R
				} else {
					h = jQuery(this).outerWidth();
					if (W) {
						var e = M.next('button[name="acToggle"]').position().top;
						var a = (e >= (M.position().top + M.outerHeight()));
						if (!a) {
							h += U
						}
					}
				}
			}
			var d = M.outerWidth();
			if (h < 120) {
				h = 120
			}
			if (h < 0 || (h > 500 && h > (d + U))) {
				h = 300
			}
			g.width(h);
			g.find(".ui-menu-item").css("overflow", "hidden").css("white-space", "nowrap");
			g.find("li").each(function (j, k) {
				k.title = k.innerText
			});
			jQuery(M.parents()).scroll(function () {
				g.css("display", "none")
			});
			var b = g.position().top;
			var Z = g.outerHeight();
			var f = M.position().top;
			var c = M.outerHeight();
			if (b < 0) {
				b = 0;
				if (Z < f) {
					b = f - Z
				}
				Z = f - b;
				g.css("top", b + "px");
				g.css("height", Z + "px")
			}
			if (b + Z < f) {
				b = f - Z;
				g.css("top", b + "px")
			}
			if (b + Z > f + c) {
				b = f + c;
				g.css("top", b + "px")
			}
			g.css("left", M.position().left + "px")
		}
	});
	var G = false;
	if (H != null) {
		G = B(H);
		if (!G) {
			A()
		}
	}
	if (P) {
		A();
		M[0].disabled = true;
		if (W) {
			M.next('button[name="acToggle"]').attr("disabled", true).css("opacity", "0.4")
		}
	} else {
		M[0].disabled = false;
		if (W) {
			M.next('button[name="acToggle"]').attr("disabled", false).css("opacity", "1")
		}
		if (E && (E.value || E.value == null)) {
			var S = E.value;
			var B = false;
			if (S != null) {
				jQuery.each(I, function (Z, a) {
					if (a.id == S) {
						B = true;
						return
					}
				})
			}
			if (B) {
				if (typeof L == "string") {
					this.select(L, S)
				} else {
					this.select(M, S)
				}
			} else {
				if (!G) {
					A()
				} else {
					jQuery(M).data("current", H)
				}
			}
		} else {
			if (jQuery(M).val()) {
				A()
			}
		}
	}
};
V3XAutocomplete.prototype.select = function (E, G) {
	var A = this._getViewElement(E);
	var F = A.autocomplete("option", "source");
	if (!F) {
		return false
	}
	var D = jQuery(A).data("options");
	var B = this._onchange;
	jQuery.each(F, function (H, I) {
		if (I.id == G) {
			jQuery(document.getElementById(E)).val(I.id);
			A.val(I.value);
			jQuery(A).data("current", I);
			B(D, I, E, A);
			return true
		}
	})
};
V3XAutocomplete.prototype.refresh = function (B) {
	var A = this._getViewElement(B);
	var D = jQuery(A).data("current");
	if (D) {
		this._disableEvent = true;
		this.select(A, D.id);
		this._disableEvent = false
	}
};
V3XAutocomplete.prototype.disableEvent = function (A) {
	this._disableEvent = A
};
V3XAutocomplete.prototype.getData = function (B) {
	var A = this._getViewElement(B);
	var E = A.autocomplete("option", "source");
	var D = new Array();
	jQuery.each(E, function (F, H) {
		var G = {
			value: H.id,
			label: H.value
		};
		if (G.value) {
			D.push(G)
		}
	});
	return D
};
V3XAutocomplete.prototype.copy = function (I, H) {
	var A = this._getViewElement(I);
	var F = A.autocomplete("option", "source");
	var E = new Array();
	jQuery.each(F, function (J, L) {
		var K = {
			value: L.id,
			label: L.value
		};
		if (K.value) {
			E.push(K)
		}
	});
	var B = jQuery(A).data("options");
	try {
		if (jQuery.expando) {
			jQuery(H).removeAttr(jQuery.expando)
		}
	} catch (G) {}
	var D = jQuery(A).data("current");
	if (D) {
		B.value = D.id
	}
	this.autocomplete(H, E, B)
};
V3XAutocomplete.prototype.toggle = function (B) {
	var A = this._getViewElement(B);
	if (A.autocomplete("widget").is(":visible")) {
		A.autocomplete("close");
		return
	}
	A.autocomplete("search", "");
	A.focus()
};
V3XAutocomplete.prototype.build = function (A, F) {
	function E(G) {
		var H = new Array();
		jQuery.each(G, function (I, J) {
			if (J.key) {
				H.push(J.key, '="', J.value, '" ')
			}
		});
		return H.join("")
	}
	var B = new Array();
	var D = A + "_autocomplete";
	B.push("<input ", E([{
					key: "name",
					value: A
				}, {
					key: "id",
					value: A
				}, {
					key: "type",
					value: "hidden"
				}
			]), " />");
	B.push("<input ", E([{
					key: "name",
					value: D
				}, {
					key: "id",
					value: D
				}, {
					key: "type",
					value: "text"
				}, {
					key: "class",
					value: "input_autocomplete"
				}, {
					key: "onclick",
					value: "v3xautocomplete.toggle('" + A + "');"
				}
			]), " />\n");
	B.push("<script>\n");
	B.push("v3xautocomplete.autocomplete(", "'", A, "',", F, ");\n");
	B.push("<\/script>");
	return (B.join(""))
};
var postUrl = "";
function getQueryCondition(P, B, J) {
	var D = document.getElementById("ftable");
	var L = D.rows[0];
	var E = J;
	var N = isCrossTable();
	if (N) {
		E = 0;
		var I;
		var K = L.cells.length;
		for (var G = 0; G < K; G++) {
			var H = L.cells[G];
			if (H.getAttribute("rowspan") == "2") {
				E++
			}
			if (H.getAttribute("colspan") != null) {
				I = parseInt(H.getAttribute("colspan"))
			}
		}
	}
	if (B > (E - 1)) {
		var M = "";
		for (var G = 0; G < E; G++) {
			M += getRowHead(G, P) + ","
		}
		if (N) {
			M += getColHead(E, I, B) + ",";
			M += getCrossDataCol(E, B) + ","
		} else {
			M += getDataCol(B) + ","
		}
		var F = document.all("showdetail").value;
		postUrl = "/seeyon/formreport.do?method=showReportQuery&str=" + encodeURIComponent(M);
		var A = screen.width - 155;
		var O = screen.height - 300;
		v3x.openWindow({
			url: "/seeyon/formreport.do?method=openShowReportQuery",
			workSpace: "yes",
			dialogType: "modal",
			resizable: false
		});
		return
	}
}
function getSummaryId(D) {
	var A = new XMLHttpRequestCaller(null, "", "", false, "GET", "false", D);
	var B = A.serviceRequest();
	return B
}
function showQueryTable(B) {
	var G = document.getElementById("showdetail").value;
	var H = document.getElementById("formname").value;
	var J = document.getElementById("formid").value;
	var F = document.getElementById("queryname").value;
	var I = document.getElementById("isFlow").value;
	if (I == "true") {
		var D = "/seeyon/formquery.do?method=hasSummaryId&id=" + B + "&showdetail=" + encodeURIComponent(G) + "&formid=" + J + "&formname=" + H;
		var E = getSummaryId(D);
		if (E.trim() == "null") {
			alert(v3x.getMessage("formLang.formquery__selectnone"))
		} else {
			if (E.indexOf("|") > -1) {
				D = "/seeyon/formquery.do?method=collFrameViewRelate&summaryId=" + E + "&showdetail=" + encodeURIComponent(G) + "&appid=" + J + "&queryname=" + encodeURIComponent(F);
				v3x.openWindow({
					url: D,
					workSpace: "yes",
					dialogType: v3x.getBrowserFlag("pageBreak") ? "modal" : "open"
				})
			} else {
				D = "/seeyon/formquery.do?method=showRecordDetail&summaryId=" + E + "&showdetail=" + encodeURIComponent(G) + "&appid=" + J + "&queryname=" + encodeURIComponent(F);
				v3x.openWindow({
					url: D,
					workSpace: "yes",
					dialogType: v3x.getBrowserFlag("pageBreak") ? "modal" : "open"
				})
			}
		}
	} else {
		if (I == "false") {
			var A = document.getElementById("appShowDetail").value;
			v3x.openWindow({
				url: "/seeyon/appFormController.do?method=viewFormData&isOpenWin=true&appformId=" + J + "&masterId=" + B + "&showDetail=" + encodeURIComponent(A),
				dialogType: "modal",
				workSpace: "yes",
				resizable: "true"
			})
		}
	}
}
function isCrossTable() {
	var A = document.getElementById("ftable");
	var B = A.rows[0];
	var F = B.cells.length;
	for (var D = 0; D < F; D++) {
		var E = B.cells[D];
		if (E.getAttribute("rowspan") == "2") {
			return true
		}
	}
	return false
}
function getColHead(B, F, E) {
	var A = document.getElementById("ftable");
	var D = A.rows[0];
	return D.cells[Math.floor((E - B) / F) + B].getAttribute("value")
}
function getCrossDataCol(B, D) {
	var A = document.getElementById("ftable");
	return A.rows[1].cells[D - B].getAttribute("value")
}
function getDataCol(B) {
	var A = document.getElementById("ftable");
	return A.rows[0].cells[B].getAttribute("value")
}
function getRowHead(B, D) {
	var A = document.getElementById("ftable");
	return A.rows[D].cells[B].getAttribute("value")
}
function newPlan(A, B, D) {
	getA8Top().contentFrame.mainFrame.location.href = A + "?method=initAdd&type=" + B + "&time=" + D
}
function newTask(B, D) {
	var A = v3x.openWindow({
			url: B + "?method=addTaskPageFrame&from=timing&time=" + D,
			width: 530,
			height: 480,
			resizable: false
		});
	if (A || A == "true") {
		window.location.href = window.location.href
	}
}
function newCal(B, D) {
	var A = v3x.openWindow({
			url: B + "?method=createEvent&time=" + D,
			width: 530,
			height: 480,
			resizable: false
		});
	if (A && A == "true") {
		window.location.href = window.location.href
	}
}
function newMeeting(A, B) {
	getA8Top().contentFrame.mainFrame.location.href = A + "?method=create&formOper=new&time=" + B
}
function isLeftClose() {
	return getA8Top().contentFrame.document.getElementById("LeftRightFrameSet").cols == "142,*"
}
function showCtpLocation(A, L) {
	var I = getA8Top();
	if (L && L.html) {
		if (I.showLocation) {
			var J = "vp-personal";
			var G = '<i class="vportal ' + J + '"></i>';
			L.html = G + L.html;
			I.showLocation(L.html)
		}
		return
	}
	if (I.$) {
		function B(Q) {
			if (I.$) {
				function P(W, T, X) {
					for (var U = 0; U < W.length; U++) {
						var Y = W[U];
						Y.parentMenu = T;
						var V = Y.resourceCode;
						if (V != null) {
							X[V] = Y
						}
						if (Y.items) {
							P(Y.items, Y, X)
						}
					}
				}
				var N = null;
				if (I.vPortal && I.vPortal.memberMenus) {
					N = I.vPortal.memberMenus
				} else {
					if (I.vPortal && I.vPortal.menu) {
						N = I.vPortal.menu
					}
				}
				if (N) {
					var S = "resourceMenuCache";
					var O = I.$.data(I.document.body, S);
					if (O == undefined) {
						O = new Array();
						P(N, null, O);
						I.$.data(I.document.body, S, O)
					}
					var M = [];
					var R = O[Q];
					if (R != undefined) {
						while (R != null) {
							M.push(R);
							R = R.parentMenu
						}
					}
					return M.reverse()
				}
			}
			return []
		}
		var D = B(A);
		if (D.length > 0) {
			var K = "\u5f53\u524d\u4f4d\u7f6e\uff1a";
			if (I.$) {
				K = I.$.i18n("seeyon.top.nowLocation.label")
			}
			var J = I.currentSpaceType || "personal";
			var F = I.skinPathKey || "defaultV51";
			var G = '<span class="nowLocation_ico"><img src="' + v3x.baseURL + "/main/skin/frame/" + F + "/menuIcon/" + J + '.png"></span>';
			G += '<span class="nowLocation_content">';
			var H = [];
			for (var E = 0; E < D.length; E++) {
				if (D[E].url) {
					H.push('<a class="hand" onclick="showMenu(\'' + v3x.baseURL + D[E].url + "')\">" + D[E].name + "</a>")
				} else {
					H.push('<a style="cursor:default" >' + D[E].name + "</a>")
				}
			}
			G += H.join(" > ");
			if (L && L.surffix) {
				G += " > " + L.surffix
			}
			I.showLocation(G)
		}
	}
}
function resetCtpLocation() {
	var A = getA8Top();
	if (A) {
		A.showLocation("")
	}
}
function openEditorAssociate(E, F, M, I, G, N, A, O) {
	function J() {
		if (v3x) {
			return v3x.baseURL ? v3x.baseURL : parent._ctxPath
		}
		return "/seeyon"
	}
	var B;
	var L = false;
	var D = document.getElementById("moduleId");
	if (D != null) {
		I = D.value
	} else {
		if (typeof(summary_id) !== undefined && (typeof(summary_id) !== "undefined")) {
			I = summary_id
		}
	}
	if (typeof(_baseObjectId) !== undefined && (typeof(_baseObjectId) !== "undefined")) {
		I = _baseObjectId
	}
	var K = document.getElementById("moduleType");
	if (K != null) {
		G = K.value
	} else {
		if (typeof(_baseApp) !== undefined && (typeof(_baseApp) !== "undefined")) {
			G = _baseApp
		}
	}
	if (F == "collaboration") {
		B = "collaboration/collaboration.do?method=summary&openFrom=glwd&type=&affairId=" + M + "&baseObjectId=" + I + "&baseApp=" + G
	} else {
		if (F == "edoc") {
			B = "edocController.do?method=detailIFrame&from=Done&openFrom=glwd&affairId=" + M + "&isQuote=true&baseObjectId=" + I + "&baseApp=4"
		} else {
			if (F == "km") {
				B = "doc.do?method=docOpenIframeOnlyId&openFrom=glwd&docResId=" + M + "&baseObjectId=" + I + "&baseApp=" + G
			} else {
				if (F == "meeting") {
					B = "mtMeeting.do?method=myDetailFrame&id=" + M + "&isQuote=true&baseObjectId=" + I + "&baseApp=" + G + "&state=10"
				} else {
					L = true;
					B = "fileUpload.do?method=download&fileId=" + E + "&createDate=" + N.substring(0, 10) + "&filename=" + encodeURI(A) + "&v=" + O
				}
			}
		}
	}
	B = B + "&fromEditor=1";
	B = J() + "/" + B;
	if (L) {
		var H = document.getElementById("downloadFileFrame");
		if (H) {
			H.src = B
		} else {
			window.open(B, "_blank")
		}
	} else {
		openDetailURL(B)
	}
}
function closeAllDialog(A) {
	var B = window;
	if (A) {
		B = A
	}
	B.$(".mask").remove();
	B.$(".dialog_box").remove();
	B.$(".shield").remove();
	B.$(".mxt-window").remove()
}
function isYoZoOffice() {
	var D = false;
	try {
		var B = "";
		if (navigator.cpuClass.indexOf("x86") != -1) {
			B = new ActiveXObject("Kinggrid.iWebOffice")
		} else {
			B = new ActiveXObject("Kinggrid.iWebOffice_x64")
		}
		D = B.WebApplication(".eio")
	} catch (A) {}
	return D
}
function clearOfficeFlag() {
	try {
		var B = navigator.userAgent;
		var A = (navigator.appName == "Microsoft Internet Explorer") || B.indexOf("Trident") != -1;
		var D = getA8Top();
		D.isOffice = false;
		D.officeObj = null
	} catch (E) {}
}
function setOfficeFlag(B, D) {
	try {
		var E = navigator.userAgent;
		var A = (navigator.appName == "Microsoft Internet Explorer") || E.indexOf("Trident") != -1;
		if (A) {
			var F = getA8Top();
			F.isOffice = B;
			F.officeObj = [];
			F.officeObj.push(D);
			return
		}
		var F = getA8Top();
		F.isOffice = B;
		if (F.officeObj && typeof F.officeObj == "object" && "[object Array]" == Object.prototype.toString.call(F.officeObj)) {
			F.officeObj.push(D)
		} else {
			F.officeObj = [];
			F.officeObj.push(D)
		}
	} catch (G) {}
}
function hideOfficeObj() {
	try {
		var E = navigator.userAgent;
		var B = (navigator.appName == "Microsoft Internet Explorer") || E.indexOf("Trident") != -1;
		var F = getA8Top();
		if (F.isOffice && F.officeObj && F.officeObj.length > 0) {
			for (var D = 0; D < F.officeObj.length; D++) {
				var A = F.officeObj[D];
				if (A && A.style) {
					try {
						if (B) {
							A.Hide(0)
						} else {
							A.HidePlugin(0)
						}
					} catch (G) {}
				}
			}
		}
	} catch (G) {}
}
var OfficeObjExt = {
	iframeId: null,
	showDialogOffice: function () {},
	setIframeId: function (A) {
		OfficeObjExt.iframeId = A
	},
	firstHeight: null,
	showExt: function () {
		if (OfficeObjExt.iframeId == null) {
			return
		}
		var D = document.getElementById(OfficeObjExt.iframeId);
		var B;
		if (OfficeObjExt.firstHeight == null) {
			B = D.style.height;
			OfficeObjExt.firstHeight = B
		} else {
			B = OfficeObjExt.firstHeight
		}
		B = B + "";
		var A = B;
		if (B.indexOf("%") > 0) {
			A = B.substring(0, B.length - 1);
			A = parseInt(A);
			A = A - 2;
			D.style.height = A + "%"
		} else {
			if (B.indexOf("px") > 0) {
				A = B.substring(0, B.length - 2);
				A = parseInt(A);
				A = A - 2;
				D.style.height = A + "px"
			} else {
				B = $(D).height();
				OfficeObjExt.firstHeight = B + "px";
				D.style.height = (B - 2) + "px"
			}
		}
		window.setTimeout(function () {
			D.style.height = B
		}, 2)
	},
	showIfame: function (B) {
		var D,
		F,
		G;
		D = B.firstAttr;
		F = B.iframe;
		G = B.callback || function () {};
		var E;
		if (OfficeObjExt[D] == null) {
			E = F.style.height;
			OfficeObjExt[D] = E
		} else {
			E = OfficeObjExt[D]
		}
		E = E + "";
		var A = E;
		if (E.indexOf("%") > 0) {
			A = E.substring(0, E.length - 1);
			A = parseInt(A);
			A = A - 2;
			F.style.height = A + "%"
		} else {
			if (E.indexOf("px") > 0) {
				A = E.substring(0, E.length - 2);
				A = parseInt(A);
				A = A - 2;
				F.style.height = A + "px"
			} else {
				E = $(F).height();
				OfficeObjExt[D] = E + "px";
				F.style.height = (E - 2) + "px"
			}
		}
		window.setTimeout(function () {
			window.setTimeout(B.callback, 1)
		}, 2)
	}
};
function showOfficeObj(D) {
	try {
		var G = navigator.userAgent.toLowerCase().match(/chrome/) != null;
		var E = getCtpTop();
		if ((E.$(".layui-layer").length > 0 || E.$(".dialog_main").length > 0) && D != true) {
			return void(0)
		}
		try {
			if (E.$(".shield").size() >= 1) {
				return
			}
		} catch (F) {}
		try {
			if ((E.$(".mask").size() > 0 && E.$(".mask").css("display") != "none") || (E.$(".shield").size() > 0 && E.$(".shield").css("display") != "none")) {
				if (typeof OfficeObjExt.showDialogOffice == "undefined") {
					return
				}
				OfficeObjExt.showDialogOffice()
			}
		} catch (F) {}
		if (E.isOffice && E.officeObj && E.officeObj.length > 0) {
			for (var B = 0; B < E.officeObj.length; B++) {
				var A = E.officeObj[B];
				if (A && A.style) {
					try {
						if (G) {
							A.HidePlugin(1);
							A.FuncExtModule.ShowToolBar = "1"
						} else {
							A.Hide(1)
						}
					} catch (F) {}
				}
			}
		}
		if (G) {
			window.setTimeout(OfficeObjExt.showExt, 50)
		}
	} catch (F) {}
};
/*
 * jQuery UI Core 1.9.2
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
(function (B, F) {
	var A = 0,
	E = /^ui-id-\d+$/;
	B.ui = B.ui || {};
	if (B.ui.version) {
		return
	}
	B.extend(B.ui, {
		version: "1.9.2",
		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});
	B.fn.extend({
		_focus: B.fn.focus,
		focus: function (G, H) {
			return typeof G === "number" ? this.each(function () {
				var I = this;
				setTimeout(function () {
					B(I).focus();
					if (H) {
						H.call(I)
					}
				}, G)
			}) : this._focus.apply(this, arguments)
		},
		scrollParent: function () {
			var G;
			if ((B.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				G = this.parents().filter(function () {
						return (/(relative|absolute|fixed)/).test(B.css(this, "position")) && (/(auto|scroll)/).test(B.css(this, "overflow") + B.css(this, "overflow-y") + B.css(this, "overflow-x"))
					}).eq(0)
			} else {
				G = this.parents().filter(function () {
						return (/(auto|scroll)/).test(B.css(this, "overflow") + B.css(this, "overflow-y") + B.css(this, "overflow-x"))
					}).eq(0)
			}
			return (/fixed/).test(this.css("position")) || !G.length ? B(document) : G
		},
		zIndex: function (J) {
			if (J !== F) {
				return this.css("zIndex", J)
			}
			if (this.length) {
				var H = B(this[0]),
				G,
				I;
				while (H.length && H[0] !== document) {
					G = H.css("position");
					if (G === "absolute" || G === "relative" || G === "fixed") {
						I = parseInt(H.css("zIndex"), 10);
						if (!isNaN(I) && I !== 0) {
							return I
						}
					}
					H = H.parent()
				}
			}
			return 0
		},
		uniqueId: function () {
			return this.each(function () {
				if (!this.id) {
					this.id = "ui-id-" + (++A)
				}
			})
		},
		removeUniqueId: function () {
			return this.each(function () {
				if (E.test(this.id)) {
					B(this).removeAttr("id")
				}
			})
		}
	});
	function D(I, G) {
		var K,
		J,
		H,
		L = I.nodeName.toLowerCase();
		if ("area" === L) {
			K = I.parentNode;
			J = K.name;
			if (!I.href || !J || K.nodeName.toLowerCase() !== "map") {
				return false
			}
			H = B("img[usemap=#" + J + "]")[0];
			return !!H && C(H)
		}
		return (/input|select|textarea|button|object/.test(L) ? !I.disabled : "a" === L ? I.href || G : G) && C(I)
	}
	function C(G) {
		return B.expr.filters.visible(G) && !B(G).parents().andSelf().filter(function () {
			return B.css(this, "visibility") === "hidden"
		}).length
	}
	B.extend(B.expr[":"], {
		data: B.expr.createPseudo ? B.expr.createPseudo(function (G) {
			return function (H) {
				return !!B.data(H, G)
			}
		}) : function (I, H, G) {
			return !!B.data(I, G[3])
		},
		focusable: function (G) {
			return D(G, !isNaN(B.attr(G, "tabindex")))
		},
		tabbable: function (I) {
			var G = B.attr(I, "tabindex"),
			H = isNaN(G);
			return (H || G >= 0) && D(I, !H)
		}
	});
	B(function () {
		try {
			var G = document.body,
			I = G.appendChild(I = document.createElement("div"));
			I.offsetHeight;
			B.extend(I.style, {
				minHeight: "100px",
				height: "auto",
				padding: 0,
				borderWidth: 0
			});
			B.support.minHeight = I.offsetHeight === 100;
			B.support.selectstart = "onselectstart" in I;
			G.removeChild(I).style.display = "none"
		} catch (H) {}
	});
	if (!B("<a>").outerWidth(1).jquery) {
		B.each(["Width", "Height"], function (I, G) {
			var H = G === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
			J = G.toLowerCase(),
			L = {
				innerWidth: B.fn.innerWidth,
				innerHeight: B.fn.innerHeight,
				outerWidth: B.fn.outerWidth,
				outerHeight: B.fn.outerHeight
			};
			function K(O, N, M, P) {
				B.each(H, function () {
					N -= parseFloat(B.css(O, "padding" + this)) || 0;
					if (M) {
						N -= parseFloat(B.css(O, "border" + this + "Width")) || 0
					}
					if (P) {
						N -= parseFloat(B.css(O, "margin" + this)) || 0
					}
				});
				return N
			}
			B.fn["inner" + G] = function (M) {
				if (M === F) {
					return L["inner" + G].call(this)
				}
				return this.each(function () {
					B(this).css(J, K(this, M) + "px")
				})
			};
			B.fn["outer" + G] = function (M, N) {
				if (typeof M !== "number") {
					return L["outer" + G].call(this, M)
				}
				return this.each(function () {
					B(this).css(J, K(this, M, true, N) + "px")
				})
			}
		})
	}
	if (B("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
		B.fn.removeData = (function (G) {
			return function (H) {
				if (arguments.length) {
					return G.call(this, B.camelCase(H))
				} else {
					return G.call(this)
				}
			}
		})(B.fn.removeData)
	}
	(function () {
		var G = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
		B.ui.ie = G.length ? true : false;
		B.ui.ie6 = parseFloat(G[1], 10) === 6
	})();
	B.fn.extend({
		disableSelection: function () {
			return this.bind((B.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (G) {
				G.preventDefault()
			})
		},
		enableSelection: function () {
			return this.unbind(".ui-disableSelection")
		}
	});
	B.extend(B.ui, {
		plugin: {
			add: function (H, I, K) {
				var G,
				J = B.ui[H].prototype;
				for (G in K) {
					J.plugins[G] = J.plugins[G] || [];
					J.plugins[G].push([I, K[G]])
				}
			},
			call: function (G, I, H) {
				var J,
				K = G.plugins[I];
				if (!K || !G.element[0].parentNode || G.element[0].parentNode.nodeType === 11) {
					return
				}
				for (J = 0; J < K.length; J++) {
					if (G.options[K[J][0]]) {
						K[J][1].apply(G.element, H)
					}
				}
			}
		},
		contains: B.contains,
		hasScroll: function (J, H) {
			if (B(J).css("overflow") === "hidden") {
				return false
			}
			var G = (H && H === "left") ? "scrollLeft" : "scrollTop",
			I = false;
			if (J[G] > 0) {
				return true
			}
			J[G] = 1;
			I = (J[G] > 0);
			J[G] = 0;
			return I
		},
		isOverAxis: function (H, G, I) {
			return (H > G) && (H < (G + I))
		},
		isOver: function (L, H, K, J, G, I) {
			return B.ui.isOverAxis(L, K, G) && B.ui.isOverAxis(H, J, I)
		}
	})
})(jQuery);
/*
 * jQuery UI Widget 1.9.2
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
(function (B, E) {
	var A = 0,
	D = Array.prototype.slice,
	C = B.cleanData;
	B.cleanData = function (F) {
		for (var G = 0, H; (H = F[G]) != null; G++) {
			try {
				B(H).triggerHandler("remove")
			} catch (I) {}
		}
		C(F)
	};
	B.widget = function (G, J, F) {
		var M,
		L,
		I,
		K,
		H = G.split(".")[0];
		G = G.split(".")[1];
		M = H + "-" + G;
		if (!F) {
			F = J;
			J = B.Widget
		}
		B.expr[":"][M.toLowerCase()] = function (N) {
			return !!B.data(N, M)
		};
		B[H] = B[H] || {};
		L = B[H][G];
		I = B[H][G] = function (N, O) {
			if (!this._createWidget) {
				return new I(N, O)
			}
			if (arguments.length) {
				this._createWidget(N, O)
			}
		};
		B.extend(I, L, {
			version: F.version,
			_proto: B.extend({}, F),
			_childConstructors: []
		});
		K = new J();
		K.options = B.widget.extend({}, K.options);
		B.each(F, function (O, N) {
			if (B.isFunction(N)) {
				F[O] = (function () {
					var P = function () {
						return J.prototype[O].apply(this, arguments)
					},
					Q = function (R) {
						return J.prototype[O].apply(this, R)
					};
					return function () {
						var T = this._super,
						R = this._superApply,
						S;
						this._super = P;
						this._superApply = Q;
						S = N.apply(this, arguments);
						this._super = T;
						this._superApply = R;
						return S
					}
				})()
			}
		});
		I.prototype = B.widget.extend(K, {
				widgetEventPrefix: L ? K.widgetEventPrefix : G
			}, F, {
				constructor: I,
				namespace: H,
				widgetName: G,
				widgetBaseClass: M,
				widgetFullName: M
			});
		if (L) {
			B.each(L._childConstructors, function (O, P) {
				var N = P.prototype;
				B.widget(N.namespace + "." + N.widgetName, I, P._proto)
			});
			delete L._childConstructors
		} else {
			J._childConstructors.push(I)
		}
		B.widget.bridge(G, I)
	};
	B.widget.extend = function (K) {
		var G = D.call(arguments, 1),
		J = 0,
		F = G.length,
		H,
		I;
		for (; J < F; J++) {
			for (H in G[J]) {
				I = G[J][H];
				if (G[J].hasOwnProperty(H) && I !== E) {
					if (B.isPlainObject(I)) {
						K[H] = B.isPlainObject(K[H]) ? B.widget.extend({}, K[H], I) : B.widget.extend({}, I)
					} else {
						K[H] = I
					}
				}
			}
		}
		return K
	};
	B.widget.bridge = function (G, F) {
		var H = F.prototype.widgetFullName || G;
		B.fn[G] = function (K) {
			var I = typeof K === "string",
			J = D.call(arguments, 1),
			L = this;
			K = !I && J.length ? B.widget.extend.apply(null, [K].concat(J)) : K;
			if (I) {
				this.each(function () {
					var N,
					M = B.data(this, H);
					if (!M) {
						return B.error("cannot call methods on " + G + " prior to initialization; attempted to call method '" + K + "'")
					}
					if (!B.isFunction(M[K]) || K.charAt(0) === "_") {
						return B.error("no such method '" + K + "' for " + G + " widget instance")
					}
					N = M[K].apply(M, J);
					if (N !== M && N !== E) {
						L = N && N.jquery ? L.pushStack(N.get()) : N;
						return false
					}
				})
			} else {
				this.each(function () {
					var M = B.data(this, H);
					if (M) {
						M.option(K || {})._init()
					} else {
						B.data(this, H, new F(K, this))
					}
				})
			}
			return L
		}
	};
	B.Widget = function () {};
	B.Widget._childConstructors = [];
	B.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			disabled: false,
			create: null
		},
		_createWidget: function (F, G) {
			G = B(G || this.defaultElement || this)[0];
			this.element = B(G);
			this.uuid = A++;
			this.eventNamespace = "." + this.widgetName + this.uuid;
			this.options = B.widget.extend({}, this.options, this._getCreateOptions(), F);
			this.bindings = B();
			this.hoverable = B();
			this.focusable = B();
			if (G !== this) {
				B.data(G, this.widgetName, this);
				B.data(G, this.widgetFullName, this);
				this._on(true, this.element, {
					remove: function (H) {
						if (H.target === G) {
							this.destroy()
						}
					}
				});
				this.document = B(G.style ? G.ownerDocument : G.document || G);
				this.window = B(this.document[0].defaultView || this.document[0].parentWindow)
			}
			this._create();
			this._trigger("create", null, this._getCreateEventData());
			this._init()
		},
		_getCreateOptions: B.noop,
		_getCreateEventData: B.noop,
		_create: B.noop,
		_init: B.noop,
		destroy: function () {
			this._destroy();
			this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(B.camelCase(this.widgetFullName));
			this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled");
			this.bindings.unbind(this.eventNamespace);
			this.hoverable.removeClass("ui-state-hover");
			this.focusable.removeClass("ui-state-focus")
		},
		_destroy: B.noop,
		widget: function () {
			return this.element
		},
		option: function (I, J) {
			var F = I,
			K,
			H,
			G;
			if (arguments.length === 0) {
				return B.widget.extend({}, this.options)
			}
			if (typeof I === "string") {
				F = {};
				K = I.split(".");
				I = K.shift();
				if (K.length) {
					H = F[I] = B.widget.extend({}, this.options[I]);
					for (G = 0; G < K.length - 1; G++) {
						H[K[G]] = H[K[G]] || {};
						H = H[K[G]]
					}
					I = K.pop();
					if (J === E) {
						return H[I] === E ? null : H[I]
					}
					H[I] = J
				} else {
					if (J === E) {
						return this.options[I] === E ? null : this.options[I]
					}
					F[I] = J
				}
			}
			this._setOptions(F);
			return this
		},
		_setOptions: function (F) {
			var G;
			for (G in F) {
				this._setOption(G, F[G])
			}
			return this
		},
		_setOption: function (F, G) {
			this.options[F] = G;
			if (F === "disabled") {
				this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!G).attr("aria-disabled", G);
				this.hoverable.removeClass("ui-state-hover");
				this.focusable.removeClass("ui-state-focus")
			}
			return this
		},
		enable: function () {
			return this._setOption("disabled", false)
		},
		disable: function () {
			return this._setOption("disabled", true)
		},
		_on: function (I, H, G) {
			var J,
			F = this;
			if (typeof I !== "boolean") {
				G = H;
				H = I;
				I = false
			}
			if (!G) {
				G = H;
				H = this.element;
				J = this.widget()
			} else {
				H = J = B(H);
				this.bindings = this.bindings.add(H)
			}
			B.each(G, function (P, O) {
				function M() {
					if (!I && (F.options.disabled === true || B(this).hasClass("ui-state-disabled"))) {
						return
					}
					return (typeof O === "string" ? F[O] : O).apply(F, arguments)
				}
				if (typeof O !== "string") {
					M.guid = O.guid = O.guid || M.guid || B.guid++
				}
				var N = P.match(/^(\w+)\s*(.*)$/),
				L = N[1] + F.eventNamespace,
				K = N[2];
				if (K) {
					J.delegate(K, L, M)
				} else {
					H.bind(L, M)
				}
			})
		},
		_off: function (G, F) {
			F = (F || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
			G.unbind(F).undelegate(F)
		},
		_delay: function (I, H) {
			function G() {
				return (typeof I === "string" ? F[I] : I).apply(F, arguments)
			}
			var F = this;
			return setTimeout(G, H || 0)
		},
		_hoverable: function (F) {
			this.hoverable = this.hoverable.add(F);
			this._on(F, {
				mouseenter: function (G) {
					B(G.currentTarget).addClass("ui-state-hover")
				},
				mouseleave: function (G) {
					B(G.currentTarget).removeClass("ui-state-hover")
				}
			})
		},
		_focusable: function (F) {
			this.focusable = this.focusable.add(F);
			this._on(F, {
				focusin: function (G) {
					B(G.currentTarget).addClass("ui-state-focus")
				},
				focusout: function (G) {
					B(G.currentTarget).removeClass("ui-state-focus")
				}
			})
		},
		_trigger: function (F, G, H) {
			var K,
			J,
			I = this.options[F];
			H = H || {};
			G = B.Event(G);
			G.type = (F === this.widgetEventPrefix ? F : this.widgetEventPrefix + F).toLowerCase();
			G.target = this.element[0];
			J = G.originalEvent;
			if (J) {
				for (K in J) {
					if (!(K in G)) {
						G[K] = J[K]
					}
				}
			}
			this.element.trigger(G, H);
			return !(B.isFunction(I) && I.apply(this.element[0], [G].concat(H)) === false || G.isDefaultPrevented())
		}
	};
	B.each({
		show: "fadeIn",
		hide: "fadeOut"
	}, function (G, F) {
		B.Widget.prototype["_" + G] = function (J, I, L) {
			if (typeof I === "string") {
				I = {
					effect: I
				}
			}
			var K,
			H = !I ? G : I === true || typeof I === "number" ? F : I.effect || F;
			I = I || {};
			if (typeof I === "number") {
				I = {
					duration: I
				}
			}
			K = !B.isEmptyObject(I);
			I.complete = L;
			if (I.delay) {
				J.delay(I.delay)
			}
			if (K && B.effects && (B.effects.effect[H] || B.uiBackCompat !== false && B.effects[H])) {
				J[G](I)
			} else {
				if (H !== G && J[H]) {
					J[H](I.duration, I.easing, L)
				} else {
					J.queue(function (M) {
						B(this)[G]();
						if (L) {
							L.call(J[0])
						}
						M()
					})
				}
			}
		}
	});
	if (B.uiBackCompat !== false) {
		B.Widget.prototype._getCreateOptions = function () {
			if (B.metadata && B.metadata.get) {
				return B.metadata && B.metadata.get(this.element[0])[this.widgetName]
			}
			return null
		}
	}
})(jQuery);
/*
 * jQuery UI Mouse 1.9.2
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 *
 * Depends:
 *  jquery.ui.widget.js
 */
(function (B, C) {
	var A = false;
	B(document).mouseup(function (D) {
		A = false
	});
	B.widget("ui.mouse", {
		version: "1.9.2",
		options: {
			cancel: "input,textarea,button,select,option",
			distance: 1,
			delay: 0
		},
		_mouseInit: function () {
			var D = this;
			this.element.bind("mousedown." + this.widgetName, function (E) {
				return D._mouseDown(E)
			}).bind("click." + this.widgetName, function (E) {
				if (true === B.data(E.target, D.widgetName + ".preventClickEvent")) {
					B.removeData(E.target, D.widgetName + ".preventClickEvent");
					E.stopImmediatePropagation();
					return false
				}
			});
			this.started = false
		},
		_mouseDestroy: function () {
			this.element.unbind("." + this.widgetName);
			if (this._mouseMoveDelegate) {
				B(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate)
			}
		},
		_mouseDown: function (F) {
			if (A) {
				return
			}
			(this._mouseStarted && this._mouseUp(F));
			this._mouseDownEvent = F;
			var E = this,
			G = (F.which === 1),
			D = (typeof this.options.cancel === "string" && F.target.nodeName ? B(F.target).closest(this.options.cancel).length : false);
			if (!G || D || !this._mouseCapture(F)) {
				return true
			}
			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function () {
						E.mouseDelayMet = true
					}, this.options.delay)
			}
			if (this._mouseDistanceMet(F) && this._mouseDelayMet(F)) {
				this._mouseStarted = (this._mouseStart(F) !== false);
				if (!this._mouseStarted) {
					F.preventDefault();
					return true
				}
			}
			if (true === B.data(F.target, this.widgetName + ".preventClickEvent")) {
				B.removeData(F.target, this.widgetName + ".preventClickEvent")
			}
			this._mouseMoveDelegate = function (H) {
				return E._mouseMove(H)
			};
			this._mouseUpDelegate = function (H) {
				return E._mouseUp(H)
			};
			B(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
			F.preventDefault();
			A = true;
			return true
		},
		_mouseMove: function (D) {
			if (B.ui.ie && !(document.documentMode >= 9) && !D.button) {
				return this._mouseUp(D)
			}
			if (this._mouseStarted) {
				this._mouseDrag(D);
				return D.preventDefault()
			}
			if (this._mouseDistanceMet(D) && this._mouseDelayMet(D)) {
				this._mouseStarted = (this._mouseStart(this._mouseDownEvent, D) !== false);
				(this._mouseStarted ? this._mouseDrag(D) : this._mouseUp(D))
			}
			return !this._mouseStarted
		},
		_mouseUp: function (D) {
			B(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
			if (this._mouseStarted) {
				this._mouseStarted = false;
				if (D.target === this._mouseDownEvent.target) {
					B.data(D.target, this.widgetName + ".preventClickEvent", true)
				}
				this._mouseStop(D)
			}
			return false
		},
		_mouseDistanceMet: function (D) {
			return (Math.max(Math.abs(this._mouseDownEvent.pageX - D.pageX), Math.abs(this._mouseDownEvent.pageY - D.pageY)) >= this.options.distance)
		},
		_mouseDelayMet: function (D) {
			return this.mouseDelayMet
		},
		_mouseStart: function (D) {},
		_mouseDrag: function (D) {},
		_mouseStop: function (D) {},
		_mouseCapture: function (D) {
			return true
		}
	})
})(jQuery);
/*
 * jQuery UI Slider 1.9.2
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/slider/
 *
 * Depends:
 *  jquery.ui.core.js
 *  jquery.ui.mouse.js
 *  jquery.ui.widget.js
 */
(function (B, C) {
	var A = 5;
	B.widget("ui.slider", B.ui.mouse, {
		version: "1.9.2",
		widgetEventPrefix: "slide",
		options: {
			animate: false,
			distance: 0,
			max: 100,
			min: 0,
			orientation: "horizontal",
			range: false,
			pointer: true,
			step: 1,
			value: 0,
			values: null
		},
		_create: function () {
			var I,
			D,
			E = this.options,
			F = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),
			K = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#' title='" + E.value + "'></a>",
			N = [];
			this._keySliding = false;
			this._mouseSliding = false;
			this._animateOff = true;
			this._handleIndex = null;
			this._detectOrientation();
			this._mouseInit();
			this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all" + (E.disabled ? " ui-slider-disabled ui-disabled" : ""));
			this.range = B([]);
			if (E.range) {
				if (E.range === true) {
					if (!E.values) {
						E.values = [this._valueMin(), this._valueMin()]
					}
					if (E.values.length && E.values.length !== 2) {
						E.values = [E.values[0], E.values[0]]
					}
				}
				this.range = B("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header" + ((E.range === "min" || E.range === "max") ? " ui-slider-range-" + E.range : ""))
			}
			D = (E.values && E.values.length) || 1;
			for (I = F.length; I < D; I++) {
				N.push(K)
			}
			this.handles = F.add(B(N.join("")).appendTo(this.element));
			this.handle = this.handles.eq(0);
			if (E.pointer) {
				this.point = B("<div class='relative'></div>").width(this.element.width()).css("margin-top", this.element[0].offsetHeight - 2).addClass("ui-slider-pointer");
				var G = "";
				var J = this._valueMin();
				var M = this._valueMax();
				for (var I = J; I <= M; I++) {
					var L = I;
					var H = (M !== J) ? (L - J) / (M - J) * 100 : 0;
					G += "<span class='ui_sliderPoint absolute'step='" + I + "' style='left:" + H + "%;'><em></em>";
					if (E.text) {
						G += "<p class='ui_point_text'>" + E.text[I] + "</p>"
					}
					G += "</span>"
				}
				this.point.append(B(G)).appendTo(this.element)
			}
			this.handles.filter("a").click(function (O) {
				O.preventDefault()
			}).mouseenter(function () {
				if (!E.disabled) {
					B(this).addClass("ui-state-hover")
				}
			}).mouseleave(function () {
				B(this).removeClass("ui-state-hover")
			}).focus(function () {
				if (!E.disabled) {
					B(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
					B(this).addClass("ui-state-focus")
				} else {
					B(this).blur()
				}
			}).blur(function () {
				B(this).removeClass("ui-state-focus")
			});
			this.handles.each(function (O) {
				B(this).data("ui-slider-handle-index", O)
			});
			this._on(this.handles, {
				keydown: function (S) {
					var T,
					Q,
					P,
					R,
					O = B(S.target).data("ui-slider-handle-index");
					switch (S.keyCode) {
					case B.ui.keyCode.HOME:
					case B.ui.keyCode.END:
					case B.ui.keyCode.PAGE_UP:
					case B.ui.keyCode.PAGE_DOWN:
					case B.ui.keyCode.UP:
					case B.ui.keyCode.RIGHT:
					case B.ui.keyCode.DOWN:
					case B.ui.keyCode.LEFT:
						S.preventDefault();
						if (!this._keySliding) {
							this._keySliding = true;
							B(S.target).addClass("ui-state-active");
							T = this._start(S, O);
							if (T === false) {
								return
							}
						}
						break
					}
					R = this.options.step;
					if (this.options.values && this.options.values.length) {
						Q = P = this.values(O)
					} else {
						Q = P = this.value()
					}
					switch (S.keyCode) {
					case B.ui.keyCode.HOME:
						P = this._valueMin();
						break;
					case B.ui.keyCode.END:
						P = this._valueMax();
						break;
					case B.ui.keyCode.PAGE_UP:
						P = this._trimAlignValue(Q + ((this._valueMax() - this._valueMin()) / A));
						break;
					case B.ui.keyCode.PAGE_DOWN:
						P = this._trimAlignValue(Q - ((this._valueMax() - this._valueMin()) / A));
						break;
					case B.ui.keyCode.UP:
					case B.ui.keyCode.RIGHT:
						if (Q === this._valueMax()) {
							return
						}
						P = this._trimAlignValue(Q + R);
						break;
					case B.ui.keyCode.DOWN:
					case B.ui.keyCode.LEFT:
						if (Q === this._valueMin()) {
							return
						}
						P = this._trimAlignValue(Q - R);
						break
					}
					this._slide(S, O, P)
				},
				keyup: function (P) {
					var O = B(P.target).data("ui-slider-handle-index");
					if (this._keySliding) {
						this._keySliding = false;
						this._stop(P, O);
						this._change(P, O);
						B(P.target).removeClass("ui-state-active")
					}
				}
			});
			this._refreshValue();
			this._animateOff = false
		},
		_destroy: function () {
			this.handles.remove();
			this.range.remove();
			this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all");
			this._mouseDestroy()
		},
		_mouseCapture: function (F) {
			var J,
			M,
			E,
			H,
			L,
			N,
			I,
			D,
			K = this,
			G = this.options;
			if (G.disabled) {
				return false
			}
			this.elementSize = {
				width: this.element.outerWidth(),
				height: this.element.outerHeight()
			};
			this.elementOffset = this.element.offset();
			J = {
				x: F.pageX,
				y: F.pageY
			};
			M = this._normValueFromMouse(J);
			E = this._valueMax() - this._valueMin() + 1;
			this.handles.each(function (O) {
				var P = Math.abs(M - K.values(O));
				if (E > P) {
					E = P;
					H = B(this);
					L = O
				}
			});
			if (G.range === true && this.values(1) === G.min) {
				L += 1;
				H = B(this.handles[L])
			}
			N = this._start(F, L);
			if (N === false) {
				return false
			}
			this._mouseSliding = true;
			this._handleIndex = L;
			H.addClass("ui-state-active").focus();
			I = H.offset();
			D = !B(F.target).parents().andSelf().is(".ui-slider-handle");
			this._clickOffset = D ? {
				left: 0,
				top: 0
			}
			 : {
				left: F.pageX - I.left - (H.width() / 2),
				top: F.pageY - I.top - (H.height() / 2) - (parseInt(H.css("borderTopWidth"), 10) || 0) - (parseInt(H.css("borderBottomWidth"), 10) || 0) + (parseInt(H.css("marginTop"), 10) || 0)
			};
			if (!this.handles.hasClass("ui-state-hover")) {
				this._slide(F, L, M)
			}
			this._animateOff = true;
			return true
		},
		_mouseStart: function () {
			return true
		},
		_mouseDrag: function (F) {
			var D = {
				x: F.pageX,
				y: F.pageY
			},
			E = this._normValueFromMouse(D);
			this._slide(F, this._handleIndex, E);
			return false
		},
		_mouseStop: function (D) {
			this.handles.removeClass("ui-state-active");
			this._mouseSliding = false;
			this._stop(D, this._handleIndex);
			this._change(D, this._handleIndex);
			this._handleIndex = null;
			this._clickOffset = null;
			this._animateOff = false;
			return false
		},
		_detectOrientation: function () {
			this.orientation = (this.options.orientation === "vertical") ? "vertical" : "horizontal"
		},
		_normValueFromMouse: function (E) {
			var D,
			H,
			G,
			F,
			I;
			if (this.orientation === "horizontal") {
				D = this.elementSize.width;
				H = E.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
			} else {
				D = this.elementSize.height;
				H = E.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
			}
			G = (H / D);
			if (G > 1) {
				G = 1
			}
			if (G < 0) {
				G = 0
			}
			if (this.orientation === "vertical") {
				G = 1 - G
			}
			F = this._valueMax() - this._valueMin();
			I = this._valueMin() + G * F;
			return this._trimAlignValue(I)
		},
		_start: function (F, E) {
			var D = {
				handle: this.handles[E],
				value: this.value()
			};
			if (this.options.values && this.options.values.length) {
				D.value = this.values(E);
				D.values = this.values()
			}
			return this._trigger("start", F, D)
		},
		_slide: function (H, G, F) {
			var D,
			E,
			I;
			if (this.options.values && this.options.values.length) {
				D = this.values(G ? 0 : 1);
				if ((this.options.values.length === 2 && this.options.range === true) && ((G === 0 && F > D) || (G === 1 && F < D))) {
					F = D
				}
				if (F !== this.values(G)) {
					E = this.values();
					E[G] = F;
					I = this._trigger("slide", H, {
							handle: this.handles[G],
							value: F,
							values: E
						});
					D = this.values(G ? 0 : 1);
					if (I !== false) {
						this.values(G, F, true)
					}
				}
			} else {
				if (F !== this.value()) {
					I = this._trigger("slide", H, {
							handle: this.handles[G],
							value: F
						});
					if (I !== false) {
						this.value(F)
					}
				}
			}
		},
		_stop: function (F, E) {
			var D = {
				handle: this.handles[E],
				value: this.value()
			};
			if (this.options.values && this.options.values.length) {
				D.value = this.values(E);
				D.values = this.values()
			}
			this._trigger("stop", F, D)
		},
		_change: function (F, E) {
			if (!this._keySliding && !this._mouseSliding) {
				var D = {
					handle: this.handles[E],
					value: this.value()
				};
				if (this.options.values && this.options.values.length) {
					D.value = this.values(E);
					D.values = this.values()
				}
				D.handle.title = D.value;
				this._trigger("change", F, D)
			}
		},
		value: function (D) {
			if (arguments.length) {
				this.options.value = this._trimAlignValue(D);
				this._refreshValue();
				this._change(null, 0);
				return
			}
			return this._value()
		},
		values: function (E, H) {
			var G,
			D,
			F;
			if (arguments.length > 1) {
				this.options.values[E] = this._trimAlignValue(H);
				this._refreshValue();
				this._change(null, E);
				return
			}
			if (arguments.length) {
				if (B.isArray(arguments[0])) {
					G = this.options.values;
					D = arguments[0];
					for (F = 0; F < G.length; F += 1) {
						G[F] = this._trimAlignValue(D[F]);
						this._change(null, F)
					}
					this._refreshValue()
				} else {
					if (this.options.values && this.options.values.length) {
						return this._values(E)
					} else {
						return this.value()
					}
				}
			} else {
				return this._values()
			}
		},
		_setOption: function (E, F) {
			var D,
			G = 0;
			if (B.isArray(this.options.values)) {
				G = this.options.values.length
			}
			B.Widget.prototype._setOption.apply(this, arguments);
			switch (E) {
			case "disabled":
				if (F) {
					this.handles.filter(".ui-state-focus").blur();
					this.handles.removeClass("ui-state-hover");
					this.handles.prop("disabled", true);
					this.element.addClass("ui-disabled")
				} else {
					this.handles.prop("disabled", false);
					this.element.removeClass("ui-disabled")
				}
				break;
			case "orientation":
				this._detectOrientation();
				this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
				this._refreshValue();
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change(null, 0);
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for (D = 0; D < G; D += 1) {
					this._change(null, D)
				}
				this._animateOff = false;
				break;
			case "min":
			case "max":
				this._animateOff = true;
				this._refreshValue();
				this._animateOff = false;
				break
			}
		},
		_value: function () {
			var D = this.options.value;
			D = this._trimAlignValue(D);
			return D
		},
		_values: function (D) {
			var G,
			F,
			E;
			if (arguments.length) {
				G = this.options.values[D];
				G = this._trimAlignValue(G);
				return G
			} else {
				F = this.options.values.slice();
				for (E = 0; E < F.length; E += 1) {
					F[E] = this._trimAlignValue(F[E])
				}
				return F
			}
		},
		_trimAlignValue: function (G) {
			if (G <= this._valueMin()) {
				return this._valueMin()
			}
			if (G >= this._valueMax()) {
				return this._valueMax()
			}
			var D = (this.options.step > 0) ? this.options.step : 1,
			F = (G - this._valueMin()) % D,
			E = G - F;
			if (Math.abs(F) * 2 >= D) {
				E += (F > 0) ? D : (-D)
			}
			return parseFloat(E.toFixed(5))
		},
		_valueMin: function () {
			return this.options.min
		},
		_valueMax: function () {
			return this.options.max
		},
		_refreshValue: function () {
			var I,
			H,
			L,
			J,
			M,
			G = this.options.range,
			F = this.options,
			K = this,
			E = (!this._animateOff) ? F.animate : false,
			D = {};
			if (this.options.values && this.options.values.length) {
				this.handles.each(function (N) {
					H = (K.values(N) - K._valueMin()) / (K._valueMax() - K._valueMin()) * 100;
					D[K.orientation === "horizontal" ? "left" : "bottom"] = H + "%";
					B(this).stop(1, 1)[E ? "animate" : "css"](D, F.animate);
					if (K.options.range === true) {
						if (K.orientation === "horizontal") {
							if (N === 0) {
								K.range.stop(1, 1)[E ? "animate" : "css"]({
									left: H + "%"
								}, F.animate)
							}
							if (N === 1) {
								K.range[E ? "animate" : "css"]({
									width: (H - I) + "%"
								}, {
									queue: false,
									duration: F.animate
								})
							}
						} else {
							if (N === 0) {
								K.range.stop(1, 1)[E ? "animate" : "css"]({
									bottom: (H) + "%"
								}, F.animate)
							}
							if (N === 1) {
								K.range[E ? "animate" : "css"]({
									height: (H - I) + "%"
								}, {
									queue: false,
									duration: F.animate
								})
							}
						}
					}
					I = H
				})
			} else {
				L = this.value();
				J = this._valueMin();
				M = this._valueMax();
				H = (M !== J) ? (L - J) / (M - J) * 100 : 0;
				D[this.orientation === "horizontal" ? "left" : "bottom"] = H + "%";
				this.handle.stop(1, 1)[E ? "animate" : "css"](D, F.animate);
				if (G === "min" && this.orientation === "horizontal") {
					this.range.stop(1, 1)[E ? "animate" : "css"]({
						width: H + "%"
					}, F.animate)
				}
				if (G === "max" && this.orientation === "horizontal") {
					this.range[E ? "animate" : "css"]({
						width: (100 - H) + "%"
					}, {
						queue: false,
						duration: F.animate
					})
				}
				if (G === "min" && this.orientation === "vertical") {
					this.range.stop(1, 1)[E ? "animate" : "css"]({
						height: H + "%"
					}, F.animate)
				}
				if (G === "max" && this.orientation === "vertical") {
					this.range[E ? "animate" : "css"]({
						height: (100 - H) + "%"
					}, {
						queue: false,
						duration: F.animate
					})
				}
			}
		}
	})
}
	(jQuery));
/*
 * jQuery UI Draggable 1.9.2
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 *
 * Depends:
 *  jquery.ui.core.js
 *  jquery.ui.mouse.js
 *  jquery.ui.widget.js
 */
(function (A, B) {
	A.widget("ui.draggable", A.ui.mouse, {
		version: "1.9.2",
		widgetEventPrefix: "drag",
		options: {
			addClasses: true,
			appendTo: "parent",
			axis: false,
			connectToSortable: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			grid: false,
			handle: false,
			helper: "original",
			iframeFix: false,
			opacity: false,
			refreshPositions: false,
			revert: false,
			revertDuration: 500,
			scope: "default",
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			snap: false,
			snapMode: "both",
			snapTolerance: 20,
			stack: false,
			zIndex: false
		},
		_create: function () {
			if (this.options.helper == "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
				this.element[0].style.position = "relative"
			}
			(this.options.addClasses && this.element.addClass("ui-draggable"));
			(this.options.disabled && this.element.addClass("ui-draggable-disabled"));
			this._mouseInit()
		},
		_destroy: function () {
			this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
			this._mouseDestroy()
		},
		_mouseCapture: function (C) {
			var D = this.options;
			if (this.helper || D.disabled || A(C.target).is(".ui-resizable-handle")) {
				return false
			}
			this.handle = this._getHandle(C);
			if (!this.handle) {
				return false
			}
			A(D.iframeFix === true ? "iframe" : D.iframeFix).each(function () {
				A('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
					width: this.offsetWidth + "px",
					height: this.offsetHeight + "px",
					position: "absolute",
					opacity: "0.001",
					zIndex: 1000
				}).css(A(this).offset()).appendTo("body")
			});
			return true
		},
		_mouseStart: function (C) {
			var D = this.options;
			this.helper = this._createHelper(C);
			this.helper.addClass("ui-draggable-dragging");
			this._cacheHelperProportions();
			if (A.ui.ddmanager) {
				A.ui.ddmanager.current = this
			}
			this._cacheMargins();
			this.cssPosition = this.helper.css("position");
			this.scrollParent = this.helper.scrollParent();
			this.offset = this.positionAbs = this.element.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};
			A.extend(this.offset, {
				click: {
					left: C.pageX - this.offset.left,
					top: C.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset()
			});
			this.originalPosition = this.position = this._generatePosition(C);
			this.originalPageX = C.pageX;
			this.originalPageY = C.pageY;
			(D.cursorAt && this._adjustOffsetFromHelper(D.cursorAt));
			if (D.containment) {
				this._setContainment()
			}
			if (this._trigger("start", C) === false) {
				this._clear();
				return false
			}
			this._cacheHelperProportions();
			if (A.ui.ddmanager && !D.dropBehaviour) {
				A.ui.ddmanager.prepareOffsets(this, C)
			}
			this._mouseDrag(C, true);
			if (A.ui.ddmanager) {
				A.ui.ddmanager.dragStart(this, C)
			}
			return true
		},
		_mouseDrag: function (E, G) {
			var D = A.browser.msie;
			var C = A.browser.version;
			D = D && (C.length > 3);
			D = D || A.browser.mozilla;
			if (D) {
				if (E.buttons != 1) {
					this._mouseUp({});
					return false
				}
			}
			this.position = this._generatePosition(E);
			this.positionAbs = this._convertPositionTo("absolute");
			if (!G) {
				var F = this._uiHash();
				if (this._trigger("drag", E, F) === false) {
					this._mouseUp({});
					return false
				}
				this.position = F.position
			}
			if (!this.options.axis || this.options.axis != "y") {
				this.helper[0].style.left = this.position.left + "px"
			}
			if (!this.options.axis || this.options.axis != "x") {
				this.helper[0].style.top = this.position.top + "px"
			}
			if (A.ui.ddmanager) {
				A.ui.ddmanager.drag(this, E)
			}
			return false
		},
		_mouseStop: function (E) {
			var G = false;
			if (A.ui.ddmanager && !this.options.dropBehaviour) {
				G = A.ui.ddmanager.drop(this, E)
			}
			if (this.dropped) {
				G = this.dropped;
				this.dropped = false
			}
			var C = this.element[0],
			F = false;
			while (C && (C = C.parentNode)) {
				if (C == document) {
					F = true
				}
			}
			if (!F && this.options.helper === "original") {
				return false
			}
			if ((this.options.revert == "invalid" && !G) || (this.options.revert == "valid" && G) || this.options.revert === true || (A.isFunction(this.options.revert) && this.options.revert.call(this.element, G))) {
				var D = this;
				A(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
					if (D._trigger("stop", E) !== false) {
						D._clear()
					}
				})
			} else {
				if (this._trigger("stop", E) !== false) {
					this._clear()
				}
			}
			return false
		},
		_mouseUp: function (C) {
			A("div.ui-draggable-iframeFix").each(function () {
				this.parentNode.removeChild(this)
			});
			if (A.ui.ddmanager) {
				A.ui.ddmanager.dragStop(this, C)
			}
			return A.ui.mouse.prototype._mouseUp.call(this, C)
		},
		cancel: function () {
			if (this.helper.is(".ui-draggable-dragging")) {
				this._mouseUp({})
			} else {
				this._clear()
			}
			return this
		},
		_getHandle: function (C) {
			var D = !this.options.handle || !A(this.options.handle, this.element).length ? true : false;
			A(this.options.handle, this.element).find("*").andSelf().each(function () {
				if (this == C.target) {
					D = true
				}
			});
			return D
		},
		_createHelper: function (D) {
			var E = this.options;
			var C = A.isFunction(E.helper) ? A(E.helper.apply(this.element[0], [D])) : (E.helper == "clone" ? this.element.clone().removeAttr("id") : this.element);
			if (!C.parents("body").length) {
				C.appendTo((E.appendTo == "parent" ? this.element[0].parentNode : E.appendTo))
			}
			if (C[0] != this.element[0] && !(/(fixed|absolute)/).test(C.css("position"))) {
				C.css("position", "absolute")
			}
			return C
		},
		_adjustOffsetFromHelper: function (C) {
			if (typeof C == "string") {
				C = C.split(" ")
			}
			if (A.isArray(C)) {
				C = {
					left: +C[0],
					top: +C[1] || 0
				}
			}
			if ("left" in C) {
				this.offset.click.left = C.left + this.margins.left
			}
			if ("right" in C) {
				this.offset.click.left = this.helperProportions.width - C.right + this.margins.left
			}
			if ("top" in C) {
				this.offset.click.top = C.top + this.margins.top
			}
			if ("bottom" in C) {
				this.offset.click.top = this.helperProportions.height - C.bottom + this.margins.top
			}
		},
		_getParentOffset: function () {
			this.offsetParent = this.helper.offsetParent();
			var C = this.offsetParent.offset();
			if (this.cssPosition == "absolute" && this.scrollParent[0] != document && A.contains(this.scrollParent[0], this.offsetParent[0])) {
				C.left += this.scrollParent.scrollLeft();
				C.top += this.scrollParent.scrollTop()
			}
			if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && A.ui.ie)) {
				C = {
					top: 0,
					left: 0
				}
			}
			return {
				top: C.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
				left: C.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
			}
		},
		_getRelativeOffset: function () {
			if (this.cssPosition == "relative") {
				var C = this.element.position();
				return {
					top: C.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
					left: C.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
				}
			} else {
				return {
					top: 0,
					left: 0
				}
			}
		},
		_cacheMargins: function () {
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"), 10) || 0),
				top: (parseInt(this.element.css("marginTop"), 10) || 0),
				right: (parseInt(this.element.css("marginRight"), 10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
			}
		},
		_cacheHelperProportions: function () {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			}
		},
		_setContainment: function () {
			var F = this.options;
			if (F.containment == "parent") {
				F.containment = this.helper[0].parentNode
			}
			if (F.containment == "document" || F.containment == "window") {
				this.containment = [F.containment == "document" ? 0 : A(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, F.containment == "document" ? 0 : A(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, (F.containment == "document" ? 0 : A(window).scrollLeft()) + A(F.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (F.containment == "document" ? 0 : A(window).scrollTop()) + (A(F.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
			}
			if (!(/^(document|window|parent)$/).test(F.containment) && F.containment.constructor != Array) {
				var G = A(F.containment);
				var D = G[0];
				if (!D) {
					return
				}
				var E = G.offset();
				var C = (A(D).css("overflow") != "hidden");
				this.containment = [(parseInt(A(D).css("borderLeftWidth"), 10) || 0) + (parseInt(A(D).css("paddingLeft"), 10) || 0), (parseInt(A(D).css("borderTopWidth"), 10) || 0) + (parseInt(A(D).css("paddingTop"), 10) || 0), (C ? Math.max(D.scrollWidth, D.offsetWidth) : D.offsetWidth) - (parseInt(A(D).css("borderLeftWidth"), 10) || 0) - (parseInt(A(D).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (C ? Math.max(D.scrollHeight, D.offsetHeight) : D.offsetHeight) - (parseInt(A(D).css("borderTopWidth"), 10) || 0) - (parseInt(A(D).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
				this.relative_container = G
			} else {
				if (F.containment.constructor == Array) {
					this.containment = F.containment
				}
			}
		},
		_convertPositionTo: function (F, H) {
			if (!H) {
				H = this.position
			}
			var D = F == "absolute" ? 1 : -1;
			var E = this.options,
			C = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && A.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			G = (/(html|body)/i).test(C[0].tagName);
			return {
				top: (H.top + this.offset.relative.top * D + this.offset.parent.top * D - ((this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (G ? 0 : C.scrollTop())) * D)),
				left: (H.left + this.offset.relative.left * D + this.offset.parent.left * D - ((this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : G ? 0 : C.scrollLeft()) * D))
			}
		},
		_generatePosition: function (D) {
			var E = this.options,
			L = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && A.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			I = (/(html|body)/i).test(L[0].tagName);
			var H = D.pageX;
			var G = D.pageY;
			if (this.originalPosition) {
				var C;
				if (this.containment) {
					if (this.relative_container) {
						var K = this.relative_container.offset();
						C = [this.containment[0] + K.left, this.containment[1] + K.top, this.containment[2] + K.left, this.containment[3] + K.top]
					} else {
						C = this.containment
					}
					if (D.pageX - this.offset.click.left < C[0]) {
						H = C[0] + this.offset.click.left
					}
					if (D.pageY - this.offset.click.top < C[1]) {
						G = C[1] + this.offset.click.top
					}
					if (D.pageX - this.offset.click.left > C[2]) {
						H = C[2] + this.offset.click.left
					}
					if (D.pageY - this.offset.click.top > C[3]) {
						G = C[3] + this.offset.click.top
					}
				}
				if (E.grid) {
					var J = E.grid[1] ? this.originalPageY + Math.round((G - this.originalPageY) / E.grid[1]) * E.grid[1] : this.originalPageY;
					G = C ? (!(J - this.offset.click.top < C[1] || J - this.offset.click.top > C[3]) ? J : (!(J - this.offset.click.top < C[1]) ? J - E.grid[1] : J + E.grid[1])) : J;
					var F = E.grid[0] ? this.originalPageX + Math.round((H - this.originalPageX) / E.grid[0]) * E.grid[0] : this.originalPageX;
					H = C ? (!(F - this.offset.click.left < C[0] || F - this.offset.click.left > C[2]) ? F : (!(F - this.offset.click.left < C[0]) ? F - E.grid[0] : F + E.grid[0])) : F
				}
			}
			return {
				top: (G - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ((this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : (I ? 0 : L.scrollTop())))),
				left: (H - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ((this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : I ? 0 : L.scrollLeft())))
			}
		},
		_clear: function () {
			this.helper.removeClass("ui-draggable-dragging");
			if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) {
				this.helper.remove()
			}
			this.helper = null;
			this.cancelHelperRemoval = false
		},
		_trigger: function (C, D, E) {
			E = E || this._uiHash();
			A.ui.plugin.call(this, C, [D, E]);
			if (C == "drag") {
				this.positionAbs = this._convertPositionTo("absolute")
			}
			return A.Widget.prototype._trigger.call(this, C, D, E)
		},
		plugins: {},
		_uiHash: function (C) {
			return {
				helper: this.helper,
				position: this.position,
				originalPosition: this.originalPosition,
				offset: this.positionAbs
			}
		}
	});
	A.ui.plugin.add("draggable", "connectToSortable", {
		start: function (D, F) {
			var E = A(this).data("draggable"),
			G = E.options,
			C = A.extend({}, F, {
					item: E.element
				});
			E.sortables = [];
			A(G.connectToSortable).each(function () {
				var H = A.data(this, "sortable");
				if (H && !H.options.disabled) {
					E.sortables.push({
						instance: H,
						shouldRevert: H.options.revert
					});
					H.refreshPositions();
					H._trigger("activate", D, C)
				}
			})
		},
		stop: function (D, F) {
			var E = A(this).data("draggable"),
			C = A.extend({}, F, {
					item: E.element
				});
			A.each(E.sortables, function () {
				if (this.instance.isOver) {
					this.instance.isOver = 0;
					E.cancelHelperRemoval = true;
					this.instance.cancelHelperRemoval = false;
					if (this.shouldRevert) {
						this.instance.options.revert = true
					}
					this.instance._mouseStop(D);
					this.instance.options.helper = this.instance.options._helper;
					if (E.options.helper == "original") {
						this.instance.currentItem.css({
							top: "auto",
							left: "auto"
						})
					}
				} else {
					this.instance.cancelHelperRemoval = false;
					this.instance._trigger("deactivate", D, C)
				}
			})
		},
		drag: function (D, G) {
			var F = A(this).data("draggable"),
			C = this;
			var E = function (J) {
				var O = this.offset.click.top,
				N = this.offset.click.left;
				var H = this.positionAbs.top,
				L = this.positionAbs.left;
				var K = J.height,
				M = J.width;
				var P = J.top,
				I = J.left;
				return A.ui.isOver(H + O, L + N, P, I, K, M)
			};
			A.each(F.sortables, function (I) {
				var H = false;
				var J = this;
				this.instance.positionAbs = F.positionAbs;
				this.instance.helperProportions = F.helperProportions;
				this.instance.offset.click = F.offset.click;
				if (this.instance._intersectsWith(this.instance.containerCache)) {
					H = true;
					A.each(F.sortables, function () {
						this.instance.positionAbs = F.positionAbs;
						this.instance.helperProportions = F.helperProportions;
						this.instance.offset.click = F.offset.click;
						if (this != J && this.instance._intersectsWith(this.instance.containerCache) && A.ui.contains(J.instance.element[0], this.instance.element[0])) {
							H = false
						}
						return H
					})
				}
				if (H) {
					if (!this.instance.isOver) {
						this.instance.isOver = 1;
						this.instance.currentItem = A(C).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item", true);
						this.instance.options._helper = this.instance.options.helper;
						this.instance.options.helper = function () {
							return G.helper[0]
						};
						D.target = this.instance.currentItem[0];
						this.instance._mouseCapture(D, true);
						this.instance._mouseStart(D, true, true);
						this.instance.offset.click.top = F.offset.click.top;
						this.instance.offset.click.left = F.offset.click.left;
						this.instance.offset.parent.left -= F.offset.parent.left - this.instance.offset.parent.left;
						this.instance.offset.parent.top -= F.offset.parent.top - this.instance.offset.parent.top;
						F._trigger("toSortable", D);
						F.dropped = this.instance.element;
						F.currentItem = F.element;
						this.instance.fromOutside = F
					}
					if (this.instance.currentItem) {
						this.instance._mouseDrag(D)
					}
				} else {
					if (this.instance.isOver) {
						this.instance.isOver = 0;
						this.instance.cancelHelperRemoval = true;
						this.instance.options.revert = false;
						this.instance._trigger("out", D, this.instance._uiHash(this.instance));
						this.instance._mouseStop(D, true);
						this.instance.options.helper = this.instance.options._helper;
						this.instance.currentItem.remove();
						if (this.instance.placeholder) {
							this.instance.placeholder.remove()
						}
						F._trigger("fromSortable", D);
						F.dropped = false
					}
				}
			})
		}
	});
	A.ui.plugin.add("draggable", "cursor", {
		start: function (D, E) {
			var C = A("body"),
			F = A(this).data("draggable").options;
			if (C.css("cursor")) {
				F._cursor = C.css("cursor")
			}
			C.css("cursor", F.cursor)
		},
		stop: function (C, D) {
			var E = A(this).data("draggable").options;
			if (E._cursor) {
				A("body").css("cursor", E._cursor)
			}
		}
	});
	A.ui.plugin.add("draggable", "opacity", {
		start: function (D, E) {
			var C = A(E.helper),
			F = A(this).data("draggable").options;
			if (C.css("opacity")) {
				F._opacity = C.css("opacity")
			}
			C.css("opacity", F.opacity)
		},
		stop: function (C, D) {
			var E = A(this).data("draggable").options;
			if (E._opacity) {
				A(D.helper).css("opacity", E._opacity)
			}
		}
	});
	A.ui.plugin.add("draggable", "scroll", {
		start: function (D, E) {
			var C = A(this).data("draggable");
			if (C.scrollParent[0] != document && C.scrollParent[0].tagName != "HTML") {
				C.overflowOffset = C.scrollParent.offset()
			}
		},
		drag: function (E, F) {
			var D = A(this).data("draggable"),
			G = D.options,
			C = false;
			if (D.scrollParent[0] != document && D.scrollParent[0].tagName != "HTML") {
				if (!G.axis || G.axis != "x") {
					if ((D.overflowOffset.top + D.scrollParent[0].offsetHeight) - E.pageY < G.scrollSensitivity) {
						D.scrollParent[0].scrollTop = C = D.scrollParent[0].scrollTop + G.scrollSpeed
					} else {
						if (E.pageY - D.overflowOffset.top < G.scrollSensitivity) {
							D.scrollParent[0].scrollTop = C = D.scrollParent[0].scrollTop - G.scrollSpeed
						}
					}
				}
				if (!G.axis || G.axis != "y") {
					if ((D.overflowOffset.left + D.scrollParent[0].offsetWidth) - E.pageX < G.scrollSensitivity) {
						D.scrollParent[0].scrollLeft = C = D.scrollParent[0].scrollLeft + G.scrollSpeed
					} else {
						if (E.pageX - D.overflowOffset.left < G.scrollSensitivity) {
							D.scrollParent[0].scrollLeft = C = D.scrollParent[0].scrollLeft - G.scrollSpeed
						}
					}
				}
			} else {
				if (!G.axis || G.axis != "x") {
					if (E.pageY - A(document).scrollTop() < G.scrollSensitivity) {
						C = A(document).scrollTop(A(document).scrollTop() - G.scrollSpeed)
					} else {
						if (A(window).height() - (E.pageY - A(document).scrollTop()) < G.scrollSensitivity) {
							C = A(document).scrollTop(A(document).scrollTop() + G.scrollSpeed)
						}
					}
				}
				if (!G.axis || G.axis != "y") {
					if (E.pageX - A(document).scrollLeft() < G.scrollSensitivity) {
						C = A(document).scrollLeft(A(document).scrollLeft() - G.scrollSpeed)
					} else {
						if (A(window).width() - (E.pageX - A(document).scrollLeft()) < G.scrollSensitivity) {
							C = A(document).scrollLeft(A(document).scrollLeft() + G.scrollSpeed)
						}
					}
				}
			}
			if (C !== false && A.ui.ddmanager && !G.dropBehaviour) {
				A.ui.ddmanager.prepareOffsets(D, E)
			}
		}
	});
	A.ui.plugin.add("draggable", "snap", {
		start: function (D, E) {
			var C = A(this).data("draggable"),
			F = C.options;
			C.snapElements = [];
			A(F.snap.constructor != String ? (F.snap.items || ":data(draggable)") : F.snap).each(function () {
				var H = A(this);
				var G = H.offset();
				if (this != C.element[0]) {
					C.snapElements.push({
						item: this,
						width: H.outerWidth(),
						height: H.outerHeight(),
						top: G.top,
						left: G.left
					})
				}
			})
		},
		drag: function (O, L) {
			var F = A(this).data("draggable"),
			M = F.options;
			var S = M.snapTolerance;
			var R = L.offset.left,
			Q = R + F.helperProportions.width,
			E = L.offset.top,
			D = E + F.helperProportions.height;
			for (var P = F.snapElements.length - 1; P >= 0; P--) {
				var N = F.snapElements[P].left,
				K = N + F.snapElements[P].width,
				J = F.snapElements[P].top,
				U = J + F.snapElements[P].height;
				if (!((N - S < R && R < K + S && J - S < E && E < U + S) || (N - S < R && R < K + S && J - S < D && D < U + S) || (N - S < Q && Q < K + S && J - S < E && E < U + S) || (N - S < Q && Q < K + S && J - S < D && D < U + S))) {
					if (F.snapElements[P].snapping) {
						(F.options.snap.release && F.options.snap.release.call(F.element, O, A.extend(F._uiHash(), {
									snapItem: F.snapElements[P].item
								})))
					}
					F.snapElements[P].snapping = false;
					continue
				}
				if (M.snapMode != "inner") {
					var C = Math.abs(J - D) <= S;
					var T = Math.abs(U - E) <= S;
					var H = Math.abs(N - Q) <= S;
					var I = Math.abs(K - R) <= S;
					if (C) {
						L.position.top = F._convertPositionTo("relative", {
								top: J - F.helperProportions.height,
								left: 0
							}).top - F.margins.top
					}
					if (T) {
						L.position.top = F._convertPositionTo("relative", {
								top: U,
								left: 0
							}).top - F.margins.top
					}
					if (H) {
						L.position.left = F._convertPositionTo("relative", {
								top: 0,
								left: N - F.helperProportions.width
							}).left - F.margins.left
					}
					if (I) {
						L.position.left = F._convertPositionTo("relative", {
								top: 0,
								left: K
							}).left - F.margins.left
					}
				}
				var G = (C || T || H || I);
				if (M.snapMode != "outer") {
					var C = Math.abs(J - E) <= S;
					var T = Math.abs(U - D) <= S;
					var H = Math.abs(N - R) <= S;
					var I = Math.abs(K - Q) <= S;
					if (C) {
						L.position.top = F._convertPositionTo("relative", {
								top: J,
								left: 0
							}).top - F.margins.top
					}
					if (T) {
						L.position.top = F._convertPositionTo("relative", {
								top: U - F.helperProportions.height,
								left: 0
							}).top - F.margins.top
					}
					if (H) {
						L.position.left = F._convertPositionTo("relative", {
								top: 0,
								left: N
							}).left - F.margins.left
					}
					if (I) {
						L.position.left = F._convertPositionTo("relative", {
								top: 0,
								left: K - F.helperProportions.width
							}).left - F.margins.left
					}
				}
				if (!F.snapElements[P].snapping && (C || T || H || I || G)) {
					(F.options.snap.snap && F.options.snap.snap.call(F.element, O, A.extend(F._uiHash(), {
								snapItem: F.snapElements[P].item
							})))
				}
				F.snapElements[P].snapping = (C || T || H || I || G)
			}
		}
	});
	A.ui.plugin.add("draggable", "stack", {
		start: function (D, E) {
			var G = A(this).data("draggable").options;
			var F = A.makeArray(A(G.stack)).sort(function (I, H) {
					return (parseInt(A(I).css("zIndex"), 10) || 0) - (parseInt(A(H).css("zIndex"), 10) || 0)
				});
			if (!F.length) {
				return
			}
			var C = parseInt(F[0].style.zIndex) || 0;
			A(F).each(function (H) {
				this.style.zIndex = C + H
			});
			this[0].style.zIndex = C + F.length
		}
	});
	A.ui.plugin.add("draggable", "zIndex", {
		start: function (D, E) {
			var C = A(E.helper),
			F = A(this).data("draggable").options;
			if (C.css("zIndex")) {
				F._zIndex = C.css("zIndex")
			}
			C.css("zIndex", F.zIndex)
		},
		stop: function (C, D) {
			var E = A(this).data("draggable").options;
			if (E._zIndex) {
				A(D.helper).css("zIndex", E._zIndex)
			}
		}
	})
})(jQuery);
/*
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function ($, H, C) {
	var A = $([]),
	E = $.resize = $.extend($.resize, {}),
	I,
	K = "setTimeout",
	J = "resize",
	D = J + "-special-event",
	B = "delay",
	F = "throttleWindow";
	E[B] = 250;
	E[F] = true;
	$.event.special[J] = {
		setup: function () {
			if (!E[F] && this[K]) {
				return false
			}
			var L = $(this);
			A = A.add(L);
			$.data(this, D, {
				w: L.width(),
				h: L.height()
			});
			if (A.length === 1) {
				G()
			}
		},
		teardown: function () {
			if (!E[F] && this[K]) {
				return false
			}
			var L = $(this);
			A = A.not(L);
			L.removeData(D);
			if (!A.length) {
				clearTimeout(I)
			}
		},
		add: function (L) {
			if (!E[F] && this[K]) {
				return false
			}
			var N;
			function M(S, O, P) {
				var Q = $(this),
				R = $.data(this, D);
				R.w = O !== C ? O : Q.width();
				R.h = P !== C ? P : Q.height();
				N.apply(this, arguments)
			}
			if ($.isFunction(L)) {
				N = L;
				return M
			} else {
				N = L.handler;
				L.handler = M
			}
		}
	};
	function G() {
		I = H[K](function () {
				A.each(function () {
					var N = $(this),
					M = N.width(),
					L = N.height(),
					O = $.data(this, D);
					if (M !== O.w || L !== O.h) {
						N.trigger(J, [O.w = M, O.h = L])
					}
				});
				G()
			}, E[B])
	}
})(jQuery, this);
(function (E) {
	var G = 1;
	var B = 2;
	var D = 3;
	var F = 4;
	E.fn.initMap = function (N) {
		var P = E(this),
		I = P.attr("id");
		var M;
		var H = N.miniType;
		if (!H) {
			H = G
		}
		P.attr("id", I + "_txt");
		P.attr("name", I + "_txt");
		P.attr("readonly", "readonly");
		var R = N.text;
		var Q = N.value;
		M = E('<input type="hidden" />');
		M.attr("id", I);
		M.attr("name", I);
		M.attr("_comp", P);
		if (Q) {
			M.val(Q)
		}
		P.after(M);
		if (R) {
			P.val(R);
			P.attr("title", R)
		}
		if (N.valueChange) {
			N.valueChange(M)
		}
		N.callbk = function (S) {
			L(S);
			P.focus()
		};
		if (N.showBtn == false) {
			N.targetDom = M;
			E(this).unbind("click").bind("click", function (S) {
				E.maplbs(N);
				var S = S || window.e;
				S.stopPropagation()
			})
		} else {
			var K = C(H);
			M.after(K);
			var O = P.css("width");
			var J = parseInt(P.width()) - 28;
			if (J > 0) {
				P.css("width", J)
			}
			N.targetDom = M;
			K.unbind("click").bind("click", function (S) {
				E.maplbs(N);
				var S = S || window.e;
				S.stopPropagation()
			})
		}
		function L(S) {
			P.val(S.lbsAddr);
			P.attr("title", S.lbsAddr);
			N.value = S.lbsId;
			N.text = S.lbsAddr;
			M.val(S.lbsId)
		}
	};
	E.maplbs = function (L) {
		var I = _ctxPath + "/map/lbsController.do";
		if (L.preCallback) {
			L.preCallback(L)
		}
		var K = L.value;
		var H = L.canEdit;
		if (L.miniType != 1 && L.miniType != "1" && (H == "true" || H == true)) {
			E.alert(E.i18n("cmp.lbs.warn.notSupport"));
			return
		}
		if ((!K || K == -1 || K == "-1") && (H == "false" || H == false)) {
			E.alert(E.i18n("cmp.lbs.warn.message.noInfo"));
			return
		}
		var H = L.canEdit;
		var J = E.dialog({
				id: "markerProduction",
				url: I,
				width: 708,
				height: 530,
				title: A(L.miniType),
				transParams: L,
				targetWindow: getCtpTop(),
				buttons: [{
						text: E.i18n("common.button.ok.label"),
						isEmphasize: true,
						disabled: L.value && L.value != -1 && L.value != "" && L.value != "-1" ? (H == "true" || H == true) ? false : true : false,
						hide: L.value && L.value != -1 && L.value != "" && L.value != "-1" ? (H == "true" || H == true) ? false : true : false,
						handler: function () {
							var N = J.getReturnValue(),
							M = true;
							if (N == -1) {
								return
							}
							if (N) {
								if (L.callback && L.callback(N, L)) {
									M = false
								}
								if (L.callbk && L.callbk(N)) {
									M = false
								}
								if (L.valueChange) {
									L.valueChange(L.targetDom)
								}
							}
							if (M) {
								J.close()
							}
						}
					}, {
						text: E.i18n("common.button.cancel.label"),
						handler: function () {
							J.close()
						}
					}
				]
			})
	};
	function A(H) {
		var I;
		if (H == G) {
			I = E.i18n("cmp.lbs.label.marker")
		} else {
			if (H == B) {
				I = E.i18n("cmp.lbs.label.sign")
			} else {
				if (H == D) {
					I = E.i18n("cmp.lbs.label.positionLocation")
				} else {
					if (H == F) {
						I = E.i18n("cmp.lbs.label.photoLocation")
					}
				}
			}
		}
		return I
	}
	function C(I) {
		var H = E("<span></span>");
		H.attr("_isrel", 1);
		if (I == G) {
			H.attr("class", "ico16 mapMarked_16")
		} else {
			if (I == B) {
				H.attr("class", "ico16 attendanceRecords_16")
			} else {
				if (I == D) {
					H.attr("class", "ico16 location_16")
				} else {
					if (I == F) {
						H.attr("class", "ico16 cameraPosition_16")
					}
				}
			}
		}
		H.addClass("_autoBtn");
		return H
	}
})(jQuery);
function MxtDropDown(A) {
	this.id = Math.floor(Math.random() * 100000000);
	if (A.id != undefined) {
		this.id = A.id
	}
	this.onchange = A.onchange;
	if (this.onchange == undefined) {
		this.onchange = function () {}
	}
	this.disabled = SeeUtils.getAttrEl(this.id, "disabled");
	this.isExpand = A.isExpand;
	this.expandValue = A.expandValue;
	this.top = A.top;
	this.init()
}
function mouseenterDown(C, G) {
	if (G == "disabled" || G == "true") {
		return
	}
	SeeUtils.setElWidth(C + "_dropdown_content", SeeUtils.getElWidth(C) - 2);
	SeeUtils.showEl(C + "_dropdown_content");
	SeeUtils.setElWidth(C + "_dropdown_content_iframe", SeeUtils.getElWidth(C));
	SeeUtils.showEl(C + "_dropdown_content_iframe");
	var E = SeeUtils.getElOffest(C).top;
	var H = SeeUtils.getElHeight(C + "_dropdown_content");
	var B = SeeUtils.getDocumentHeight();
	if (B == 0) {
		B = parseInt(document.documentElement.clientHeight)
	}
	SeeUtils.setElHeight(C + "_dropdown_content_iframe", H + 3);
	if ((E + H) > B) {
		SeeUtils.setElHeight(C + "_dropdown_content", B - E - SeeUtils.getElHeight(this));
		SeeUtils.cssByJson(C + "_dropdown_content", {
			overflow: "auto"
		});
		SeeUtils.setElHeight(C + "_dropdown_content_iframe", B - E - SeeUtils.getElHeight(this))
	}
	var A = document.getElementById(C + "_dropdown_content");
	if (A.getAttribute("fixChildWidth") == null && A.scrollWidth > A.clientWidth) {
		var F = SeeUtils.getElByTag(A, "a");
		for (var D = 0; D < F.length; D++) {
			SeeUtils.cssByJson(F[D], {
				width: A.scrollWidth + "px"
			})
		}
		A.setAttribute("fixChildWidth", "yes")
	}
}
function mouseleavelDown(A) {
	SeeUtils.hideEl(A + "_dropdown_content");
	SeeUtils.hideEl(A + "_dropdown_content_iframe")
}
MxtDropDown.prototype.init = function () {
	try {
		$("#" + this.id).attrObj("_dropdown", this)
	} catch (I) {}
	var C = SeeUtils.getElByTag(this.id, "option");
	if (C.length == 0) {
		return void(0)
	}
	var F = "";
	if (this.disabled == "disabled" || this.disabled == "true") {
		F = "common_button_disable"
	}
	var A = "";
	A += "<div id='" + this.id + "_dropdown' onmouseenter='mouseenterDown(\"" + this.id + '","' + this.disabled + "\")' onmouseleave='mouseleavelDown(\"" + this.id + "\")' class='common_drop_list common_drop_list_dropdown'>";
	A += "<div id = '" + this.id + "_dropdown_title'class='common_drop_list_title'>";
	A += "<a href='javascript:void(0)' class='common_drop_list_select common_button  " + F + "' style='*margin-top:-1px;'>";
	A += "<table width='100%' height='100%' cellpadding='0' cellspacing='0' class='ellipsis_table'>";
	A += "<tbody>";
	A += "<tr>";
	A += "<td id = '" + this.id + "_dropdown_text' class='common_drop_list_text font_size12'>";
	if (this.isExpand && this.expandValue == null && C.length > 1) {
		A += C[1].innerHTML
	} else {
		if (this.isExpand && this.expandValue) {
			var P = document.getElementById(this.id);
			var H = P.selectedIndex;
			var B = P.options[H].text;
			A += B
		} else {
			A += C[0].innerHTML
		}
	}
	A += "</td>";
	A += "<td class='align_right' width='20'>";
	A += "<em></em>";
	A += "</td>";
	A += "</tr>";
	A += "</tbody>";
	A += "</table>";
	A += "</a>";
	A += "</div>";
	A += "<iframe id='" + this.id + "_dropdown_content_iframe' frameborder='0' style='position:absolute; z-index:1000;background:#fff;display:none;'>";
	A += "</iframe>";
	var G = 0;
	G = document.body.clientHeight - this.top - 30;
	G < 1 ? G = document.body.offsetHeight - this.top - 30 : "";
	var E = (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 8\.0/i.test(navigator.userAgent) || (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 7\.0/i.test(navigator.userAgent);
	if (E) {
		var P = document.getElementById(this.id);
		if (P.options.length * 30 >= G) {
			G = G < 1 ? G = "" : "height:" + G + "px;"
		} else {
			G = G < 1 ? G = "" : ""
		}
	} else {
		G = G < 1 ? G = "" : "max-height:" + G + "px;"
	}
	A += "<div id='" + this.id + "_dropdown_content' class='common_drop_list_content common_drop_list_content_action' style=' " + G + " position:absolute;z-index:1000;background:#fff;display:none;overflow:auto'>";
	function M(Q, R) {
		if (this.isExpand && this.expandValue == null && R === 1) {
			return "class='common_drop_a_select'"
		} else {
			if (this.isExpand && this.expandValue === Q) {
				return "class='common_drop_a_select'"
			} else {
				return ""
			}
		}
	}
	var O = this;
	for (var L = 0; L < C.length; L++) {
		var J = C[L];
		var K = SeeUtils.getAttrEl(J, "value");
		var N = J.text;
		A += "<a style='word-break:keep-all;white-space:nowrap' " + M(K, L) + " tar='" + O.id + "' href='javascript:void(0)' value='";
		A += K;
		A += "' title='" + N + "'";
		A += "'>";
		A += N;
		A += "</a>"
	}
	A += "</div>";
	A += "</div>";
	SeeUtils.insertAfter(A, this.id);
	SeeUtils.cssByJson(this.id + "_dropdown", {
		width: "100%",
		position: "relative"
	});
	SeeUtils.hideEl(this.id);
	var D = SeeUtils.eachByTag(SeeUtils.getElObj(this.id + "_dropdown_content"), "a", function (Q, T) {
			if (Q.parentNode == null || Q.parentNode.parentNode == null) {
				return void(0)
			}
			var R = SeeUtils.getByClass(Q.parentNode.parentNode, ".common_drop_list_text");
			if (R.length == 0) {
				return void(0)
			}
			var S = R[0];
			var U = Q.parentNode;
			SeeUtils.addEvent(Q, "click", function (X) {
				var W = X || window.event;
				var V = W.target || W.srcElement;
				if (V.parentNode.querySelector(".common_drop_a_select")) {
					V.parentNode.querySelector(".common_drop_a_select").className = "";
					V.className = "common_drop_a_select"
				}
				var a = SeeUtils.getAttrEl(V, "title");
				var Y = SeeUtils.getAttrEl(V, "value");
				var Z = SeeUtils.getAttrEl(V, "tar");
				a = a.replace(/</g, "&lt;").replace(/>/g, "&gt;");
				S.innerHTML = a;
				SeeUtils.setElVal(Z, Y);
				SeeUtils.hideEl(U);
				SeeUtils.hideEl(O.id + "_dropdown_content_iframe");
				O.onchange()
			})
		})
};
MxtDropDown.prototype.setValue = function (B) {
	if (B) {
		SeeUtils.setElVal(this.id, B);
		var E = null;
		var D = SeeUtils.getElByTag(this.id + "_dropdown_content", "a");
		for (var A = 0; A < D.length; A++) {
			var K = SeeUtils.getAttrEl(D[A], "value");
			if (K === B) {
				E = D[A];
				break
			}
		}
		if (E == null) {
			return void(0)
		}
		if (E.parentNode == null || E.parentNode.parentNode == null) {
			return void(0)
		}
		var C = SeeUtils.getByClass(E.parentNode.parentNode, ".common_drop_list_text");
		if (C.length == 0) {
			return void(0)
		}
		var J = C[0];
		var I = E.parentNode;
		var H = SeeUtils.getAttrEl(E, "title");
		var G = SeeUtils.getAttrEl(E, "value");
		var F = SeeUtils.getAttrEl(E, "tar");
		J.innerHTML = H;
		SeeUtils.setElVal(F, G);
		SeeUtils.hideEl(I)
	}
};
function _MxtDropDown(B, A) {
	var C = B;
	var E = C.id;
	var D = {};
	if (E == "") {
		E = Math.floor(Math.random() * 100000000);
		D.id = E;
		SeeUtils.attrEl(B, "id", E)
	} else {
		D.id = E
	}
	D.top = A.top;
	D.isExpand = A.isExpand || null;
	D.expandValue = A.expandValue || null;
	new MxtDropDown(D)
}
(function (A) {
	A.fn.dropdown = function () {
		this.each(function () {
			var B = this;
			var D = B.id;
			var C = {};
			if (D == "") {
				D = Math.floor(Math.random() * 100000000);
				C.id = D;
				SeeUtils.attrEl(this, "id", D)
			} else {
				C.id = D
			}
			new MxtDropDown(C)
		})
	};
	A.dropdown = function (B) {
		if (B && B.id) {
			return new MxtDropDown(B)
		} else {
			return
		}
	}
})(jQuery);
function searchBtnClick(B, E) {
	var D = B.getReturnValue();
	var A = (!!window.ActiveXObject || "ActiveXObject" in window);
	if (D && D.condition && D.condition == "barcode") {
		if (!A) {
			$.alert($.i18n("form.barcode.only.suport.ie.lable"));
			return
		}
		var C = D.value;
		if (openBarCodePort(C.qType, C.comType)) {
			$.infor($.i18n("common.barcode.ready.label"))
		}
	} else {
		E.searchHandler()
	}
}
function goSearchCtl(N, D) {
	N = SeeUtils.extend({
			id: Math.floor(Math.random() * 100000000),
			conditionText: $.i18n("searchbox.condition.js"),
			conditionDateText: $.i18n("searchbox.conditionDateText.js"),
			conditionSpecText: $.i18n("searchbox.conditionSpecText.js"),
			onchange: function () {},
			dialog: null
		}, N);
	var W = {
		getReturnValue: function () {
			var e = SeeUtils.getElVal(N.id);
			var v;
			var g;
			var m = false;
			if (N.conditions && N.conditions.length > 0) {
				for (var s = 0; s < N.conditions.length; s++) {
					var n = N.conditions[s];
					var h = n.value;
					var f = n.id;
					var u = n.type;
					var r = n.validate ? true : false;
					var d;
					if (e == h) {
						if (u == "selectPeople") {
							v = [];
							v[0] = SeeUtils.getElVal(f + "_txt");
							v[1] = SeeUtils.getElVal(f)
						} else {
							if (u == "datemulti") {
								var t = n.ifFormat;
								v = [];
								v[0] = SeeUtils.getElVal("from_" + f);
								v[1] = SeeUtils.getElVal("to_" + f);
								if (t == "%Y-%m-%d") {
									var c = /^(\d{4})-(0\d{1}|1[0-2])-(0\d{1}|[12]\d{1}|3[01])$/
								} else {
									var c = /^(\d{4})-(0\d{1}|1[0-2])-(0\d{1}|[12]\d{1}|3[01]) (0\d{1}|1\d{1}|2[0-3]):([0-5]\d{1})$/
								}
								if ((!c.test(v[0]) || !c.test(v[1])) && v[0] != "" && v[1] != "") {
									m = true;
									if (N.dialog) {
										N.dialog.close()
									}
									N.dialog = $.alert(N.conditionDateText);
									return null
								}
								if (v[0] != "" && v[1] != "" && v[0] > v[1]) {
									if (N.dialog) {
										N.dialog.close()
									}
									N.dialog = $.alert($.i18n("validate.endDate.early.startDate.js"));
									return null
								}
							} else {
								if (u == "custom") {
									v = n.getValue ? n.getValue(f) : SeeUtils.getElVal(f)
								} else {
									if (u == "select") {
										var k = document.getElementsByTagName("select");
										for (var l = 0; l < k.length; l++) {
											if (k[l].getAttribute("id") === f) {
												var q = k[l];
												var j = q.selectedIndex;
												var o = q.options[j].text;
												var p = q.options[j].value;
												v = q.options[j].value
											}
										}
									} else {
										v = SeeUtils.getElVal(f);
										if (r) {
											d = /[!@#$%^&*()<>]/;
											if (d.test(v)) {
												m = true;
												SeeUtils.getElObj(f).focus()
											}
										}
									}
								}
							}
						}
						g = u;
						break
					}
				}
			}
			if (m) {
				if (N.dialog) {
					N.dialog.close()
				}
				N.dialog = $.alert(N.conditionSpecText);
				return null
			} else {
				return {
					type: g,
					condition: e,
					value: v
				}
			}
		},
		clearCondition: function () {
			var d = SeeUtils.getElByTag(SeeUtils.getElObj(N.id + "_dropdown_content"), "a");
			for (var c = 0; c < d.length; c++) {
				var f = d[c];
				var e = SeeUtils.getAttrEl(f, "value");
				if (e == "") {
					SeeUtils.executeClick(f)
				}
			}
		},
		setCondition: function (c, h, g) {
			var l;
			var m;
			var k;
			for (var e = 0; e < N.conditions.length; e++) {
				var f = N.conditions[e];
				var n = f.value;
				var j = f.id;
				var d = f.type;
				if (j == c) {
					l = n;
					m = d;
					k = f;
					break
				}
			}
			SeeUtils.eachByTag(N.id + "_dropdown_content", "a", function (p, i) {
				var o = SeeUtils.getAttrEl(p, "value");
				if (o == l) {
					SeeUtils.executeClick(p)
				}
			});
			if (m == "input") {
				SeeUtils.setElVal(c, h)
			} else {
				if (m == "select") {
					SeeUtils.eachByTag(c + "_dropdown_content", "a", function (o, i) {
						var p = SeeUtils.getAttrEl(o, "value");
						if (p == h) {
							SeeUtils.executeClick(o)
						}
					})
				} else {
					if (m == "datemulti") {
						SeeUtils.setElVal("from_" + c, h);
						SeeUtils.setElVal("to_" + c, g)
					} else {
						if (m == "selectPeople") {
							SeeUtils.setElVal(j + "_txt", h);
							SeeUtils.setElVal(j, g)
						}
					}
				}
			}
		},
		hideSearchBox: function () {
			SeeUtils.hideEl(N.id + "_ul")
		},
		showSearchBox: function () {
			SeeUtils.showEl(N.id + "_ul")
		},
		hideItem: function (m, f) {
			var g;
			for (var h = 0; h < N.conditions.length; h++) {
				if (N.conditions[h].id == m) {
					g = N.conditions[h].value
				}
			}
			var e = SeeUtils.getElByTag(N.id + "_conditions", "a");
			for (var n = 0; n < e.length; n++) {
				var d = e[n];
				if (SeeUtils.getAttrEl(d, "value") == g) {
					SeeUtils.hideEl(d)
				}
			}
			if (f) {
				SeeUtils.text(N.id + "_dropdown_text", N.conditionText);
				var c = SeeUtils.getElByTag(N.id, "option");
				if (c.length > 0) {
					SeeUtils.attrEl(c[0], "selected", true)
				}
				var l = SeeUtils.getElByTag(N.id + "_ul", "li");
				var k = l.length;
				for (var h = 0; h < l.length; h++) {
					var j = l[h];
					if (!(h == 0 || h == (k - 1))) {
						if (!SeeUtils.hasClass(j, "hidden")) {
							SeeUtils.addClass(j, "hidden")
						}
					}
					if (h == (k - 1)) {
						SeeUtils.addClass(j, "margin_l_5")
					}
				}
			}
		},
		showItem: function (g) {
			var f;
			for (var d = 0; d < N.conditions.length; d++) {
				if (N.conditions[d].id == g) {
					f = N.conditions[d].value
				}
			}
			var e = SeeUtils.getElByTag(N.id + "_conditions", "a");
			for (var c = 0; c < e.length; c++) {
				var h = e[c];
				if (SeeUtils.getAttrEl(h, "value") == f) {
					SeeUtils.showEl(h)
				}
			}
		}
	};
	var P = "<ul id='" + N.id + "_ul' class='common_search common_search_condition clearfix' style='_display:inline'><li class='searchLicommon' id='" + N.id + "_conditions' style='width:120px'><select id='" + N.id + "' class='common_drop_down w100b'><option id='" + N.id + "_default' value=''>" + N.conditionText + "</option></select></li></ul>";
	SeeUtils.appendTo(P, D);
	N.inputs = [];
	N.selects = [];
	if (N.conditions && N.conditions.length > 0) {
		for (var V = 0; V < N.conditions.length; V++) {
			var Y = false;
			var E = N.conditions[V];
			var Z = null;
			var X = E.type;
			var F = E.value;
			var C = E.text;
			var O = E.id;
			var b = E.name;
			var I = null;
			var G = E.click;
			if (SeeUtils.isIE8 || SeeUtils.isIE9) {
				var H = document.createElement("option");
				H.setAttribute("value", F);
				H.innerText = C;
				SeeUtils.getElObj(N.id).appendChild(H)
			} else {
				var B = '<option value="' + F + '">' + C + "</option>";
				SeeUtils.appendTo(B, N.id)
			}
			var K;
			if (X == "selectPeople") {
				var U = "<li id='" + F + "_container' class='searchLicommon common_search_input condition_text hidden'><input id='" + O + "' name='" + b + "' value='' class='search_input searchInputComp comp' comp=\"" + E.comp + "\" type='text'></li>";
				N.inputs.push(E);
				SeeUtils.appendTo(U, N.id + "_ul")
			} else {
				if (X == "input") {
					if (E.maxLength) {
						var T = " maxlength='" + E.maxLength + "'"
					} else {
						var T = ""
					}
					var U = "<li id='" + F + "_container' class='searchLicommon common_search_input condition_text hidden'><input id='" + O + "' name='" + b + "' value='' class='search_input' style='*margin-top:-1px;' type='text' " + T + "></li>";
					N.inputs.push(E);
					SeeUtils.appendTo(U, N.id + "_ul")
				} else {
					if (X == "datemulti") {
						var M = E.ifFormat != undefined ? E.ifFormat : "%Y-%m-%d %H:%M";
						var U = "<li id='" + F + "_container' class='searchLicommon typeDatemulti condition_text hidden margin_lr_5'><input id='from_" + O + "' type='text' class='comp input_date' style='width:135px' readonly='readonly'/><span class='padding_lr_5'>-</span><input id='to_" + O + "' type='text' class='comp input_date' style='width:135px' readonly='readonly'/></li>";
						if (E.dateTime && E.dateTime == true) {
							Y = true
						}
						Z = O;
						SeeUtils.appendTo(U, N.id + "_ul")
					} else {
						if (X == "select") {
							var A = "";
							A += "<select id='" + O + "' name='" + b + "' class='w100b common_drop_down'>";
							if (E.items) {
								for (var S = 0; S < E.items.length; S++) {
									var L = E.items[S];
									A += "<option value='" + L.value + "'>" + L.text + "</option>"
								}
							}
							A += "</select>";
							N.selects.push(E);
							I = $(A);
							if (E.codecfg) {
								I.attr("codecfg", E.codecfg)
							}
							var U = "<li style='width: 100px;' id='" + F + "_container' class='searchLicommon condition_text margin_lr_5 hidden'>" + A + "</li>";
							SeeUtils.appendTo(U, N.id + "_ul")
						} else {
							if (X == "custom") {
								var U = "<li style='width: 120px' id='" + F + "_container' class='searchLicommon common_search_input condition_text hidden'>" + E.customHtml + "</li>";
								SeeUtils.appendTo(U, N.id + "_ul")
							}
						}
					}
				}
			}
			if (G != undefined) {
				SeeUtils.addEvent(O, "click", G)
			}
			if (I) {
				I.codeoption()
			}
			if (Z != null) {
				calendarCtl({
					ifFormat: M,
					showsTime: Y,
					cache: false
				}, document.getElementById("from_" + Z));
				calendarCtl({
					ifFormat: M,
					showsTime: Y
				}, document.getElementById("to_" + Z))
			}
			if (SeeUtils.getSizeByClass(".searchInputComp") > 0) {
				$(".searchInputComp").comp()
			}
		}
	}
	var R = "<li class='searchLicommon margin_l_5 search_btn' ><a class='common_button  search_buttonHand' style='*margin-top:-1px;' href='javascript:void(0)'><em></em></a></li>";
	SeeUtils.appendTo(R, document.getElementById(N.id + "_ul"));
	var a = SeeUtils.getByClass(document, ".common_drop_down");
	for (var Q = 0; Q < a.length; Q++) {
		var J = a[Q];
		_MxtDropDown(J, N)
	}
	SeeUtils.eachAllSonElsByClass(".common_search", function (c) {
		SeeUtils.addEvent(c, "keydown", function (g) {
			var e = g || window.event;
			var d = e.target || e.srcElement;
			if (e.keyCode == 13) {
				var f = SeeUtils.getByClass(document, ".search_btn");
				SeeUtils.eachByClass(document, ".search_btn", function (h) {
					SeeUtils.executeClick(h)
				});
				if (e.stopPropagation) {
					e.stopPropagation()
				}
				e.cancelBubble = true;
				return false
			}
		})
	});
	SeeUtils.eachByTag(N.id + "_dropdown_content", "a", function (d, c) {
		SeeUtils.addEvent(d, "click", function (f) {
			var n = f || window.event;
			var o = n.target || n.srcElement;
			var h = SeeUtils.getAttrEl(o, "value");
			for (var p = 0; p < N.selects.length; p++) {
				var q = N.selects[p];
				if (q != null) {
					var g = q.id;
					if (AssertUtils.isNotEmpty(g)) {
						var k = SeeUtils.getElByTag(g + "_dropdown_content", "a");
						if (k.length > 0) {
							SeeUtils.executeClick(k[0])
						}
					}
				}
			}
			for (var m = 0; m < N.inputs.length; m++) {
				var e = N.inputs[m];
				SeeUtils.attrEl(e.id, "value", "");
				if (SeeUtils.getAttrEl(e.id, "type") == "hidden") {
					SeeUtils.attrEl(e.id + "_txt", "value", "");
					SeeUtils.removeAttrEl(e.id + "_txt", "title")
				}
			}
			if (Z) {
				SeeUtils.getElObj("from_" + Z).value = "";
				SeeUtils.getElObj("to_" + Z).value = ""
			}
			var l = SeeUtils.getByClass(document, ".condition_text");
			for (var j = 0; j < l.length; j++) {
				var o = l[j];
				SeeUtils.addClass(o, "hidden")
			}
			SeeUtils.removeClass(h + "_container", "hidden");
			if (h != "") {
				SeeUtils.removeClass(SeeUtils.getFirstElByClass(".search_btn"), "margin_l_5")
			} else {
				SeeUtils.addClass(SeeUtils.getFirstElByClass(".search_btn"), "margin_l_5")
			}
		});
		SeeUtils.addEvent(d, "click", N.onchange)
	});
	SeeUtils.eachByClass(document, ".search_btn", function (c) {
		SeeUtils.addEvent(c, "click", function () {
			searchBtnClick(W, N)
		})
	});
	this.p = N;
	this.g = W;
	return this
}
function goSearchCtlNoEl(O) {
	O = SeeUtils.extend({
			id: Math.floor(Math.random() * 100000000),
			conditionText: $.i18n("searchbox.condition.js"),
			conditionDateText: $.i18n("searchbox.conditionDateText.js"),
			conditionSpecText: $.i18n("searchbox.conditionSpecText.js"),
			onchange: function () {},
			isExpand: false,
			expandValue: null,
			top: 7,
			left: null,
			right: null,
			bottom: null,
			dialog: null
		}, O);
	var Z = {
		getReturnValue: function () {
			var h = SeeUtils.getElVal(O.id);
			var y;
			var k;
			var p = false;
			if (O.conditions && O.conditions.length > 0) {
				for (var v = 0; v < O.conditions.length; v++) {
					var q = O.conditions[v];
					var l = q.value;
					var j = q.id;
					var u = q.validate ? true : false;
					var g;
					var x = q.type;
					if (h == l) {
						if (x == "selectPeople") {
							y = [];
							y[0] = SeeUtils.getElVal(j + "_txt");
							y[1] = SeeUtils.getElVal(j)
						} else {
							if (x == "datemulti") {
								var w = q.ifFormat;
								y = [];
								y[0] = SeeUtils.getElVal("from_" + j);
								y[1] = SeeUtils.getElVal("to_" + j);
								if (w == "%Y-%m-%d") {
									var f = /^(\d{4})-(0\d{1}|1[0-2])-(0\d{1}|[12]\d{1}|3[01])$/
								} else {
									var f = /^(\d{4})-(0\d{1}|1[0-2])-(0\d{1}|[12]\d{1}|3[01]) (0\d{1}|1\d{1}|2[0-3]):([0-5]\d{1})$/
								}
								if ((!f.test(y[0]) || !f.test(y[1])) && y[0] != "" && y[1] != "") {
									p = true;
									if (O.dialog) {
										O.dialog.close()
									}
									O.dialog = $.alert(O.conditionDateText);
									return null
								}
								if (y[0] != "" && y[1] != "" && y[0] > y[1]) {
									if (O.dialog) {
										O.dialog.close()
									}
									O.dialog = $.alert($.i18n("validate.endDate.early.startDate.js"));
									return null
								}
							} else {
								if (x == "barcode") {
									y = {};
									y.qType = SeeUtils.getElVal(j + "_qType");
									y.comType = SeeUtils.getElVal(j + "_comType")
								} else {
									if (x == "custom" || x == "customPanel") {
										y = q.getValue ? q.getValue(j) : SeeUtils.getElVal(j)
									} else {
										if (x == "select") {
											var n = document.getElementsByTagName("select");
											for (var o = 0; o < n.length; o++) {
												if (n[o].getAttribute("id") === j) {
													var t = n[o];
													var m = t.selectedIndex;
													var r = t.options[m].text;
													var s = t.options[m].value;
													y = t.options[m].value
												}
											}
										} else {
											y = SeeUtils.getElVal(j);
											if (u) {
												g = /[!@#$%^&*()<>]/;
												if (g.test(y)) {
													p = true;
													SeeUtils.getElObj(j).focus()
												}
											}
										}
									}
								}
							}
						}
						k = x;
						break
					}
				}
			}
			if (p) {
				if (O.dialog) {
					O.dialog.close()
				}
				O.dialog = $.alert(O.conditionSpecText);
				return null
			} else {
				return {
					type: k,
					condition: h,
					value: y
				}
			}
		},
		clearCondition: function () {
			var f = SeeUtils.getElByTag(SeeUtils.getElObj(O.id + "_dropdown_content"), "a");
			SeeUtils.eachByTag(O.id + "_dropdown_content", "a", function (i, g) {
				var h = SeeUtils.getAttrEl(i, "value");
				if (h == "") {
					SeeUtils.executeClick(i)
				}
			})
		},
		setCondition: function (f, l, k) {
			var o;
			var p;
			var n;
			for (var h = 0; h < O.conditions.length; h++) {
				var j = O.conditions[h];
				var q = j.value;
				var m = j.id;
				var g = j.type;
				if (m == f) {
					o = q;
					p = g;
					n = j;
					break
				}
			}
			SeeUtils.eachByTag(O.id + "_dropdown_content", "a", function (s, i) {
				var r = SeeUtils.getAttrEl(s, "value");
				if (r == o) {
					SeeUtils.executeClick(s)
				}
			});
			if (p == "input") {
				SeeUtils.setElVal(f, l)
			} else {
				if (p == "select") {
					SeeUtils.eachByTag(f + "_dropdown_content", "a", function (r, i) {
						var s = SeeUtils.getAttrEl(r, "value");
						if (s == l) {
							SeeUtils.executeClick(r)
						}
					})
				} else {
					if (p == "datemulti") {
						SeeUtils.setElVal("from_" + f, l);
						SeeUtils.setElVal("to_" + f, k)
					} else {
						if (p == "selectPeople") {
							SeeUtils.setElVal(m + "_txt", l);
							SeeUtils.setElVal(m, k)
						}
					}
				}
			}
		},
		hideSearchBox: function () {
			SeeUtils.hideEl(O.id + "_ul")
		},
		showSearchBox: function () {
			SeeUtils.showEl(O.id + "_ul")
		},
		hideItem: function (p, j) {
			var k;
			for (var l = 0; l < O.conditions.length; l++) {
				if (O.conditions[l].id == p) {
					k = O.conditions[l].value
				}
			}
			var h = SeeUtils.getElByTag(O.id + "_conditions", "a");
			for (var q = 0; q < h.length; q++) {
				var g = h[q];
				if (SeeUtils.getAttrEl(g, "value") == k) {
					SeeUtils.hideEl(g)
				}
			}
			if (j) {
				var f = SeeUtils.getElByTag(O.id, "option");
				if (f.length > 0) {
					SeeUtils.attrEl(f[0], "selected", true)
				}
				SeeUtils.text(O.id + "_dropdown_text", O.conditionText);
				var o = SeeUtils.getElByTag(O.id + "_ul", "li");
				var n = o.length;
				for (var l = 0; l < o.length; l++) {
					var m = o[l];
					if (!(l == 0 || l == (n - 1))) {
						if (!SeeUtils.hasClass(m, "hidden")) {
							SeeUtils.addClass(m, "hidden")
						}
					}
					if (l == (n - 1)) {
						SeeUtils.addClass(m, "margin_l_5")
					}
				}
			}
		},
		showItem: function (k) {
			var j;
			for (var g = 0; g < O.conditions.length; g++) {
				if (O.conditions[g].id == k) {
					j = O.conditions[g].value
				}
			}
			var h = SeeUtils.getElByTag(O.id + "_conditions", "a");
			for (var f = 0; f < h.length; f++) {
				var l = h[f];
				if (SeeUtils.getAttrEl(l, "value") == j) {
					SeeUtils.showEl(l)
				}
			}
		}
	};
	var Y = "position: absolute;z-index:599;";
	if (O.top != null) {
		Y += "top:" + O.top + "px;"
	}
	if (O.left != null) {
		Y += "left:" + O.left + "px;"
	}
	if (O.right != null) {
		Y += "right:" + O.right + "px;"
	}
	if (O.bottom != null) {
		Y += "bottom:" + O.bottom + "px;"
	}
	var Q = "<ul id='" + O.id + "_ul' class='common_search common_search_condition clearfix' style='" + Y + "_display:inline;'><li id='" + O.id + "_conditions' style='width:120px'><select id='" + O.id + "' class='common_drop_down w100b'><option id='" + O.id + "_default' value=''>" + O.conditionText + "</option></select></li></ul>";
	SeeUtils.appendToBody(Q);
	O.inputs = [];
	O.selects = [];
	if (SeeUtils.getSizeByClass(".common_toolbar_box") == 1) {
		var M = $(".common_toolbar_box").parent().attrObj("toolbarObj");
		if (M) {
			M.setPage()
		}
	}
	if (O.conditions && O.conditions.length > 0) {
		for (var X = 0; X < O.conditions.length; X++) {
			var b = false;
			var E = O.conditions[X];
			var a = E.type;
			var c = null;
			var F = E.value;
			var C = E.text;
			var P = E.id;
			var e = E.name;
			var I = null;
			var G = E.click;
			var T = E.readonly;
			var H = document.createElement("option");
			H.setAttribute("value", F);
			var D = "hidden";
			if (O.isExpand && O.expandValue == null && X == 0) {
				D = "";
				H.setAttribute("selected", "selected")
			} else {
				if (O.isExpand && O.expandValue != null && O.expandValue == F) {
					D = "";
					H.setAttribute("selected", "selected")
				}
			}
			H.innerHTML = C;
			SeeUtils.appendTo(H, O.id);
			var K;
			if (a == "selectPeople") {
				var W = "<li id='" + F + "_container' class='common_search_input condition_text " + D + "'><input id='" + P + "' name='" + e + "' value='' class='search_input searchInputComp comp' comp=\"" + E.comp + "\" type='text'></li>";
				O.inputs.push(E);
				SeeUtils.appendTo(W, O.id + "_ul")
			} else {
				if (a == "input") {
					if (E.maxLength) {
						var V = " maxlength='" + E.maxLength + "'"
					} else {
						var V = ""
					}
					O.inputs.push(E);
					var W = "<li id='" + F + "_container' class='common_search_input condition_text " + D + "'><input id='" + P + "' name='" + e + "' value='' class='search_input' style='*margin-top:-1px;' type='text' " + V + "></li>";
					SeeUtils.appendTo(W, O.id + "_ul")
				} else {
					if (a == "datemulti") {
						var N = E.ifFormat != undefined ? E.ifFormat : "%Y-%m-%d %H:%M";
						var W = "<li id='" + F + "_container' class='typeDatemulti condition_text " + D + " margin_lr_5'><input id='from_" + P + "' type='text' class='comp input_date' style='width:135px' readonly='readonly'/><span class='padding_lr_5'>-</span><input id='to_" + P + "' type='text' class='comp input_date' style='width:135px' readonly='readonly'/></li>";
						if (E.dateTime && E.dateTime == true) {
							b = true
						}
						c = P;
						SeeUtils.appendTo(W, O.id + "_ul")
					} else {
						if (a == "select") {
							var A = "";
							A += "<select id='" + P + "' name='" + e + "' class='w100b common_drop_down'>";
							if (E.items) {
								for (var U = 0; U < E.items.length; U++) {
									var L = E.items[U];
									A += "<option value='" + L.value + "'>" + escapeStringToHTML(L.text) + "</option>"
								}
							}
							A += "</select>";
							O.selects.push(E);
							I = $(A);
							if (E.codecfg) {
								I.attr("codecfg", E.codecfg)
							}
							var W = "<li style='width: 100px;' id='" + F + "_container' class='condition_text margin_lr_5 " + D + "'>" + A + "</li>";
							SeeUtils.appendTo(W, O.id + "_ul")
						} else {
							if (a == "barcode") {}
							else {
								if (a == "custom") {
									var W = "<li style='' id='" + F + "_container' class='common_search_input condition_text " + D + "'>" + E.customHtml + "</li>";
									SeeUtils.appendTo(W, O.id + "_ul")
								} else {
									if (a == "customPanel") {
										W = "<li style='width: 120px' id='" + F + "_container' class='common_search_input condition_text " + D + "'><div class='common_txtbox_wrap'><input id='" + P + "_ids' type='hidden'><input id='" + P + "' name='" + e + "' " + (T == undefined ? "" : T) + " value='' class='search_input' style='*margin-top:-1px;' type='text'></div></li>";
										SeeUtils.appendTo(W, O.id + "_ul")
									}
								}
							}
						}
					}
				}
			}
			if (G != undefined) {
				SeeUtils.addEvent(P, "click", G)
			}
			if (I) {
				I.codeoption()
			}
			if (c != null) {
				calendarCtl({
					ifFormat: N,
					showsTime: b,
					cache: false
				}, document.getElementById("from_" + c));
				calendarCtl({
					ifFormat: N,
					showsTime: b
				}, document.getElementById("to_" + c))
			}
			if (SeeUtils.getSizeByClass(".searchInputComp") > 0) {
				$(".searchInputComp").comp()
			}
			if (a == "customPanel") {
				(function (f) {
					SeeUtils.addEvent(f.id, "click", function () {
						var g = $.dialog({
								id: f.id + "_panel",
								width: f.panelWidth,
								height: f.panelHeight,
								type: "panel",
								html: f.customHtml,
								targetId: f.id,
								shadow: false,
								panelParam: {
									show: false,
									margins: true
								},
								buttons: [{
										id: "wewew",
										text: $.i18n("common.button.ok.label"),
										handler: function () {
											f.customHandler(g);
											g.close()
										}
									}
								]
							});
						g.currentTarget = {};
						g.currentTarget.id = g.id;
						if (f.customLoadHandler != null) {
							f.customLoadHandler(f.id)
						}
					})
				})(E)
			}
		}
	}
	var S = "<li class='margin_l_5 search_btn' style='*margin-top:-1px;'><a class='common_button  search_buttonHand' href='javascript:void(0)'><em></em></a></li>";
	var B = document.getElementById(O.id + "_ul");
	SeeUtils.appendTo(S, B);
	var d = SeeUtils.getByClass(B, ".common_drop_down");
	for (var R = 0; R < d.length; R++) {
		var J = d[R];
		_MxtDropDown(J, O)
	}
	SeeUtils.eachAllSonElsByClass(".common_search", function (f) {
		SeeUtils.addEvent(f, "keydown", function (j) {
			var h = j || window.event;
			var g = h.target || h.srcElement;
			if (h.keyCode == 13) {
				var i = SeeUtils.getByClass(document, ".search_btn");
				SeeUtils.eachByClass(document, ".search_btn", function (k) {
					SeeUtils.executeClick(k)
				});
				if (h.stopPropagation) {
					h.stopPropagation()
				}
				h.cancelBubble = true;
				return false
			}
		})
	});
	SeeUtils.eachByTag(O.id + "_dropdown_content", "a", function (g, f) {
		SeeUtils.addEvent(g, "click", function (k) {
			var r = k || window.event;
			var s = r.target || r.srcElement;
			var m = SeeUtils.getAttrEl(s, "value");
			if (SeeUtils.hasClass(s, "common_drop_a_select") === false) {
				SeeUtils.addClass(s, "common_drop_a_select");
				SeeUtils.siblings(s, "a", function (i) {
					SeeUtils.removeClass(i, "common_drop_a_select")
				})
			}
			for (var v = 0; v < O.selects.length; v++) {
				var w = O.selects[v];
				if (w != null) {
					var l = w.id;
					if (AssertUtils.isNotEmpty(l)) {
						var n = SeeUtils.getElByTag(l + "_dropdown_content", "a");
						if (n.length > 0) {
							SeeUtils.executeClick(n[0])
						}
					}
				}
			}
			for (var p = 0; p < O.inputs.length; p++) {
				var j = O.inputs[p];
				SeeUtils.attrEl(j.id, "value", "");
				if (SeeUtils.getAttrEl(j.id, "type") == "hidden") {
					SeeUtils.attrEl(j.id + "_txt", "value", "");
					SeeUtils.removeAttrEl(j.id + "_txt", "title")
				}
			}
			try {
				closeBarCodePort()
			} catch (t) {}
			if (c != null) {
				SeeUtils.getElObj("from_" + c).value = "";
				SeeUtils.getElObj("to_" + c).value = ""
			}
			SeeUtils.eachByClass(document, ".condition_text", function (i) {
				SeeUtils.addClass(i, "hidden")
			});
			SeeUtils.removeClass(m + "_container", "hidden");
			if (m != "") {
				SeeUtils.removeClass(SeeUtils.getFirstElByClass(".search_btn"), "margin_l_5")
			} else {
				SeeUtils.addClass(SeeUtils.getFirstElByClass(".search_btn"), "margin_l_5")
			}
			if (m == "barcode") {
				var o = {};
				var h = o.qType || "com";
				var u = o.comType || "1";
				SeeUtils.eachByTag(m + "_container", "select", function (q, x) {
					var y = q.id;
					if (!SeeUtils.hasClass(q, "drop_down")) {
						var i = new MxtDropDown({
								id: y
							});
						if (y.indexOf("qType") != -1) {
							i.setValue(h)
						} else {
							i.setValue(u)
						}
						SeeUtils.addClass(q, "drop_down")
					}
				});
				setTimeout(function () {
					searchBtnClick(Z, O)
				}, 100)
			}
		});
		SeeUtils.addEvent(g, "click", O.onchange)
	});
	SeeUtils.eachByClass(document, ".search_btn", function (f) {
		SeeUtils.addEvent(f, "click", function () {
			searchBtnClick(Z, O)
		})
	});
	this.p = O;
	this.g = Z;
	return this
}
$.fn.searchCondition = function (A) {
	return goSearchCtl(A, $(this).get(0))
};
$.searchCondition = function (A) {
	return new goSearchCtlNoEl(A, null)
};
function StringBuffer() {
	this._strings_ = new Array()
}
StringBuffer.prototype.append = function (A) {
	if (A) {
		if (A instanceof Array) {
			this._strings_ = this._strings_.concat(A)
		} else {
			this._strings_[this._strings_.length] = A
		}
	}
	return this
};
StringBuffer.prototype.reset = function (A) {
	this.clear();
	this.append(A)
};
StringBuffer.prototype.clear = function () {
	this._strings_ = new Array()
};
StringBuffer.prototype.isBlank = function () {
	return this._strings_.length == 0
};
StringBuffer.prototype.toString = function (A) {
	A = A == null ? "" : A;
	if (this._strings_.length == 0) {
		return ""
	}
	return this._strings_.join(A)
};
String.prototype.getBytesLength = function () {
	var A = this.match(/[^\x00-\xff]/ig);
	return this.length + (A == null ? 0 : A.length)
};
String.prototype.getLimitLength = function (C, F) {
	if (!C || C < 0) {
		return this
	}
	var A = this.getBytesLength();
	if (A <= C) {
		return this
	}
	F = F == null ? ".." : F;
	C = C - F.length;
	var B = 0;
	var D = "";
	for (var E = 0; E < this.length; E++) {
		if (this.charCodeAt(E) > 255) {
			B += 2
		} else {
			B++
		}
		D += this.charAt(E);
		if (B >= C) {
			return D + F
		}
	}
	return this
};
String.prototype.escapeHTML = function (B, A) {
	try {
		return escapeStringToHTML(this, B, A)
	} catch (C) {}
	return this
};
String.prototype.escapeJavascript = function () {
	return escapeStringToJavascript(this)
};
String.prototype.escapeSpace = function () {
	return this.replace(/ /g, "&nbsp;")
};
String.prototype.escapeSameWidthSpace = function () {
	return this.replace(/ /g, "&nbsp;&nbsp;")
};
String.prototype.escapeXML = function () {
	return this.replace(/\&/g, "&amp;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\"/g, "&quot;")
};
String.prototype.escapeQuot = function () {
	return this.replace(/\'/g, "&#039;").replace(/"/g, "&#034;")
};
String.prototype.startsWith = function (A) {
	return this.indexOf(A) == 0
};
String.prototype.endsWith = function (A) {
	var B = this.indexOf(A);
	return B > -1 && B == this.length - A.length
};
String.prototype.trim = function () {
	var C = this.toCharArray();
	var A = 0;
	var D = C.length;
	for (var B = 0; B < C.length; B++) {
		var E = C[B];
		if (E == " ") {
			A++
		} else {
			break
		}
	}
	if (A == this.length) {
		return ""
	}
	for (var B = C.length; B > 0; B--) {
		var E = C[B - 1];
		if (E == " ") {
			D--
		} else {
			break
		}
	}
	return this.substring(A, D)
};
String.prototype.toCharArray = function () {
	var B = [];
	for (var A = 0; A < this.length; A++) {
		B[A] = this.charAt(A)
	}
	return B
};
function ArrayList() {
	this.instance = new Array()
}
ArrayList.prototype.size = function () {
	return this.instance.length
};
ArrayList.prototype.add = function (A) {
	this.instance[this.instance.length] = A
};
ArrayList.prototype.addSingle = function (A) {
	if (!this.contains(A)) {
		this.instance[this.instance.length] = A
	}
};
ArrayList.prototype.addAt = function (A, B) {
	if (A >= this.size() || A < 0 || this.isEmpty()) {
		this.add(B);
		return
	}
	this.instance.splice(A, 0, B)
};
ArrayList.prototype.addAll = function (A) {
	if (!A || A.length < 1) {
		return
	}
	this.instance = this.instance.concat(A)
};
ArrayList.prototype.addList = function (A) {
	if (A && A instanceof ArrayList && !A.isEmpty()) {
		this.instance = this.instance.concat(A.instance)
	}
};
ArrayList.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
ArrayList.prototype.getLast = function () {
	if (this.size() < 1) {
		return null
	}
	return this.instance[this.size() - 1]
};
ArrayList.prototype.set = function (B, C) {
	if (B >= this.size()) {
		throw "IndexOutOfBoundException : Index " + B + ", Size " + this.size()
	}
	var A = this.instance[B];
	this.instance[B] = C;
	return A
};
ArrayList.prototype.removeElementAt = function (A) {
	if (A > this.size() || A < 0) {
		return
	}
	this.instance.splice(A, 1)
};
ArrayList.prototype.remove = function (B) {
	var A = this.indexOf(B);
	this.removeElementAt(A)
};
ArrayList.prototype.contains = function (A, B) {
	return this.indexOf(A, B) > -1
};
ArrayList.prototype.indexOf = function (C, D) {
	for (var A = 0; A < this.size(); A++) {
		var B = this.instance[A];
		if (B == C) {
			return A
		} else {
			if (D != null && B != null && C != null && B[D] == C[D]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.lastIndexOf = function (C, D) {
	for (var A = this.size() - 1; A >= 0; A--) {
		var B = this.instance[A];
		if (B == C) {
			return A
		} else {
			if (D != null && B != null && C != null && B[D] == C[D]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.subList = function (B, D) {
	if (B < 0) {
		B = 0
	}
	if (D > this.size()) {
		D = this.size()
	}
	var C = this.instance.slice(B, D);
	var A = new ArrayList();
	A.addAll(C);
	return A
};
ArrayList.prototype.toArray = function () {
	return this.instance
};
ArrayList.prototype.isEmpty = function () {
	return this.size() == 0
};
ArrayList.prototype.clear = function () {
	this.instance = new Array()
};
ArrayList.prototype.toString = function (A) {
	A = A || ", ";
	return this.instance.join(A)
};
function Properties(A) {
	this.instanceKeys = new ArrayList();
	this.instance = {};
	if (A) {
		this.instance = A;
		for (var B in A) {
			this.instanceKeys.add(B)
		}
	}
}
Properties.prototype.size = function () {
	return this.instanceKeys.size()
};
Properties.prototype.get = function (B, A) {
	if (B == null) {
		return null
	}
	var C = this.instance[B];
	if (C == null && A != null) {
		return A
	}
	return C
};
Properties.prototype.remove = function (A) {
	if (A == null) {
		return null
	}
	this.instanceKeys.remove(A);
	delete this.instance[A]
};
Properties.prototype.put = function (A, B) {
	if (A == null) {
		return null
	}
	if (this.instance[A] == null) {
		this.instanceKeys.add(A)
	}
	this.instance[A] = B
};
Properties.prototype.putRef = function (A, B) {
	if (A == null) {
		return null
	}
	this.instanceKeys.add(A);
	this.instance[A] = B
};
Properties.prototype.getMultilevel = function (D, B) {
	if (D == null) {
		return null
	}
	var C = D.split(".");
	function A(I, G, F) {
		try {
			if (I == null || (typeof I != "object")) {
				return null
			}
			var J = I.get(G[F]);
			if (F < G.length - 1) {
				J = A(J, G, F + 1)
			}
			return J
		} catch (H) {}
		return null
	}
	var E = A(this, C, 0);
	return E == null ? B : E
};
Properties.prototype.containsKey = function (A) {
	if (A == null) {
		return false
	}
	return this.instance[A] != null
};
Properties.prototype.keys = function () {
	return this.instanceKeys
};
Properties.prototype.values = function () {
	var D = new ArrayList();
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		if (A) {
			var C = this.instance[A];
			D.add(C)
		}
	}
	return D
};
Properties.prototype.isEmpty = function () {
	return this.instanceKeys.isEmpty()
};
Properties.prototype.clear = function () {
	this.instanceKeys.clear();
	this.instance = {}
};
Properties.prototype.swap = function (C, B) {
	if (!C || !B || C == B) {
		return
	}
	var E = -1;
	var D = -1;
	for (var A = 0; A < this.instanceKeys.instance.length; A++) {
		if (this.instanceKeys.instance[A] == C) {
			E = A
		} else {
			if (this.instanceKeys.instance[A] == B) {
				D = A
			}
		}
	}
	this.instanceKeys.instance[E] = B;
	this.instanceKeys.instance[D] = C
};
Properties.prototype.entrySet = function () {
	var A = [];
	for (var C = 0; C < this.instanceKeys.size(); C++) {
		var B = this.instanceKeys.get(C);
		var D = this.instance[B];
		if (!B) {
			continue
		}
		var E = new Object();
		E.key = B;
		E.value = D;
		A[A.length] = E
	}
	return A
};
Properties.prototype.toString = function () {
	var C = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		C += A + "=" + this.instance[A] + "\n"
	}
	return C
};
Properties.prototype.toStringTokenizer = function (E, D) {
	E = E == null ? ";" : E;
	D = D == null ? "=" : D;
	var F = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var C = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			F += E
		}
		F += A + D + C
	}
	return F
};
Properties.prototype.toQueryString = function () {
	if (this.size() < 1) {
		return ""
	}
	var D = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var C = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			D += "&"
		}
		if (typeof C == "object") {}
		else {
			D += A + "=" + encodeURIat(C)
		}
	}
	return D
};
var calendarCtl = function (C, D) {
	var P = {
		firstDay: 0,
		eventName: "click",
		ifFormat: "%Y-%m-%d",
		autoFill: true,
		align: "Bl",
		range: [1900, 2999],
		singleClick: true,
		weekNumbers: false,
		showsTime: false,
		timeFormat: "24",
		electric: true,
		cache: true,
		showOthers: false,
		defer: 100,
		minuteStep: 5,
		isClear: true,
		clearBlank: true,
		isOutShow: false,
		isJustShowIcon: false,
		isShowIcon: true
	};
	if (C && C.isMini) {
		P.isMini = C.isMini
	}
	if (C && C.ifFormat && C.ifFormat != P.ifFormat) {
		P.autoFill = false
	}
	if (C && C.minuteStep) {
		P.minuteStep = C.minuteStep
	}
	var H = D;
	if (D != null && D.get != null && D.get(0) != null) {
		H = D.get(0)
	}
	var B = H.tagName.toLowerCase(),
	I = H.type;
	if (B == "input") {
		if (I == "text") {
			P.inputField = H
		} else {
			if (I == "button") {
				P.button = H
			}
		}
	} else {
		P.displayArea = H
	}
	var R = SeeUtils.extend(P, C);
	SeeUtils.getAttrEl(H, "_inited");
	if (SeeUtils.getAttrEl(H, "_inited") == 1) {
		var J = H.nextSibling;
		if (J != null) {
			SeeUtils.removeEl(J)
		}
		H.removeAttribute("_icoed")
	} else {
		SeeUtils.attrEl(H, "_inited", 1)
	}
	var T = R.inputField;
	var O = SeeUtils.getElObj(T);
	if (T && !T._icoed) {
		var M = -20;
		if (SeeUtils.hasClass(O.parentNode, "common_txtbox_wrap")) {
			M = -14
		}
		var K = -1;
		if (!SeeUtils.isIE) {
			K = 2
		}
		if (SeeUtils.isIE) {
			K = 2;
			if (SeeUtils.isIE6 || SeeUtils.isIE7) {
				K = 6
			}
			if (SeeUtils.isIE10 || SeeUtils.isIE11) {
				K = 0
			}
		}
		var N = document.createElement("span");
		N.className = "calendar_icon_area";
		N.innerHTML = "<span class='calendar_icon' style='left:" + M + "px;top:" + K + "px;position: absolute; font-size:14px;'></span>";
		if (SeeUtils.isIE) {
			if (SeeUtils.isIE6 || SeeUtils.isIE7) {
				N = null;
				N = document.createElement("span");
				N.className = "calendar_icon hand";
				N.style.marginLeft = "-20px"
			}
		}
		if (!P.isShowIcon) {
			N = null;
			N = document.createElement("span")
		}
		if (P.isOutShow) {
			if (H.tagName.toLowerCase() == "input") {
				if (H.type.toLowerCase() == "text") {
					var A = SeeUtils.getParentsByClass(H, ".common_txtbox_wrap");
					if (A.length > 0) {
						if ((SeeUtils.getElWidth(H) == 0 || SeeUtils.getElWidth(H) == 100) && SeeUtils.getAttrEl(H, "_widthed") != "true") {
							SeeUtils.setElWidth(H, "90%")
						}
					} else {
						SeeUtils.setElWidth(H, SeeUtils.getElWidth(H) - 18)
					}
				}
			}
			N = null;
			N = document.createElement("span");
			N.className = "calendar_icon hand"
		}
		N.style.cursor = "pointer";
		SeeUtils.addClass(N, "_autoBtn");
		SeeUtils.insertAfter(N, T);
		R.button = N;
		var E = SeeUtils.getByClass(N, ".calendar_icon");
		if (E != null && E.length > 0) {
			R.button = E[0]
		}
		T._icoed = true;
		T._autoFill = R.autoFill
	}
	if (P.isJustShowIcon) {
		return false
	}
	var Q = ["inputField", "displayArea", "button"];
	for (var L in Q) {
		if (typeof R[Q[L]] == "string") {
			R[Q[L]] = document.getElementById(R[Q[L]])
		}
	}
	if (!(R.flat || R.multiple || R.inputField || R.displayArea || R.button)) {
		alert("Calendar.setup:\n  Nothing to setup (no fields found).  Please check your code");
		return false
	}
	function S(V) {
		var U = V.params;
		var W = (V.dateClicked || U.electric);
		if (W && U.inputField) {
			U.inputField.value = V.date.print(U.ifFormat);
			if (typeof U.inputField.onchange == "function") {
				U.inputField.onchange()
			}
			$(U.inputField).change()
		}
		if (W && U.displayArea) {
			U.displayArea.innerHTML = V.date.print(U.daFormat)
		}
		if (W && typeof U.onUpdate == "function") {
			U.onUpdate(V)
		}
		if (W && U.flat) {
			if (typeof U.flatCallback == "function") {
				U.flatCallback(V)
			}
		}
		if (W && U.singleClick && V.dateClicked) {
			V.callCloseHandler()
		}
	}
	if (R.flat != null) {
		if (typeof R.flat == "string") {
			R.flat = document.getElementById(R.flat)
		}
		if (!R.flat) {
			alert("Calendar.setup:\n  Flat specified but can't find parent.");
			return false
		}
		var G = new Calendar(R.firstDay, R.date, R.onSelect || S);
		G.showsOtherMonths = R.showOthers;
		G.showsTime = R.showsTime;
		G.time24 = (R.timeFormat == "24");
		G.params = R;
		G.weekNumbers = R.weekNumbers;
		G.setRange(R.range[0], R.range[1]);
		G.setDateStatusHandler(R.dateStatusFunc);
		G.getDateText = R.dateText;
		G.setClear(R.isClear);
		G.setClearBlank(R.clearBlank);
		G.setHeight(R.height);
		if (R.ifFormat) {
			G.setDateFormat(R.ifFormat)
		}
		if (R.inputField && typeof R.inputField.value == "string") {
			G.parseDate(R.inputField.value)
		}
		G.create(R.flat);
		G.show()
	}
	var F = R.button || R.displayArea || R.inputField;
	F["on" + R.eventName] = function () {
		var U = R.inputField || R.displayArea;
		var W = R.inputField ? R.ifFormat : R.daFormat;
		var a = false;
		var Y = window.calendar;
		if (U) {
			R.date = Date.parseDate(U.value || U.innerHTML, W)
		}
		if (!(Y && R.cache)) {
			window.calendar = Y = new Calendar(R.firstDay, R.date, R.onSelect || S, R.onClose || function (b) {
					b.hide()
				}, R.isMini, R.onClear);
			Y.showsTime = R.showsTime;
			Y.time24 = (R.timeFormat == "24");
			Y.weekNumbers = R.weekNumbers;
			a = true
		} else {
			if (R.date) {
				Y.setDate(R.date)
			}
			Y.hide()
		}
		if (R.multiple) {
			Y.multiple = {};
			for (var V = R.multiple.length; --V >= 0; ) {
				var Z = R.multiple[V];
				var X = Z.print("%Y%m%d");
				Y.multiple[X] = Z
			}
		}
		Y.showsOtherMonths = R.showOthers;
		Y.yearStep = R.step;
		Y.setRange(R.range[0], R.range[1]);
		Y.params = R;
		Y.setDateStatusHandler(R.dateStatusFunc);
		Y.getDateText = R.dateText;
		Y.setClear(R.isClear);
		Y.setClearBlank(R.clearBlank);
		Y.setHeight(R.height);
		if (Y.getDateFormat() != W) {
			a = true
		}
		Y.setDateFormat(W);
		if (Y.getDateFormat() == "%Y-%m-%d %H:%M") {
			Y.showsTime = true
		} else {
			Y.showsTime = false
		}
		if (a) {
			Y.create()
		}
		Y.refresh();
		if (!R.position) {
			Y.showAtElement(R.button || R.displayArea || R.inputField, R.align)
		} else {
			Y.showAt(R.position[0], R.position[1])
		}
		return false
	}
};
var calendarCtlNoEl = function (F) {
	function I(N, O) {
		if (typeof F[N] == "undefined") {
			F[N] = O
		}
	}
	I("inputField", null);
	I("displayArea", null);
	I("button", null);
	I("eventName", "click");
	I("ifFormat", "%Y-%m-%d");
	I("daFormat", "%Y-%m-%d");
	I("singleClick", true);
	I("disableFunc", null);
	I("dateStatusFunc", F.disableFunc);
	I("dateTooltipFunc", null);
	I("dateText", null);
	I("firstDay", null);
	I("align", "Br");
	I("range", [1900, 2999]);
	I("weekNumbers", false);
	I("flat", null);
	I("flatCallback", null);
	I("onSelect", null);
	I("onClose", null);
	I("onUpdate", null);
	I("date", null);
	I("showsTime", false);
	I("timeFormat", "24");
	I("electric", true);
	I("step", 1);
	I("position", null);
	I("cache", false);
	I("showOthers", false);
	I("multiple", null);
	I("returnValue", false);
	I("autoShow", false);
	I("dateString", false);
	I("isClear", true);
	I("clearBlank", true);
	I("height", null);
	var G = ["inputField", "displayArea", "button"];
	for (var H in G) {
		if (typeof F[G[H]] == "string") {
			F[G[H]] = document.getElementById(F[G[H]])
		}
	}
	if (!(F.flat || F.multiple || F.inputField || F.displayArea || F.button)) {
		alert("Calendar.setup:\n  Nothing to setup (no fields found).  Please check your code");
		return false
	}
	function K(R) {
		var Q = R.params;
		var S = (R.dateClicked || Q.electric);
		if (S && Q.inputField) {
			Q.inputField.value = R.date.print(Q.ifFormat);
			if (typeof Q.inputField.onchange == "function") {
				Q.inputField.onchange()
			}
		}
		if (S && Q.displayArea) {
			if (!Q.returnValue) {
				Q.displayArea.innerHTML = R.date.print(Q.daFormat)
			} else {
				Q.displayArea.setAttribute("valueStr", R.date.print(Q.daFormat))
			}
		}
		if (S && typeof Q.onUpdate == "function") {
			if (Q.returnValue) {
				var N = R.date;
				var P = N.getTime();
				var O = new Date(P);
				Q.onUpdate(O.print(Q.ifFormat))
			} else {
				Q.onUpdate(R)
			}
		}
		if (S && Q.flat) {
			if (typeof Q.flatCallback == "function") {
				Q.flatCallback(R)
			}
		}
		if (S && Q.singleClick && R.dateClicked) {
			R.callCloseHandler()
		}
	}
	if (F.flat != null) {
		if (typeof F.flat == "string") {
			F.flat = document.getElementById(F.flat)
		}
		if (!F.flat) {
			alert("Calendar.setup:\n  Flat specified but can't find parent.");
			return false
		}
		var B = new Calendar(F.firstDay, F.date, F.onSelect || K, F.onClose, F.isMini, F.onClear);
		B.setDateToolTipHandler(F.dateTooltipFunc);
		B.showsOtherMonths = F.showOthers;
		B.showsTime = F.showsTime;
		B.time24 = (F.timeFormat == "24");
		B.params = F;
		B.weekNumbers = F.weekNumbers;
		B.setRange(F.range[0], F.range[1]);
		B.setDateStatusHandler(F.dateStatusFunc);
		B.getDateText = F.dateText;
		B.setClear(F.isClear);
		B.setClearBlank(F.clearBlank);
		B.setHeight(F.height);
		if (F.ifFormat) {
			B.setDateFormat(F.ifFormat)
		}
		if (F.inputField && typeof F.inputField.value == "string") {
			B.parseDate(F.inputField.value)
		}
		B.create(F.flat);
		B.show();
		return B
	}
	if (F.autoShow) {
		var E = F.inputField || F.displayArea;
		var L = F.inputField ? F.ifFormat : F.daFormat;
		var D = false;
		var B = window.calendar;
		if (E) {
			var A = E.value || F.dateString || E.innerHTML;
			F.date = Date.parseDate(A, L)
		}
		if (!(B && F.cache)) {
			window.calendar = B = new Calendar(F.firstDay, F.date, F.onSelect || K, F.onClose || function (N) {
					N.hide()
				}, F.isMini, F.onClear);
			B.setDateToolTipHandler(F.dateTooltipFunc);
			B.showsTime = F.showsTime;
			B.time24 = (F.timeFormat == "24");
			B.weekNumbers = F.weekNumbers;
			D = true
		} else {
			if (F.date) {
				B.setDate(F.date)
			}
			B.hide()
		}
		if (F.multiple) {
			B.multiple = {};
			for (var H = F.multiple.length; --H >= 0; ) {
				var J = F.multiple[H];
				var C = J.print("%Y%m%d");
				B.multiple[C] = J
			}
		}
		B.showsOtherMonths = F.showOthers;
		B.yearStep = F.step;
		B.setRange(F.range[0], F.range[1]);
		B.params = F;
		B.setDateStatusHandler(F.dateStatusFunc);
		B.getDateText = F.dateText;
		B.setDateFormat(L);
		B.setClear(F.isClear);
		B.setClearBlank(F.clearBlank);
		B.setHeight(F.height);
		if (D) {
			B.create()
		}
		B.refresh();
		if (!F.position) {
			B.showAtElement(F.button || F.displayArea || F.inputField, F.align)
		} else {
			B.showAt(F.position[0], F.position[1])
		}
		return B
	} else {
		var M = F.button || F.displayArea || F.inputField;
		M["on" + F.eventName] = function () {
			var O = F.inputField || F.displayArea;
			var Q = F.inputField ? F.ifFormat : F.daFormat;
			var U = false;
			var S = window.calendar;
			if (O) {
				var N = O.value || O.innerHTML;
				F.date = Date.parseDate(N, Q)
			}
			if (!(S && F.cache)) {
				window.calendar = S = new Calendar(F.firstDay, F.date, F.onSelect || K, F.onClose || function (V) {
						V.hide()
					});
				S.setDateToolTipHandler(F.dateTooltipFunc);
				S.showsTime = F.showsTime;
				S.time24 = (F.timeFormat == "24");
				S.weekNumbers = F.weekNumbers;
				U = true
			} else {
				if (F.date) {
					S.setDate(F.date)
				}
				S.hide()
			}
			if (F.multiple) {
				S.multiple = {};
				for (var P = F.multiple.length; --P >= 0; ) {
					var T = F.multiple[P];
					var R = T.print("%Y%m%d");
					S.multiple[R] = T
				}
			}
			S.showsOtherMonths = F.showOthers;
			S.yearStep = F.step;
			S.setRange(F.range[0], F.range[1]);
			S.params = F;
			S.setDateStatusHandler(F.dateStatusFunc);
			S.getDateText = F.dateText;
			S.setDateFormat(Q);
			S.setClear(F.isClear);
			S.setClearBlank(F.clearBlank);
			S.setHeight(F.height);
			if (U) {
				S.create()
			}
			S.refresh();
			if (!F.position) {
				S.showAtElement(F.button || F.displayArea || F.inputField, F.align)
			} else {
				S.showAt(F.position[0], F.position[1])
			}
			return false
		}
	}
	return B
};
$.fn.calendar = function (A) {
	return calendarCtl(A, $(this))
};
$.calendar = function (A) {
	return calendarCtlNoEl(A, null)
};
(function () {
	var fieldTypeValue = {
		string: "string",
		number: "number",
		email: "email",
		telephone: "telephone",
		mobilePhone: "mobilePhone",
		"0": "0",
		"1": "1",
		"2": "2",
		"3": "3",
		"4": "4",
		"5": "5",
		"8": "0",
		"9": "0",
		"6": "6"
	};
	var fieldType = "type";
	var fieldName = "name";
	var maxValue = "maxValue";
	var minValue = "minValue";
	var minLength = "minLength";
	var maxLength = "maxLength";
	var china3char = "china3char";
	var notNull = "notNull";
	var dotNumber = "dotNumber";
	var fieldDiaplayName = "displayName";
	var fieldLen = "fieldLen";
	var nullable = "nullable";
	var isNumber = "isNumber";
	var integerDigits = "integerDigits";
	var decimalDigits = "decimalDigits";
	var isEmail = "isEmail";
	var notNullWithoutTrim = "notNullWithoutTrim";
	var isInteger = "isInteger";
	var max = "max";
	var min = "min";
	var maxEqual = "maxEqual";
	var minEqual = "minEqual";
	var isWord = "isWord";
	var character = "avoidChar";
	var isDeaultValue = "isDeaultValue";
	var deaultValue = "deaultValue";
	var regExp = "regExp";
	var errorMsg = "errorMsg";
	var func = "func";
	$.fn.resetValidate = function (options) {
		var errorClassName = "error-form";
		this.find("." + errorClassName).removeClass(errorClassName).each(function (i, e) {
			var prt = $(e);
			var es = prt.data("errorIcon");
			if (es) {
				prt.removeClass("error-form").next().remove();
				prt.removeAttr("title");
				prt.removeData("errorIcon");
				prt.find("input,textarea").unbind("propertychange");
				prt.css({
					width: ($(this).width() + 35) + "px"
				})
			}
		})
	};
	function checkValue(obj, options, errorArray) {
		var resultTemp = obj;
		var resultTempPar = resultTemp.parent();
		curCheckObj = checkInput(resultTemp, options.checkNull);
		if (curCheckObj.errorArray) {
			var len = curCheckObj.errorArray.length;
			if (len > 0) {
				showError(resultTempPar, curCheckObj, options, resultTemp);
				if (!resultTempPar.hasClass("error-form") || resultTemp.attr("comptype") == "calendar") {
					if (resultTemp.hasClass("comp")) {
						resultTemp.focus(function () {
							checkval($(this), options)
						})
					}
				}
				if ($.browser.msie && parseInt($.browser.version) < 9) {
					resultTemp.bind("propertychange", function (e) {
						if (e.originalEvent && e.originalEvent.propertyName == "value") {
							checkval($(this), options)
						}
					})
				} else {
					resultTemp.bind("change", function () {
						checkval($(this), options)
					})
				}
				errorArray.push(curCheckObj.errorArray.join("\r\n"))
			}
		}
	}
	function MxtCheckForm(form, options) {
		if (typeof form === "string") {
			form = $("#" + form)
		} else {
			form = $(form)
		}
		var errorArray = [],
		curCheckObj = null;
		var result = [];
		var focusObj = null;
		var firstErrorObj = null;
		if (options && options.validateHidden) {
			$(".validate", form).add(form).each(function () {
				if (!this.disabled && $(this).attr("validate") && this.tagName.toLowerCase() != "span" && this.tagName.toLowerCase() != "div") {
					result.push($(this))
				}
			})
		} else {
			$(".validate", form).add(form).each(function () {
				if (!this.disabled && $(this).is(":visible") && $(this).attr("validate") && this.tagName.toLowerCase() != "span" && this.tagName.toLowerCase() != "div") {
					result.push($(this))
				}
			})
		}
		for (var i = 0; i < result.length; i++) {
			if (i == 0) {
				focusObj = result[0]
			}
			checkValue(result[i], options, errorArray);
			if (firstErrorObj == null && errorArray.length == 1) {
				firstErrorObj = result[i]
			}
			result[i] = null
		}
		form = null;
		if (focusObj != null && !$(focusObj).is(":visible")) {
			var tempId = focusObj.attr("id");
			if (tempId != null) {
				if (!/^field\d{0,5}/.test(tempId)) {
					focusObj.focus()
				}
			} else {
				focusObj.focus()
			}
		}
		if (errorArray.length > 0) {
			var errorAlert = options.errorAlert;
			if (errorAlert) {
				if (top.$("#checkformError").length <= 0) {
					$.alert({
						id: "checkformError",
						msg: errorArray.join("<br/>")
					})
				}
			}
			return false
		} else {
			return true
		}
	}
	function MxtCheckInput(input) {
		var options = {
			errorIcon: true
		};
		if (input == null) {
			return true
		}
		var errorArray = [];
		checkValue(input, options, errorArray);
		var result = true;
		if (curCheckObj.errorArray && curCheckObj.errorArray.length > 0) {
			result = false
		}
		input = null;
		return result
	}
	function MxtCheckMsg(msg, context) {
		if (msg == null) {
			return
		}
		context = context || document.body;
		if (typeof context === "string") {
			context = $("#" + context)
		} else {
			context = $(context)
		}
		for (var elemSelector in msg) {
			addCheckMsg($(elemSelector, context), msg[elemSelector])
		}
		context = null
	}
	window.MxtCheckForm = MxtCheckForm;
	window.MxtCheckInput = MxtCheckInput;
	window.MxtCheckMsg = MxtCheckMsg;
	window.RemoveCheckMsg = checkval;
	function checkInput(input, checkIsNull) {
		if (input == null) {
			return {}
		}
		var checkObj = getCheckObj(input);
		if (checkObj != null) {
			if (checkObj.errorArray == null) {
				checkObj.errorArray = []
			}
			checkObj.checkNull = checkIsNull;
			if (checkIsNull) {
				checkNotNull(checkObj);
				if (checkObj.errorArray.length > 0) {
					input = null;
					return checkObj
				}
				checkNotNullWithourTrim(checkObj);
				if (checkObj.errorArray.length > 0) {
					input = null;
					return checkObj
				}
			}
			checkIsNumber(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsEmail(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsWord(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDefaultValue(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsTelephone(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsMobilePhone(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDate(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDateTime(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDateTimes(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsShorterThanMax(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsLongerThanMin(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkCustomRegExp(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkCustomFunc(checkObj, input);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
		}
		input = null;
		return checkObj
	}
	function checkval(obj, options) {
		if (options == null) {
			var settings = {
				errorIcon: true,
				errorAlert: false,
				errorBg: false,
				validateHidden: false,
				checkNull: true
			};
			options = $.extend(settings, options)
		}
		var temp = checkInput(obj, true);
		var prt = obj.parent();
		if (!temp.errorArray || (temp.errorArray && temp.errorArray.length === 0)) {
			prt.removeClass("error-form");
			prt.removeAttr("title");
			if (prt.data("errorIcon")) {
				prt.removeData("errorIcon");
				prt.next().remove();
				if (options.errorIcon) {
					if (obj.attr("comptype") != "calendar" || (obj.attr("comptype") == "calendar" && options.needfloat == true)) {
						prt.css({
							width: (prt.width() + 35) + "px"
						});
						if (obj.hasClass("comp")) {
							obj.width("100%")
						}
					}
				}
			}
			if (prt.data("errorBg")) {
				prt.removeData("errorBg");
				prt.css("background", "#fff");
				if (obj && !(temp[notNull] || temp[nullable])) {
					$(obj).css("background", "#fff")
				}
			}
		} else {
			showError(prt, temp, options, obj)
		}
	}
	function showError(par, obj, options, objDom) {
		if (options) {
			var _w = par.width();
			if (options.errorIcon) {
				par.addClass("error-form").attr("title", obj.errorArray.join(""));
				if (objDom.attr("comptype") != "calendar" || (objDom.attr("comptype") == "calendar" && obj.needfloat == true)) {
					par.css("float", "left")
				}
				var es = par.data("errorIcon");
				if (!es) {
					es = $("<span class='error-title'></span>");
					par.data("errorIcon", es);
					par.after(es);
					if (objDom.attr("comptype") != "calendar" || (objDom.attr("comptype") == "calendar" && options.needfloat == true)) {
						par.css({
							width: (_w - 35) + "px"
						})
					}
				}
				es.attr("title", obj.errorArray.join(""))
			} else {
				par.addClass("error-form").attr("title", obj.errorArray.join(""))
			}
			if (options.errorBg) {
				var bg = par.data("errorBg");
				if (!bg) {
					if (par.hasClass("common_txtbox_wrap")) {
						par.css("background", "#FCDD8B")
					}
					if (objDom) {
						$(objDom).css("background", "#FCDD8B")
					}
					par.data("errorBg", true)
				}
			}
		} else {}
	}
	function addCheckMsg(elem, msg) {
		if (elem == null) {
			return
		}
		if (typeof msg == "string") {
			try {
				msg = eval("({" + msg + "})")
			} catch (e) {
				return
			}
		}
		var checkObj = getCheckObj(elem);
		$.extend(checkObj, msg);
		elem = null
	}
	function getCheckObj(input) {
		if (input == null) {
			return {}
		}
		if (input.data("checkObj")) {
			var checkObj = input.data("checkObj");
			checkObj.errorArray = null;
			checkObj.value = input.val();
			return input.data("checkObj")
		}
		var checkObj = null,
		validate = null;
		input = $(input);
		validate = input.attr("validate");
		if (validate == null || $.trim(validate) == "") {
			return {}
		} else {
			try {
				checkObj = eval("({" + validate + "})")
			} catch (e) {
				checkObj = {};
				var errorMessage = input.attr("name") + $.i18n("validate.notJson.js");
				addErrorMessage(checkObj, errorMessage, true);
				input = null;
				return checkObj
			}
		}
		if (checkObj.name == null) {
			var tempName = checkObj[fieldName] || checkObj[fieldDiaplayName] || input.attr("name");
			if (tempName) {
				checkObj.name = tempName
			} else {
				var errorMessage = $.i18n("validate.notName.js");
				addErrorMessage(checkObj, errorMessage, true);
				input = null;
				return checkObj
			}
		}
		checkObj.value = input.val();
		input.data("checkObj", checkObj);
		input = null;
		return checkObj
	}
	function checkNotNull(obj) {
		if (obj == null) {
			return true
		}
		if (obj[notNull] || obj[nullable]) {
			if (isNull(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNull.js"), true);
				return false
			}
		}
		return true
	}
	function checkNotNullWithourTrim(obj) {
		if (obj == null) {
			return true
		}
		if (obj[notNullWithoutTrim]) {
			if (isNull(obj.value, true)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNull.js"), true);
				return false
			}
		}
		return true
	}
	function checkIsNumber(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var isNumberFlag = false,
		isIntegerFlag = false;
		if (obj[isNumber] || (obj[fieldType] == fieldTypeValue.number) || (obj[fieldType] == fieldTypeValue["1"]) || (obj[fieldType] == fieldTypeValue["2"])) {
			isNumberFlag = true;
			if (isNull(obj.value)) {
				return true
			}
			if (!isANumber(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNumber.js"));
				return false
			}
			var value = "" + $.trim(obj.value);
			var dotIndex = value.indexOf("."),
			intdigits = obj[integerDigits],
			decDigits = obj[decimalDigits];
			if (decDigits == null) {
				decDigits = obj[dotNumber]
			}
			if (intdigits != null && isANumber(intdigits)) {
				var intbits = dotIndex > -1 ? dotIndex : value.length;
				if (intbits > parseInt(intdigits)) {
					addErrorMessage(obj, obj.name + $.i18n("validate.integerDigits.js", intdigits));
					return false
				}
			}
			if (decDigits != null && isANumber(decDigits)) {
				var decbits = dotIndex > -1 ? (value.length - 1 - dotIndex) : 0;
				if (decbits > parseInt(decDigits)) {
					addErrorMessage(obj, obj.name + $.i18n("validate.decimalDigits.js", decDigits));
					return false
				}
			}
		}
		if (obj[isInteger]) {
			isIntegerFlag = true;
			if (isNull(obj.value)) {
				return true
			}
			if (!isANumber(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.integer.js"));
				return false
			}
			var value = "" + obj.value;
			if (value.indexOf(".") > -1) {
				addErrorMessage(obj, obj.name + $.i18n("validate.integer.decimal.js"));
				return false
			}
		}
		if (isNumberFlag || isIntegerFlag) {
			if (!checkIsLessThanMax(obj)) {
				return false
			}
			if (!checkIsBiggerThanMin(obj)) {
				return false
			}
		}
		return true
	}
	function checkIsEmail(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[isEmail] || (obj[fieldType] == "email")) {
			var str = obj.value;
			if (isNull(str)) {
				return true
			} else {
				var result = true;
				if (str.indexOf("@") == -1) {
					result = false
				} else {
					if (str.indexOf("@") == 0) {
						result = false
					} else {
						if ((str.length - str.indexOf("@")) < 5) {
							result = false
						} else {
							if (str.indexOf(".") == -1) {
								result = false
							} else {
								if ((str.length - str.indexOf(".")) < 3) {
									result = false
								}
							}
						}
					}
				}
				if (!result) {
					addErrorMessage(obj, obj.name + $.i18n("validate.email.js"))
				}
				return result
			}
		}
		return true
	}
	function checkIsWord(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[isWord] || (obj[fieldType] == fieldTypeValue.string) || (obj[fieldType] == fieldTypeValue["0"]) || (obj[fieldType] == fieldTypeValue["8"]) || (obj[fieldType] == fieldTypeValue["9"])) {
			if (typeof obj.value != "string") {
				return false
			}
			if (obj[character] && typeof obj[character] == "string") {
				var value = "" + obj.value,
				chars = obj[character];
				for (var i = 0, len = chars.length; i < len; i++) {
					if (value.indexOf(chars.charAt(i)) > -1) {
						addErrorMessage(obj, obj.name + " " + $.i18n("validate.specialhave.js") + obj[character]);
						return false
					}
				}
			}
		}
		return true
	}
	function checkIsDefaultValue(obj) {
		if (obj == null) {
			return false
		}
		if (isNull(obj.value)) {
			return false
		}
		if (obj[isDeaultValue] && obj[deaultValue]) {
			if ($.trim(obj.value) == obj[deaultValue]) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notDefault.js") + "(" + obj[deaultValue] + ")!");
				return true
			}
		}
		return false
	}
	var telReg = /^\d[-_0-9]{5,}\d$/;
	function checkIsTelephone(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == "telephone") {
			var value = "" + obj.value;
			if (telReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.phoneNumber.js"));
				return false
			}
		}
		return true
	}
	var mobileReg = /\d{11,}/;
	function checkIsMobilePhone(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == "mobilePhone") {
			var value = "" + obj.value;
			if (mobileReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.mobileNumber.js"));
				return false
			}
		}
		return true
	}
	var dateReg = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29))$/;
	function checkIsDate(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 3) {
			var value = "" + obj.value;
			if (dateReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.js"));
				return false
			}
		}
		return true
	}
	var datetimeReg = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$/;
	function checkIsDateTime(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 4) {
			var value = "" + obj.value;
			if (datetimeReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.hh.mm.ss.js"));
				return false
			}
		}
		return true
	}
	var datetimeRegs = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\d):[0-5]?\d$/;
	function checkIsDateTimes(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 5) {
			var value = "" + obj.value;
			if (datetimeRegs.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.hh.mm.ss.js"));
				return false
			}
		}
		return true
	}
	function checkIsShorterThanMax(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[maxLength] != null) {
			if (isANumber(obj[maxLength])) {
				if (obj[isNumber] || (obj[fieldType] == fieldTypeValue.number) || (obj[fieldType] == fieldTypeValue["1"]) || (obj[fieldType] == fieldTypeValue["2"])) {
					if (obj.value.length > 0) {
						obj.value = obj.value.replace(/\./, "")
					}
					if (longerThanSecond(obj.value, obj[maxLength])) {
						addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.js", obj[maxLength]));
						return false
					}
				} else {
					if (obj[china3char] == true) {
						if (longerThanSecondChina(obj.value, obj[maxLength])) {
							addErrorMessage(obj, obj.name + $.i18n("validate.maxLengthChina.js", obj[maxLength]));
							return false
						}
					} else {
						if (longerThanSecond(obj.value, obj[maxLength])) {
							addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.js", obj[maxLength]));
							return false
						}
					}
				}
			} else {
				addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.notNumber.js"));
				return false
			}
		}
		return true
	}
	function checkIsLongerThanMin(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[minLength] != null) {
			if (isANumber(obj[minLength])) {
				if (shorterThanSecond(obj.value, obj[minLength])) {
					addErrorMessage(obj, obj.name + $.i18n("validate.minLength.js") + obj[minLength] + "!");
					return false
				}
			} else {
				addErrorMessage(obj, obj.name + $.i18n("validate.minLength.notNumber.js"));
				return false
			}
		}
		return true
	}
	function checkIsLessThanMax(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var tempMax = obj[max];
		if (tempMax == null) {
			tempMax = obj[maxValue]
		}
		if (tempMax != null && isANumber(tempMax)) {
			value = parseFloat(obj.value);
			if (obj[maxEqual] == false) {
				if (tempMax <= value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustLittle.js") + tempMax + "!");
					return false
				}
			} else {
				if (tempMax < value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustLittleOrEqual.js") + tempMax + "!");
					return false
				}
			}
		}
		return true
	}
	function checkIsBiggerThanMin(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var tempMin = obj[min];
		if (tempMin == null) {
			tempMin = obj[minValue]
		}
		if (tempMin != null && isANumber(tempMin)) {
			value = parseFloat(obj.value);
			if (obj[minEqual] == false) {
				if (tempMin >= value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustBigger.js") + tempMin + "!");
					return false
				}
			} else {
				if (tempMin > value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustBiggerOrEqual.js") + tempMin + "!");
					return false
				}
			}
		}
		return true
	}
	function checkCustomRegExp(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var customRegExp = obj[regExp];
		if (customRegExp != null) {
			if (!new RegExp(customRegExp).test(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notMatch.js"));
				return false
			}
		}
		return true
	}
	function checkCustomFunc(obj, input) {
		if (obj == null || input == null) {
			input = null;
			return true
		}
		if (typeof obj[func] == "function") {
			var result = obj[func](input, obj);
			if (result == null || result == false) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notMatch.js"))
			}
		}
		input = null;
		return true
	}
	function isNull(value, notTrim) {
		if (value == null) {
			return true
		} else {
			if (typeof(value) == "string") {
				value = notTrim == true ? $.trim(value) : value;
				if (value == "") {
					return true
				}
			}
		}
		return false
	}
	function isANumber(value) {
		if (typeof value == "string") {
			value = value
		}
		return /^[-+]?\d+([\.]\d+)?$/.test(value)
	}
	function longerThanSecond(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (first.length > second) {
				return true
			}
		}
		return false
	}
	function longerThanSecondChina(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (getLength(first) > second) {
				return true
			}
		}
		return false
	}
	function shorterThanSecond(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (first.length < second) {
				return true
			}
		}
		return false
	}
	function getLength(value) {
		if (value == null) {
			return 0
		} else {
			if (value == "") {
				return 1
			} else {
				var result = 0;
				for (var i = 0, len = value.length; i < len; i++) {
					var ch = value.charCodeAt(i);
					if (ch < 256) {
						result++
					} else {
						result += 3
					}
				}
				return result
			}
		}
	}
	function addErrorMessage(obj, errMsg, useSystem) {
		if (obj) {
			if (obj.errorArray == null) {
				obj.errorArray = []
			}
			var customErrorMsg = obj[errorMsg];
			if (useSystem != true && customErrorMsg) {
				obj.errorArray.push(customErrorMsg)
			} else {
				obj.errorArray.push(errMsg)
			}
		}
	}
	$.fn.validate = function (options) {
		var settings = {
			errorIcon: true,
			errorAlert: false,
			errorBg: false,
			validateHidden: false,
			checkNull: true
		};
		options = $.extend(settings, options);
		return MxtCheckForm(this, options)
	};
	$.fn.validateChange = function (obj) {
		var tempElem = this;
		if (tempElem != null && tempElem.size() > 0) {
			addCheckMsg(tempElem, obj)
		}
		tempElem = null
	};
	var invalid = [];
	$._invalidObj = function (obj) {
		if (obj) {
			invalid.push(obj)
		}
		invalid.contains(obj)
	};
	$._isInValid = function (obj) {
		if (invalid.contains) {
			return invalid.contains(obj)
		}
		return null
	};
	$.isNull = isNull;
	$.isANumber = isANumber
})();
function MxtColorPanel(A) {
	this.p = {
		id: "MxtColorPanel_" + Math.floor(Math.random() * 100000000),
		targetId: "",
		colorData: [{
				model: "#303030",
				list: ["#071111", "#1f2627", "#353c3d", "#4b5354", "#636b6c", "#7c8485", "#0a1011", "#1e2223", "#323637", "#454b4c", "#5c6162", "#727878", "#000000", "#1d1d1d", "#252525", "#3c3c3c", "#525252", "#6b6b6b"]
			}, {
				model: "#d7dae0",
				list: ["#e9ecf2", "#f2e5fc", "#cbe6dd", "#c7e9fb", "#e3e0ca", "#f8e5e1", "#d7dae0", "#d3e1ff", "#9fd6c4", "#95cce8", "#c8c49e", "#dac4bf", "#cccccc", "#d0c4da", "#d0c4da", "#d0c4da", "#d0c4da", "#cea69d"]
			}, {
				model: "#da0025",
				list: ["#6e0012", "#8d0017", "#ad001d", "#cf0023", "#f10025", "#ff2c37", "#54001d", "#710025", "#8e0032", "#ad2a3f", "#cd484a", "#eb6360", "#43001c", "#5e1129", "#792a38", "#964449", "#b45d59", "#d17670"]
			}, {
				model: "#f01800",
				list: ["#4f0006", "#6d0004", "#8c0001", "#ac0000", "#cd0000", "#ef0000", "#380003", "#510000", "#6e0000", "#8b1202", "#a9331a", "#c84e31", "#290002", "#3f0200", "#591b0b", "#733220", "#8f4a37", "#ac634e"]
			}, {
				model: "#ff4300",
				list: ["#660003", "#850000", "#a40000", "#c50000", "#e61f00", "#ff4608", "#500000", "#6c0000", "#891700", "#a73511", "#c65129", "#e56b41", "#3c0600", "#561e0a", "#703420", "#8c4c36", "#a8654d", "#c57f65"]
			}, {
				model: "#fd6c05",
				list: ["#740000", "#920000", "#b22600", "#d34500", "#f26000", "#ff7c1c", "#5f1300", "#7b2c00", "#984512", "#b65e2b", "#d37742", "#f2925c", "#4f2307", "#69391e", "#845134", "#a06a4c", "#bc8363", "#d99e7d"]
			}, {
				model: "#feab07",
				list: ["#713400", "#8f4c00", "#ad6500", "#cb7e00", "#eb9900", "#ffb317", "#4d2600", "#683b00", "#835300", "#a06c13", "#bc852f", "#da9f49", "#472900", "#5f3f0b", "#7a5723", "#96703b", "#b18952", "#cea36c"]
			}, {
				model: "#ffc91e",
				list: ["#653d00", "#825400", "#a06d00", "#bd8600", "#dca000", "#ffbf00", "#452a00", "#5f4000", "#7a5800", "#977008", "#b38928", "#d0a444", "#412c00", "#5a4206", "#745a20", "#8f7338", "#aa8c50", "#c7a669"]
			}, {
				model: "#93c900",
				list: ["#002800", "#003c00", "#005500", "#1f6e00", "#418700", "#5ea200", "#002300", "#173800", "#304f00", "#496700", "#638118", "#7d9b34", "#122000", "#273503", "#3d4b1b", "#556332", "#6f7d49", "#889661"]
			}, {
				model: "#54c300",
				list: ["#003f00", "#005700", "#007200", "#008c00", "#18a110", "#54c300", "#003a00", "#1d5100", "#386a00", "#52841b", "#6c9e36", "#87ba51", "#1f3605", "#354d1c", "#4d6533", "#667f4b", "#7f9863", "#9ab47c"]
			}, {
				model: "#00ab62",
				list: ["#002900", "#004117", "#00592c", "#007443", "#00905b", "#00ab60", "#00270e", "#003c23", "#005338", "#006d4f", "#266a6d", "#44a177", "#002215", "#0a3829", "#234e3f", "#3b6756", "#54816f", "#6d9b83"]
			}, {
				model: "#00c3c4",
				list: ["#002a2f", "#0c404c", "#00585c", "#007275", "#008d8f", "#00a8a9", "#002526", "#003a3c", "#005252", "#006b6b", "#258584", "#449f9e", "#002122", "#0a3736", "#244d4d", "#3c6665", "#557f7e", "#6e9998"]
			}, {
				model: "#009bf0",
				list: ["#002568", "#003981", "#00509b", "#105dbd", "#45a6d0", "#15a4fa", "#002149", "#003661", "#004c7a", "#1e6494", "#407eaf", "#5c97ca", "#001f36", "#12334d", "#2b4964", "#53718b", "#5e7b98", "#7794b3"]
			}, {
				model: "#006afe",
				list: ["#000079", "#001b95", "#002db0", "#0041cb", "#0058e9", "#006aff", "#00004a", "#001963", "#002d7c", "#234296", "#435ab2", "#596cc7", "#00002e", "#091a45", "#022c55", "#3b4475", "#555b8f", "#686ea3"]
			}, {
				model: "#3f00dd",
				list: ["#00006f", "#000084", "#1e0098", "#3b0dad", "#5424c3", "#6c39d9", "#0f003e", "#180052", "#2f1763", "#422776", "#56398a", "#6b4b9f", "#100025", "#1d1035", "#2e1f47", "#3f2f59", "#52416c", "#655380"]
			}, {
				model: "#9025ff",
				list: ["#2a0075", "#490090", "#6700ab", "#8500c7", "#a400e4", "#bf00ff", "#260048", "#3d0060", "#57007a", "#711993", "#8d37af", "#a74fc8", "#20002d", "#432847", "#491d5b", "#412845", "#7c4c8e", "#9462a6"]
			}, {
				model: "#ff3ec2",
				list: ["#7f0023", "#9e0038", "#bd004d", "#dd0065", "#ff007f", "#ff3e98", "#5f0023", "#7c0039", "#98204f", "#b53e67", "#d45b81", "#f1759a", "#4a0c24", "#64263a", "#7e3d50", "#995668", "#b76a8b", "#d1899b"]
			}, {
				model: "#fe0b6b",
				list: ["#6f0036", "#8d004d", "#ab0064", "#ca007e", "#ea0098", "#ff21b3", "#55002d", "#700043", "#8c005a", "#a92673", "#c6468d", "#e461a7", "#430027", "#5d0d3d", "#762953", "#92426c", "#ae5c86", "#ca75a0"]
			}
		],
		modelIndex: 9,
		listIndex: null,
		top: null,
		left: null,
		onSuccess: function () {},
		onChange: function (C) {
			try {
				console.log("\u5927\u7c7b: " + C.modelColor + ", \u5c0f\u7c7b: " + C.listColor + ", modelIndex: " + C.modelIndex + ", listIndex: " + C.listIndex)
			} catch (B) {}
		},
		onClose: function () {}
	};
	$.extend(this.p, A);
	this.init()
}
MxtColorPanel.prototype.init = function () {
	$(".MxtColorPanel").remove();
	this.createColorGroup();
	this.setPosition();
	this.bindClose();
	this.show()
};
MxtColorPanel.prototype.createColorGroup = function () {
	var E = this;
	var B = "";
	B += '<div id="' + this.p.id + '" class="MxtColorPanel">';
	B += '<ul class="group_list clearfix">';
	var A = this.p.colorData;
	for (var C = 0; C < A.length; C++) {
		B += '<li data-index="' + C + '" style="background:' + A[C].model + ';"></li>'
	}
	B += "</ul>";
	B += "</div>";
	var D = $(B);
	D.find("li").click(function () {
		D.find("li").removeClass("current");
		$(this).addClass("current");
		E.createColorGroupList($(this).attr("data-index"))
	}).mouseenter(function () {
		$(this).addClass("hover")
	}).mouseleave(function () {
		$(this).removeClass("hover")
	}).eq(E.p.modelIndex).addClass("current");
	$("body").append(D);
	this.createColorGroupList(this.p.modelIndex, true)
};
MxtColorPanel.prototype.createColorGroupList = function (C, F) {
	var H = this;
	var G = $("#" + this.p.id);
	var B = "";
	var A = this.p.colorData[C].list;
	B += '<ul class="groupItem_list clearfix">';
	for (var D = 0; D < A.length; D++) {
		B += '<li data-modelIndex="' + C + '" data-listIndex="' + D + '" style="background:' + A[D] + ';"></li>'
	}
	B += "</ul>";
	var E = $(B);
	E.find("li").click(function () {
		var I = $(this).attr("data-modelIndex");
		var J = $(this).attr("data-listIndex");
		G.find(".ok").remove();
		$(this).append("<div class='ok'></div>");
		H.p.onChange({
			modelIndex: I,
			listIndex: J,
			modelColor: H.p.colorData[I].model,
			listColor: H.p.colorData[I].list[J]
		})
	});
	if (F && this.p.listIndex != null) {
		E.find("li").eq(H.p.listIndex).append("<div class='ok'></div>")
	}
	G.find(".groupItem_list").remove();
	G.prepend(E)
};
MxtColorPanel.prototype.setPosition = function () {
	var F = $("#" + this.p.id);
	var B = 300;
	var D = 200;
	var E = $("#" + this.p.targetId);
	var C = E.offset().top;
	var G = E.offset().left;
	var H = E.width();
	var A = E.height();
	var I = 0;
	var J = 0;
	I = C - A - D;
	J = G + H / 2 - B / 2;
	this.p.top != null ? I = this.p.top : null;
	this.p.left != null ? J = this.p.left : null;
	(J + B) > $(window).width() ? J = $(window).width() - B - 10 : null;
	(I + D) > $(window).height() ? I = $(window).height() - D - 10 : null;
	I < 0 ? I = 10 : null;
	J < 0 ? J = 10 : null;
	F.css({
		left: J,
		top: I
	})
};
MxtColorPanel.prototype.show = function () {
	$("#" + this.p.id).show();
	this.p.onSuccess()
};
MxtColorPanel.prototype.bindClose = function () {
	var B = this;
	var A = false;
	$("#" + this.p.id).mouseenter(function () {
		A = false
	}).mouseleave(function () {
		A = true
	});
	$("#" + this.p.targetId).mouseenter(function () {
		A = false
	}).mouseleave(function () {
		A = true
	});
	$(document).click(function () {
		if (A) {
			$("#" + B.p.id).remove();
			B.p.onClose()
		}
	})
};
jQuery.fn.comLanguage = function (F) {
	var E = $(this).selector;
	var K = F.textboxID ? "#" + F.textboxID : alert("error:\u5e38\u7528\u8bed - \u672a\u6307\u5b9a txtboxID");
	var P = F.newBtnHandler ? F.newBtnHandler : alert("error:\u5e38\u7528\u8bed - \u672a\u6307\u5b9a newBtnHandler");
	var L = F.id ? "#" + F.id : "#comLanguage_" + Math.floor(Math.random() * 1000000000);
	var M = F.width ? F.width : 200;
	var B = "";
	var O = F.data ? F.data : null;
	var S = F.left ? F.left : 0;
	var A = F.top ? F.top : 0;
	var I = {
		left: S,
		top: A
	};
	var C = F.phraseper ? F.phraseper : null;
	var G = F.posLeftRight ? F.posLeftRight : "left";
	var N = F.inputType ? F.inputType : null;
	function T(U) {
		if (S == 0 && A == 0) {
			if (U == "left") {
				I.top = $(E).offset().top;
				I.left = $(E).offset().left - M - 10;
				if (I.top < 0) {
					I.top = 0
				}
				if (I.left < 0) {
					I.left = 0
				}
			}
			if (U == "right") {
				I.top = $(E).offset().top;
				I.left = $(E).offset().left + $(E).outerWidth() + 2;
				if (I.top < 0) {
					I.top = 0
				}
				if (I.left + M > $(window).width()) {
					I.left = $(window).width() - M
				}
			}
		}
		$(L).css({
			left: I.left,
			top: I.top
		})
	}
	var D = "#btnDiv_" + Math.floor(Math.random() * 1000000000);
	var Q = "#_comLanguageListDiv" + Math.floor(Math.random() * 1000000000);
	var H = "#_comLanguageBtnDiv" + Math.floor(Math.random() * 1000000000);
	B += "<div id='" + L.replace("#", "") + "' class='comlanguage' style='width:" + M + "px;top:" + I.top + "px;left:" + I.left + "px;'>";
	B += "<div id='" + Q.replace("#", "") + "' class='comlanguage_list'>";
	var J = 1;
	for (var R = 0; R < O.length; R++) {
		B += "<a>" + J + ".  <span title='" + tranCharacter(O[R]) + "'>" + tranCharacter(O[R]) + "</span></a>";
		J++
	}
	B += "</div>";
	B += "<div id='" + H.replace("#", "") + "' class='clearfix comlanguage_btn'>";
	B += "<span class='left'><a id='" + D.replace("#", "") + "' class='common_button common_button_gray comLanguage_new left'>" + $.i18n("phrase.sys.js.neworupdate") + "</a></span>";
	B += "<span class='right'><a class='common_button common_button_gray comLanguage_close right'>" + $.i18n("phrase.sys.js.close") + "</a></span>";
	B += "</div>";
	B += "</div>";
	$("body").append(B);
	T(G);
	if (F.height) {
		$(L).css({
			height: F.height - 2
		});
		$(Q).css({
			height: $(L).innerHeight() - $(D).outerHeight() - $(H).outerHeight() - 2
		})
	}
	$(L).show();
	$(L).mouseleave(function () {
		$(this).remove()
	});
	$(L + " .comLanguage_close").click(function () {
		$(L).remove()
	});
	$(L + " .comLanguage_new").click(function () {
		$(L).remove();
		P()
	});
	$(L + " .comlanguage_list a").click(function () {
		$(L).remove();
		if (N == "ckeditor") {
			$(K).insertEditorContent(escapeStringToHTML($(this).find("span").text()))
		} else {
			var V = $(K).val().trim() == "" ? "" : "\r\n";
			var U = $(K).val().trim() + V + $(this).find("span").text();
			$(K).val(U)
		}
	})
};
function tranCharacter(A) {
	if (!A) {
		return ""
	}
	if (A.indexOf('"') > -1) {
		A = A.replace(/"/g, "&quot;")
	}
	if (A.indexOf("<") > -1) {
		A = A.replace(/</g, "&lt;")
	}
	if (A.indexOf(">") > -1) {
		A = A.replace(/>/g, "&gt;")
	}
	return A
};
var AssertUtils = {
	isString: function (A) {
		return "[object String]" == Object.prototype.toString.call(A)
	},
	isFunction: function (A) {
		if (AssertUtils.isNotNull(A)) {
			if (typeof A == "function") {
				return true
			} else {
				return false
			}
		}
	},
	isObject: function (A) {
		if (A != null && typeof A == "object") {
			return true
		} else {
			return false
		}
	},
	isNotNull: function (A) {
		if (A != null && typeof A != undefined && typeof A != null) {
			return true
		} else {
			return false
		}
	},
	isNotEmpty: function (A) {
		if (A != null && typeof A != undefined && A !== "") {
			return true
		} else {
			return false
		}
	},
	isUrl: function (A) {
		if (typeof A == "" && A.indexOf("/")) {
			return true
		} else {
			return false
		}
	},
	isArray: function (A) {
		if (typeof A === "object" && typeof A.slice === "function" && typeof A.sort === "function" && typeof A.length === "number" && !A.propertyIsEnumerable(A.length)) {
			return true
		} else {
			return false
		}
	},
	isNumber: function (A) {
		return (parseFloat(A) == A)
	}
};
var SeeUtils = {
	getPageY: function (A) {
		return A.y ? A.y : A.pageY
	},
	getPageX: function (A) {
		return A.x ? A.x : A.pageX
	},
	trim: function (E) {
		var C = E.toCharArray();
		var A = 0;
		var D = C.length;
		for (var B = 0; B < C.length; B++) {
			var F = C[B];
			if (F == " ") {
				A++
			} else {
				break
			}
		}
		if (A == E.length) {
			return ""
		}
		for (var B = C.length; B > 0; B--) {
			var F = C[B - 1];
			if (F == " ") {
				D--
			} else {
				break
			}
		}
		return E.substring(A, D)
	},
	eventHandler: {},
	beforeEL: function (B, A) {
		B = SeeUtils.getElObj(B);
		A = SeeUtils.getElObj(A);
		$(B).before(A)
	},
	afterEL: function (B, A) {
		B = SeeUtils.getElObj(B);
		A = SeeUtils.getElObj(A);
		$(B).after(A)
	},
	executeCusEvent: function (D, C) {
		if (AssertUtils.isNotEmpty((D))) {
			var B = D.split(";");
			for (var A = 0; A < B.length; A++) {
				if (typeof SeeUtils.eventHandler[B[A]] == "function") {
					SeeUtils.eventHandler[B[A]](C)
				}
			}
		}
	},
	isVisible: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (A.style.display != "none") {
				return true
			}
		}
		return false
	},
	getLabel: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			return A.innerText
		} else {
			return ""
		}
	},
	executeMouseenter: function (B) {
		B = SeeUtils.getElObj(B);
		var A = SeeUtils.getAttrEl(B, "mouseenterid");
		SeeUtils.executeCusEvent(A, B)
	},
	executeMouseleave: function (B) {
		B = SeeUtils.getElObj(B);
		var A = SeeUtils.getAttrEl(B, "mouseleaveid");
		SeeUtils.executeCusEvent(A, B)
	},
	executeClick: function (A) {
		A = SeeUtils.getElObj(A);
		SeeUtils.triggerClick(A)
	},
	toggleClass: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (SeeUtils.hasClass(A, B)) {
			SeeUtils.removeClass(A, B)
		} else {
			SeeUtils.addClass(A, B)
		}
	},
	triggerClick: function (B) {
		if (B.click) {
			B.click()
		} else {
			try {
				var A = document.createEvent("Event");
				A.initEvent("click", true, true);
				B.dispatchEvent(A)
			} catch (C) {}
		}
	},
	isOpera: (navigator.userAgent.indexOf("Opera") > -1),
	isFF: (navigator.userAgent.indexOf("Firefox") > -1),
	isSafari: (navigator.userAgent.indexOf("Safari") > -1),
	isIE: (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0),
	isIE6: (window.XMLHttpRequest == null && navigator.userAgent.indexOf("MSIE") >= 0),
	isIE7: (navigator.userAgent.indexOf("MSIE 7.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE8: (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 8\.0/i.test(navigator.userAgent) || (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 7\.0/i.test(navigator.userAgent),
	isIE9: (navigator.userAgent.indexOf("MSIE 9.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE10: (navigator.userAgent.indexOf("MSIE 10.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE11: (navigator.userAgent.indexOf("MSIE 11.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0 || navigator.userAgent.indexOf("rv:11.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	getElObj: function (B, A) {
		if (B != null) {
			if (A != null) {
				if (typeof B == "string" || typeof B == "number") {
					B = A.document.getElementById(B + "")
				}
			} else {
				if (typeof B == "string" || typeof B == "number") {
					B = document.getElementById(B + "")
				}
			}
			return B
		} else {
			return null
		}
	},
	getSizeById: function (B, A) {
		var C = null;
		if (A != null) {
			C = A.document.getElementById(B)
		} else {
			C = document.getElementById(B)
		}
		if (C != null) {
			return 1
		} else {
			return 0
		}
	},
	eachChildren: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			for (var C = 0; C < B.children.length; C++) {
				if (A != null && AssertUtils.isFunction(A)) {
					A(B.children[C])
				}
			}
			return B.children
		}
		return []
	},
	eachAllSonElsByClass: function (F, H) {
		function G(N, L) {
			var K = N.childNodes;
			for (var J = 0; J < K.length; J++) {
				var M = K[J];
				if (M != null) {
					L.push(M);
					G(M, L)
				}
			}
		}
		var C = [];
		var B = SeeUtils.getByClass(document, F);
		for (var D = 0; D < B.length; D++) {
			var E = B[D];
			C.push(E);
			G(E, C)
		}
		for (var A = 0; A < C.length; A++) {
			var I = C[A];
			typeof H == "function" && H(I, A)
		}
	},
	siblings: function (B, E, F) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = [];
		var A = [];
		if (!B.parentNode) {
			return C
		}
		A = B.parentNode.childNodes;
		for (var D = 0; D < A.length; D++) {
			if (A[D] != B && A[D].nodeType === 1 && B.tagName === E.toUpperCase()) {
				C.push(A[D]);
				if (AssertUtils.isFunction(F)) {
					F(A[D])
				}
			}
		}
	},
	getSizeByClass: function (C, A) {
		if (A != null) {
			var B = SeeUtils.getByClass(A.document, C);
			return B.length
		} else {
			return SeeUtils.getByClass(document, C).length
		}
	},
	getFirstElByClass: function (D, B, A) {
		var C = [];
		if (B != null) {
			C = SeeUtils.getByClass(B.document, D)
		} else {
			if (A == null) {
				A = document
			}
			C = SeeUtils.getByClass(A, D)[0]
		}
		if (C.length > 0) {
			return C[0]
		}
	},
	removeElByClass: function (B, A) {
		if (A != null) {
			return SeeUtils._removeElByClass(A.document, B)
		} else {
			return SeeUtils._removeElByClass(document, B)
		}
	},
	_removeElByClass: function (D, B) {
		var E = [];
		var C = SeeUtils.getByClass(D, B);
		if (B.indexOf(".") == 0) {
			B = B.substring(1, B.length)
		}
		for (var A = 0; A < C.length; A++) {
			if (C[A].className != null && C[A].className.indexOf(B) >= 0) {
				SeeUtils.removeEl(C[A])
			}
		}
	},
	_getObjType: function (A) {
		switch (A.constructor) {
		case Object:
			return "Object";
			break;
		case Array:
			return "Array";
			break;
		case NodeList:
			return "NodeList";
			break;
		default:
			return "null";
			break
		}
	},
	each: function (A, D) {
		var C = SeeUtils._getObjType(A);
		if (C === "Array" || C === "NodeList") {
			[].every.call(A, function (E, F) {
				return D.call(E, F, E) === false ? false : true
			})
		} else {
			if (C === "Object") {
				for (var B in A) {
					if (D.call(A[B], B, A[B]) === false) {
						break
					}
				}
			}
		}
	},
	getElByTag: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			var C = B.getElementsByTagName(A);
			return C
		}
		return []
	},
	_getParents: function (C, A, B) {
		if (A != null) {
			if (SeeUtils.hasClass(A, B)) {
				C.push(A)
			}
		}
		if (A != null) {
			SeeUtils._getParents(C, A.parentNode, B)
		}
	},
	getParentsByClass: function (C, B) {
		if (B.indexOf(".") == 0) {
			B = B.substring(1, B.length)
		}
		var A = [];
		SeeUtils._getParents(A, C, B);
		return A
	},
	_closestEl: function (B, A) {
		if (B != null) {
			if (B.tagName === A.toUpperCase()) {
				return B
			} else {
				return SeeUtils._closestEl(B.parentNode, A)
			}
		}
		return null
	},
	_closestElByClass: function (B, A) {
		if (B != null) {
			if (SeeUtils.hasClass(B, A)) {
				return B
			} else {
				return SeeUtils._closestElByClass(B.parentNode, A)
			}
		}
		return null
	},
	closestByClass: function (C, B) {
		var A = (B + "").split(".");
		var B = A[0];
		if (A.length > 0) {
			B = A[1]
		}
		C = SeeUtils.getElObj(C);
		if (C != null) {
			return SeeUtils._closestElByClass(C.parentNode, B)
		}
		return null
	},
	closestByTagName: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			if (B.tagName === A.toUpperCase()) {
				return B
			}
			return SeeUtils._closestEl(B.parentNode, A)
		}
		return null
	},
	eachElsByTagAndProp: function (A, C, F, B, E) {
		var I = [];
		A = SeeUtils.getElObj(A);
		if (A != null) {
			var D = SeeUtils.getElByTag(A, C);
			for (var G = 0; G < D.length; G++) {
				var H = D[G];
				if (SeeUtils.getAttrEl(H, F) === B) {
					I.push(H);
					if (E != null && AssertUtils.isFunction(E)) {
						E(H, G)
					}
				}
			}
		}
		return I
	},
	getCheckedInpus: function (D) {
		var A = [];
		D = SeeUtils.getElObj(D);
		if (D != null) {
			var E = SeeUtils.getElByTag(D, "input");
			for (var B = 0; B < E.length; B++) {
				var C = E[B];
				if (C.checked) {
					A.push(C)
				}
			}
		}
		return A
	},
	getNextEl: function (B) {
		var A = null;
		if (SeeUtils.isIE8) {
			A = B.nextSibling
		} else {
			A = B.nextElementSibling
		}
		if (A) {
			if (A.nodeType === 1) {
				return A
			}
		} else {
			return null
		}
	},
	getPrevEle: function (A) {
		var B = A.previousSibling;
		if (B) {
			if (B.nodeType === 1) {
				return B
			}
			if (B.previousSibling) {
				return arguments.callee(B)
			}
		} else {
			return null
		}
	},
	eachBySiblings: function (B, E) {
		var C = [];
		var A = [];
		if (!B.parentNode) {
			return C
		}
		A = B.parentNode.childNodes;
		for (var D = 0; D < A.length; D++) {
			if (A[D] != B && A[D].nodeType === 1) {
				C.push(A[D]);
				if (AssertUtils.isFunction(E)) {
					E(A[D])
				}
			}
		}
		return C
	},
	eachByTag: function (D, B, F) {
		var C = SeeUtils.getElByTag(D, B);
		for (var E = 0; E < C.length; E++) {
			var A = C[E];
			typeof F == "function" && F(A, E)
		}
	},
	eachByClass: function (D, B, E) {
		var C = SeeUtils.getByClass(D, B);
		for (var A = 0; A < C.length; A++) {
			typeof E == "function" && E(C[A], A)
		}
	},
	getByClass: function (C, B) {
		C = SeeUtils.getElObj(C);
		if (C == null) {
			return []
		}
		if (B.indexOf(".") != 0) {
			B = "." + B
		}
		if (C == null) {
			return []
		}
		if (B.indexOf(".") != 0) {
			B = "." + B
		}
		var A = C.querySelectorAll(B);
		return A
	},
	hasClass: function (C, B) {
		C = SeeUtils.getElObj(C);
		if (C == null) {
			return void(0)
		}
		if (C.className != null) {
			var A = C.className.match(new RegExp("(\\s|^)" + B + "(\\s|$)"));
			if (A == null) {
				return false
			} else {
				return true
			}
		} else {
			return false
		}
	},
	addClass: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		if (!SeeUtils.hasClass(B, A)) {
			B.className += " " + A
		}
	},
	removeClass: function (C, A) {
		C = SeeUtils.getElObj(C);
		if (SeeUtils.hasClass(C, A)) {
			var B = new RegExp("(\\s|^)" + A + "(\\s|$)");
			C.className = C.className.replace(B, " ")
		}
	},
	getInnerWidth: function (A) {
		var B = parseFloat(SeeUtils.getElWidth(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingLeft"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingRight")));
		return B
	},
	getOuterWidth: function (A) {
		var B = parseFloat(SeeUtils.getElWidth(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderLeftWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderRightWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingLeft"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingRight")));
		return B
	},
	getInnerHeight: function (A) {
		var B = parseFloat(SeeUtils.getElHeight(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingTop"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingBottom")));
		return B
	},
	getOuterHeight: function (A) {
		var B = parseFloat(SeeUtils.getElHeight(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderTopWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderBottomWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingTop"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingBottom")));
		return B
	},
	getElWidth: function (B) {
		B = SeeUtils.getElObj(B);
		if (B != null && SeeUtils.isShow(B)) {
			if (B.style.width != null && B.style.width.length > 0 && B.style.width != "auto" && (B.style.width + "").indexOf("%") == -1) {
				return parseFloat(B.style.width)
			}
			if (parseFloat(SeeUtils._getStyleValue(B, "width")) > 0 && SeeUtils._getStyleValue(B, "width").indexOf("%") == -1) {
				return parseFloat(SeeUtils._getStyleValue(B, "width"))
			}
			if (B.offsetWidth > 0) {
				var A = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderLeftWidth"));
				var G = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderRightWidth"));
				var D = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingLeft"));
				var H = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingRight"));
				var F = parseFloat(B.offsetWidth) - parseFloat(A) - parseFloat(G) - parseFloat(D) - parseFloat(H);
				return parseFloat(F)
			}
			return 0
		} else {
			if (B != null) {
				var C = B.getAttribute("style");
				SeeUtils.attrEl(B, "style", "visibility:hidden;display:inline-block !important;" + C);
				var E = SeeUtils.getElWidth(B);
				SeeUtils.attrEl(B, "style", C);
				return Math.ceil(E)
			} else {
				return 0
			}
		}
	},
	getDocumentHeight: function () {
		return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
	},
	getDocumentWidth: function () {
		return document.documentElement.scrollWidth
	},
	getStyle: function (B, A) {
		if (window.getComputedStyle) {
			return window.getComputedStyle(B)[A]
		} else {
			return B.currentStyle[A]
		}
	},
	getElOffest: function (E) {
		E = SeeUtils.getElObj(E);
		function G(N) {
			return N != null && N == N.window
		}
		function B(N) {
			return G(N) ? N : N.nodeType === 9 ? N.defaultView || N.parentWindow : false
		}
		var C,
		J,
		K,
		H,
		L,
		A,
		F,
		I = {
			top: 0,
			left: 0
		},
		D = E,
		M = D && D.ownerDocument;
		if (!M) {
			return
		}
		if ((J = M.body) === D) {
			return SeeUtils.bodyOffset(D)
		}
		C = M.documentElement;
		if (typeof D.getBoundingClientRect !== "undefined") {
			I = D.getBoundingClientRect()
		}
		K = B(M);
		H = C.clientTop || J.clientTop || 0;
		L = C.clientLeft || J.clientLeft || 0;
		A = K.pageYOffset || C.scrollTop;
		F = K.pageXOffset || C.scrollLeft;
		return {
			top: I.top + A - H,
			left: I.left + F - L
		}
	},
	offset: function (C) {
		var B = 0,
		A = 0;
		while (C.offsetParent) {
			B += C.offsetTop;
			A += C.offsetLeft;
			C = C.offsetParent
		}
		return {
			top: B,
			left: A
		}
	},
	bodyOffset: function (A) {
		var C = A.offsetTop,
		B = A.offsetLeft;
		return {
			top: C,
			left: B
		}
	},
	getWidthByClass: function (C, A) {
		var B = SeeUtils.getByClass(A.document, C);
		if (B.length > 0) {
			return SeeUtils.getElWidth(B[0])
		} else {
			return 0
		}
	},
	getClassElWidth: function (C, B) {
		var A = SeeUtils.getByClass(document.getElementById(C), B);
		if (A.length > 0) {
			return SeeUtils.getElWidth(A[0])
		} else {
			return 0
		}
	},
	getAllWidth: function (D, C) {
		var E = 0;
		var B = SeeUtils.getByClass(document.getElementById(D), C);
		if (B.length > 0) {
			for (var A = 0; A < B.length; A++) {
				E += SeeUtils.getElWidth(B[A])
			}
		}
		return E
	},
	_getStyleValue: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (!B.nodeType) {
			return void(0)
		}
		var C = B.ownerDocument.defaultView;
		if (!C || !C.opener) {
			C = window
		}
		if (B.currentStyle) {
			return B.currentStyle[A]
		} else {
			if (C.getComputedStyle != null) {
				return C.getComputedStyle(B)[A]
			}
		}
	},
	isShow: function (A) {
		A = SeeUtils.getElObj(A);
		var B = SeeUtils._getStyleValue(A, "display");
		if (B === "none") {
			return false
		} else {
			return true
		}
	},
	indexByTag: function (E, C, D) {
		var F = SeeUtils.getElByTag(E, C);
		for (var B = 0; B < F.length; B++) {
			var A = F[B];
			if (A == D) {
				return B
			}
		}
		return -1
	},
	getElHeight: function (B) {
		B = SeeUtils.getElObj(B);
		if (B != null && SeeUtils.isShow(B)) {
			if (B.style.height != null && B.style.height.length > 0 && B.style.height != "auto" && (B.style.height + "").indexOf("%") == -1) {
				return parseFloat(B.style.height)
			}
			if ((SeeUtils._getStyleValue(B, "height") + "").indexOf("%") == -1 && parseFloat(SeeUtils._getStyleValue(B, "height")) > 0) {
				return parseFloat(SeeUtils._getStyleValue(B, "height"))
			}
			if (B.offsetHeight > 0) {
				var H = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderTopWidth"));
				var E = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderBottomWidth"));
				var F = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingTop"));
				var G = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingBottom"));
				var D = parseFloat(B.offsetHeight) - parseFloat(H) - parseFloat(E) - parseFloat(F) - parseFloat(G);
				return parseFloat(D)
			}
			return 0
		} else {
			if (B != null) {
				var C = B.getAttribute("style");
				SeeUtils.attrEl(B, "style", "visibility:hidden;display:block !important;" + C);
				var A = SeeUtils.getElHeight(B);
				SeeUtils.attrEl(B, "style", C);
				return A
			} else {
				return 0
			}
		}
	},
	setElWidth: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null && AssertUtils.isNotEmpty(B)) {
			if ((B + "").indexOf("%") > 0 || B === "auto") {
				A.style.width = B
			} else {
				if (!isNaN(B)) {
					A.style.width = parseFloat(B) + "px"
				}
			}
		}
	},
	innerHTMl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (SeeUtils.isIE8 || SeeUtils.isIE9) {
				$(A).html(B)
			} else {
				A.innerHTML = B
			}
		}
	},
	setElHeight: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null && AssertUtils.isNotEmpty(A)) {
			if ((A + "").indexOf("%") > 0 || A === "auto") {
				B.style.height = A
			} else {
				if (parseFloat(A) >= 0) {
					B.style.height = parseFloat(A) + "px"
				}
			}
		}
	},
	insertAfter: function (E, B) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = B.parentNode;
		if (C.lastChild == B) {
			if (typeof E === "string") {
				var A = document.createElement("div");
				A.innerHTML = E;
				var D = document.createDocumentFragment();
				while (A.firstChild) {
					D.appendChild(A.firstChild)
				}
				C.appendChild(D)
			} else {
				C.appendChild(E)
			}
		} else {
			if (typeof E === "string") {
				var A = document.createElement("div");
				A.innerHTML = E;
				var D = document.createDocumentFragment();
				while (A.firstChild) {
					D.appendChild(A.firstChild)
				}
				C.insertBefore(D, B.nextSibling)
			} else {
				C.insertBefore(E, B.nextSibling)
			}
		}
	},
	insertBefore: function (E, B) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = B.parentNode;
		if (typeof E === "string") {
			var A = document.createElement("div");
			A.innerHTML = E;
			var D = document.createDocumentFragment();
			while (A.firstChild) {
				D.appendChild(A.firstChild)
			}
			C.insertBefore(D, B)
		} else {
			C.insertBefore(E, B)
		}
	},
	appendToBody: function (C, A) {
		var E = null;
		if (A != null) {
			E = A.document.getElementsByTagName("body")
		} else {
			E = document.getElementsByTagName("body")
		}
		if (typeof C === "string") {
			var B = document.createElement("div");
			B.innerHTML = C;
			var D = document.createDocumentFragment();
			while (B.firstChild) {
				D.appendChild(B.firstChild)
			}
			E[0].appendChild(D);
			return D
		} else {
			E[0].appendChild(C);
			return C
		}
	},
	getNumber: function (A) {
		A = parseFloat(A);
		if (AssertUtils.isNumber(A)) {
			return A
		} else {
			return 0
		}
	},
	prependToBody: function (B, A, C) {
		var D = null;
		if (A != null) {
			D = A.document.getElementsByTagName("body")
		} else {
			D = document.getElementsByTagName("body")
		}
		if (D[0].childNodes.length > 0 && C !== true) {
			if (typeof B === "string") {
				SeeUtils.prepend(B, D[0])
			} else {
				D[0].insertBefore(B, D[0].childNodes[0])
			}
		} else {
			D[0].appendChild(B)
		}
	},
	removeChild: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A == null) {
			return void(0)
		}
		if (B != null) {
			A.removeChild(B)
		}
	},
	showHide: function (A, K) {
		var I = {
			BODY: "block"
		};
		var E,
		H = null;
		function J(P) {
			if (I[P]) {
				return I[P]
			}
			var O = SeeUtils.getUUid();
			var N = SeeUtils.appendToBody("<" + P + " id='" + O + "'>");
			G = SeeUtils._getStyleValue(O, "display");
			SeeUtils.removeEl(O);
			if (G === "none" || G === "") {
				var M = document.createElement("iframe");
				M.style.frameBorder = 0;
				M.style.width = 0;
				M.style.height = 0;
				SeeUtils.appendToBody(M);
				if (!H || !E.createElement) {
					H = (E.contentWindow || E.contentDocument).document;
					H.write("<!doctype html><html><body>");
					H.close()
				}
				D = H.body.appendChild(H.createElement(P));
				G = SeeUtils._getStyleValue(D, "display");
				document.body.removeChild(E)
			}
			I[P] = G;
			return G
		}
		function B(N, M) {
			N = M || N;
			return SeeUtils._getStyleValue(N, "display") === "none"
		}
		var D,
		G,
		L = [],
		F = 0,
		C = A.length;
		for (; F < C; F++) {
			D = A[F];
			if (!D.style) {
				continue
			}
			if (K) {
				if (!L[F] && D.style.display === "none") {
					D.style.display = ""
				}
				if (D.style.display === "" && B(D)) {
					L[F] = J(D.nodeName)
				}
			}
		}
		for (F = 0; F < C; F++) {
			D = A[F];
			if (!D.style) {
				continue
			}
			if (!K || D.style.display === "none" || D.style.display === "") {
				D.style.display = K ? L[F] || "" : "none"
			}
		}
		return A
	},
	showEl: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			return SeeUtils.showHide([B], true)
		}
	},
	getElVal: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			return B.value
		}
	},
	setElVal: function (A, C) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.value = C
		}
	},
	hideEl: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.style.display = "none"
		}
	},
	text: function (A, C) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.innerText = C
		}
	},
	showElByClass: function (C) {
		var B = SeeUtils.getByClass(document, C);
		if (B.length > 0) {
			for (var A = 0; A < B.length; A++) {
				SeeUtils.showEl(B[A])
			}
		}
	},
	hideElByClass: function (D, A) {
		var C = [];
		if (A != null) {
			C = SeeUtils.getByClass(A.document, D)
		} else {
			C = SeeUtils.getByClass(document, D)
		}
		if (C.length > 0) {
			for (var B = 0; B < C.length; B++) {
				SeeUtils.hideEl(C[B])
			}
		}
	},
	getElByTagAndIndex: function (E, C, A) {
		var D = SeeUtils.getElByTag(E, C);
		for (var F = 0; F < D.length; F++) {
			var B = D[F];
			if (parseFloat(A) === F) {
				return B
			}
		}
		return null
	},
	removeEl: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (A.parentNode) {
				A.parentNode.removeChild(A)
			}
		}
	},
	html: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			B.innerHTML = A
		}
	},
	attrByClass: function (D, F, E, A) {
		var C = null;
		if (A != null) {
			C = SeeUtils.getByClass(A.document, D)
		} else {
			C = SeeUtils.getByClass(document, D)
		}
		if (C.length > 0) {
			for (var B = 0; B < C.length; B++) {
				SeeUtils.attrEl(C[B], F, E)
			}
		}
	},
	removeAttrEl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			A.removeAttribute(B)
		}
	},
	attrEl: function (A, C, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			A.setAttribute(C, B)
		}
		if (A != null && C === "value" && A.tagName === "INPUT") {
			A.value = B
		}
	},
	getAttrEl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			return A.getAttribute(B)
		}
	},
	cssByClass: function (E, F, B, A) {
		var D = null;
		if (A != null) {
			D = SeeUtils.getByClass(A.document, E)
		} else {
			D = SeeUtils.getByClass(document, E)
		}
		if (D.length > 0) {
			for (var C = 0; C < D.length; C++) {
				SeeUtils.css(D[C], F, B)
			}
		}
	},
	getCss: function (A, D) {
		var C = SeeUtils.getElObj(A);
		var B = null;
		if (C != null) {
			B = C.style[D];
			if (!AssertUtils.isNotEmpty(B)) {
				B = SeeUtils._getStyleValue(C, D)
			}
		}
		return B
	},
	css: function (C, F, B, A) {
		var D = SeeUtils.getElObj(C, A);
		if (D != null && B != null && (B + "").indexOf("undefined") < 0) {
			B = B + "";
			if (F == "width" || F == "height" || F == "left" || F == "right" || F == "top" || F == "bottom" || F == "maxWidth" || F == "maxHeight") {
				if (B != null && B.length > 0 && B.indexOf("%") < 0 && B != "auto" && B != "none") {
					B = (B + "").split("px")[0] + "px"
				}
			}
			if (B != null) {
				try {
					D.style[F] = B
				} catch (E) {}
			}
		}
		return this
	},
	cssByJson: function (C, B, A) {
		var D = SeeUtils.getElObj(C, A);
		if (D != null) {
			for (var E in B) {
				SeeUtils.css(C, E, B[E])
			}
		}
	},
	prepend: function (D, B) {
		var C = SeeUtils.getElObj(B);
		if (C.childNodes[0] != null) {
			if (C == null || D == null) {
				return void(0)
			}
			if (typeof D === "string") {
				var A = document.createElement("div");
				A.innerHTML = D;
				var E = document.createDocumentFragment();
				while (A.firstChild) {
					C.insertBefore(A.firstChild, C.childNodes[0])
				}
				C.insertBefore(E, C.childNodes[0])
			} else {
				C.insertBefore(D, C.childNodes[0])
			}
		} else {
			SeeUtils.appendTo(D, B)
		}
	},
	appendTo: function (D, B) {
		var C = SeeUtils.getElObj(B);
		if (C == null || D == null) {
			return void(0)
		}
		if (typeof D === "string") {
			var A = document.createElement("div");
			A.innerHTML = D;
			var E = document.createDocumentFragment();
			while (A.firstChild) {
				E.appendChild(A.firstChild)
			}
			C.appendChild(E)
		} else {
			if (C.nodeType === 1 || C.nodeType === 11) {
				if (D instanceof jQuery) {
					if (D.get(0) != null) {
						C.appendChild(D.get(0))
					}
				} else {
					C.appendChild(D)
				}
			}
		}
	},
	getUUid: function () {
		function A() {
			return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1)
		}
		return ("id_" + A() + A() + "-" + A() + "-" + A() + "-" + A() + "-" + A() + A() + A())
	},
	addEvent: function (B, C, A) {
		B = SeeUtils.getElObj(B);
		if (B != null && typeof B == "object") {
			if (B.attachEvent) {
				if (C != null && C.indexOf("on") < 0) {
					C = "on" + SeeUtils.changeFirstCharToLow(C)
				}
				B.attachEvent(C, A)
			} else {
				if (B.addEventListener) {
					B.addEventListener(C, A, false)
				}
			}
		}
	},
	removeEvent: function (B, C, A) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		if (A == null) {
			A = function () {}
		}
		if (B.detachEvent) {
			if (C != null && C.indexOf("on") < 0) {
				C = "on" + SeeUtils.changeFirstCharToLow(C)
			}
			B.detachEvent(C, A)
		} else {
			if (B.removeEventListener) {
				B.removeEventListener(C, A, false)
			}
		}
	},
	changeFirstCharToUpp: function (C) {
		var B = C.substring(0, 1);
		var A = C.substring(1);
		C = B.toUpperCase() + A;
		return C
	},
	changeFirstCharToLow: function (C) {
		if (AssertUtils.isNotEmpty(C)) {
			var B = C.substring(0, 1);
			var A = C.substring(1);
			C = B.toLowerCase() + A;
			return C
		}
	},
	getWindowHeight: function () {
		if (window.innerHeight != undefined) {
			return window.innerHeight
		} else {
			var C = document.body,
			A = document.documentElement;
			return Math.min(A.clientHeight, C.clientHeight)
		}
	},
	ready: function (A) {
		if (document.addEventListener) {
			document.addEventListener("DOMContentLoaded", function () {
				document.removeEventListener("DOMContentLoaded", arguments.callee, false);
				A()
			}, false)
		} else {
			if (document.attachEvent) {
				document.attachEvent("onreadystatechange", function () {
					if (document.readyState == "complete") {
						document.detachEvent("onreadystatechange", arguments.callee);
						A()
					}
				})
			}
		}
	},
	addNodeToHeader: function (B) {
		var A = document.getElementsByTagName("HEAD").item(0);
		A.appendChild(B)
	},
	addCssToHeader: function (A) {
		var C = document.getElementsByTagName("HEAD").item(0);
		var B = document.createElement("link");
		B.type = "text/css";
		B.href = A;
		B.setAttribute("rel", "stylesheet");
		C.appendChild(B)
	},
	getHttpRequest: function () {
		if (window.XMLHttpRequest) {
			return new XMLHttpRequest()
		} else {
			if (window.ActiveXObject) {
				return new ActiveXObject("MsXml2.XmlHttp")
			}
		}
	},
	includeJS: function (B, A, E) {
		if ((E != null) && (!document.getElementById(B))) {
			var D = document.getElementsByTagName("HEAD").item(0);
			var C = document.createElement("script");
			C.type = "text/javascript";
			C.id = B;
			C.text = E;
			D.appendChild(C)
		}
	},
	ajaxPage: function (B, A) {
		var C = SeeUtils.getHttpRequest();
		C.onreadystatechange = function () {
			if (C.readyState == 4) {
				SeeUtils.includeJS(B, A, C.responseText)
			}
		};
		C.open("GET", A, false);
		C.send(null)
	},
	addScriptToHeader: function (F, G, B, C) {
		if (B) {
			SeeUtils.ajaxPage(C, F)
		} else {
			var E = document.getElementsByTagName("HEAD").item(0);
			var D = document.createElement("script");
			D.type = "text/javascript";
			D.src = F;
			var A = false;
			if (G != null) {
				D.onload = D.onreadystatechange = function () {
					if (!A && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) {
						A = true;
						G()
					}
				}
			}
			E.appendChild(D)
		}
	},
	extend: (function () {
		var C = function (F) {
			var G = Object.prototype.toString;
			return function () {
				return G.call(arguments[0]) === "[object " + F + "]"
			}
		};
		var A = C("Object"),
		B = C("Array"),
		D = C("Boolean");
		return function E() {
			var L = 0,
			K = false,
			I,
			G,
			M,
			F,
			J;
			if (D(arguments[0])) {
				L = 1;
				K = arguments[0]
			}
			for (J = arguments.length - 1; J > L; J--) {
				M = arguments[J - 1];
				F = arguments[J];
				if (A(F) || B(F)) {
					for (var N in F) {
						I = F[N];
						if (K && (A(I) || B(I))) {
							G = A(I) ? {}
							 : [];
							var H = E(K, G, I);
							M[N] = H
						} else {
							M[N] = F[N]
						}
					}
				} else {
					M = F
				}
			}
			return M
		}
	})()
};
var plist = null;
var printObj = {};
function printCap4(B, E, D) {
	printObj = D;
	var C = new ArrayList();
	C.add({
		dataName: "\u6807\u9898",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u53d1\u8d77\u8005\u4fe1\u606f",
		dataHtml: "",
		hide: true
	});
	if (AssertUtils.isNotEmpty(B)) {
		C.add({
			dataName: "\u6b63\u6587",
			dataHtml: B
		})
	} else {
		C.add({
			dataName: "\u6b63\u6587",
			dataHtml: window.window.location.href,
			hide: true
		})
	}
	C.add({
		dataName: "\u9644\u4ef6",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u5173\u8054\u6587\u6863",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u539f\u534f\u540c\u610f\u89c1",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u53d1\u8d77\u4eba\u9644\u8a00",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u5904\u7406\u4eba\u610f\u89c1\u533a",
		dataHtml: "",
		hide: true
	});
	plist = C;
	var A = _ctxPath + "/common/print/captPrintForm.jsp?printType=cap4Print";
	A += "&printUrl=" + B;
	window.open(A)
}
function inputChange(B, C, A) {
	this.obj = B;
	this.color = A;
	if (B.val() == "") {
		if (!(this.color)) {
			this.color = "color_gray"
		}
	}
	this.text = C;
	if (!(this.text)) {
		this.text = "\u8bf7\u8f93\u5165\u5185\u5bb9"
	}
	this.change()
}
inputChange.prototype.change = function () {
	with (this) {
		check();
		obj.focus(function () {
			if (obj.hasClass(color)) {
				obj.removeClass(color).val("")
			}
		});
		obj.blur(function () {
			if (obj.val() == "") {
				obj.addClass(color).val(text)
			}
		})
	}
};
inputChange.prototype.check = function () {
	with (this) {
		if (obj.val() == "" || obj.val() == text) {
			obj.addClass(color).val(text)
		} else {
			obj.removeClass(color)
		}
	}
};
SeeUtils.ready(function () {
	SeeUtils.addEvent("condition", "change", function () {
		var A = SeeUtils.getElVal("condition");
		SeeUtils.hideElByClass(".condition_text");
		SeeUtils.showEl(A + "Div")
	})
});
function showHide(B, A) {
	B.click(function () {
		A.toggle()
	})
}
function _GoTo_Top_ClickFn(B, A) {
	var C = __GoTo_Top_Array__[A];
	if (C) {
		$("html,body").stop().animate({
			scrollTop: C._nGoToHeight
		}, "fast");
		$("#compontentHtml .content_view").stop().animate({
			scrollTop: C._nGoToHeight
		}, "fast")
	}
}
function _openSubImg() {
	SeeUtils.addClass("openOtherMenu", "goToOtherMenuHover");
	SeeUtils.getElObj("_subImgMenu").style.display = "inline";
	var B = SeeUtils.getAttrEl("_openTemp", "state");
	if (B != "false") {
		SeeUtils.showEl("_openTemp")
	}
	var A = SeeUtils.getAttrEl("_procssBook", "showBook");
	if (A == false || A === "false") {
		SeeUtils.removeEl("_procssBook");
		if (SeeUtils.isIE8) {
			SeeUtils.css("_subImgMenu", "width", "60px")
		}
	}
}
function _hideSubImg() {
	SeeUtils.removeClass("openOtherMenu", "goToOtherMenuHover");
	SeeUtils.getElObj("_subImgMenu").style.display = "none"
}
function colseProBookImg() {
	SeeUtils.attrEl("openOtherMenu", "oldRight", SeeUtils.getCss("openOtherMenu", "right"));
	SeeUtils.css("openOtherMenu", "right", "40px");
	SeeUtils.attrEl("_subImgMenu", "oldRight", SeeUtils.getCss("_subImgMenu", "right"));
	SeeUtils.css("_subImgMenu", "right", "63px");
	SeeUtils.attrEl("openOtherMenu", "close", "true");
	var A = SeeUtils.getByClass(document, "guanlian_msg");
	if (SeeUtils.getCss(A[0], "display") === "block") {
		SeeUtils.css("_procssBook_temp", "right", "395px")
	}
}
function openProBookImg() {
	if (SeeUtils.getAttrEl("openOtherMenu", "oldRight") != null) {
		SeeUtils.attrEl("openOtherMenu", "close", "false");
		SeeUtils.css("openOtherMenu", "right", SeeUtils.getAttrEl("openOtherMenu", "oldRight"));
		SeeUtils.css("_subImgMenu", "right", SeeUtils.getAttrEl("_subImgMenu", "oldRight"))
	} else {
		SeeUtils.attrEl("openOtherMenu", "close", "false");
		SeeUtils.css("openOtherMenu", "right", "360px");
		SeeUtils.css("_subImgMenu", "right", "385px")
	}
	var A = SeeUtils.getByClass(document, "guanlian_msg");
	if (SeeUtils.getCss(A[0], "display")) {
		SeeUtils.css("_procssBook_temp", "right", "703px")
	}
}
var __GoTo_Top_Array__ = {};
function _createImgMenu(H, G) {
	if (G.showRelData == null) {
		G.showRelData = true
	}
	var B = document.createElement("div");
	B.id = "_subImgMenu";
	B.className = "_subImgMenu";
	B.style.display = "none";
	var D = SeeUtils.getLabel("proBookTitle");
	var F = SeeUtils.getLabel("relDataTitle");
	var E = "<a id='_procssBook' title='" + D + "' showBook='" + G.showBook + "' class='procssBook'></a>";
	if (G.showRelData) {
		E += "<a title='" + F + "' id='_openTemp' class='openTemp guanlian'></a>"
	}
	B.innerHTML = E;
	B.style.marginLeft = (H / 2 - 82) + "px";
	SeeUtils.prependToBody(B);
	function C(I) {
		if (I.dataRelationShowFun != null) {
			I.dataRelationShowFun();
			SeeUtils.hideEl("openOtherMenu");
			SeeUtils.hideEl("_subImgMenu");
			if (I.showBook) {
				setTimeout(function () {
					var J = 703;
					if (SeeUtils.getCss("east", "display") === "none") {
						J = 347
					} else {
						if (SeeUtils.getAttrEl("openOtherMenu", "close") === "true") {
							J = J - 308
						}
					}
					if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
						J = J - 310
					}
					SeeUtils.appendToBody("<a id='_procssBook_temp' title='" + D + "' showBook='" + I.showBook + "' class='procssBook' style='position: absolute;top:46px;right:" + J + "px;'></a>");
					SeeUtils.addEvent("_procssBook_temp", "click", function () {
						if (openProcessInsBook != null) {
							openProcessInsBook()
						}
					})
				}, 200)
			}
		}
	}
	SeeUtils.addEvent("openOtherMenu", "click", function () {
		if (G.showRelData) {
			C(G)
		}
	});
	SeeUtils.addEvent("openOtherMenu", "mouseover", function () {
		_openSubImg("openOtherMenu")
	});
	if (G.showRelData) {
		SeeUtils.addEvent("_openTemp", "click", function () {
			C(G)
		})
	}
	var A = SeeUtils.getByClass(SeeUtils.getElObj("guanlian_info_div"), "guanlian");
	if (A != null && A.length > 0) {
		SeeUtils.addEvent(A[0], "click", function () {
			SeeUtils.showEl("openOtherMenu");
			SeeUtils.showEl("_openTemp");
			SeeUtils.css("_subImgMenu", "top", "5px");
			SeeUtils.removeEl("_procssBook_temp")
		})
	}
	if (G.showBook) {
		SeeUtils.addEvent("_procssBook", "click", function () {
			if (G.piShowFun != null) {
				G.piShowFun()
			}
		})
	}
	if (!G.showRelData) {
		SeeUtils.hideEl("_openTemp");
		SeeUtils.css("_procssBook", "position", "absolute");
		SeeUtils.css("_procssBook", "left", G.elItemWidth)
	} else {
		SeeUtils.css("_openTemp", "left", "0px");
		SeeUtils.css("_procssBook", "left", G.elItemWidth);
		SeeUtils.css("_procssBook", "position", "absolute");
		if (!G.showBook) {
			SeeUtils.css("_openTemp", "margin-left", G.elItemWidth)
		}
	}
	if (!G.showRelData && !G.showBook) {
		SeeUtils.hideEl("openOtherMenu")
	}
	SeeUtils.addEvent("openOtherMenu", "mouseleave", function () {
		_hideSubImg("openOtherMenu")
	});
	SeeUtils.addEvent("_subImgMenu", "mouseover", function () {
		_openSubImg("openOtherMenu")
	});
	SeeUtils.addEvent("_subImgMenu", "mouseleave", function () {
		_hideSubImg("openOtherMenu")
	})
}
function GoTo_Top(J) {
	if (J == null) {
		var J = {}
	}
	var I = "41px";
	J.elItemWidth = I;
	var H = J.id ? J.id : "GoTo_Top_" + Math.floor(Math.random() * 100000000);
	var A = SeeUtils.getWindowHeight();
	var D = J.btnClass ? J.btnClass : "GoTo_Top";
	var L = J.showHeight ? J.showHeight : A;
	var F = J.marginLeft ? J.marginLeft : 798;
	this._nGoToHeight = J.nGoToHeight ? J.nGoToHeight : 0;
	var K = J.sTitle ? J.sTitle : SeeUtils.getLabel("goToTop");
	if (J.id === "openOtherMenu") {
		K = SeeUtils.getLabel("proAss")
	}
	var E = this;
	if (D != null && D != "goToOtherMenu" && D != "GoTo_Top2") {
		var C = document.createElement("iframe");
		C.className = D + "_iframe";
		C.setAttribute("scrolling", "no");
		C.setAttribute("border", 0);
		if (D != "GoTo_Top") {
			C.style.marginLeft = (F / 2) + "px"
		}
		SeeUtils.prependToBody(C)
	}
	var B = document.createElement("a");
	B.id = H;
	B.className = D;
	B.setAttribute("href", "javascript:void(0)");
	B.setAttribute("title", K);
	if (D == "goToOtherMenu") {
		SeeUtils.prependToBody(B, null, true)
	} else {
		SeeUtils.prependToBody(B)
	}
	if (D == "goToReply") {
		B.style.display = "inline";
		B.style.bottom = "18px"
	} else {
		if (D == "goToOtherMenu") {
			B.style.display = "inline";
			_createImgMenu(F, J)
		}
	}
	SeeUtils.addEvent(H, "click", function () {
		_GoTo_Top_ClickFn(this, D)
	});
	var G = $(window);
	if (D == "GoTo_Top") {
		G.scroll(function () {
			if (G.scrollTop() > 0) {
				SeeUtils.showElByClass(".GoTo_Top");
				SeeUtils.showElByClass(".GoTo_Top_iframe")
			} else {
				SeeUtils.hideElByClass(".GoTo_Top");
				SeeUtils.hideElByClass(".GoTo_Top_iframe")
			}
		});
		$("#compontentHtml .content_view").scroll(function () {
			if ($(".content_view").scrollTop() > 0) {
				SeeUtils.showElByClass(".GoTo_Top");
				SeeUtils.showElByClass(".GoTo_Top_iframe")
			} else {
				SeeUtils.hideElByClass(".GoTo_Top");
				SeeUtils.hideElByClass(".GoTo_Top_iframe")
			}
		})
	}
	if (D != "goToOtherMenu") {
		__GoTo_Top_Array__[D] = this
	} else {
		SeeUtils.css(B, "z-index", 100);
		if (SeeUtils.getCss("east", "display") === "none") {
			SeeUtils.css(B, "right", "10px")
		} else {
			if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
				SeeUtils.css(B, "right", "40px")
			} else {
				SeeUtils.css(B, "right", "360px")
			}
		}
		if (SeeUtils.getCss("east", "display") === "none") {
			SeeUtils.css("_subImgMenu", "right", "28px")
		} else {
			if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
				SeeUtils.css("_subImgMenu", "right", "62px")
			} else {
				SeeUtils.css("_subImgMenu", "right", "385px")
			}
		}
		SeeUtils.css("_subImgMenu", "margin-left", "0px")
	}
	if (document.querySelector(".GoTo_Top2") != null) {
		SeeUtils.showElByClass(".GoTo_Top2");
		SeeUtils.showElByClass(".GoTo_Top2_iframe")
	}
}
GoTo_Top.prototype.setGoToHeight = function (A) {
	this._nGoToHeight = A
};
function getFirstDateOfWeek(A) {
	var B = new Date(A.getTime());
	if (A.getDay() == 0) {
		B.setDate(A.getDate() - 6)
	} else {
		B.setDate(A.getDate() - A.getDay() + 1)
	}
	return B
}
function getLastDateOfWeek(B) {
	var A = new Date(B.getTime());
	if (B.getDay() != 0) {
		A.setDate(B.getDate() + 6 - B.getDay() + 1)
	}
	return A
}
var MonHead = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function getLastDateOfMonth(A, B) {
	var C = MonHead[B - 1];
	if (B == 2 && IsPinYear(A)) {
		C++
	}
	return C
}
function IsPinYear(A) {
	return (0 == A % 4 && (A % 100 != 0 || A % 400 == 0))
}
function mouseBind(D, G, B, C, F, A) {
	function E(N) {
		var M = N || window.e;
		var K = M.target || M.srcElement;
		if (K.nodeType == 3) {
			K = K.parentNode
		}
		var H = D.offset();
		var J = K.style.height;
		if (H != null) {
			var L = G;
			if (G != null && G.get != null) {
				L = G.get(0)
			}
			var O = (N.clientX > H.left && N.clientX < (H.left + B.width) && N.clientY < (H.top + B.height) && N.clientY > (H.top - SeeUtils.getElHeight(L))) || (N.clientX > H.left && N.clientX < (H.left + D.width()) && N.clientY < (H.top + D.height()) && N.clientY > (H.top - SeeUtils.getElHeight(L)))
		}
		if (K != G && !O && K.id != C) {
			var I = B.hideDialog(F);
			if (I) {
				SeeUtils.removeEvent(document, "mouseover", E);
				if (AssertUtils.isNotNull(A)) {
					A()
				}
			}
		}
	}
	SeeUtils.addEvent(document, "mouseover", E)
}
function setAttachmentsLayoutHeight(M) {
	if (SeeUtils.isIE) {
		if (SeeUtils.isIE6) {
			var G = SeeUtils.getByClass(document, "affix_area");
			for (var I = 0; I < G.length; I++) {
				var K = G[I];
				if (parseFloat(K.style.height) > 34) {
					K.style.height = 34 + "px"
				}
			}
		}
	}
	var H = document.getElementById(M.fj_id);
	var J = document.getElementById(M.wd_id);
	var L = document.getElementById(M.layout_head_id);
	var D = document.getElementById(M.layout_body_id);
	var F = 0,
	E = 0,
	C = 0,
	A = 0,
	B = 20;
	C += SeeUtils.getClassElWidth(M.fj_id, "attachment_block_number");
	C += SeeUtils.getAllWidth(M.fj_id, "attachment_block");
	A += SeeUtils.getClassElWidth(M.wd_id, "attachment_block_number");
	A += SeeUtils.getAllWidth(M.wd_id, "attachment_block");
	if (C > SeeUtils.getElWidth(H)) {
		E += 2
	} else {
		if (C > B) {
			E += 1
		}
	}
	if (A > SeeUtils.getElWidth(J)) {
		E += 2
	} else {
		if (A > B) {
			E += 1
		}
	}
	SeeUtils.setElHeight(L, SeeUtils.getElHeight(D) + E * 17);
	if (AssertUtils.isNotEmpty(SeeUtils.getCss(D, "top"))) {
		SeeUtils.css(D, "top", parseFloat(SeeUtils.getCss(D, "top")) + E * 17 + "px")
	}
}
function set_select_val(A, C) {
	if (SeeUtils.isIE6) {
		setTimeout(function () {
			A.val(C)
		}, 1)
	} else {
		try {
			A.val(C)
		} catch (B) {
			setTimeout(function () {
				A.val(C)
			}, 1)
		}
	}
};
function _clearIframeContent(E, D, A, B) {
	if (E === D.type[2]) {
		try {
			var C = SeeUtils.getElObj("layui-layer-iframe" + A);
			C.src = "about:blank";
			SeeUtils.eachByClass(B, "layui-layer-content", function (G) {
				SeeUtils.removeChild(G, C)
			})
		} catch (F) {}
	}
}
function __getIframeDialogNumbers() {
	var D = document.querySelectorAll(".layui-layer");
	var C = [];
	for (var B = 0; B < D.length; B++) {
		var A = D[B];
		if (SeeUtils.hasClass(A, "layui-layer-iframe")) {
			C.push(A)
		}
	}
	return C
}
!function (window, undefined) {
	var winBtnClickName = "";
	"use strict";
	var isLayui = window.layui && layui.define,
	$,
	win,
	ready = {
		getPath: function () {
			var js = document.scripts,
			script = js[js.length - 1],
			jsPath = script.src;
			if (script.getAttribute("merge")) {
				return
			}
			return jsPath.substring(0, jsPath.lastIndexOf("/seeyon/") + 1)
		}
		(),
		config: {},
		end: {},
		minIndex: 0,
		minLeft: [],
		btn: ["&#x786E;&#x5B9A;", "&#x53D6;&#x6D88;"],
		type: ["dialog", "page", "iframe", "loading", "tips"]
	};
	var layer = {
		v: "3.0.1",
		ie: function () {
			var agent = navigator.userAgent.toLowerCase();
			return (!!window.ActiveXObject || "ActiveXObject" in window) ? ((agent.match(/msie\s(\d+)/) || [])[1] || "11") : false
		}
		(),
		index: (window.layer && window.layer.v) ? 100000 : 0,
		path: ready.getPath,
		config: function (options, fn) {
			options = options || {};
			layer.cache = ready.config = $.extend({}, ready.config, options);
			layer.path = ready.config.path || layer.path;
			typeof options.extend === "string" && (options.extend = [options.extend]);
			if (ready.config.path) {
				layer.ready()
			}
			if (!options.extend) {
				return this
			}
			isLayui ? layui.addcss("modules/layer/" + options.extend) : layer.link("skin/" + options.extend);
			return this
		},
		link: function (href, fn, cssname) {
			if (!layer.path) {
				return
			}
			var head = document.getElementsByTagName("head")[0];
			var link = document.createElement("link");
			if (typeof fn === "string") {
				cssname = fn
			}
			var app = (cssname || href).replace(/\.|\//g, "");
			var id = "layuicss-" + app,
			timeout = 0;
			link.rel = "stylesheet";
			link.href = layer.path + href;
			link.id = id;
			if (!document.getElementById(id) && href) {
				head.appendChild(link)
			}
			if (typeof fn !== "function") {
				return
			}
			fn()(function poll() {
				if (++timeout > 8 * 1000 / 100) {
					return window.console && console.error("layer.css: Invalid")
				}
				parseInt(SeeUtils.getElWidth(id)) === 1989 ? fn() : setTimeout(poll, 100)
			}
				())
		},
		ready: function (callback) {
			var cssname = "skinlayercss",
			ver = "1172";
			isLayui ? layui.addcss("seeyon/common/css/seeyon.ui.layer-debug.css?v=" + layer.v + ver, callback, cssname) : layer.link("", callback, cssname);
			return this
		},
		alert: function (content, options, yes) {
			var type = typeof options === "function";
			if (type) {
				yes = options
			}
			var otherParams = type ? {}
			 : options;
			if (otherParams == null) {
				otherParams = {}
			}
			options = SeeUtils.extend({
					content: content,
					yes: yes
				}, otherParams);
			return layer.open(options)
		},
		confirm: function (content, options, yes, cancel) {
			var type = typeof options === "function";
			if (type) {
				cancel = yes;
				yes = options
			}
			var otherParams = type ? {}
			 : options;
			if (otherParams == null) {
				otherParams = {}
			}
			options = SeeUtils.extend({
					content: content,
					btn: ready.btn,
					yes: yes,
					btn2: cancel
				}, otherParams);
			return layer.open(options)
		},
		msg: function (content, options, end) {
			var type = typeof options === "function",
			rskin = ready.config.skin;
			var skin = (rskin ? rskin + " " + rskin + "-msg" : "") || "layui-layer-msg";
			var anim = doms.anim.length - 1;
			if (type) {
				end = options
			}
			return layer.open($.extend({
					content: content,
					time: 3000,
					shade: false,
					skin: skin,
					title: false,
					closeBtn: false,
					btn: false,
					resize: false,
					end: end
				}, (type && !ready.config.skin) ? {
					skin: skin + " layui-layer-hui",
					anim: anim
				}
					 : function () {
					options = options || {};
					if (options.icon === -1 || options.icon === undefined && !ready.config.skin) {
						options.skin = skin + " " + (options.skin || "layui-layer-hui")
					}
					return options
				}
					()))
		},
		load: function (icon, options) {
			if (options == null) {
				options = {}
			}
			options = SeeUtils.extend({
					type: 3,
					icon: icon || 0,
					resize: false,
					shade: 0.01
				}, options);
			return layer.open(options)
		},
		tips: function (content, follow, options) {
			if (options == null) {
				options = {}
			}
			return layer.open(SeeUtils.extend({
					type: 4,
					content: [content, follow],
					closeBtn: false,
					time: 3000,
					shade: false,
					resize: false,
					fixed: false,
					maxWidth: 210
				}, options))
		}
	};
	var Class = function (setings) {
		var that = this;
		that.index = ++layer.index;
		that.config = $.extend({}, that.config, ready.config, setings);
		if (that.config.timeout) {
			setTimeout(function () {
				document.body ? that.creat() : setTimeout(function () {
					that.creat()
				}, 50)
			}, that.config.timeout)
		} else {
			document.body ? that.creat() : setTimeout(function () {
				that.creat()
			}, 50)
		}
		if (getCtpTop().isOffice || (!getCtpTop().needShowContent)) {
			if (window.navigator.userAgent.indexOf("AppleWebKit") != -1) {
				setTimeout(function () {
					that.officeAction(false)
				}, 500)
			} else {
				that.officeAction(false)
			}
		} else {
			that.officeAction(true)
		}
	};
	Class.pt = Class.prototype;
	var doms = ["layui-layer", ".layui-layer-title", ".layui-layer-main", ".layui-layer-dialog", "layui-layer-iframe", "layui-layer-content", "layui-layer-btn", "layui-layer-close", "layui-layer-messageBox"];
	doms.anim = ["layer-anim", "layer-anim-01", "layer-anim-02", "layer-anim-03", "layer-anim-04", "layer-anim-05", "layer-anim-06"];
	Class.pt.config = {
		type: 0,
		shade: 0.3,
		fixed: true,
		move: doms[1],
		title: "&#x4FE1;&#x606F;",
		offset: "auto",
		area: "auto",
		closeBtn: 1,
		time: 0,
		zIndex: 600,
		maxWidth: 360,
		anim: 0,
		icon: -1,
		moveType: 1,
		resize: true,
		scrollbar: true,
		tips: 2,
		moveOut: true
	};
	Class.pt.vessel = function (conType, callback) {
		var that = this,
		times = that.index,
		config = that.config;
		var zIndex = that.config.targetWindow.getMaxZindex(2);
		var titype = typeof config.title === "object";
		var ismax = config.maxmin && (config.type === 1 || config.type === 2);
		var titleHTML = (config.title ? '<div class="layui-layer-title" style="' + (titype ? config.title[1] : "") + '">' + (titype ? config.title[0] : config.title) + "</div>" : "");
		if (config.nameType != "panel") {
			that.ifMax()
		}
		var layerContent;
		if (config.layerFrom == "msg") {
			layerContent = "<table width='90%' class='margin_t_20' style='font-size:12px;'><tr><td class='msgbox_content padding_l_10' style='padding-right:15px;'>" + config.content + "</td></tr></table>"
		} else {
			if (config.layerFrom == "dialog") {
				if (config.title) {
					config.btn ? config.area[1] = parseInt(config.area[1].split("px")[0]) + 105 + "px" : config.area[1] = parseInt(config.area[1].split("px")[0]) + 55 + "px"
				}
				layerContent = (config.type == 1 && conType ? "" : (config.content || ""))
			}
		}
		config.zIndex = zIndex;
		var _nextShade = "";
		if (config.nextShade) {
			_nextShade = '<div class="layui-layer-shade" id="layui-layer-shade-next' + times + '" style="' + ("z-index:" + (zIndex + 1) + "; background-color:" + ("#fff") + ";") + '"></div>'
		}
		winBtnClickName = "dialogWinBtnClick" + that.index;
		callback([config.shade ? ('<div class="layui-layer-shade" id="layui-layer-shade' + times + '" times="' + times + '" notCopyReturnValue="' + config.notCopyReturnValue + '" style="' + ("z-index:" + (zIndex) + "; background-color:" + (config.shade[1] || "#000") + "; opacity:" + (config.shade[0] || config.shade) + "; filter:alpha(opacity=" + (config.shade[0] * 100 || config.shade * 100) + ");") + '"></div>') + _nextShade : "", '<div layType="dialog" class="' + doms[0] + (" layui-layer-" + ready.type[config.type]) + (((config.type == 0 || config.type == 2) && !config.shade) ? " layui-layer-border" : "") + " " + (config.skin || "") + '" id="' + doms[0] + times + '" type="' + ready.type[config.type] + '" times="' + times + '" showtime="' + config.time + '" notCopyReturnValue="' + config.notCopyReturnValue + '" conType="' + (conType ? "object" : "string") + '" style="z-index: ' + (zIndex + 1) + "; width:" + config.area[0] + ";height:" + config.area[1] + (config.fixed ? "" : ";position:absolute;") + '">' + (conType && config.type != 2 ? "" : titleHTML) + '<div id="' + (config.id || "") + '_main" class="layui-layer-content' + ((config.type == 0 && config.icon !== -1) ? " layui-layer-padding" : "") + (config.type == 3 ? " layui-layer-loading" + config.icon : "") + '" style="' + (config.nameType == "panel" ? "font-size:12px" : "") + '">' + (config.type == 0 && config.icon !== -1 ? '<i class="layui-layer-ico layui-layer-ico' + config.icon + '"></i>' : "") + (config.type == 1 && conType ? "" : (layerContent || "")) + '</div><span class="layui-layer-setwin">' + function () {
					var closebtn = ismax ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max" href="javascript:;"></a>' : "";
					config.closeBtn && (closebtn += '<a class="layui-layer-ico ' + doms[7] + " " + doms[7] + (config.title ? config.closeBtn : (config.type == 4 ? "1" : "2")) + '"></a>');
					return closebtn
				}
				() + "</span>" + (config.btn ? function () {
					var button = "";
					typeof config.btn === "string" && (config.btn = [config.btn]);
					for (var i = 0, len = config.btn.length; i < len; i++) {
						button += '<a onclick="' + winBtnClickName + '(event,this)" id="layui-layer-btn-' + config.btnId[i] + '" class="' + doms[6] + "" + i + " " + (config.btnIsEmphasize[i] ? "margin_r_10 common_button common_button_emphasize" : "margin_r_10 common_button common_button_gray") + " " + (config.btnDisabled[i] ? "common_button_disable" : " ") + '" style="' + (config.btnHide[i] ? "display:none" : "") + '" disableAttr="' + config.btnDisabled[i] + '">' + config.btn[i] + "</a>"
					}
					var bottomHTML = "";
					if (config.bottomHTML) {
						bottomHTML += "<div class='left display_inline-block padding_l_10 padding_t_5'>" + config.bottomHTML + "</div>"
					}
					return '<div class="' + doms[6] + " layui-layer-btn-" + (config.btnAlign || "") + '">' + button + bottomHTML + "</div>"
				}
					() : "") + "<iframe id='" + config.id + "_iframe_shadow' class='absolute iframe_shadow' style='top:0;width:" + config.area[0] + ";height:" + config.area[1] + ";border:0;z-index:-1;'></iframe>" + (config.resize ? '<span class="layui-layer-resize"></span>' : "") + "</div>"], titleHTML, $('<div class="layui-layer-move"></div>'));
		return that
	};
	Class.pt.creat = function () {
		var that = this,
		config = that.config,
		times = that.index,
		nodeIndex,
		content = config.content,
		conType = typeof content === "object";
		if (SeeUtils.getElObj(config.id)) {
			return
		}
		if (typeof config.area === "string") {
			config.area = config.area === "auto" ? ["", ""] : [config.area, ""]
		}
		if (config.shift) {
			config.anim = config.shift
		}
		if (layer.ie == 6) {
			config.fixed = false
		}
		switch (config.type) {
		case 0:
			config.btn = ("btn" in config) ? config.btn : ready.btn[0];
			layer.closeAll("dialog");
			break;
		case 2:
			var content = config.content = conType ? config.content : [config.content || "http://layer.layui.com", "auto"];
			config.content = '<iframe scrolling="' + (config.content[1] || "auto") + '" allowtransparency="true" id="' + doms[4] + "" + times + '" name="' + doms[4] + "" + times + '" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + config.content[0] + '"></iframe>';
			break;
		case 3:
			delete config.title;
			delete config.closeBtn;
			config.icon === -1 && (config.icon === 0);
			layer.closeAll("loading");
			break;
		case 4:
			conType || (config.content = [config.content, "body"]);
			config.follow = config.content[1];
			config.content = config.content[0] + '<i class="layui-layer-TipsG"></i>';
			delete config.title;
			config.tips = typeof config.tips === "object" ? config.tips : [config.tips, true];
			config.tipsMore || layer.closeAll("tips");
			break
		}
		that.vessel(conType, function (html, titleHTML, moveElem) {
			$("body").focus();
			SeeUtils.appendToBody(html[0]);
			conType ? function () {
				(config.type == 2 || config.type == 4) ? function () {
					SeeUtils.appendToBody(html[1])
				}
				() : function () {
					if (!content.parents("." + doms[0])[0]) {
						var layerObj = SeeUtils.getElObj(doms[0] + times);
						if (config.nameType == "panel") {
							content.data("display", content.css("display")).show().addClass("layui-layer-wrap").wrap(html[1])
						} else {
							SeeUtils.prependToBody(html[1]);
							$("#" + doms[0] + times).find("." + doms[5]).append(content);
							SeeUtils.eachChildren(SeeUtils.getElObj(doms[0] + times).querySelector("." + doms[5]), function (elObj) {
								SeeUtils.showEl(elObj)
							})
						}
						$(SeeUtils.getElObj(doms[0] + times).querySelector("." + doms[5])).before(titleHTML)
					}
				}
				()
			}
			() : SeeUtils.appendToBody(html[1]);
			that.layeroObj = SeeUtils.getElObj(doms[0] + times);
			if (!document.querySelector(".layui-layer-move")) {
				$("body").append(ready.moveElem = moveElem)
			}
			that.layero = $("#" + doms[0] + times);
			if (config.showTime) {
				var mainObj = SeeUtils.getElObj(config.id + "_main");
				var tempPHtml = mainObj.querySelector("p").innerText;
				var tempTime = parseInt(config.time) / 1000;
				if (mainObj.querySelector("p") != null) {
					mainObj.querySelector("p").innerHTML = tempPHtml + "<span style='color:red;font-size: 16px;'>(" + (--tempTime) + "s)</span>"
				}
				var tempInterval = setInterval(function () {
						if (mainObj.querySelector("p") != null) {
							mainObj.querySelector("p").innerHTML = tempPHtml + "<span style='color:red;font-size: 16px;'>(" + (--tempTime) + "s)</span>"
						}
						if (tempTime <= 1) {
							config.showTimeFun();
							window.clearInterval(tempInterval)
						}
					}, 1000)
			}
			if (config.type == 2 && config.transParams) {
				that.layeroObj.querySelector("iframe").contentWindow.transParamsCopy = config.transParams;
				that.layeroObj.querySelector("iframe").contentWindow.dialogArguments = config.transParams;
				that.layeroObj.querySelector("iframe").contentWindow.transParams = config.transParams
			}
			if (config.type == 2 && that.layeroObj.querySelector("iframe").contentWindow) {
				if (!that.layeroObj.querySelector("iframe").contentWindow.parentDialogObj) {
					that.layeroObj.querySelector("iframe").contentWindow.parentDialogObj = new Object()
				}
				eval("that.layeroObj.querySelector('iframe').contentWindow.parentDialogObj['" + config.id + "'] = layer;")
			}
			config.scrollbar || doms.html.css("overflow", "hidden").attr("layer-full", times)
		}).auto(times);
		config.type == 2 && layer.ie == 6 && SeeUtils.attrEl(that.layeroObj.querySelector("iframe"), "src", content[0]);
		config.type == 4 ? that.tips() : that.offset();
		if (config.fixed) {
			win.on("resize", function () {
				that.offset();
				(/^\d+%$/.test(config.area[0]) || /^\d+%$/.test(config.area[1])) && that.auto(times);
				config.type == 4 && that.tips()
			})
		}
		config.time <= 0 || setTimeout(function () {
			layer.close(that.index)
		}, config.time);
		that.move().callback()
	};
	Class.pt.auto = function (index) {
		var that = this,
		config = that.config;
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		if (config.area[0] === "" && config.maxWidth > 0) {
			SeeUtils.getOuterWidth(layeroObj) > config.maxWidth && SeeUtils.setElWidth(layeroObj, config.maxWidth)
		}
		var area = [SeeUtils.getInnerWidth(layeroObj), SeeUtils.getInnerHeight(layeroObj)];
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0;
		var btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0;
		function setHeight(elem) {
			elem = layeroObj.querySelector(elem);
			if (navigator.userAgent.indexOf("Firefox") == -1) {
				if (win.height() == 0 || win.width() == 0) {
					if (window.SeeUtils.getElHeight(document.body) > area[1]) {
						SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					} else {
						SeeUtils.setElHeight(elem, (window.SeeUtils.getElHeight(document.body) - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					}
				} else {
					SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
				}
			} else {
				if (win.height() == 0 || win.width() == 0) {
					if (document.body.clientHeight > area[1]) {
						SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					} else {
						SeeUtils.setElHeight(elem, (document.body.clientHeight - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					}
				} else {
					SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
				}
			}
		}
		switch (config.type) {
		case 2:
			setHeight("iframe");
			break;
		default:
			if (config.area[1] === "") {
				if (config.fixed && area[1] >= win.height()) {
					area[1] = win.height();
					setHeight("." + doms[5])
				}
			} else {
				setHeight("." + doms[5])
			}
			break
		}
		return that
	};
	Class.pt.offset = function () {
		var that = this,
		config = that.config;
		var layeroObj = that.layeroObj;
		var area = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
		var type = typeof config.offset === "object";
		that.offsetTop = (win.height() - area[1]) / 2;
		that.offsetLeft = (win.width() - area[0]) / 2;
		if (win.height() == 0 || win.width() == 0) {
			if (navigator.userAgent.indexOf("Firefox") == -1) {
				if (window.SeeUtils.getElHeight(document.body) < area[1]) {
					that.offsetTop = 0
				} else {
					that.offsetTop = (window.SeeUtils.getElHeight(document.body) - area[1]) / 2
				}
				that.offsetLeft = (window.SeeUtils.getElWidth(document.body) - area[0]) / 2
			} else {
				if (document.body.clientHeight < area[1]) {
					that.offsetTop = 0
				} else {
					that.offsetTop = (document.body.clientHeight - area[1]) / 2
				}
				that.offsetLeft = (document.body.clientWidth - area[0]) / 2
			}
		}
		if (type) {
			that.offsetTop = config.offset[0];
			that.offsetLeft = config.offset[1] || that.offsetLeft
		} else {
			if (config.offset !== "auto") {
				if (config.offset === "t") {
					that.offsetTop = 0
				} else {
					if (config.offset === "r") {
						that.offsetLeft = win.width() - area[0]
					} else {
						if (config.offset === "b") {
							that.offsetTop = win.height() - area[1]
						} else {
							if (config.offset === "l") {
								that.offsetLeft = 0
							} else {
								if (config.offset === "lt") {
									that.offsetTop = 0;
									that.offsetLeft = 0
								} else {
									if (config.offset === "lb") {
										that.offsetTop = win.height() - area[1];
										that.offsetLeft = 0
									} else {
										if (config.offset === "rt") {
											that.offsetTop = 0;
											that.offsetLeft = win.width() - area[0]
										} else {
											if (config.offset === "rb") {
												that.offsetTop = win.height() - area[1];
												that.offsetLeft = win.width() - area[0]
											} else {
												that.offsetTop = config.offset
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (!config.fixed) {
			that.offsetTop = /%$/.test(that.offsetTop) ? win.height() * parseFloat(that.offsetTop) / 100 : parseFloat(that.offsetTop);
			that.offsetLeft = /%$/.test(that.offsetLeft) ? win.width() * parseFloat(that.offsetLeft) / 100 : parseFloat(that.offsetLeft);
			that.offsetTop += win.scrollTop();
			that.offsetLeft += win.scrollLeft()
		}
		if (SeeUtils.getAttrEl(layeroObj, "minLeft") != null) {
			that.offsetTop = win.height() - (SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0);
			that.offsetLeft = SeeUtils.getCss(layeroObj, "left")
		}
		if (typeof(config.top) != "undefined" && typeof(config.left) == "undefined") {
			SeeUtils.css(layeroObj, "top", config.top);
			SeeUtils.css(layeroObj, "left", that.offsetLeft)
		} else {
			if (typeof(config.top) != "undefined" && typeof(config.left) != "undefined") {
				SeeUtils.css(layeroObj, "top", config.top);
				SeeUtils.css(layeroObj, "left", config.left)
			} else {
				if (that.offsetTop < 0) {
					SeeUtils.css(layeroObj, "top", 0);
					SeeUtils.css(layeroObj, "left", that.offsetLeft)
				} else {
					SeeUtils.css(layeroObj, "top", that.offsetTop);
					SeeUtils.css(layeroObj, "left", that.offsetLeft)
				}
			}
		}
	};
	Class.pt.tips = function () {
		var that = this,
		config = that.config;
		var layeroObj = that.layeroObj;
		var layArea = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
		var follow = $(config.follow);
		if (!follow[0]) {
			follow = $("body")
		}
		var goal = {
			width: follow.outerWidth(),
			height: follow.outerHeight(),
			top: follow.offset().top,
			left: follow.offset().left
		};
		var tipsGObj = layeroObj.querySelector(".layui-layer-TipsG");
		var guide = config.tips[0];
		config.tips[1] || SeeUtils.removeEl(tipsGObj);
		goal.autoLeft = function () {
			if (goal.left + layArea[0] - win.width() > 0) {
				goal.tipLeft = goal.left + goal.width - layArea[0];
				SeeUtils.css(tipsGObj, "right", 12);
				SeeUtils.css(tipsGObj, "left", "auto")
			} else {
				goal.tipLeft = goal.left
			}
		};
		goal.where = [function () {
				goal.autoLeft();
				goal.tipTop = goal.top - layArea[1] - 10;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsB");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsT");
				SeeUtils.css(tipsGObj, "borderRightColor", config.tips[1])
			}, function () {
				goal.tipLeft = goal.left + goal.width + 10;
				goal.tipTop = goal.top;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsL");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsR");
				SeeUtils.css(tipsGObj, "borderBottomColor", config.tips[1])
			}, function () {
				goal.autoLeft();
				goal.tipTop = goal.top + goal.height + 10;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsT");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsB");
				SeeUtils.css(tipsGObj, "borderRightColor", config.tips[1])
			}, function () {
				goal.tipLeft = goal.left - layArea[0] - 10;
				goal.tipTop = goal.top;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsR");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsL");
				SeeUtils.css(tipsGObj, "borderBottomColor", config.tips[1])
			}
		];
		goal.where[guide - 1]();
		if (guide === 1) {
			goal.top - (win.scrollTop() + layArea[1] + 8 * 2) < 0 && goal.where[2]()
		} else {
			if (guide === 2) {
				win.width() - (goal.left + goal.width + layArea[0] + 8 * 2) > 0 || goal.where[3]()
			} else {
				if (guide === 3) {
					(goal.top - win.scrollTop() + goal.height + layArea[1] + 8 * 2) - win.height() > 0 && goal.where[0]()
				} else {
					if (guide === 4) {
						layArea[0] + 8 * 2 - goal.left > 0 && goal.where[1]()
					}
				}
			}
		}
		SeeUtils.css(layeroObj.querySelector("." + doms[5]), "backgroundColor", config.tips[1]);
		SeeUtils.css(layeroObj.querySelector("." + doms[5]), "paddingRight", (config.closeBtn ? "30px" : ""));
		SeeUtils.css(layeroObj, "left", goal.tipLeft - (config.fixed ? win.scrollLeft() : 0));
		SeeUtils.css(layeroObj, "top", goal.tipTop - (config.fixed ? win.scrollTop() : 0))
	};
	Class.pt.move = function () {
		var that = this,
		config = that.config,
		layeroObj = that.layeroObj,
		dict = {};
		if (config.move) {
			SeeUtils.css(layeroObj.querySelector(config.move), "cursor", "move")
		}
		var dialogDOM = document.getElementById(SeeUtils.getAttrEl(layeroObj, "id"));
		if (dialogDOM.querySelector(config.move)) {
			dialogDOM.querySelector(config.move).onmousedown = function (e) {
				var ee = e || window.event;
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					if (ee != null) {
						ee.returnValue = false
					}
				} else {
					ee.preventDefault()
				}
				if (config.move) {
					dict.moveStart = true;
					dict.offset = [ee.clientX - parseFloat(SeeUtils.getCss(layeroObj, "left")), ee.clientY - parseFloat(SeeUtils.getCss(layeroObj, "top"))];
					ready.moveElem.css("cursor", "move").show()
				}
			}
		}
		if (dialogDOM.querySelector(".layui-layer-resize")) {
			dialogDOM.querySelector(".layui-layer-resize").onmousedown = function (e) {
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				dict.resizeStart = true;
				dict.offset = [e.clientX, e.clientY];
				dict.area = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
				ready.moveElem.css("cursor", "se-resize").show()
			}
		}
		SeeUtils.addEvent(document, "mousemove", function (e) {
			e = e || window.event;
			if (dict.moveStart) {
				var X = e.clientX - dict.offset[0],
				Y = e.clientY - dict.offset[1],
				fixed = SeeUtils.getCss(layeroObj, "position") === "fixed";
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				dict.stX = fixed ? 0 : win.scrollLeft();
				dict.stY = fixed ? 0 : win.scrollTop();
				if (!config.moveOut) {
					var setRig = win.width() - SeeUtils.getOuterWidth(layeroObj) + dict.stX,
					setBot = win.height() - SeeUtils.getOuterHeight(layeroObj) + dict.stY;
					X < dict.stX && (X = dict.stX);
					X > setRig && (X = setRig);
					Y < dict.stY && (Y = dict.stY);
					Y > setBot && (Y = setBot)
				}
				SeeUtils.css(layeroObj, "left", X);
				SeeUtils.css(layeroObj, "top", Y)
			}
			if (config.resize && dict.resizeStart) {
				var X = e.clientX - dict.offset[0],
				Y = e.clientY - dict.offset[1];
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				layer.style(config.zIndex, {
					width: dict.area[0] + X,
					height: dict.area[1] + Y
				});
				dict.isResize = true
			}
		});
		SeeUtils.addEvent(document, "mouseup", function (e) {
			if (dict.moveStart) {
				delete dict.moveStart;
				ready.moveElem.hide();
				config.moveEnd && config.moveEnd()
			}
			if (dict.resizeStart) {
				delete dict.resizeStart;
				ready.moveElem.hide()
			}
		});
		that = null;
		return this
	};
	Class.pt.callback = function () {
		var that = this,
		layero = that.layero,
		layeroObj = that.layeroObj,
		config = that.config;
		that.openLayer();
		if (config.success) {
			if (config.type == 2) {
				layero.find("iframe").on("load", function () {
					config.success(layero, that.index)
				})
			} else {
				config.success(layero, that.index)
			}
		}
		var dialogDOM = document.getElementById(SeeUtils.getAttrEl(layeroObj, "id"));
		winBtnClickName = "dialogWinBtnClick" + that.index;
		if (dialogDOM.querySelector("." + doms[6]) && dialogDOM.querySelector("." + doms[6]).querySelector("a")) {
			window[winBtnClickName] = function (e, t) {
				if ($(t).attr("disableattr") != "true") {
					var index = $(t).index();
					if (index === 0) {
						if (config.yes) {
							config.yes(that.index, layero)
						} else {
							if (config.btn1) {
								config.btn1(that.index, layero)
							} else {
								layer.close(that.index)
							}
						}
					} else {
						var close = config["btn" + (index + 1)] && config["btn" + (index + 1)](that.index, layero)
					}
				}
			}
		}
		function cancel() {
			var close = config.cancel && config.cancel(that.index, layero);
			close === false || layer.close(that.index)
		}
		if (dialogDOM.querySelector("." + doms[7])) {
			dialogDOM.querySelector("." + doms[7]).onclick = cancel
		}
		if (config.shadeClose) {
			document.getElementById("layui-layer-shade" + that.index).onclick = function () {
				layer.close(that.index)
			}
		}
		if (layeroObj.querySelector(".layui-layer-min") != null) {
			dialogDOM.querySelector(".layui-layer-min").onclick = function () {
				var min = config.min && config.min(layero);
				min === false || layer.min(that.index, config)
			}
		}
		if (layeroObj.querySelector(".layui-layer-max") != null) {
			dialogDOM.querySelector(".layui-layer-max").onclick = function () {
				if ($(this).hasClass("layui-layer-maxmin")) {
					layer.restore(that.index);
					config.restore && config.restore(layero)
				} else {
					layer.full(that.index, config);
					setTimeout(function () {
						config.full && config.full(layero)
					}, 100)
				}
			}
		}
		config.end && (ready.end[that.index] = config.end)
	};
	ready.reselect = function () {
		SeeUtils.eachByTag(document, "select", function (elObj) {
			if (SeeUtils.closestByClass(elObj, "." + doms[0]) != null) {
				(SeeUtils.getAttrEl(elObj, "layer") == 1) && (SeeUtils.getByClass("." + doms[0]).length < 1) && SeeUtils.removeAttrEl(elObj, "layer") && SeeUtils.showEl(elObj)
			}
		})
	};
	Class.pt.IE6 = function (layero) {
		SeeUtils.eachByTag(document, "select", function (elObj) {
			if (SeeUtils.closestByClass(elObj, "." + doms[0]) != null) {
				SeeUtils.getCss(elObj, "display") === "none" || SeeUtils.hideEl(elObj);
				SeeUtils.attrEl(elObj, "layer", "1")
			}
		})
	};
	Class.pt.openLayer = function () {
		var that = this;
		layer.zIndex = that.config.zIndex;
		layer.setTop = function (layero) {
			var setZindex = function () {
				layer.zIndex++;
				layero.css("z-index", layer.zIndex + 1)
			};
			layer.zIndex = parseInt(layero[0].style.zIndex);
			layero.on("mousedown", setZindex);
			return layer.zIndex
		}
	};
	Class.pt.ifMax = function () {
		var that = this;
		var _w_window = that.config.targetWindow.document.body.clientWidth - 40;
		var _h_window = that.config.targetWindow.document.documentElement.clientHeight - 80;
		var _w_temp = that.config.area[0].split("px")[0];
		var _h_temp = that.config.area[1].split("px")[0];
		that.config.area[0] = _w_temp > _w_window ? _w_window : _w_temp;
		that.config.area[1] = _h_temp > _h_window ? _h_window : _h_temp;
		if (that.config.area[0] <= 0) {
			that.config.area[0] = _w_temp + "px"
		} else {
			that.config.area[0] = that.config.area[0] + "px"
		}
		if (that.config.area[1] <= 0) {
			that.config.area[1] = _h_temp + "px"
		} else {
			that.config.area[1] = that.config.area[1] + "px"
		}
	};
	Class.pt.officeAction = function (flag) {
		var that = this;
		var _officeIframeId = ["officeFrameDiv", "zwIframe", "mainbodyFrame"];
		var _findWindow = getCtpTop();
		var componentDiv = SeeUtils.getElObj("componentDiv");
		if (componentDiv != null) {
			try {
				_findWindow = componentDiv.contentWindow.document.getElementById("zwIframe").contentWindow
			} catch (e) {}
		} else {
			if (getCtpTop().isOffice == true && SeeUtils.getCss("zwOfficeIframe", "display") == "block") {
				try {
					_findWindow = getCtpTop().document.getElementById("zwOfficeIframe").contentWindow
				} catch (e) {}
			}
		}
		if (_findWindow.$) {
			for (var i = 0; i < _officeIframeId.length; i++) {
				var _tempid = _officeIframeId[i];
				var _obj = _findWindow.$("#" + _tempid);
				if (_obj && _obj.size() > 0) {
					that.officeIframe = _obj;
					break
				}
			}
		}
		that.qianzhangIframe = $("[classid='clsid:2294689C-9EDF-40BC-86AE-0438112CA439']");
		DialogOfficeObj.qianzhangIframe = that.qianzhangIframe;
		DialogOfficeObj.officeIframe = that.officeIframe;
		if (!flag) {
			DialogOfficeObj.hideOfficeObj()
		} else {
			DialogOfficeObj.showOfficeObj()
		}
	};
	var DialogOfficeObj = {
		officeIframe: {
			size: function () {
				return 0
			}
		},
		qianzhangIframe: {
			size: function () {
				return 0
			}
		},
		hideOfficeObjExt: function () {
			try {
				var _tpWin = getA8Top();
				var isOffice = _tpWin.isOffice;
				if ((typeof isOffice == "undefined") || (isOffice == false)) {
					return false
				}
			} catch (e) {}
			return true
		},
		showOfficeObjExt: function () {
			try {
				var _tpWin = getA8Top();
				var isOffice = _tpWin.isOffice;
				if ((typeof isOffice == "undefined") || (isOffice == false)) {
					return false
				}
			} catch (e) {}
			return true
		},
		hideOfficeObj: function () {
			var ua = navigator.userAgent.toLowerCase();
			var isOpera = (ua.indexOf("opera") != -1);
			var isIE = SeeUtils.isIE;
			if (isIE) {
				if (!DialogOfficeObj.hideOfficeObjExt()) {
					return
				}
			}
			if (window.hideOfficeObj) {
				hideOfficeObj()
			}
		},
		showOfficeObj: function () {
			var dialog = __getIframeDialogNumbers();
			if (dialog.length != 0) {
				return
			}
			var ua = navigator.userAgent.toLowerCase();
			var isOpera = (ua.indexOf("opera") != -1);
			var isIE = SeeUtils.isIE;
			if (isIE) {
				if (!DialogOfficeObj.showOfficeObjExt()) {
					return
				}
			}
			if (window.showOfficeObj) {
				showOfficeObj()
			}
		}
	};
	ready.recordByObj = function (layeroObj) {
		var area = [SeeUtils.getElWidth(layeroObj), SeeUtils.getElHeight(layeroObj), $(layeroObj).position().top, $(layeroObj).position().left + parseFloat(SeeUtils.getCss(layeroObj, "marginLeft"))];
		SeeUtils.addClass(layeroObj.querySelector(".layui-layer-max"), "layui-layer-maxmin");
		SeeUtils.attrEl(layeroObj, "area", area.join(","))
	};
	ready.record = function (layero) {
		var area = [layero.width(), layero.height(), layero.position().top, layero.position().left + parseFloat(layero.css("margin-left"))];
		layero.find(".layui-layer-max").addClass("layui-layer-maxmin");
		layero.attr({
			area: area
		})
	};
	ready.rescollbar = function (index) {
		if (doms.html.attr("layer-full") == index) {
			if (doms.html[0].style.removeProperty) {
				doms.html[0].style.removeProperty("overflow")
			} else {
				doms.html[0].style.removeAttribute("overflow")
			}
			doms.html.removeAttr("layer-full")
		}
	};
	window.layer = layer;
	layer.getChildFrame = function (selector, index) {
		index = index || SeeUtils.getAttrEl(document.querySelector("." + doms[4]), "times");
		return $("#" + doms[0] + index).find("iframe").contents().find(selector)
	};
	layer.getFrameIndex = function (name) {
		return $("#" + name).parents("." + doms[4]).attr("times")
	};
	layer.iframeAuto = function (index) {
		if (!index) {
			return
		}
		var heg = layer.getChildFrame("html", index).outerHeight();
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0;
		var btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0;
		SeeUtils.setElHeight(layeroObj, "height", heg + titHeight + btnHeight);
		SeeUtils.eachByTag(layeroObj, "iframe", function (elObj) {
			SeeUtils.setElHeight(elObj, heg)
		})
	};
	layer.iframeSrc = function (index, url) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByTag(layeroObj, "iframe", function (elObj) {
			SeeUtils.attrEl(elObj, "src", url)
		})
	};
	layer.style = function (index, options, limit) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type"),
		titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0,
		btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0,
		minLeft = SeeUtils.getAttrEl(layeroObj, "minLeft");
		if (type === ready.type[3] || type === ready.type[4]) {
			return
		}
		if (!limit) {
			if (parseFloat(options.width) <= 260) {
				options.width = 260
			}
			if (parseFloat(options.height) - titHeight - btnHeight <= 64) {
				options.height = 64 + titHeight + btnHeight
			}
		}
		SeeUtils.cssByJson(layeroObj, options);
		btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6]));
		var contElemObj = layeroObj.querySelector(".layui-layer-content");
		if (type === ready.type[2]) {
			SeeUtils.setElHeight(layeroObj.querySelector("iframe"), parseFloat(options.height) - titHeight - btnHeight)
		} else {
			SeeUtils.setElHeight(contElemObj, parseFloat(options.height) - titHeight - btnHeight - parseFloat(SeeUtils.getCss(contElemObj, "paddingTop")) - parseFloat(SeeUtils.getCss(contElemObj, "paddingBottom")))
		}
		if (SeeUtils.getElObj("layui-layer-shade-next" + index) != null) {
			SeeUtils.removeEl("layui-layer-shade-next" + index)
		}
	};
	layer.min = function (index, options) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0,
		left = SeeUtils.getCss(layeroObj, "minLeft") || (181 * ready.minIndex) + "px",
		position = SeeUtils.getCss(layeroObj, "position");
		ready.recordByObj(layeroObj);
		if (ready.minLeft[0]) {
			left = ready.minLeft[0];
			ready.minLeft.shift()
		}
		SeeUtils.attrEl(layeroObj, "position", position);
		layer.style(index, {
			width: 180,
			height: titHeight,
			left: left,
			top: win.height() - titHeight,
			position: "fixed",
			overflow: "hidden"
		}, true);
		SeeUtils.hideEl(layeroObj.querySelector(".layui-layer-min"));
		SeeUtils.getAttrEl(layeroObj, "type") === "page" && SeeUtils.hideEl(layeroObj.querySelector(doms[4]));
		ready.rescollbar(index);
		if (!SeeUtils.getAttrEl(layeroObj, "minLeft")) {
			ready.minIndex++
		}
		SeeUtils.attrEl(layeroObj, "minLeft", left)
	};
	layer.restore = function (index) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var area = SeeUtils.getAttrEl(layeroObj, "area").split(",");
		layer.style(index, {
			width: parseFloat(area[0]),
			height: parseFloat(area[1]),
			top: parseFloat(area[2]),
			left: parseFloat(area[3]),
			position: SeeUtils.getAttrEl(layeroObj, "position"),
			overflow: "visible"
		}, true);
		SeeUtils.removeClass(layeroObj.querySelector(".layui-layer-max"));
		SeeUtils.showEl(layeroObj.querySelector(".layui-layer-min"));
		SeeUtils.getAttrEl(layeroObj, "type") === "page" && SeeUtils.showEl(layeroObj.querySelector(doms[4]));
		ready.rescollbar(index)
	};
	layer.full = function (index) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		ready.recordByObj(layeroObj);
		if (!doms.html.attr("layer-full")) {
			doms.html.css("overflow", "hidden").attr("layer-full", index)
		}
		clearTimeout(timer);
		timer = setTimeout(function () {
				var isfix = SeeUtils.getCss(layeroObj, "position") === "fixed";
				layer.style(index, {
					top: isfix ? 0 : win.scrollTop(),
					left: isfix ? 0 : win.scrollLeft(),
					width: win.width(),
					height: win.height()
				}, true);
				SeeUtils.hideEl(layeroObj.querySelector(".layui-layer-min"))
			}, 0)
	};
	layer.title = function (name, index) {
		SeeUtils.getElObj(doms[0] + (index || layer.index)).querySelector(doms[1]).innerHTML = name
	};
	layer.close = function (index) {
		if (!index || typeof index != "number") {
			var tempLastChild = layer.getBodyLastChild();
			if (tempLastChild && tempLastChild.nodeType == 1) {
				index = tempLastChild.getAttribute("times")
			} else {
				return
			}
		}
		var layero = $("#" + doms[0] + index),
		closeAnim = "layer-anim-close";
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type");
		if (layeroObj == null) {
			return
		}
		if (layero.data("anim")) {
			SeeUtils.addClass(layeroObj, closeAnim)
		}
		SeeUtils.removeEl("layui-layer-moves");
		SeeUtils.removeEl("layui-layer-shade" + index);
		ready.rescollbar(index);
		var minLeft = SeeUtils.getAttrEl(layeroObj, "minLeft");
		if (minLeft != null) {
			ready.minIndex--;
			ready.minLeft.push(minLeft)
		}
		layer.remove(index);
		if ($(".layui-layer").length > 0 || $(".dialog_main").length > 0) {
			return void(0)
		}
		Class.pt.officeAction(true)
	};
	layer.remove = function (index) {
		var layero = $("#" + doms[0] + index);
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type");
		var WRAP = "layui-layer-wrap";
		if (type === ready.type[1] && SeeUtils.getAttrEl(layeroObj, "conType") === "object") {
			layero.children(":not(." + doms[5] + ")").remove();
			var wrap = layero.find("." + WRAP);
			if (wrap.length) {
				for (var i = 0; i < 2; i++) {
					wrap.unwrap()
				}
				wrap.css("display", wrap.data("display")).removeClass(WRAP)
			} else {
				layeroObj.innerHTML = "";
				SeeUtils.removeEl(layeroObj)
			}
		} else {
			_clearIframeContent(type, ready, index, layeroObj);
			layeroObj.innerHTML = "";
			SeeUtils.removeEl(layeroObj)
		}
		typeof ready.end[index] === "function" && ready.end[index]();
		delete ready.end[index]
	};
	layer.closeAll = function (type) {
		SeeUtils.eachByClass(document, "layui-layer", function (elObj) {
			var is = type ? (SeeUtils.getAttrEl(elObj, "type") === type) : 1;
			is && layer.close(SeeUtils.getAttrEl(elObj, "times"));
			is = null
		})
	};
	layer.getReturnValue = function (json) {
		if (json == null) {
			json = {}
		}
		var win = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector("iframe");
		var win_notCopyReturnValue = layer.getBodyLastChild().getAttribute("notcopyreturnvalue");
		if (win != null) {
			var returnValues = null;
			if (win.contentWindow && typeof(win.contentWindow.OK) == "function") {
				returnValues = win.contentWindow.OK(json)
			} else {
				return null
			}
			if (win_notCopyReturnValue == "false") {
				if (returnValues && typeof returnValues == "object") {
					try {
						var returnValueString = $.toJSON(returnValues);
						return $.parseJSON(returnValueString)
					} catch (e) {
						return returnValues
					}
				} else {
					return returnValues
				}
			} else {
				return returnValues
			}
		} else {
			return null
		}
	};
	layer.hideDialog = function (winObj) {
		var lastBodyChild = layer.getBodyLastChild();
		if (winObj != null && lastBodyChild != null && lastBodyChild.getAttribute != null) {
			var lastLayId = lastBodyChild.getAttribute("id");
			if (lastLayId != winObj.attr("id")) {
				return false
			}
		}
		if (lastBodyChild && lastBodyChild.nodeType == 1) {
			var winIframe = SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times")).querySelector("iframe");
			winIframe.setAttribute("src", "");
			var winShade = SeeUtils.getElObj("layui-layer-shade" + lastBodyChild.getAttribute("times"));
			SeeUtils.hideEl(winShade);
			var win = SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times"));
			SeeUtils.hideEl(win);
			layer.close()
		}
		return true
	};
	layer.getTransParams = function () {
		var lastBodyChild = layer.getBodyLastChild();
		return SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times")).querySelector("iframe").contentWindow.transParamsCopy
	};
	layer.getBodyLastChild = function () {
		var lastDivChild = document.body.lastChild;
		var oldLastDivChild;
		for (var i = (layer.ie <= 8 ? document.body.childNodes.length : document.body.children.length); i > 0; i--) {
			if (lastDivChild != null) {
				if (lastDivChild.nodeType == 1 && lastDivChild.nodeName == "DIV" && lastDivChild.getAttribute("layType")) {
					break
				} else {
					oldLastDivChild = lastDivChild;
					lastDivChild = lastDivChild.previousElementSibling;
					if (!lastDivChild) {
						lastDivChild = oldLastDivChild.previousSibling
					}
				}
			} else {
				return lastDivChild
			}
		}
		return lastDivChild
	};
	layer.enabledBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			btnEl.removeAttribute("disabled");
			SeeUtils.attrEl(btnEl, "disableAttr", "false");
			SeeUtils.removeClass(btnEl, "common_button_disable")
		}
	};
	layer.disabledBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.attrEl(btnEl, "disabled", "disabled");
			SeeUtils.attrEl(btnEl, "disableAttr", "true");
			SeeUtils.addClass(btnEl, "common_button_disable")
		}
	};
	layer.getObjectById = function (id) {
		return $("#" + id)
	};
	layer.getObjectByClass = function (className) {
		return $("." + className)
	};
	layer.maxfn = function () {
		layer.full(layer.getBodyLastChild().getAttribute("times"))
	};
	layer.hideBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.hideEl(btnEl)
		}
	};
	layer.showBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.showEl(btnEl)
		}
	};
	layer.getBtnObj = function (id) {
		for (var i = 0; i < SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-btn").children.length; i++) {
			var jsonTemp = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-btn").children[i];
			if (SeeUtils.getAttrEl(jsonTemp, "id") == "layui-layer-btn-" + id) {
				return jsonTemp
			}
		}
		return null
	};
	layer.getBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			return $(btnEl)
		}
		return null
	};
	layer.reSize = function (json) {
		var _client_width = document.body.clientWidth;
		var _client_Height = document.body.clientHeight;
		if (json.cHeight) {
			_client_Height = json.cHeight
		}
		if (json.cWidth) {
			_client_width = json.cWidth
		}
		var _w = json.width;
		var _h = json.height;
		var _left = (_client_width - (_w + 5)) / 2;
		var _top = (_client_Height - (_h + 15 + 5)) / 2;
		if (_top < 0) {
			_top = 0
		}
		if ((_h + _top) > _client_Height) {
			_h = _client_Height - _top - 30
		}
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		if (SeeUtils.getElObj(doms[0] + index).querySelectorAll("." + doms[6]).length) {
			SeeUtils.css(layerObj, "left", _left);
			SeeUtils.css(layerObj, "top", _top);
			SeeUtils.setElHeight(layerObj, _h + 105);
			SeeUtils.setElWidth(layerObj, _w)
		} else {
			SeeUtils.css(layerObj, "left", _left);
			SeeUtils.css(layerObj, "top", _top);
			SeeUtils.setElHeight(layerObj, _h + 55);
			SeeUtils.setElWidth(layerObj, _w)
		}
		var layerContent = SeeUtils.getElObj(doms[0] + index).querySelector("." + doms[5]);
		SeeUtils.eachChildren(layerContent, function (elObj) {
			SeeUtils.setElHeight(elObj, _h)
		})
	};
	layer.startLoading = function () {
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByClass(layerObj, "iframe_shadow", function (elObj) {
			SeeUtils.showEl(elObj)
		})
	};
	layer.endLoading = function () {
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByClass(layerObj, "iframe_shadow", function (elObj) {
			SeeUtils.hideEl(elObj)
		})
	};
	layer.setBtnEmphasize = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.addClass(btnEl, "common_button_emphasize");
			SeeUtils.removeClass(btnEl, "common_button_gray")
		}
	};
	layer.setTitle = function (newtitle) {
		SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-title").innerHTML = newtitle
	};
	layer.getClose = function (json) {
		if (json == null) {
			json = {}
		}
		var win = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector("iframe");
		if (win != null) {
			var returnValues = null;
			if (win.contentWindow) {
				returnValues = win.contentWindow.CLOSE(json)
			} else {
				returnValues = win.CLOSE(json)
			}
			if (returnValues && typeof returnValues == "object") {
				try {
					var returnValueString = $.toJSON(returnValues);
					return $.parseJSON(returnValueString)
				} catch (e) {
					return returnValues
				}
			} else {
				return returnValues
			}
		} else {
			return null
		}
	};
	layer.getDialogWindow = function (index) {
		var currentLayer;
		if (index) {
			currentLayer = SeeUtils.getElObj(doms[0] + index);
			if (currentLayer && currentLayer.querySelector("iframe")) {
				return currentLayer.querySelector("iframe").contentWindow
			} else {
				return null
			}
		} else {
			currentLayer = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times"));
			if (currentLayer && currentLayer.querySelector("iframe")) {
				return currentLayer.querySelector("iframe").contentWindow
			} else {
				return null
			}
		}
	};
	var cache = layer.cache || {},
	skin = function (type) {
		return (cache.skin ? (" " + cache.skin + " " + cache.skin + "-" + type) : "")
	};
	layer.prompt = function (options, yes) {
		var style = "";
		options = options || {};
		if (typeof options === "function") {
			yes = options
		}
		if (options.area) {
			var area = options.area;
			style = 'style="width: ' + area[0] + "; height: " + area[1] + ';"';
			delete options.area
		}
		var prompt,
		content = options.formType == 2 ? '<textarea class="layui-layer-input"' + style + ">" + (options.value || "") + "</textarea>" : function () {
			return '<input type="' + (options.formType == 1 ? "password" : "text") + '" class="layui-layer-input" value="' + (options.value || "") + '">'
		}
		();
		return layer.open($.extend({
				type: 1,
				btn: ["&#x786E;&#x5B9A;", "&#x53D6;&#x6D88;"],
				content: content,
				skin: "layui-layer-prompt" + skin("prompt"),
				maxWidth: win.width(),
				success: function (layero) {
					prompt = layero.find(".layui-layer-input");
					prompt.focus()
				},
				resize: false,
				yes: function (index) {
					var value = prompt.val();
					if (value === "") {
						prompt.focus()
					} else {
						if (value.length > (options.maxlength || 500)) {
							layer.tips("&#x6700;&#x591A;&#x8F93;&#x5165;" + (options.maxlength || 500) + "&#x4E2A;&#x5B57;&#x6570;", prompt, {
								tips: 1
							})
						} else {
							yes && yes(value, index, prompt)
						}
					}
				}
			}, options))
	};
	layer.tab = function (options) {
		options = options || {};
		var tab = options.tab || {};
		return layer.open($.extend({
				type: 1,
				skin: "layui-layer-tab" + skin("tab"),
				resize: false,
				title: function () {
					var len = tab.length,
					ii = 1,
					str = "";
					if (len > 0) {
						str = '<span class="layui-layer-tabnow">' + tab[0].title + "</span>";
						for (; ii < len; ii++) {
							str += "<span>" + tab[ii].title + "</span>"
						}
					}
					return str
				}
				(),
				content: '<ul class="layui-layer-tabmain">' + function () {
					var len = tab.length,
					ii = 1,
					str = "";
					if (len > 0) {
						str = '<li class="layui-layer-tabli xubox_tab_layer">' + (tab[0].content || "no content") + "</li>";
						for (; ii < len; ii++) {
							str += '<li class="layui-layer-tabli">' + (tab[ii].content || "no  content") + "</li>"
						}
					}
					return str
				}
				() + "</ul>",
				success: function (layero) {
					var btn = layero.find(".layui-layer-title").children();
					var main = layero.find(".layui-layer-tabmain").children();
					btn.on("mousedown", function (e) {
						e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
						var othis = $(this),
						index = othis.index();
						othis.addClass("layui-layer-tabnow").siblings().removeClass("layui-layer-tabnow");
						main.eq(index).show().siblings().hide();
						typeof options.change === "function" && options.change(index)
					})
				}
			}, options))
	};
	layer.photos = function (options, loop, key) {
		var dict = {};
		options = options || {};
		if (!options.photos) {
			return
		}
		var type = options.photos.constructor === Object;
		var photos = type ? options.photos : {},
		data = photos.data || [];
		var start = photos.start || 0;
		dict.imgIndex = (start | 0) + 1;
		options.img = options.img || "img";
		if (!type) {
			var parent = $(options.photos),
			pushData = function () {
				data = [];
				parent.find(options.img).each(function (index) {
					var othis = $(this);
					othis.attr("layer-index", index);
					data.push({
						alt: othis.attr("alt"),
						pid: othis.attr("layer-pid"),
						src: othis.attr("layer-src") || othis.attr("src"),
						thumb: othis.attr("src")
					})
				})
			};
			pushData();
			if (data.length === 0) {
				return
			}
			loop || parent.on("click", options.img, function () {
				var othis = $(this),
				index = othis.attr("layer-index");
				layer.photos($.extend(options, {
						photos: {
							start: index,
							data: data,
							tab: options.tab
						},
						full: options.full
					}), true);
				pushData()
			});
			if (!loop) {
				return
			}
		} else {
			if (data.length === 0) {
				return layer.msg("&#x6CA1;&#x6709;&#x56FE;&#x7247;")
			}
		}
		dict.imgprev = function (key) {
			dict.imgIndex--;
			if (dict.imgIndex < 1) {
				dict.imgIndex = data.length
			}
			dict.tabimg(key)
		};
		dict.imgnext = function (key, errorMsg) {
			dict.imgIndex++;
			if (dict.imgIndex > data.length) {
				dict.imgIndex = 1;
				if (errorMsg) {
					return
				}
			}
			dict.tabimg(key)
		};
		dict.keyup = function (event) {
			if (!dict.end) {
				var code = event.keyCode;
				event.preventDefault();
				if (code === 37) {
					dict.imgprev(true)
				} else {
					if (code === 39) {
						dict.imgnext(true)
					} else {
						if (code === 27) {
							layer.close(dict.index)
						}
					}
				}
			}
		};
		dict.tabimg = function (key) {
			if (data.length <= 1) {
				return
			}
			photos.start = dict.imgIndex - 1;
			layer.close(dict.index);
			layer.photos(options, true, key)
		};
		dict.event = function () {
			dict.bigimg.hover(function () {
				dict.imgsee.show()
			}, function () {
				dict.imgsee.hide()
			});
			dict.bigimg.find(".layui-layer-imgprev").on("click", function (event) {
				event.preventDefault();
				dict.imgprev()
			});
			dict.bigimg.find(".layui-layer-imgnext").on("click", function (event) {
				event.preventDefault();
				dict.imgnext()
			});
			SeeUtils.addEvent(document, "keyup", dict.keyup)
		};
		function loadImage(url, callback, error) {
			var img = new Image();
			img.src = url;
			if (img.complete) {
				return callback(img)
			}
			img.onload = function () {
				img.onload = null;
				callback(img)
			};
			img.onerror = function (e) {
				img.onerror = null;
				error(e)
			}
		}
		dict.loadi = layer.load(1, {
				shade: "shade" in options ? false : 0.9,
				scrollbar: false
			});
		loadImage(data[start].src, function (img) {
			layer.close(dict.loadi);
			dict.index = layer.open($.extend({
						type: 1,
						area: function () {
							var imgarea = [img.width, img.height];
							var winarea = [$(window).width() - 100, $(window).height() - 100];
							if (!options.full && (imgarea[0] > winarea[0] || imgarea[1] > winarea[1])) {
								var wh = [imgarea[0] / winarea[0], imgarea[1] / winarea[1]];
								if (wh[0] > wh[1]) {
									imgarea[0] = imgarea[0] / wh[0];
									imgarea[1] = imgarea[1] / wh[0]
								} else {
									if (wh[0] < wh[1]) {
										imgarea[0] = imgarea[0] / wh[1];
										imgarea[1] = imgarea[1] / wh[1]
									}
								}
							}
							return [imgarea[0] + "px", imgarea[1] + "px"]
						}
						(),
						title: false,
						shade: 0.9,
						shadeClose: true,
						closeBtn: false,
						move: ".layui-layer-phimg img",
						moveType: 1,
						scrollbar: false,
						moveOut: true,
						anim: Math.random() * 5 | 0,
						skin: "layui-layer-photos" + skin("photos"),
						content: '<div class="layui-layer-phimg"><img src="' + data[start].src + '" alt="' + (data[start].alt || "") + '" layer-pid="' + data[start].pid + '"><div class="layui-layer-imgsee">' + (data.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : "") + '<div class="layui-layer-imgbar" style="display:' + (key ? "block" : "") + '"><span class="layui-layer-imgtit"><a href="javascript:;">' + (data[start].alt || "") + "</a><em>" + dict.imgIndex + "/" + data.length + "</em></span></div></div></div>",
						success: function (layero, index) {
							dict.bigimg = layero.find(".layui-layer-phimg");
							dict.imgsee = layero.find(".layui-layer-imguide,.layui-layer-imgbar");
							dict.event(layero);
							options.tab && options.tab(data[start], layero)
						},
						end: function () {
							dict.end = true;
							SeeUtils.removeEvent("keyup", dict.keyup)
						}
					}, options))
		}, function () {
			layer.close(dict.loadi);
			layer.msg("&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;", {
				time: 30000,
				btn: ["&#x4E0B;&#x4E00;&#x5F20;", "&#x4E0D;&#x770B;&#x4E86;"],
				yes: function () {
					data.length > 1 && dict.imgnext(true, true)
				}
			})
		})
	};
	ready.run = function (_$) {
		$ = _$;
		win = $(window);
		doms.html = $("html");
		layer.open = function (deliver) {
			var _options = {
				id: "",
				type: 1,
				title: "",
				area: new Array(),
				content: "",
				transParams: {},
				btn: "",
				bottomHTML: "",
				layerFrom: "dialog"
			};
			if (!deliver.url && !deliver.html && !deliver.htmlId) {
				_options.content = deliver.content;
				_options.type = 0
			}
			if (deliver.url) {
				_options.type = 2;
				var url = deliver.url;
				if (url.indexOf("CSRFTOKEN=") < 0) {
					url = url + CsrfGuard.getUrlSurffix(url)
				}
				_options.content = url
			}
			if (deliver.html) {
				_options.content = deliver.html
			}
			if (deliver.time) {
				_options.time = deliver.time;
				if (deliver.showTime) {
					_options.showTime = deliver.showTime;
					_options.showTimeFun = deliver.showTimeFun
				}
			}
			if (deliver.id) {
				_options.id = deliver.id;
				layer.id = _options.id
			}
			if (!deliver.isDrag) {
				_options.move = deliver.isDrag;
				_options.moveOut = deliver.isDrag
			}
			_options.title = deliver.title;
			_options.area.push(deliver.width + "px");
			_options.area.push(deliver.height + "px");
			if (deliver.maxParam) {
				if (deliver.maxParam.show) {
					_options.maxmin = true;
					if (deliver.maxParam.handler) {
						_options.full = deliver.maxParam.handler
					}
				}
			}
			if (deliver.minParam) {
				if (deliver.minParam.show) {
					_options.maxmin = true;
					if (deliver.minParam.handler) {
						_options.min = deliver.minParam.handler
					}
				}
			}
			if (deliver.closeParam) {
				if (deliver.closeParam.show) {
					_options.cancel = deliver.closeParam.handler
				} else {
					_options.closeBtn = 0
				}
			}
			_options.targetWindow = deliver.targetWindow || getCtpTop();
			_options.transParams = deliver.transParams;
			if (deliver.buttons) {
				_options.btn = new Array();
				_options.btnId = new Array();
				_options.btnIsEmphasize = new Array();
				_options.btnDisabled = new Array();
				_options.btnHide = new Array();
				for (var i = 1; i <= deliver.buttons.length; i++) {
					_options.btn.push(deliver.buttons[i - 1].text);
					if (deliver.buttons[i - 1].id) {
						_options.btnId.push(deliver.buttons[i - 1].id)
					} else {
						_options.btnId.push(Math.floor(Math.random() * 100000000) + "_btn")
					}
					if (i == 1) {
						_options.btnIsEmphasize.push(true)
					} else {
						if (deliver.buttons[i - 1].isEmphasize) {
							_options.btnIsEmphasize.push(deliver.buttons[i - 1].isEmphasize)
						} else {
							_options.btnIsEmphasize.push(false)
						}
					}
					if (deliver.buttons[i - 1].disabled) {
						_options.btnDisabled.push(deliver.buttons[i - 1].disabled)
					} else {
						_options.btnDisabled.push(false)
					}
					if (deliver.buttons[i - 1].hide) {
						_options.btnHide.push(deliver.buttons[i - 1].hide)
					} else {
						_options.btnHide.push(false)
					}
					var key = "btn" + i;
					_options[key] = deliver.buttons[i - 1].handler;
					if (deliver.buttons[i - 1].OKFN) {
						layer.buttons = deliver.buttons
					}
				}
			}
			if (deliver.bottomHTML) {
				_options.bottomHTML = deliver.bottomHTML
			}
			if (deliver.isHead != undefined && deliver.isHead == false) {
				_options.title = false;
				_options.closeBtn = 0
			}
			if (!(deliver.url) && !(deliver.type) && deliver.htmlId) {
				_options.content = deliver.contentCopyWindow.$("#" + deliver.htmlId);
				var htmlObj = deliver.contentCopyWindow.$("#" + deliver.htmlId).clone(true);
				deliver.contentCopyWindow.$("#" + deliver.htmlId).after('<div id="' + deliver.htmlId + '_area"></div>');
				deliver.contentCopyWindow.$("#" + deliver.htmlId + "_area").after(htmlObj);
				deliver.contentCopyWindow.$("#" + deliver.htmlId + "_area").remove()
			}
			if (deliver.type == "panel" && deliver.htmlId) {
				if (deliver.timeout) {
					_options.timeout = deliver.timeout
				}
				_options.type = 1;
				_options.nameType = deliver.type;
				_options.content = deliver.contentCopyWindow.$("#" + deliver.htmlId);
				_options.title = false;
				_options.closeBtn = 0;
				if (deliver.top) {
					if (deliver.targetId) {
						var tarobj = document.getElementById(deliver.targetId);
						var _client_height = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
						_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + document.documentElement.scrollTop;
						_options.top = _options.top + deliver.height < _client_height ? _options.top : (_options.top - deliver.height - tarobj.offsetHeight < 0 ? 0 : _options.top - deliver.height - tarobj.offsetHeight)
					} else {
						if (deliver.w_space) {
							var _client_height = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
							_options.top = deliver.top + deliver.height < _client_height ? (deliver.top + 15) : (deliver.top - deliver.height < 0 ? 0 : deliver.top - deliver.height - 15)
						} else {
							_options.top = deliver.top
						}
					}
				}
				if (deliver.left) {
					if (deliver.targetId) {
						var tarobj = document.getElementById(deliver.targetId);
						var leftTemp = tarobj.getBoundingClientRect().left;
						if ((leftTemp + deliver.width) > document.body.clientWidth) {
							leftTemp = leftTemp + tarobj.clientWidth - deliver.width
						}
						_options.left = leftTemp + deliver.width < document.body.clientWidth ? leftTemp : leftTemp - deliver.width - tarobj.offsetWidth
					} else {
						if (deliver.w_space) {
							var _client_width = document.body.clientWidth;
							_options.left = deliver.left + deliver.width < _client_width ? deliver.left + deliver.w_space : (deliver.left - deliver.width - deliver.w_space < 0 ? deliver.w_space : deliver.left - deliver.width - deliver.w_space)
						} else {
							_options.left = deliver.left
						}
					}
				}
				if (deliver.shadow == false) {
					_options.shade = 0
				}
			}
			if (deliver.type == "panel" && deliver.html) {
				_options.title = false;
				_options.shade = 0;
				_options.closeBtn = 0;
				_options.top = deliver.top
			}
			if (deliver.type == "panel" && deliver.targetId && deliver.url) {
				var tarobj = document.getElementById(deliver.targetId);
				_options.closeBtn = false;
				_options.title = false;
				_options.shade = false;
				_options.resize = false;
				_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + deliver.height < document.body.clientHeight ? tarobj.getBoundingClientRect().top + tarobj.offsetHeight : ((document.body.clientHeight - deliver.height) < 0 ? 0 : document.body.clientHeight - deliver.height - 5);
				if (_options.top < tarobj.getBoundingClientRect().bottom) {
					_options.top = _options.top - (document.body.clientHeight - tarobj.getBoundingClientRect().bottom + tarobj.offsetHeight)
				}
				_options.left = tarobj.getBoundingClientRect().left + deliver.width < document.body.clientWidth ? tarobj.getBoundingClientRect().left : tarobj.getBoundingClientRect().left - deliver.width + tarobj.offsetWidth
			}
			if (deliver.type == "panel" && deliver.targetId && deliver.html) {
				var tarobj = document.getElementById(deliver.targetId);
				_options.closeBtn = false;
				_options.title = false;
				_options.shade = false;
				_options.resize = false;
				_options.nameType = deliver.type;
				_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + document.documentElement.scrollTop;
				var leftTemp = tarobj.getBoundingClientRect().left;
				if ((leftTemp + deliver.width) > document.body.clientWidth) {
					leftTemp = leftTemp + tarobj.clientWidth - deliver.width
				}
				_options.left = leftTemp + deliver.width < document.body.clientWidth ? leftTemp : leftTemp - deliver.width - tarobj.offsetWidth
			}
			if (deliver.type == "panel" && deliver.url) {
				_options.nameType = deliver.type
			}
			if (deliver.notCopyReturnValue) {
				_options.notCopyReturnValue = true
			} else {
				_options.notCopyReturnValue = false
			}
			if (deliver.nextShade) {
				_options.nextShade = true
			} else {
				_options.nextShade = false
			}
			_options.resize = false;
			var o = new Class(_options);
			layer.layerConfig = _options;
			layer.targetWindow = _options.targetWindow;
			layer.transParams = _options.transParams;
			layer.closeParam = deliver.closeParam;
			var layerTran = new Object();
			var tempI;
			for (tempI in layer) {
				layerTran[tempI] = layer[tempI]
			}
			return layerTran
		}
	};
	window.layui && layui.define ? (layer.ready(), layui.define("jquery", function (exports) {
			layer.path = layui.cache.dir;
			ready.run(layui.jquery);
			window.layer = layer;
			exports("layer", layer)
		})) : (typeof define === "function" ? define(["jquery"], function () {
			ready.run(window.jQuery);
			return layer
		}) : function () {
		ready.run(window.jQuery);
		layer.ready()
	}
		())
}
(window);
function MxtMsgBox(A) {
	this.id = A.id ? A.id : Math.floor(Math.random() * 100000000);
	this.title = A.title ? A.title : "MessageBox";
	this.type = A.type ? A.type : 0;
	this.msg = A.msg ? A.msg : "";
	this.buttons = A.buttons ? A.buttons : [];
	this.width = A.width ? A.width : 350;
	this.height = A.height ? A.height : 120;
	this.isDrag = A.isDrag === false ? A.isDrag : true;
	this.borderSize = 1;
	this.closeTitle = A.closeTitle ? A.closeTitle : $.i18n("common.button.close.label");
	this.submitText = A.submitText ? A.submitText : "submit";
	this.headerHeight = 50;
	this.footerHeight = 50;
	this.imgType = A.imgType == null ? null : A.imgType;
	this.okText = A.okText ? A.okText : $.i18n("message.ok.js");
	this.cancelText = A.cancelText ? A.cancelText : $.i18n("message.cancel.js");
	this.yesText = A.yesText ? A.yesText : $.i18n("message.yes.js");
	this.noText = A.noText ? A.noText : $.i18n("message.no.js");
	this.retryText = A.retryText ? A.retryText : $.i18n("message.retry.js");
	this.detailText = A.detailText ? A.detailText : $.i18n("message.detail.js");
	this.ok_fn = A.ok_fn ? A.ok_fn : null;
	this.cancel_fn = A.cancel_fn ? A.cancel_fn : null;
	this.yes_fn = A.yes_fn ? A.yes_fn : null;
	this.no_fn = A.no_fn ? A.no_fn : null;
	this.retry_fn = A.retry_fn ? A.retry_fn : null;
	this.detail_fn = A.detail_fn ? A.detail_fn : null;
	this.close_fn = A.close_fn ? A.close_fn : this.cancel_fn;
	this.close_show = A.close_show === false ? A.close_show : true;
	this.zIndex = 5000;
	this.isFrountEvent = A.isFrountEvent ? A.isFrountEvent : false;
	this.targetWindow = A.targetWindow == null ? getCtpTop() : A.targetWindow;
	var B = this.targetWindow.$("body");
	if (!B) {
		this.targetWindow = window.parent
	}
	this.bottomHTML = A.bottomHTML;
	this._zoomParam = 1;
	if (this._zoomParam == null || this._zoomParam == undefined) {
		this._zooParam = 1
	}
	if (typeof this.targetWindow.$ === "undefined") {
		alert(this.msg);
		return
	}
	this.init();
	this.drag();
	var C = this;
	SeeUtils.addEvent(document, "keyup", function (D) {
		if (D.keyCode == 27) {
			C.close()
		}
	})
}
MxtMsgBox.prototype.init = function () {
	var E = this.id + "_mask";
	var F = this.targetWindow.document.body.clientWidth;
	var B = (this.targetWindow.document.documentElement.scrollHeight > this.targetWindow.document.documentElement.clientHeight ? this.targetWindow.document.documentElement.scrollHeight : this.targetWindow.document.documentElement.clientHeight);
	this.zIndex = this.targetWindow.getMaxZindex(2);
	if (SeeUtils.getElObj(E) == null) {
		if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
			this.targetWindow.SeeUtils.appendToBody("<div id='" + E + "' class='mask mask_msg' style='top:0;left:0;width:" + F + "px;height:" + B + "px;z-index:" + (this.zIndex) + ";zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>&nbsp;</div>")
		} else {
			this.targetWindow.$("body").append("<div id='" + E + "' class='mask mask_msg' style='top:0;left:0;width:" + F + "px;height:" + B + "px;z-index:" + (this.zIndex) + ";zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>&nbsp;</div>")
		}
	}
	if (SeeUtils.getElObj(this.id) != null) {
		if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
			this.targetWindow.SeeUtils.removeEl(this.id)
		} else {
			this.targetWindow.$("#" + this.id).remove()
		}
	}
	var A = "";
	var I = (F - (this.width + this.borderSize * 2 + 5)) / 2;
	var H = (this.targetWindow.document.documentElement.clientHeight - (this.height + this.borderSize * 2 + this.headerHeight + this.footerHeight + 5)) / 2;
	if (H <= 0) {
		H = ($(document.body).height() - (this.height + this.borderSize * 2 + this.headerHeight + this.footerHeight + 5)) / 2
	}
	A += "<div id='" + this.id + "' class='dialog_box absolute' style='z-index:" + (this.zIndex + 1) + ";left:" + ((I < 0 ? 0 : I) + this.targetWindow.document.documentElement.scrollLeft) + "px;top:" + ((H < 0 ? 0 : H) + (this.targetWindow.document.documentElement.scrollTop == 0 ? this.targetWindow.document.body.scrollTop : this.targetWindow.document.documentElement.scrollTop)) + "px;zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>";
	A += "<div id='" + this.id + "_shadow' class='dialog_shadow absolute' style='width:" + (this.width + this.borderSize * 0) + "px;height:" + (this.height + this.headerHeight + 5 + this.footerHeight) + "px;top:0px;left:0px;'>&nbsp;</div>";
	A += "<iframe id='" + this.id + "_iframe_shadow' class='absolute iframe_shadow' style='width:" + this.width + "px;height:" + (this.height + this.headerHeight + 5 + this.footerHeight) + "px;border:0'></iframe>";
	A += "<div id='" + this.id + "_main' class='dialog_main absolute' style='width:" + this.width + "px;border:0px;'>";
	A += "<div id='" + this.id + "_main_head' class='dialog_main_head'>";
	if (this.close_show) {}
	A += "</div>";
	if (this.close_show) {
		A += "<span id='" + this.id + "_close' class='dialog_close_msg' title='" + this.closeTitle + "'></span>"
	}
	A += "<div id='" + this.id + "_main_body' class='dialog_main_body left' style='width:" + this.width + "px;height:" + this.height + "px'>";
	A += "<div id='" + this.id + "_main_iframe' class='dialog_main_iframe absolute' style='top:" + this.headerHeight + "px;width:" + this.width + "px;height:" + this.height + "px;display:none;'>&nbsp;</div>";
	A += "<div id='" + this.id + "_main_content' class='dialog_main_content absolute'>";
	A += "<div class='dialog_main_content_html ' style='width:" + (this.width) + "px;height:" + (this.height) + "px;overflow:auto;border:0px;'>";
	A += "<table width='90%' class='margin_t_20' style='font-size:12px;'><tr>";
	if (this.imgType != null) {
		A += "<td valign='top' width='24' class='padding_l_20'><span class='msgbox_img_" + this.imgType + "'></span>";
		A += "</td>"
	}
	A += "<td class='msgbox_content padding_l_10' style='padding-right:15px;'>";
	A += this.msg;
	A += "</td>";
	A += "</tr></table>";
	A += "</div>";
	A += "</div>";
	A += "</div>";
	A += "<div id='" + this.id + "_main_footer' class='dialog_main_footer left align_right w100b'>";
	if (this.bottomHTML != undefined) {
		A += '<span class="left margin_l_10 padding_t_10 padding_l_10 font_size12">' + this.bottomHTML + "</span>"
	}
	A += '<span class="right padding_t_10 padding_r_10">';
	switch (this.type) {
	case 0:
		A += "<a  id='" + this.id + "ok_msg_btn_first'  class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		break;
	case 1:
		A += "<a  id='" + this.id + "ok_msg_btn_first'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 2:
		A += "<a  id='" + this.id + "yes_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.yesText + "</a>";
		A += "<a  id='" + this.id + "no_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.noText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 3:
		A += "<a  id='" + this.id + "yes_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.yesText + "</a>";
		A += "<a  id='" + this.id + "no_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.noText + "</a>";
		break;
	case 4:
		A += "<a  id='" + this.id + "retry_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.retryText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 5:
		A += "<a  id='" + this.id + "ok_msg_btn_first'  class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		A += "<a  id='" + this.id + "detail_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.detailText + "</a>";
		break;
	case 100:
		if (this.buttons.length > 0) {
			for (var D = 0; D < this.buttons.length; D++) {
				var C = this.buttons[D];
				if (D == 0) {
					A += "<a  id='" + C.id + "_btn'   class='common_button common_button_emphasize margin_r_10 hand' title='" + C.text + "'>" + C.text + "</a>"
				} else {
					A += "<a  id='" + C.id + "_btn'   class='common_button common_button_gray margin_r_10 hand' title='" + C.text + "'>" + C.text + "</a>"
				}
			}
		}
		break;
	default:
		A += "<a  id='ok_msg_btn_first'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>"
	}
	A += "</span>";
	A += "</div>";
	A += "</div>";
	A += "</div>";
	if (getCtpTop().isOffice) {
		this.officeAction(false)
	} else {
		this.officeAction(true)
	}
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		this.targetWindow.SeeUtils.appendToBody(A)
	} else {
		this.targetWindow.$("body").append(A)
	}
	var G = this;
	if (this.targetWindow.document.getElementById(this.id + "_close")) {
		this.targetWindow.document.getElementById(this.id + "_close").onclick = function () {
			G.close();
			if (G.close_fn) {
				G.close_fn()
			}
		}
	}
	switch (this.type) {
	case 0:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			}
		}
		break;
	case 1:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 2:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				G.close();
				if (G.yes_fn) {
					G.yes_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				G.close();
				if (G.no_fn) {
					G.no_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				if (G.yes_fn) {
					G.yes_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				if (G.no_fn) {
					G.no_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 3:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				G.close();
				if (G.yes_fn) {
					G.yes_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				G.close();
				if (G.no_fn) {
					G.no_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				if (G.yes_fn) {
					G.yes_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				if (G.no_fn) {
					G.no_fn()
				}
				G.close()
			}
		}
		break;
	case 4:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "retry_msg_btn").onclick = function () {
				G.close();
				if (G.retry_fn) {
					G.retry_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "retry_msg_btn").onclick = function () {
				if (G.retry_fn) {
					G.retry_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 5:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "detail_msg_btn").onclick = function () {
				G.close();
				if (G.detail_fn) {
					G.detail_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "detail_msg_btn").onclick = function () {
				if (G.detail_fn) {
					G.detail_fn()
				}
				G.close()
			}
		}
		break;
	case 100:
		if (this.buttons.length > 0) {
			for (var D = 0; D < this.buttons.length; D++) {
				var C = this.buttons[D];
				if (!this.isFrountEvent) {
					this.targetWindow.$("#" + C.id + "_btn").click(function () {
						G.close()
					}).click(C.handler)
				} else {
					this.targetWindow.$("#" + C.id + "_btn").click(C.handler).click(function () {
						G.close()
					})
				}
			}
		}
		break;
	default:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (this.ok_fn) {
					this.ok_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (this.ok_fn) {
					this.ok_fn()
				}
				G.close()
			}
		}
	}
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		if (this.targetWindow.SeeUtils.getElObj(this.id + "ok_msg_btn_first") != null) {
			this.targetWindow.$("#" + this.id + "ok_msg_btn_first").parent().focus()
		}
	} else {
		if (this.targetWindow.$("#" + this.id + "ok_msg_btn_first").size() > 0) {
			this.targetWindow.$("#" + this.id + "ok_msg_btn_first").parent().focus()
		}
	}
};
MxtMsgBox.prototype.drag = function () {
	if (this.isDrag) {
		var A = {
			cancel: ".dialog_main_content_html,.dialog_main_footer",
			containment: "body",
			scroll: false
		};
		var B = this.targetWindow.$("#" + this.id);
		if (typeof B.draggable !== "undefined") {
			B.draggable(A)
		} else {}
	}
};
MxtMsgBox.prototype.close = function () {
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		this.targetWindow.SeeUtils.removeEl(this.id + "_mask");
		this.targetWindow.SeeUtils.removeEl(this.id)
	} else {
		this.targetWindow.$("#" + this.id + "_mask").remove();
		this.targetWindow.$("#" + this.id).remove()
	}
	if (this.targetWindow.$(".layui-layer").length > 0 || this.targetWindow.$(".dialog_main").length > 0) {
		return void(0)
	}
	this.officeAction(true)
};
MxtMsgBox.prototype.officeAction = function (G) {
	var D = this;
	var I = ["officeFrameDiv", "zwIframe", "mainbodyFrame"];
	var H = getCtpTop();
	var A = SeeUtils.getElObj("componentDiv");
	if (A != null) {
		try {
			H = componentDiv.contentWindow.document.getElementById("zwIframe").contentWindow
		} catch (E) {}
	} else {
		if (getCtpTop().isOffice == true && SeeUtils.getCss("zwOfficeIframe", "display") == "block") {
			try {
				H = getCtpTop().document.getElementById("zwOfficeIframe").contentWindow
			} catch (E) {}
		}
	}
	if (H.$) {
		for (var C = 0; C < I.length; C++) {
			var B = I[C];
			var F = H.$("#" + B);
			if (F && F.size() > 0) {
				D.officeIframe = F;
				break
			}
		}
	}
	D.qianzhangIframe = $("[classid='clsid:2294689C-9EDF-40BC-86AE-0438112CA439']");
	DialogOfficeObj.qianzhangIframe = D.qianzhangIframe;
	DialogOfficeObj.officeIframe = D.officeIframe;
	if (!G) {
		DialogOfficeObj.hideOfficeObj()
	} else {
		DialogOfficeObj.showOfficeObj()
	}
};
var DialogOfficeObj = {
	officeIframe: {
		size: function () {
			return 0
		}
	},
	qianzhangIframe: {
		size: function () {
			return 0
		}
	},
	hideOfficeObjExt: function () {
		try {
			var B = getA8Top();
			var A = B.isOffice;
			if ((typeof A == "undefined") || (A == false)) {
				return false
			}
		} catch (C) {}
		return true
	},
	showOfficeObjExt: function () {
		try {
			var B = getA8Top();
			var A = B.isOffice;
			if ((typeof A == "undefined") || (A == false)) {
				return false
			}
		} catch (C) {}
		return true
	},
	hideOfficeObj: function () {
		var B = navigator.userAgent.toLowerCase();
		var A = (B.indexOf("opera") != -1);
		var C = SeeUtils.isIE;
		if (C) {
			if (!DialogOfficeObj.hideOfficeObjExt()) {
				return
			}
		}
		if (window.hideOfficeObj) {
			hideOfficeObj()
		}
	},
	showOfficeObj: function () {
		var C = __getIframeDialogNumbers();
		if (C.length != 0) {
			return
		}
		var B = navigator.userAgent.toLowerCase();
		var A = (B.indexOf("opera") != -1);
		var D = SeeUtils.isIE;
		if (D) {
			if (!DialogOfficeObj.showOfficeObjExt()) {
				return
			}
		}
		if (window.showOfficeObj) {
			showOfficeObj()
		}
	}
};
var timer = null;
var grayTimer = null;
function MxtSeeGrid(C, B) {
	this.tObj = C;
	this.hset = {};
	this.finished = true;
	this.combo_flag = true;
	this.pager = 0;
	var A = this.tObj;
	this.initDefOptions()
}
MxtSeeGrid.prototype.initDefOptions = function () {
	this.options = {
		id: Math.floor(Math.random() * 100000000) + "_grid",
		height: 200,
		width: "auto",
		gridType: "oldGrid",
		closeError: false,
		striped: true,
		novstripe: false,
		minwidth: 30,
		minheight: 0,
		resizable: true,
		method: "POST",
		errormsg: "Connection Error",
		usepager: true,
		nowrap: true,
		page: 1,
		total: 1,
		useRp: true,
		useRpInput: true,
		rp: ($.ctx && $.ctx._pageSize) ? $.ctx._pageSize : 20,
		rpMaxSize: 200,
		rpOptions: [10, 20, 30, 40, 50, 100, 150, 200],
		title: false,
		idProperty: "id",
		pagestat: "Displaying {from} to {to} of {total} items",
		pagetext: $.i18n("validate.grid.over_page6.js"),
		outof: $.i18n("validate.grid.over_page5.js"),
		findtext: "Find " + $.i18n("validate.grid.over_page5.js"),
		params: {},
		procmsg: "Processing, please wait ...",
		query: "",
		qtype: "",
		nomsg: "No items",
		minColToggle: 2,
		showToggleBtn: true,
		hideOnSubmit: true,
		autoload: true,
		blockOpacity: 0.5,
		preProcess: false,
		addTitleToCell: false,
		dblClickResize: false,
		onDragCol: false,
		onToggleCol: false,
		onChangeSort: false,
		onCurrentPageSort: true,
		onSuccess: false,
		onNoDataSuccess: false,
		onError: false,
		onSubmit: false,
		datas: null,
		click: null,
		dblclick: null,
		render: null,
		callBackTotle: null,
		singleSelect: true,
		managerName: null,
		managerMethod: null,
		isEscapeHTML: true,
		heightSubtract: 0,
		customize: true,
		vChangeParam: {
			changeTar: "grid_detail",
			overflow: "auto",
			subHeight: 0,
			position: "static",
			autoResize: true
		},
		vChange: false,
		isHaveIframe: false,
		hChangeParam: {
			subHeight: 55
		},
		hChange: false,
		parentId: null,
		slideToggleBtn: false,
		UMD: "down",
		slideToggleUpHandle: __slideToggleUpHandle,
		slideToggleDownHandle: __slideToggleDownHandle,
		dataTable: false
	}
};
MxtSeeGrid.prototype.dragColMoveStart = function (F, E) {
	var B = this;
	var D = this.options;
	SeeUtils.hideEl(B.nDiv);
	SeeUtils.hideEl(B.nBtn);
	B.hset = SeeUtils.offset(B.hDiv);
	B.hset.right = B.hset.left + SeeUtils.getElWidth(D.id + "_h_table");
	B.hset.bottom = B.hset.top + SeeUtils.getElHeight(D.id + "_h_table");
	B.dcol = E;
	B.dcoln = SeeUtils.indexByTag(B.hDiv, "th", E);
	function A() {
		if (SeeUtils.isIE) {
			return "colCopy ie"
		} else {
			return "colCopy"
		}
	}
	var G = SeeUtils.getUUid();
	var C = "<div id='" + G + "' class='" + A() + "' style='position:absolute;float:left;display:none;'>" + E.innerHTML + "</div>";
	SeeUtils.appendToBody(C);
	this.colCopy = SeeUtils.getElObj(G);
	SeeUtils.hideEl(B.cDrag)
};
MxtSeeGrid.prototype.dragColMoveMove = function (D, C) {
	var A = this;
	var B = this.options;
	SeeUtils.addClass(A.dcol, "thMove");
	SeeUtils.removeClass(A.dcol, "thOver");
	if (D.pageX > A.hset.right || D.pageX < A.hset.left || D.pageY > A.hset.bottom || D.pageY < A.hset.top) {
		SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "move")
	} else {
		SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "pointer")
	}
	SeeUtils.css(A.colCopy, "top", (D.pageY + 10) + "px");
	SeeUtils.css(A.colCopy, "left", (D.pageX + 20) + "px");
	SeeUtils.css(A.colCopy, "display", "block")
};
MxtSeeGrid.prototype.dragColMoveEnd = function () {
	var F = this;
	var A = this.options;
	SeeUtils.removeEl(F.colCopy);
	if (F.dcolt != null) {
		var G = SeeUtils.getElByTagAndIndex(F.hDiv, "th", F.dcolt);
		if (F.dcoln > F.dcolt) {
			SeeUtils.insertBefore(F.dcol, G)
		} else {
			SeeUtils.insertAfter(F.dcol, G)
		}
		F.switchCol(F.dcoln, F.dcolt);
		SeeUtils.removeEl(F.cdropleft);
		SeeUtils.removeEl(F.cdropright);
		F.rePosDrag();
		if (A.onDragCol) {
			A.onDragCol(F.dcoln, F.dcolt)
		}
	}
	this.dcol = null;
	this.hset = null;
	this.dcoln = null;
	this.dcolt = null;
	this.colCopy = null;
	SeeUtils.eachByClass(F.hDiv, ".thMove", function (J) {
		SeeUtils.removeClass(J, "thMove")
	});
	SeeUtils.showEl(F.cDrag);
	var D = SeeUtils.getElByTag(F.hDiv, "th");
	var C = [];
	var H = [];
	for (var E = 0; E < D.length; E++) {
		var B = D[E];
		var I = SeeUtils.getAttrEl(B, "colmode");
		SeeUtils.each(A.colModelBak, function (J, K) {
			if (K.name == I && typeof(K) === "object") {
				H[E] = J;
				C.push(K)
			}
		})
	}
	A.colModel = C;
	A._modesMap = H;
	this.saveCustomize()
};
MxtSeeGrid.prototype.dragTableStart = function (F, E) {
	var B = this;
	var D = this.options;
	var C = false;
	SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "row-resize");
	if (E) {
		C = true;
		SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "col-resize")
	}
	D.height = SeeUtils.getElHeight(B.bDiv);
	if (D.vChange == true && D.isHaveIframe == true) {
		var A = SeeUtils.getElObj(D.vChangeParam.changeTar);
		SeeUtils.css(A, "position", "relative");
		$("<div class='grid_mask'></div>").css({
			position: "absolute",
			background: "red",
			top: 0,
			left: 0,
			width: SeeUtils.getElWidth(A) + "px",
			height: SeeUtils.getElHeight(A) + "px",
			"z-index": 20,
			"-moz-opacity": 0,
			opacity: 0
		}).appendTo($(A))
	}
	this.vresize = {
		h: D.height,
		sy: F.pageY,
		w: D.width,
		sx: F.pageX,
		hgo: C
	}
};
MxtSeeGrid.prototype.dragTableMove = function (E) {
	var D = this;
	var B = this.options;
	var J = this.vresize;
	var G = SeeUtils.getPageY(E);
	var I = G - J.sy;
	if (!B.defwidth) {
		B.defwidth = B.width
	}
	if (B.width != "auto" && !B.nohresize && J.hgo) {
		var H = SeeUtils.getPageX(E);
		var C = H - J.sx;
		var A = J.w + C;
		if (A > B.defwidth) {
			this.gDiv.style.width = A + "px";
			B.width = A
		}
	}
	var F = J.h + I;
	if ((F > B.minheight || B.height < B.minheight) && !J.hgo) {
		this.bDiv.style.height = F + "px";
		B.height = F;
		this.fixHeight(F)
	}
	J = null
};
MxtSeeGrid.prototype.dragTableEnd = function () {
	var C = this;
	var D = this.options;
	if (D.vChange == true && D.isHaveIframe == true) {
		var A = SeeUtils.getElObj(D.vChangeParam.changeTar);
		var B = D.vChangeParam.position;
		SeeUtils.css(A, "position", B);
		SeeUtils.eachByClass(SeeUtils.getElObj(D.vChangeParam.changeTar), "grid_mask", function (E) {
			SeeUtils.removeEl(E)
		})
	}
	C.saveCustomize()
};
function _getVisibleTh(D) {
	var A = [];
	var E = _getHeaderThTrObj(D);
	if (E != null) {
		var C = SeeUtils.getElByTag(E, "th");
		for (var F = 0; F < C.length; F++) {
			var B = C[F];
			if (B.style.display === "none") {
				continue
			} else {
				A.push(B)
			}
		}
	}
	return A
}
function _getVisibleThIndex(F, D) {
	var G = _getHeaderThTrObj(F);
	if (G != null) {
		var E = SeeUtils.getElByTag(G, "th");
		var A = [];
		for (var H = 0; H < E.length; H++) {
			var C = E[H];
			if (C.style.display === "none") {
				continue
			} else {
				A.push(C)
			}
		}
		if (D != null) {
			for (var B = 0; B < A.length; B++) {
				if (A[B] === D) {
					return B
				}
			}
		}
	}
	return -1
}
function _getVisibleThDivByIndex(E, H) {
	var F = _getHeaderThTrObj(E);
	if (F != null) {
		var D = SeeUtils.getElByTag(F, "th");
		var A = [];
		for (var G = 0; G < D.length; G++) {
			var C = D[G];
			if (C.style.display === "none") {
				continue
			} else {
				A.push(C)
			}
		}
		if (H >= 0 && A[H] != null) {
			var B = SeeUtils.getElByTag(A[H], "div");
			if (B.length > 0) {
				return B[0]
			}
		}
	}
	return null
}
MxtSeeGrid.prototype.dragColStart = function (H, E) {
	var F = this;
	var B = this.options;
	SeeUtils.hideEl(F.nDiv);
	SeeUtils.hideEl(F.nBtn);
	var C = SeeUtils.indexByTag(F.cDrag, "div", E);
	var I = _getVisibleThDivByIndex(F, C);
	var D = SeeUtils.getElWidth(I);
	SeeUtils.addClass(E, "dragging");
	SeeUtils.eachBySiblings(E, function (J) {
		SeeUtils.hideEl(J)
	});
	var A = SeeUtils.getPrevEle(E);
	SeeUtils.addClass(A, "dragging");
	SeeUtils.showEl(A);
	var G = false;
	if (navigator.userAgent.indexOf("MSIE 8") != -1 || navigator.userAgent.indexOf("MSIE 9") != -1) {
		G = true
	}
	F.colresize = {
		startX: (G ? window.event.clientX : H.pageX),
		ol: parseInt(E.style.left),
		ow: D,
		n: C
	};
	SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "col-resize")
};
MxtSeeGrid.prototype.dragColMove = function (G) {
	var D = this;
	var A = this.options;
	var B = D.colresize.n;
	var E = false;
	if (navigator.userAgent.indexOf("MSIE 8") != -1 || navigator.userAgent.indexOf("MSIE 9") != -1) {
		E = true
	}
	var I = (E ? window.event.clientX : G.pageX) - D.colresize.startX;
	var H = D.colresize.ol + I;
	var F = D.colresize.ow + I;
	if (F > A.minwidth) {
		var C = SeeUtils.getElByTagAndIndex(D.cDrag, "div", B);
		SeeUtils.css(C, "left", H + "px");
		D.colresize.nw = F
	}
};
MxtSeeGrid.prototype.dragColEnd = function (G) {
	var E = this;
	var F = this.options;
	var H = E.colresize.n;
	var A = E.colresize.nw;
	if (A != null) {
		var D = _getVisibleThDivByIndex(E, H);
		SeeUtils.setElWidth(D, A);
		SeeUtils.eachByTag(E.bDiv, "tr", function (I) {
			var J = _getVisibleTdDivByIndex(I, H);
			SeeUtils.setElWidth(J, A)
		})
	}
	E.hDiv.scrollLeft = E.bDiv.scrollLeft;
	var C = SeeUtils.getElByTagAndIndex(E.cDrag, "div", H);
	SeeUtils.eachBySiblings(C, function (I) {
		SeeUtils.showEl(I)
	});
	SeeUtils.eachByClass(E.cDrag, "dragging", function (I) {
		SeeUtils.removeClass(I, "dragging")
	});
	E.rePosDrag();
	this.fixHeight(null, E);
	E.colresize = false;
	var B = F.colModel[H].name;
	E.saveCustomize()
};
function _getVisibleTdDivByIndex(E, G) {
	var D = SeeUtils.getElByTag(E, "td");
	var A = [];
	for (var F = 0; F < D.length; F++) {
		var C = D[F];
		if (C.style.display === "none") {
			continue
		} else {
			A.push(C)
		}
	}
	if (G >= 0 && A[G] != null) {
		var B = SeeUtils.getElByTag(A[G], "div");
		if (B.length > 0) {
			return B[0]
		}
	}
	return null
}
function _createSpanGetInfo(D, A, C, G) {
	var E = SeeUtils.getUUid();
	var B = "<span id='" + E + "' style='padding-right:" + SeeUtils.getCss(D, "padding-right") + ";padding-left:" + SeeUtils.getCss(D, "padding-left") + ";font-size: " + SeeUtils.getCss(D, "font-size") + "'>" + D.innerHTML + "</span>";
	SeeUtils.prepend(B, SeeUtils.getElByTag(document, "body")[0]);
	var F = SeeUtils.getElObj(E);
	A = SeeUtils.getElWidth(F);
	SeeUtils.eachByTag(C.bDiv, "tr", function (H) {
		var J = 0;
		var I = _getVisibleTdDivByIndex(H, G);
		F.innerHTML = I.innerHTML;
		SeeUtils.css(F, "fontSize", SeeUtils.getCss(I, "font-size"));
		SeeUtils.css(F, "paddingLeft", SeeUtils.getCss(I, "padding-left"));
		SeeUtils.css(F, "paddingRight", SeeUtils.getCss(I, "padding-right"));
		J = SeeUtils.getElWidth(F) + 5;
		A = (J > A) ? J : A
	});
	SeeUtils.removeEl(F);
	return A
}
MxtSeeGrid.prototype.autoResizeColumn = function (E, F) {
	var F = this;
	var B = this.options;
	if (!B.dblClickResize) {
		return
	}
	var C = SeeUtils.indexByTag(F.cDrag, "div", E);
	var J = _getVisibleThDivByIndex(F, C);
	var H = parseInt(E.style.left),
	D = SeeUtils.getElWidth(J),
	G = 0,
	A = 0;
	G = _createSpanGetInfo(J, G, F, C);
	G = (B.minWidth > G) ? B.minWidth : G;
	A = H + (G - D);
	var I = SeeUtils.getElByTagAndIndex(F.cDrag, "div", C);
	SeeUtils.css(I, "left", A);
	F.colresize = {
		nw: G,
		n: C
	};
	this.dragEnd(F)
};
MxtSeeGrid.prototype.dragStart = function (E, D, C) {
	var A = this;
	var B = this.options;
	if (E == "colresize") {
		this.dragColStart(D, C)
	} else {
		if (E == "vresize") {
			this.dragTableStart(D, C)
		} else {
			if (E == "colMove") {
				this.dragColMoveStart(D, C)
			}
		}
	}
	$("body").noSelect()
};
MxtSeeGrid.prototype.dragMove = function (C) {
	var A = this;
	var B = this.options;
	if (A.colresize) {
		this.dragColMove(C)
	} else {
		if (A.vresize) {
			this.dragTableMove(C)
		} else {
			if (A.colCopy) {
				this.dragColMoveMove(C)
			}
		}
	}
};
MxtSeeGrid.prototype.dragEnd = function () {
	var B = this.options;
	var A = this;
	if (A.colresize) {
		this.dragColEnd()
	} else {
		if (A.vresize) {
			A.vresize = false;
			this.dragTableEnd()
		} else {
			if (A.colCopy) {
				this.dragColMoveEnd()
			}
		}
	}
	SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "default");
	$("body").noSelect(false)
};
MxtSeeGrid.prototype.extendOptions = function (A) {
	A = $.extend(this.options, A);
	A.colModelBak = $.extend({}, A.colModel);
	this.closeError = A.closeError;
	this.options = A;
	__initVChangeParam(this.options);
	return A
};
MxtSeeGrid.prototype.initGridCtl = function () {
	var A = this;
	A._initTableElAttr();
	A._initGridContainer();
	A._addGridHeader();
	A._addGridBody();
	A._initTableHeight();
	A._initGridHeaderLabel();
	A._initThEvent();
	A.initGridBodyProp();
	A.addRowProp();
	A.addLinDrap();
	A.addVGrip();
	A._addGridPage();
	A._addGridTitle();
	A._addFieldShowHidePanel();
	A._addEditorLayer();
	A._initDocumentEvents();
	A.rePosDrag();
	A.fixHeight();
	A._loadData();
	initFlag = false;
	A._endGridInit()
};
function _tableToggleClick(C, B, A) {
	if (B || B === "true") {
		SeeUtils.toggleClass(C, "hideBody");
		SeeUtils.toggleClass(A, "vsble")
	}
}
MxtSeeGrid.prototype._addSearchitems = function (F, B) {
	if (B.searchitems) {
		var M = "pSearchclick_" + B.id;
		window[M] = function (O, N) {
			$(F.sDiv).slideToggle("fast", function () {
				$(".sDiv:visible input:first", F.gDiv).trigger("focus")
			})
		};
		SeeUtils.prepend("<div class='pGroup'> <div class='pSearch pButton' onclick='" + M + "(event,this)'><span></span></div> </div>  <div class='btnseparator'></div>", B.id + "_pDiv_page");
		var J = B.searchitems;
		var C = "",
		D = "";
		for (var L = 0; L < J.length; L++) {
			if (B.qtype == "" && J[L].isdefault == true) {
				B.qtype = J[L].name;
				D = 'selected="selected"'
			} else {
				D = ""
			}
			C += "<option value='" + J[L].name + "' " + D + " >" + J[L].display + "&nbsp;&nbsp;</option>"
		}
		if (B.qtype == "") {
			B.qtype = J[0].name
		}
		var K = "inputKeyDownId_" + B.id;
		window[K] = function (N) {
			if (N.keyCode == 13) {
				F.doSearch()
			}
		};
		var A = "selectKeyDownId_" + B.id;
		window[A] = function (N) {
			if (N.keyCode == 13) {
				F.doSearch()
			}
		};
		var E = "clearClickId_" + B.id;
		window[E] = function (N) {
			SeeUtils.eachElsByTagAndProp(F.sDiv, "input", "name", "q", function (O) {
				SeeUtils.setElVal(O, "")
			});
			B.query = "";
			F.doSearch()
		};
		var H = SeeUtils.getUUid();
		var I = "<div class='sDiv2'>" + B.findtext + " <input type='text' value='" + B.query + "' size='30' name='q' id='" + B.id + "_search_input' onkeydown='" + K + "(event)' class='qsbox' />  <select name='qtype' onkeydown='" + A + "(event)'>" + C + "</select></div>";
		var G = "<div class='sDiv' id='" + H + "'>" + I + "<div style='clear:both' onclick='" + E + "()'></div></div>";
		SeeUtils.insertAfter(G, F.bDiv);
		F.sDiv = SeeUtils.getElObj(H)
	}
};
MxtSeeGrid.prototype._addPageRecordLabel = function (B, C) {
	var C = this.options;
	var B = this;
	B.pageInputId = SeeUtils.getUUid();
	var A = "blurInputEventId_" + C.id;
	window[A] = function (G, E) {
		var H = SeeUtils.getElVal(B.pageInputId);
		var F = H.replace(/\D/g, "");
		if (F <= 0) {
			F = C.rp
		}
		SeeUtils.setElVal(B.pageInputId, F);
		SeeUtils.getElObj(B.gridGoId).click()
	};
	if (C.useRpInput) {
		var D = SeeUtils.getElObj(C.id + "_pDiv_page");
		SeeUtils.prepend("<span>" + $.i18n("validate.grid.over_page.js") + "<input type='text' id='" + B.pageInputId + "' name='rp' onblur='" + A + "(event)' maxlength='3' value='" + C.rp + "' class='common_over_page_txtbox' style='width:32px;'/><span class='margin_r_10 total' id='" + C.id + "_total_number'>" + $.i18n("validate.grid.over_page2.js") + "0" + $.i18n("validate.grid.over_page3.js") + "</span><span class='total_page' id='" + C.id + "_total_page'>1</span></span>", D)
	}
};
MxtSeeGrid.prototype._addGridPage = function () {
	var A = this.options;
	var H = this;
	if (A.usepager) {
		var K = "pReload_click" + A.id;
		var E = "pFirst_click" + A.id;
		var J = "pPrev_click" + A.id;
		var B = "pNext_click" + A.id;
		var D = "pLast_click" + A.id;
		var I = "pcontrol_input_keydown" + A.id;
		var F = "grid_go_click" + A.id;
		window[K] = function () {
			H.populate()
		};
		window[E] = function () {
			H.changePage("first")
		};
		window[J] = function () {
			H.changePage("prev")
		};
		window[B] = function () {
			H.changePage("next")
		};
		window[D] = function () {
			H.changePage("last")
		};
		window[I] = function (L) {
			if (L.keyCode == 13) {
				H.changePage("input")
			}
		};
		window[F] = function () {
			H.changePage("input", true)
		};
		H.gridGoId = SeeUtils.getUUid();
		var G = '<a  onclick="' + E + '()"  class="pFirst pButton common_over_page_btn"><span class="pageFirst"></span></a><a  onclick="' + J + '()" class="pPrev pButton common_over_page_btn"><span class="pagePrev"></span></a><span class="pcontrol margin_l_10">' + A.pagetext + '<input id="' + A.id + '_page_number" onkeydown="' + I + '(event)" type="text" size="4" value="1" class="common_over_page_txtbox"/>' + A.outof + '</span><a onclick="' + B + '()"  class="pNext pButton common_over_page_btn"><span class="pageNext"></span></a><a  onclick="' + D + '()" class="pLast pButton common_over_page_btn"><span class="pageLast"></span></a><a  class="common_over_page_btn" style="display:none"><span onclick="' + K + '()"  id="' + A.id + '_pReload" class="pReload pButton "><span class="ico16 refresh_16 margin_lr_5">&nbsp;</span></span></a><a onclick="' + F + '()"  href="javascript:void(0)" id="' + H.gridGoId + '" class="common_button margin_lr_10 common_over_page_go">GO</a><div class="pGroup"><span class="pPageStat" id="' + A.id + '_pPageStat"></span></div>';
		var C = '<div class="pDiv" id="' + A.id + '_pDiv"><div id="' + A.id + '_pDiv_page" class="pDiv2 common_over_page align_right" style="padding-top:10px;padding-bottom:10px;">' + G + "</div></div>";
		SeeUtils.insertAfter(C, H.bDiv);
		H.pDiv = document.getElementById(A.id + "_pDiv");
		this._addPageRecordLabel(H, A);
		this._addSearchitems(H, A)
	}
};
MxtSeeGrid.prototype._addGridTitle = function () {
	var D = this.options;
	var C = this;
	if (D.title) {
		function A() {
			if (D.showTableToggleBtn) {
				return '<div class="ptogtitle" onclick="_tableToggleClick(\'' + D.id + "','" + D.showTableToggleBtn + '\',this)" title="Minimize/Maximize Table"><span></span></div>'
			}
			return ""
		}
		var B = [];
		B.push("<div class='mDiv'><div class='ftitle'>" + D.title + "</div>" + A() + "</div>");
		SeeUtils.prepend(B.join(""), C.gDiv)
	}
};
function _initShowToggleClick(C, B) {
	var A = "nBtn" + C.id;
	window[A] = function () {
		SeeUtils.addClass(B.nBtn, "set_col");
		SeeUtils.showEl(B.nDiv);
		if (SeeUtils.getElHeight(B.nDiv) >= (SeeUtils.getElHeight(B.bDiv) + SeeUtils.getElHeight(B.pDiv))) {
			SeeUtils.setElHeight(B.nDiv, SeeUtils.getElHeight(B.bDiv) + SeeUtils.getElHeight(B.pDiv) + "px")
		}
		return true
	};
	return A
}
function _initCheckBoxHideShowCol(C, B) {
	var A = "togColClick" + C.id;
	window[A] = function (F) {
		var E = SeeUtils.getCheckedInpus(B.nDiv);
		if (E.length < C.minColToggle && F.checked == false) {
			F.checked = true;
			return false
		}
		var D = SeeUtils.getNextEl(SeeUtils.getElObj(F).parentNode);
		if (D != null) {
			D.click()
		}
		if (SeeUtils.getElObj("total_0_" + C.id) != null) {
			SeeUtils.setElWidth("total_0_" + C.id, SeeUtils.getElWidth(C.id + "_hDivBox"))
		}
	};
	return A
}
function _initLableHideShowCol(C, A) {
	var B = "ndcol2Click" + C.id;
	window[B] = function (F) {
		var D = SeeUtils.getCheckedInpus(A.nDiv);
		if (D.length <= C.minColToggle && SeeUtils.getElByTagAndIndex(SeeUtils.getPrevEle(F), "input", 0).checked) {
			return false
		}
		var E = SeeUtils.getElByTagAndIndex(SeeUtils.getPrevEle(F), "input", 0).value;
		if (SeeUtils.getElByTagAndIndex(SeeUtils.getPrevEle(F), "input", 0).value == "_reset_width_") {
			A.saveCustomize(true, function () {
				window.location.reload()
			});
			F.checked = false
		} else {
			var G = SeeUtils.getElByTagAndIndex(SeeUtils.getPrevEle(F), "input", 0).value;
			return A.toggleCol(G)
		}
	};
	return B
}
MxtSeeGrid.prototype._addFieldShowHidePanel = function () {
	var C = this;
	var A = this.options;
	C.nBtn = document.createElement("div");
	C.cdropleft = document.createElement("span");
	C.cdropleft.className = "cdropleft";
	C.cdropright = document.createElement("span");
	C.cdropright.className = "cdropright";
	var G = SeeUtils.getElHeight(C.bDiv);
	var J = C.bDiv.offsetTop - 2;
	var F = _initLableHideShowCol(A, C);
	var D = _initCheckBoxHideShowCol(A, C);
	if (SeeUtils.getElByTag(C.hDiv, "th").length) {
		var L = [];
		var I = 0;
		SeeUtils.eachByTag(C.hDiv, "th", function (N) {
			SeeUtils.eachByTag(N, "div", function (Q) {
				var P = SeeUtils.eachElsByTagAndProp(C.hDiv, "th", "axis", "col" + I)[0];
				var O = 'checked="checked"';
				if (P.style.display == "none") {
					O = ""
				}
				var T = Q.parentNode;
				var S = "";
				var R = SeeUtils.getAttrEl(T, "isToggleHideShow");
				if (R == "false") {
					S = "none"
				}
				if (Q.innerHTML.indexOf("locking_white_16") > -1) {
					newInnerHTML = Q.innerHTML.replace(/locking_white_16/g, "locking_16");
					L.push('<tr style="display:' + S + '"><td class="ndcol1"><input onclick="' + D + '(this)" type="checkbox" ' + O + ' class="togCol" value="' + I + '" /></td><td class="ndcol2" onclick="' + F + '(this)">' + newInnerHTML + "</td></tr>")
				} else {
					L.push('<tr style="display:' + S + '"><td class="ndcol1"><input onclick="' + D + '(this)" type="checkbox" ' + O + ' class="togCol" value="' + I + '" /></td><td class="ndcol2" onclick="' + F + '(this)">' + Q.innerHTML + "</td></tr>")
				}
				I++
			})
		});
		var B = SeeUtils.getUUid();
		var E = "<div class='nDiv' id='" + B + "' style='display: none;top:" + J + "px;marginBottom:" + (G * -1) + "px'><table cellpadding='0' cellspacing='0'><tbody>" + L.join("") + "</tbody></table></div>";
		SeeUtils.prepend(E, C.gDiv);
		C.nDiv = SeeUtils.getElObj(B);
		if (A.showToggleBtn) {
			var H = _initShowToggleClick(A, C);
			var K = SeeUtils.getUUid();
			var M = "<div class='nBtn' id='" + K + "' onclick='" + H + "()'><div title='" + $.i18n("grid.togglefield.js") + "'></div></div>";
			SeeUtils.prepend(M, C.gDiv);
			C.nBtn = SeeUtils.getElObj(K)
		}
	}
};
MxtSeeGrid.prototype.fixHeight = function (B, E) {
	var E = this;
	var F = this.options;
	B = false;
	if (!B) {
		B = SeeUtils.getElHeight(E.bDiv)
	}
	var H = SeeUtils.getElHeight(E.hDiv);
	SeeUtils.eachByTag(E.cDrag, "div", function (I, J) {
		SeeUtils.setElHeight(I, B + H)
	});
	var G = parseInt(SeeUtils.getElHeight(E.nDiv));
	if (G > B) {
		SeeUtils.setElHeight(E.nDiv, B);
		SeeUtils.setElWidth(E.nDiv, 200)
	} else {
		SeeUtils.setElHeight(E.nDiv, "auto");
		SeeUtils.setElWidth(E.nDiv, "auto")
	}
	E.blockHeight = B;
	SeeUtils.css(E.block, "marginBottom", (B * -1) + "px");
	var A = E.bDiv.offsetTop + B;
	if (F.height != "auto" && F.resizable) {
		A = E.vDiv.offsetTop
	}
	if (E.rDiv) {
		SeeUtils.setElHeight(E.rDiv, A)
	}
	if (F.vChange) {
		var D = SeeUtils.getElObj(F.vChangeParam.changeTar);
		if (D != null && E.gDiv.parentNode != null) {
			var C = SeeUtils.getElHeight(E.gDiv.parentNode);
			SeeUtils.css(D, "overflow", F.vChangeParam.overflow);
			SeeUtils.setElHeight(D, C - SeeUtils.getElHeight(E.gDiv) - F.vChangeParam.subHeight)
		}
	}
};
MxtSeeGrid.prototype._initTableElAttr = function () {
	var A = this.options;
	SeeUtils.showEl(this.tObj);
	SeeUtils.attrEl(this.tObj, "cellPadding", 0);
	SeeUtils.attrEl(this.tObj, "cellSpacing", 0);
	SeeUtils.attrEl(this.tObj, "border", 0);
	SeeUtils.removeAttrEl("width");
	A.gridClassName = A.id + "_classtag"
};
MxtSeeGrid.prototype.getGridInterface = function (A, B) {
	return this
};
MxtSeeGrid.prototype.rePosDrag = function () {
	var I = this;
	var C = this.options;
	var K = this.hDiv.scrollLeft;
	var L = 0 - K;
	if (K > 0) {
		L -= Math.floor(C.cgwidth / 2)
	}
	SeeUtils.css(I.cDrag, "top", (I.hDiv.offsetTop + 1) + "px");
	var J = this.cdpad;
	SeeUtils.eachByTag(I.cDrag, "div", function (M) {
		SeeUtils.hideEl(M)
	});
	var H = _getVisibleTh(I);
	for (var G = 0; G < H.length; G++) {
		var B = parseInt(SeeUtils.getElWidth(_getVisibleThDivByIndex(I, G)));
		if (L == 0) {
			L -= Math.floor(C.cgwidth / 2)
		}
		B = B + L + J;
		if (isNaN(B)) {
			B = 0
		}
		var A = SeeUtils.getElByTagAndIndex(I.cDrag, "div", G);
		if (A != null) {
			SeeUtils.css(A, "left", B + "px");
			SeeUtils.showEl(A)
		}
		L = B
	}
	var F = SeeUtils.getElByTag(I.bDiv, "table");
	var E = SeeUtils.getByClass(I.hDiv, "hDivBox");
	var D = [];
	if (E.length > 0) {
		D = SeeUtils.getElByTag(E[0], "table")
	}
	if (F.length > 0 && D.length > 0) {
		SeeUtils.css(F[0], "width", SeeUtils.getElWidth(D[0]))
	}
	if (E.length > 0 && D.length > 0) {
		SeeUtils.css(E[0], "width", SeeUtils.getElWidth(D[0]) + 20 + "px")
	}
};
function _getThColInfo(F, A, D, I, C) {
	for (var G = 0; G < F.length; G++) {
		var K = F[G],
		H = SeeUtils.getAttrEl(K, "colmode"),
		J = SeeUtils.isVisible(K);
		if (H && H != "") {
			for (var E = 0; E < A.colModel.length; E++) {
				var B = A.colModel[E];
				if (B.name == H) {
					if (!J) {
						D[B.name] = 0
					} else {
						I.push(B.name + "#" + SeeUtils.getElWidth(K))
					}
					C.push(B.name)
				}
			}
		}
	}
}
function _saveInfoToDb(D, C, A, E, B) {
	var F = new ctpUserPreferenceManager();
	F.saveGridPreference(D, C, {
		success: function () {
			if (getCtpTop().vPortal && getCtpTop().vPortal.customize) {
				var G = getCtpTop().vPortal.customize.grid_pref;
				var H = {};
				if (G) {
					H = $.parseJSON(G)
				}
				var J = H[D];
				if (J == undefined || J == null || J == "") {
					J = {}
				}
				if (A) {
					J.resetWidth = true
				} else {
					J.__ORDER = E
				}
				H[D] = J;
				var I = $.toJSON(H);
				getCtpTop().vPortal.customize.grid_pref = I
			}
			if (B != undefined) {
				B()
			}
		}
	})
}
MxtSeeGrid.prototype.saveCustomize = function (G, M) {
	var J = this;
	var A = this.options;
	if (A.customize) {
		var L = A.customId;
		if (L) {
			var I = SeeUtils.getElByTag(J.hDiv, "th");
			var F = {};
			var E = [];
			var K = [];
			_getThColInfo(I, A, F, K, E);
			if (G) {
				F = {};
				F.resetWidth = true
			} else {
				F.__ORDER = E
			}
			for (var D = 0; D < E.length; D++) {
				var B = E[D];
				var N = B + "#";
				for (var H = 0; H < K.length; H++) {
					var C = K[H];
					if (C.substring(0, N.length) == N) {
						E[D] = C
					}
				}
			}
			_saveInfoToDb(L, F, G, E, M)
		}
	}
};
MxtSeeGrid.prototype.toggleCol = function (H, C) {
	var F = this;
	var A = this.options;
	var I = this.tObj;
	var G = SeeUtils.eachElsByTagAndProp(this.hDiv, "th", "axis", "col" + H)[0];
	var B = SeeUtils.indexByTag(F.hDiv, "th", G);
	var D = SeeUtils.eachElsByTagAndProp(F.nDiv, "input", "value", H)[0];
	if (C == null) {
		C = G.hidden
	}
	var E = SeeUtils.getCheckedInpus(F.nDiv);
	if (E.length < A.minColToggle && !C) {
		return false
	}
	if (C) {
		G.hidden = false;
		SeeUtils.showEl(G);
		D.checked = true
	} else {
		G.hidden = true;
		SeeUtils.hideEl(G);
		D.checked = false
	}
	this.hideColByIndex(B, C);
	this.rePosDrag();
	if (A.onToggleCol) {
		A.onToggleCol(H, C)
	}
	this.saveCustomize();
	return C
};
MxtSeeGrid.prototype.hideColByIndex = function (C, A) {
	var B = SeeUtils.getElByTag(this.tObj, "tbody");
	if (B.length > 0) {
		SeeUtils.eachByTag(B[0], "tr", function (E) {
			if (A) {
				var D = SeeUtils.getElByTagAndIndex(E, "td", C);
				SeeUtils.showEl(D)
			} else {
				var D = SeeUtils.getElByTagAndIndex(E, "td", C);
				SeeUtils.hideEl(D)
			}
		})
	}
};
MxtSeeGrid.prototype.switchCol = function (D, B) {
	var E = this;
	var F = this.options;
	var A = SeeUtils.getElByTagAndIndex(this.tObj, "tbody", 0);
	SeeUtils.eachByTag(A, "tr", function (I) {
		var J = SeeUtils.getElByTagAndIndex(I, "td", B);
		var H = SeeUtils.getElByTagAndIndex(I, "td", D);
		if (D > B) {
			SeeUtils.beforeEL(J, H)
		} else {
			SeeUtils.afterEL(J, H)
		}
	});
	var G = SeeUtils.getElByTagAndIndex(this.nDiv, "tr", B);
	var C = SeeUtils.getElByTagAndIndex(this.nDiv, "tr", D);
	if (D > B) {
		SeeUtils.beforeEL(G, C)
	} else {
		SeeUtils.afterEL(G, C)
	}
	this.hDiv.scrollLeft = this.bDiv.scrollLeft
};
MxtSeeGrid.prototype.scroll = function () {
	var A = this;
	var B = this.options;
	this.hDiv.scrollLeft = this.bDiv.scrollLeft;
	this.rePosDrag()
};
MxtSeeGrid.prototype._addGblock = function () {
	var F = this.options;
	var C = this;
	var A = SeeUtils.getElHeight(C.bDiv);
	var D = C.bDiv.offsetTop - 2;
	var B = SeeUtils.getUUid();
	var E = "<div class='gBlock' id='" + B + "' style='height:" + A + "px;opacity:" + F.blockOpacity + ";filter:alpha(opacity=" + F.blockOpacity + ");z-index:1;left:0px;top:" + (D - 2) + "px;margin-bottom:" + (A * -1) + "px;width: " + SeeUtils.getElWidth(C.bDiv) + "px;position:relative;'></div>";
	SeeUtils.prepend(E, this.gDiv);
	C.block = document.getElementById(B)
};
MxtSeeGrid.prototype.populate = function (D) {
	var E = this;
	var G = this.options;
	if (this.loading) {
		return true
	}
	if (G.onSubmit) {
		var B = G.onSubmit();
		if (!B) {
			return false
		}
	}
	this.loading = true;
	if (SeeUtils.getElObj(G.id + "_pPageStat") != null) {
		SeeUtils.getElObj(G.id + "_pPageStat").innerHTML = G.procmsg
	}
	SeeUtils.addClass(G.id + "_pReload", "loading");
	SeeUtils.css(E.block, "top", E.bDiv.offsetTop + "px");
	if (G.hideOnSubmit) {
		this._addGblock()
	}
	if (SeeUtils.isOpera) {
		SeeUtils.css(this.tObj, "visibility", "hidden")
	}
	if (!G.newp) {
		G.newp = 1
	}
	if (G.page > G.pages) {
		G.page = G.pages
	}
	if (D) {
		G.params = D;
		if (D.newp) {
			G.newp = D.newp
		}
		if (D.page) {
			G.newp = D.page
		}
	}
	var C = {
		page: G.newp,
		size: G.rp,
		sortField: G.sortname,
		sortOrder: G.sortorder
	};
	if (G.onCurrentPageSort) {
		C.sortField = undefined;
		C.sortOrder = undefined
	}
	if (G.managerName && G.managerMethod && window[G.managerName]) {
		var A = new CallerResponder();
		A.success = function (I) {
			if (I == null) {
				return
			}
			I.rows = I.data;
			E.addData(I)
		};
		var H = A.error;
		A.error = function (J, I, K) {
			SeeUtils.removeEl(E.block);
			E.loading = false;
			E.addData([]);
			H(J, I, K)
		};
		if (E.closeError) {
			A.complete = function () {
				SeeUtils.removeEl(E.block)
			}
		}
		var F = new window[G.managerName]();
		F[G.managerMethod](C, G.params, A)
	} else {
		if (G.datas != null) {
			E.addData(G.datas)
		}
	}
};
MxtSeeGrid.prototype.doSearch = function () {
	var B = this;
	var C = this.options;
	C.query = SeeUtils.getElVal(C.id + "_search_input");
	var A = SeeUtils.eachElsByTagAndProp(B.sDiv, "select", "name", "qtype")[0];
	if (A != null) {
		C.qtype = SeeUtils.getElVal(A);
		C.params[C.qtype] = C.query;
		C.newp = 1;
		this.populate()
	}
};
MxtSeeGrid.prototype.changePage = function (C, B) {
	var D = this;
	var E = this.options;
	SeeUtils.eachByClass(this.hDiv, "sdesc", function (F) {
		SeeUtils.removeClass(F, "sdesc")
	});
	SeeUtils.eachByClass(this.hDiv, "sasc", function (F) {
		SeeUtils.removeClass(F, "sasc")
	});
	if (E.total == 0) {
		return false
	}
	if (this.loading) {
		return true
	}
	switch (C) {
	case "first":
		E.newp = 1;
		break;
	case "prev":
		if (E.page > 1) {
			E.newp = parseInt(E.page) - 1
		}
		break;
	case "next":
		if (E.page < E.pages) {
			E.newp = parseInt(E.page) + 1
		}
		break;
	case "last":
		E.newp = E.pages;
		break;
	case "input":
		var A = parseInt(SeeUtils.getElVal(E.id + "_page_number"));
		if (isNaN(A)) {
			A = 1
		}
		if (A < 1) {
			A = 1
		} else {
			if (A > E.pages) {
				A = E.pages
			}
		}
		SeeUtils.setElVal(E.id + "_page_number", A);
		E.newp = A;
		break
	}
	E.rpNew = SeeUtils.getElVal(D.pageInputId);
	if (E.rpNew > E.rpMaxSize) {
		E.rpNew = E.rpMaxSize;
		SeeUtils.setElVal(D.pageInputId, E.rpNew)
	}
	if ((E.newp == E.page) && (E.rp == E.rpNew) && !B) {
		return false
	}
	E.rp = E.rpNew;
	if (E.onChangePage) {
		E.onChangePage(E.newp)
	} else {
		this.populate()
	}
};
MxtSeeGrid.prototype.addRowProp = function () {
	var D = this;
	var E = this.options;
	var H = true;
	var A = "trClick_" + E.id;
	window[A] = function (O, L) {
		var N = $(L);
		var M = (O.target || O.srcElement);
		if (M.href || M.type) {
			if (M.type == "checkbox" || M.type == "radio") {
				var K = M.checked;
				if (K) {
					SeeUtils.eachBySiblings(L, function (Q) {
						SeeUtils.removeClass(Q, "trSelected")
					});
					SeeUtils.addClass(L, "trSelected")
				} else {
					SeeUtils.removeClass(L, "trSelected")
				}
			}
			return true
		}
		if (E.singleSelect && !D.multisel) {
			SeeUtils.eachBySiblings(L, function (Q) {
				SeeUtils.removeClass(Q, "trSelected")
			});
			if ($(M).find("input[gridrowcheckbox]").size() == 0) {
				N.siblings().find("input[gridrowcheckbox]").prop("checked", false)
			}
			SeeUtils.addClass(L, "trSelected");
			if (SeeUtils.hasClass(L, "trSelected")) {
				var P = N.find("input[gridrowcheckbox]");
				if (P.prop("disabled") == false) {
					P.prop("checked", true)
				}
			} else {
				N.find("input[gridrowcheckbox]").prop("checked", false)
			}
		}
		if (E.vChange) {
			if (H) {
				if (SeeUtils.getElObj(E.vChangeParam.changeTar) != null && E.vChangeParam.autoResize) {
					E.UMD = "middle";
					D.resizeGridUpDown(E.UMD)
				}
				var I = N.find("input[type=checkbox]");
				if (I.size() > 0) {
					try {
						I.focus()
					} catch (O) {}
				}
				var J = N.find("input[type=radio]");
				if (J.size() > 0) {
					try {
						J.focus()
					} catch (O) {}
				}
			} else {
				H = true
			}
		}
	};
	var G = "trMousedown_" + E.id;
	window[G] = function (J, I) {
		if (J.shiftKey) {
			SeeUtils.toggleClass(I, "trSelected");
			D.multisel = true;
			$(I).focus();
			$(D.gDiv).noSelect()
		}
		if (J.ctrlKey) {
			SeeUtils.toggleClass(tObj, "trSelected");
			D.multisel = true;
			$(I).focus()
		}
	};
	var C = "trMouseup_" + E.id;
	window[C] = function (I) {
		if (D.multisel && !I.ctrlKey) {
			D.multisel = false;
			$(D.gDiv).noSelect(false)
		}
	};
	var F = "trMouseenter_" + E.id;
	window[F] = function (J, I) {
		if (D.multisel && J.shiftKey) {
			SeeUtils.toggleClass(I, "trSelected")
		}
	};
	var B = "trMouseleave_" + E.id;
	window[B] = function (J, I) {
		if (D.multisel && J.shiftKey) {
			SeeUtils.toggleClass(I, "trSelected")
		}
	}
};
MxtSeeGrid.prototype.resizeGrid = function (C, E) {
	var D = this;
	var G = this.options;
	switch (E) {
	case "up":
		SeeUtils.setElHeight(D.bDiv, C[0]);
		SeeUtils.setElHeight(G.vChangeParam.changeTar, C[2] + 53);
		break;
	case "middle":
		SeeUtils.setElHeight(D.bDiv, C[1]);
		SeeUtils.setElHeight(G.vChangeParam.changeTar, C[2] - C[1]);
		break;
	case "down":
		SeeUtils.setElHeight(D.bDiv, C[2]);
		SeeUtils.setElHeight(G.vChangeParam.changeTar, 0);
		break;
	case "auto":
		SeeUtils.setElHeight(D.bDiv, C);
		SeeUtils.setElHeight(G.vChangeParam.changeTar, 0);
		break;
	default:
		SeeUtils.setElHeight(D.bDiv, C);
		var F = 0;
		var H = 0;
		var A = 36;
		G.usepager ? F += 53 : null;
		G.resizable ? H += 11 : null;
		var B = SeeUtils.getElHeight(G.parentId) - H - F - A - C;
		SeeUtils.setElHeight(G.vChangeParam.changeTar, B);
		break
	}
};
MxtSeeGrid.prototype.resizeGridUpDown = function (A) {
	var B = this;
	var C = this.options;
	setTimeout(function () {
		var F = 0;
		var G = 0;
		var D = 36;
		C.usepager ? F += 53 : null;
		C.resizable ? G += 11 : null;
		var E = [0, (SeeUtils.getElHeight(C.parentId) - F - G) / 100 * 35, SeeUtils.getElHeight(C.parentId) - G - F - D];
		if (A == "up") {
			if (C.usepager) {
				SeeUtils.hideEl(B.pDiv)
			}
			B.resizeGrid(E, "up")
		} else {
			if (A == "middle") {
				SeeUtils.showEl(B.pDiv);
				B.resizeGrid(E, "middle")
			} else {
				if (A == "down") {
					SeeUtils.showEl(B.pDiv);
					B.resizeGrid(E, "down")
				} else {
					return
				}
			}
		}
		C.UMD = A
	}, 200)
};
function _getHeaderThTrObj(C) {
	var A = SeeUtils.getElByTag(C.hDiv, "thead");
	if (A.length > 0) {
		var B = SeeUtils.getElByTag(A[0], "tr");
		if (B.length > 0) {
			return B[0]
		}
	}
	return null
}
function _initColInfoByTheadTh(C, F, B, E, A) {
	var G = 0;
	var D = _getHeaderThTrObj(C);
	if (D != null) {
		SeeUtils.eachByTag(D, "th", function (I) {
			var L = "";
			var J = SeeUtils.getElByTagAndIndex(I, "div", 0).style.width;
			var K = I.align;
			var H = SeeUtils.getAttrEl(I, "abbr");
			if (F.sortname == H && F.sortname) {
				L += 'class="sorted" '
			}
			L += 'align="' + K + '" ';
			L += 'abbr="' + H + '"';
			if (I.hidden) {
				L += 'style="display:none"'
			}
			B.push(J);
			E.push(K);
			A.push(L);
			G++
		})
	}
	return G
}
function _addRowByData(W, M, L, C, J, V, R) {
	for (var P = 0; P < W.rows.length; P++) {
		var G = W.rows[P];
		var B = {};
		if (G.name) {
			B.name = G.name.escapeHTML(false)
		}
		if (G.color) {
			B.style = "background:" + G.color
		} else {
			if (P % 2 && M.striped) {
				B["class"] = "erow"
			}
		}
		if (G.disable) {
			B["class"] = B["class"] + " graytr"
		}
		if (G[M.idProperty]) {
			B.id = "row" + G[M.idProperty]
		}
		var I = [];
		$.each(B, function (Y, X) {
			I.push(Y);
			I.push("=");
			I.push('"' + X + '"')
		});
		var N = [];
		for (var O = 0; O < L; O++) {
			var A,
			F = M.colModel[O];
			if (typeof G.cell == "undefined") {
				A = G[F.name];
				if (A && typeof A == "string") {
					A = A.escapeHTML(true, false)
				}
			} else {
				if (typeof G.cell[O] != "undefined") {
					A = (G.cell[O] != null) ? G.cell[O] : ""
				} else {
					A = G.cell[F.name]
				}
			}
			if (A && F.cutsize) {
				A = A.substring(0, F.cutsize)
			}
			if (F.type == "checkbox") {
				A = '<input type="checkbox" gridRowCheckBox="' + M.gridClassName + "\" class='noClick' onclick='_noClickType = false;' row=\"" + P + '" value="' + A + '"/>'
			} else {
				if (F.type == "radio") {
					A = '<input type="radio" gridRowCheckBox="' + M.gridClassName + "\" class='noClick' onclick='_noClickType = false;' row=\"" + P + '" value="' + A + '" name="gridradio"/>'
				} else {
					if (M.render) {
						var T = M._modesMap ? M._modesMap[O] : O;
						A = M.render(A, G, P, Number(T), F)
					}
				}
			}
			if (A != 0 && (A === "" || A === null || typeof A === "undefined")) {
				A = "&nbsp;"
			}
			if (A === "") {
				A = "&nbsp;"
			}
			var Q = (M.colModel[O].codecfg);
			var S = '<div class="text_overflow' + (Q ? " codecfg" : "") + '"' + (Q ? ' codecfg="' + Q + '"' : "") + ' style="text-align:' + C[O] + ";width:" + J[O] + "" + ((M.nowrap == false) ? ";white-space:normal" : "") + '">' + A + "</div>";
			N.push("<td " + V[O] + ">" + S + "</td>")
		}
		var K = "trClick_" + M.id;
		var E = "trMousedown_" + M.id;
		var D = "trMouseup_" + M.id;
		var U = "trMouseenter_" + M.id;
		var H = "trMouseleave_" + M.id;
		R.push('<tr onclick="' + K + '(event,this)" onmousedown="' + E + '(event,this)" onmouseup="' + D + '(event)" onmouseenter="' + U + '(event,this)" onmouseleave="' + H + '(event,this)" ' + I.join(" ") + ">" + N.join("") + "</tr>")
	}
}
function _addCellTextTitle(A) {
	SeeUtils.eachByTag(A, "div", function (B) {
		var C = SeeUtils.trim(B.innerText);
		if (C.length > 0) {
			SeeUtils.attrEl(B, "title", C)
		}
	})
}
function _addRowClickEvent(C, B) {
	if (C.click) {
		var A = "click_" + C.id;
		window[A] = function (H) {
			var G = H.target || H.srcElement;
			if (G.className.indexOf("noClick") == -1) {
				var E = SeeUtils.closestByTagName(G, "td");
				if (E == null) {
					return
				}
				var F = E.parentNode;
				if (SeeUtils.hasClass(F, "graytr")) {
					return
				}
				var D = SeeUtils.indexByTag(F, "td", E);
				var I = SeeUtils.indexByTag(B, "tr", F);
				if (I == -1) {
					I = 0
				}
				clearTimeout(timer);
				clearTimeout(grayTimer);
				if (SeeUtils.isIE8 || SeeUtils.isIE7) {
					C.click(C.datas.rows[I], I, D);
					timer = setTimeout(function () {
							SeeUtils.addClass(F, "graytr")
						}, 200)
				} else {
					timer = setTimeout(function () {
							if (C.datas.rows[I]) {
								C.click(C.datas.rows[I], I, D);
								SeeUtils.addClass(F, "graytr")
							}
						}, 400)
				}
				grayTimer = setTimeout(function () {
						SeeUtils.removeClass(F, "graytr")
					}, 400)
			}
		};
		SeeUtils.attrEl(B, "onclick", A + "(event)")
	}
}
function _addRowDbClickEvent(C, B) {
	if (C.dblclick) {
		var A = "Dbclick_" + C.id;
		window[A] = function (H) {
			var G = H.target || H.srcElement;
			if (G.className.indexOf("noClick") == -1) {
				var E = SeeUtils.closestByTagName(G, "td");
				if (E == null) {
					return
				}
				var F = E.parentNode;
				if (SeeUtils.hasClass(F, "graytr")) {
					return
				}
				var D = SeeUtils.indexByTag(F, "td", E);
				var I = SeeUtils.indexByTag(B, "tr", F);
				if (I == -1) {
					I = 0
				}
				clearTimeout(timer);
				clearTimeout(grayTimer);
				if (C.datas.rows[I]) {
					C.dblclick(C.datas.rows[I], I, D)
				}
			}
		};
		SeeUtils.attrEl(B, "ondblclick", A + "(event)")
	}
}
function _unSelAllCheckBox(A) {
	SeeUtils.eachByClass(A.hDiv, "grid_checkbox", function (B) {
		SeeUtils.eachElsByTagAndProp(B, "input", "type", "checkbox", function (C) {
			C.checked = false
		})
	})
}
MxtSeeGrid.prototype.addData = function (G) {
	var H = this;
	var B = this.options;
	var M = this.tObj;
	_unSelAllCheckBox(H);
	G = $.extend({
			rows: [],
			page: 0,
			total: 0
		}, G);
	B.datas = G;
	if (B.preProcess) {
		G = B.preProcess(G)
	}
	SeeUtils.eachByClass(this.pDiv, "pReload", function (N) {
		SeeUtils.removeClass(N, "loading")
	});
	this.loading = false;
	if (!G) {
		if (SeeUtils.getElObj(B.id + "_pPageStat") != null) {
			SeeUtils.getElObj(B.id + "_pPageStat").innerHTML = B.procmsg
		}
		return false
	}
	if (!G.total) {
		G.total = G.rows.length
	}
	B.total = G.total;
	if (B.total == 0) {
		$("tr, a, td, div", M).unbind();
		$(M).empty();
		B.pages = 1;
		B.page = 1;
		this.buildpager();
		if (SeeUtils.getElObj(B.id + "_pPageStat") != null) {
			SeeUtils.getElObj(B.id + "_pPageStat").innerHTML = B.procmsg
		}
		if (H.block != null > 0) {
			SeeUtils.removeEl(H.block)
		}
		SeeUtils.appendTo("<div id='total_0_" + B.id + "'style='width:" + SeeUtils.getElWidth(B.id + "_hDivBox") + "px;height:1px'></div>", this.bDiv);
		if (B.onNoDataSuccess) {
			B.onNoDataSuccess(this)
		}
		if (B.callBackTotle) {
			B.callBackTotle(B.total)
		}
		this.rePosDrag();
		return false
	} else {
		var F = SeeUtils.getElObj("total_0_" + B.id);
		if (F != null) {
			SeeUtils.removeEl(F)
		}
	}
	B.pages = Math.ceil(B.total / B.rp);
	B.page = G.page;
	if (G.params) {
		B.params = G.params
	}
	this.buildpager();
	var A = [];
	var E = [];
	var C = [];
	var J = [];
	var D = _initColInfoByTheadTh(H, B, E, C, J);
	_addRowByData(G, B, D, C, E, J, A);
	var K = '<tbody id="list" class="hand">' + A.join("") + "</tbody>";
	if ((SeeUtils.isIE && !SeeUtils.isIE10) || (SeeUtils.isIE && document.documentMode == 8) || (SeeUtils.isIE10 && document.documentMode == 9)) {
		SeeUtils.innerHTMl(this.tObj, K);
		try {
			if (document.selection) {
				if (document.selection.createRange()) {
					var L = document.selection.createRange();
					L.collapse(true);
					L.select()
				}
			}
		} catch (I) {}
	} else {
		M.innerHTML = K
	}
	_addCellTextTitle(M);
	_addRowClickEvent(B, M);
	_addRowDbClickEvent(B, M);
	this.addRowProp();
	this.rePosDrag();
	tbody = null;
	G = null;
	i = null;
	if (B.onSuccess) {
		B.onSuccess(this)
	}
	if (B.callBackTotle) {
		B.callBackTotle(B.total)
	}
	if (B.hideOnSubmit) {
		SeeUtils.removeEl(H.block)
	}
	this.hDiv.scrollLeft = this.bDiv.scrollLeft;
	SeeUtils.setElWidth(B.id + "_hDivBox", parseFloat(SeeUtils.getElWidth(M)) + 20);
	if (SeeUtils.isOpera) {
		SeeUtils.css(this.tObj, "visibility", "visible")
	}
	$(M).codetext()
};
MxtSeeGrid.prototype.changeSort = function (B) {
	var A = this;
	var C = this.options;
	if (this.loading) {
		return true
	}
	SeeUtils.hideEl(A.nDiv);
	SeeUtils.hideEl(A.nBtn);
	var D;
	C.onCurrentPageSort == true ? D = SeeUtils.getAttrEl(B, "colmode") : D = SeeUtils.getAttrEl(B, "abbr");
	C.sortType = SeeUtils.getAttrEl(B, "sortType");
	if (C.sortname == D) {
		if (C.sortorder == "asc") {
			C.sortorder = "desc"
		} else {
			C.sortorder = "asc"
		}
	} else {
		C.sortorder = "asc"
	}
	SeeUtils.addClass("sorted");
	SeeUtils.eachBySiblings(B, function (E) {
		SeeUtils.removeClass(E, "sorted")
	});
	SeeUtils.eachByClass(this.hDiv, "sdesc", function (E) {
		SeeUtils.removeClass(E, "sdesc")
	});
	SeeUtils.eachByClass(this.hDiv, "sasc", function (E) {
		SeeUtils.removeClass(E, "sasc")
	});
	SeeUtils.eachByTag(B, "div", function (E) {
		SeeUtils.addClass(E, "s" + C.sortorder)
	});
	C.sortname = D;
	if (C.onCurrentPageSort) {
		this.setSort(C.sortname, C.sortorder, C.sortType)
	} else {
		this.populate()
	}
	if (C.onChangeSort) {
		C.onChangeSort(C.sortname, C.sortorder, C.sortType)
	}
};
MxtSeeGrid.prototype.buildpager = function () {
	var D = this;
	var E = this.options;
	SeeUtils.setElVal(E.id + "_page_number", E.page);
	if (SeeUtils.getElObj(E.id + "_total_page") != null) {
		SeeUtils.getElObj(E.id + "_total_page").innerHTML = $.i18n("validate.grid.over_page4.js") + E.pages + $.i18n("validate.grid.over_page5.js")
	}
	var B = (E.page - 1) * E.rp + 1;
	var A = B + E.rp - 1;
	if (E.total < A) {
		A = E.total
	}
	var C = E.pagestat;
	C = C.replace(/{from}/, B);
	C = C.replace(/{to}/, A);
	C = C.replace(/{total}/, E.total);
	if (SeeUtils.getElObj(E.id + "_pPageStat") != null) {
		SeeUtils.getElObj(E.id + "_pPageStat").innerHTML = C
	}
	if (SeeUtils.getElObj(E.id + "_total_number") != null) {
		SeeUtils.getElObj(E.id + "_total_number").innerHTML = $.i18n("validate.grid.over_page2.js") + E.total + $.i18n("validate.grid.over_page3.js")
	}
};
MxtSeeGrid.prototype.setSort = function (B, A, C) {
	var D = this;
	var E = this.options;
	if ($.trim(E.datas) == "") {
		return
	}
	if (!E.datas.rows.sort) {
		return
	}
	E.datas.rows.sort(function (G, F) {
		var I = G[B];
		var H = F[B];
		if (C == "date") {
			I = Date.parse(I);
			H = Date.parse(H)
		}
		if (C == "number") {
			I = Number(I);
			H = Number(H)
		}
		if (C == "string") {
			if (I == null) {
				I = ""
			} else {
				I = "" + I
			}
			if (H == null) {
				H = ""
			} else {
				H = "" + H
			}
			var J = I.localeCompare(H);
			if (A == "desc") {
				return J
			} else {
				return J * -1
			}
		} else {
			if (A == "desc") {
				if (I < H) {
					return -1
				}
				if (I > H) {
					return 1
				}
				return 0
			}
			if (A == "asc") {
				if (I > H) {
					return -1
				}
				if (I < H) {
					return 1
				}
				return 0
			}
		}
	});
	this.addData(E.datas)
}, MxtSeeGrid.prototype.getCellDim = function (D) {
	var F = this;
	var A = this.options;
	var I = parseInt(SeeUtils.getElHeight(D));
	var B = parseInt(SeeUtils.getElHeight(D.parentNode));
	var G = parseInt(D.style.width);
	var K = parseInt(SeeUtils.getElWidth(D.parentNode));
	var H = D.offsetParent.offsetTop;
	var C = D.offsetParent.offsetLeft;
	var J = parseInt(SeeUtils.getCss(D, "paddingLeft"));
	var E = parseInt(SeeUtils.getCss(D, "paddingTop"));
	return {
		ht: I,
		wt: G,
		top: H,
		left: C,
		pdl: J,
		pdt: E,
		pht: B,
		pwt: K
	}
}, MxtSeeGrid.prototype.combo_resetIndex = function (A) {
	if (this.combo_flag) {
		A.selectedIndex = 0
	}
	this.combo_flag = true
}, MxtSeeGrid.prototype.combo_doSelectAction = function (selObj) {
	var g = this;
	var p = this.options;
	eval(selObj.options[selObj.selectedIndex].value);
	selObj.selectedIndex = 0;
	this.combo_flag = false
};
MxtSeeGrid.prototype.getSelectRows = function () {
	var C = this;
	var E = this.options;
	var B = this.tObj;
	var A = $(B).find("input[gridRowCheckBox=" + E.gridClassName + "]:checked");
	if (A.length <= 0) {
		$(B).find("input[gridRowCheckBox=" + E.gridClassName + "]").each(function () {
			var F = $(this).attr("checked");
			if (F) {
				A.push($(this))
			}
		})
	}
	var D = [];
	A.each(function () {
		var F = SeeUtils.getAttrEl(this, "row");
		D.push(E.datas.rows[F])
	});
	return D
};
MxtSeeGrid.prototype.getPageRows = function () {
	var A = this;
	var C = this.options;
	var B = [];
	SeeUtils.eachElsByTagAndProp(this.tObj, "input", "gridRowCheckBox", C.gridClassName, function (E) {
		var D = SeeUtils.getAttrEl(E, "row");
		B.push(C.datas.rows[D])
	});
	return B
};
MxtSeeGrid.prototype.resizeGridAuto = function () {
	var B = this;
	var D = this.options;
	if (D.parentId != null) {
		var C = 0;
		var A = 36;
		D.usepager ? C += 53 : null;
		D.resizable ? C += 11 : null;
		this.resizeGrid(SeeUtils.getElHeight(D.parentId) - C - A, "auto");
		SeeUtils.setElWidth(D.id, SeeUtils.getElWidth(D.parentId))
	} else {
		SeeUtils.setElWidth(D.id, D.width);
		this.resizeGrid(D.height - D.usepager, "auto")
	}
};
MxtSeeGrid.prototype._initGridContainer = function () {
	var E = this.options;
	var D = this;
	var B = "gDiv_Mouseenter" + E.id;
	window[B] = function () {
		SeeUtils.hideEl(D.nDiv);
		SeeUtils.hideEl(D.nBtn)
	};
	function F() {
		var G = "";
		if (SeeUtils.isIE) {
			G += " ie"
		}
		if (E.novstripe) {
			G += " novstripe"
		}
		return G
	}
	var C = "<div id='" + E.id + "' onmouseenter='" + B + "()' class='" + (E.dataTable ? "flexigrid dataTable" : "flexigrid") + " " + F() + "'></div>";
	SeeUtils.insertBefore(C, this.tObj);
	var A = document.getElementById(E.id);
	if (E.width != "auto") {
		A.style.width = E.width + "px"
	}
	A.appendChild(this.tObj);
	this.gDiv = A;
	return this.gDiv
};
MxtSeeGrid.prototype._addGridHeader = function () {
	var B = this;
	var C = this.options;
	var A = "<div class='hDiv' id='" + C.id + "_hDiv'><div class='hDivBox' id='" + C.id + "_hDivBox' style='width:100%'><table id='" + C.id + "_h_table' cellPadding='0' cellSpacing='0'></table></div></div>";
	SeeUtils.insertBefore(A, this.tObj);
	this.hDiv = document.getElementById(C.id + "_hDiv");
	B.hDiv = this.hDiv;
	B.hTable = document.getElementById(C.id + "_h_table");
	C.holewidth = SeeUtils.getElWidth(B.hDiv)
};
MxtSeeGrid.prototype._addGridBody = function () {
	var E = this.options;
	var C = this;
	var D = "nBtn_Mouseenter" + E.id;
	window[D] = function () {
		SeeUtils.hideEl(C.nDiv);
		SeeUtils.hideEl(C.nBtn);
		SeeUtils.removeClass(C.nBtn, "set_col")
	};
	var A = "nBtn_Mouseleave" + E.id;
	window[A] = function () {
		if (C.multisel) {
			C.multisel = false
		}
	};
	var B = "<div class='bDiv' onmouseleave='" + A + "()' onmouseenter='" + D + "()'  id='" + E.gridClassName + "_bDiv'></div>";
	SeeUtils.insertBefore(B, this.tObj);
	this.bDiv = document.getElementById(E.gridClassName + "_bDiv");
	return this.bDiv
};
MxtSeeGrid.prototype._initTableHeight = function () {
	var C = this.options;
	if (C.parentId != null) {
		var B = 0;
		var D = 0;
		C.usepager ? B += 52 : null;
		C.resizable ? D += 11 : null;
		C.height = SeeUtils.getElHeight(C.parentId) - B - D - C.heightSubtract;
		if (C.vChange) {
			var A = SeeUtils.getElObj(C.vChangeParam.changeTar);
			if (A != null) {
				SeeUtils.setElHeight(A, 0)
			}
		}
	}
};
MxtSeeGrid.prototype._initThEvent = function () {
	var D = this;
	var E = this.options;
	if (!E.colmodel) {
		var B = 0
	}
	var F = "ThClick" + E.id;
	window[F] = function (I, G) {
		if (typeof(SeeUtils.getAttrEl(G, "abbr")) === "undefined") {
			return false
		}
		var H = (I.target || I.srcElement);
		if (H.href || H.type) {
			return true
		}
		D.changeSort(G)
	};
	var A = "ThMouseenter" + E.id;
	window[A] = function (Q) {
		if (!D.colresize && !SeeUtils.hasClass(Q, "thMove") && !D.colCopy) {
			SeeUtils.addClass(Q, "thOver")
		}
		if (SeeUtils.getAttrEl(Q, "abbr") != E.sortname && !D.colCopy && !D.colresize && SeeUtils.getAttrEl(Q, "abbr")) {
			SeeUtils.eachByTag(Q, "div", function (R) {
				SeeUtils.addClass(R, "s" + E.sortorder)
			})
		} else {
			if (SeeUtils.getAttrEl(Q, "abbr") == E.sortname && !D.colCopy && !D.colresize && SeeUtils.getAttrEl(Q, "abbr")) {
				var O = (E.sortorder == "asc") ? "desc" : "asc";
				SeeUtils.eachByTag(Q, "div", function (R) {
					SeeUtils.removeClass(R, "s" + E.sortorder);
					SeeUtils.addClass(R, "s" + E.no)
				})
			}
		}
		if (D.colCopy) {
			var J = SeeUtils.indexByTag(D.hDiv, "th", Q);
			if (J == D.dcoln) {
				return false
			}
			if (J < D.dcoln) {
				$(Q).append(D.cdropleft)
			} else {
				$(Q).append(D.cdropright)
			}
			D.dcolt = J
		} else {
			if (!D.colresize) {
				var M = _getVisibleThIndex(D, Q);
				var N = SeeUtils.getElByTagAndIndex(D.cDrag, "div", M);
				var I = 0;
				if (N != null) {
					I = parseInt(SeeUtils.getCss(N, "left"))
				}
				var L = jQuery(D.nBtn).outerWidth();
				var G = I - L + Math.floor(E.cgwidth / 2);
				var H = SeeUtils.isIE && SeeUtils.isIE7 && (E.colModel[0].type == "checkbox");
				if (H) {
					G += 5 * M
				}
				SeeUtils.hideEl(D.nDiv);
				SeeUtils.hideEl(D.nBtn);
				SeeUtils.css(D.nBtn, "left", G);
				SeeUtils.css(D.nBtn, "top", D.hDiv.offsetTop + 1);
				SeeUtils.showEl(D.nBtn);
				var P = parseInt(SeeUtils.getElWidth(D.nDiv));
				SeeUtils.css(D.nDiv, "top", D.bDiv.offsetTop - 1);
				if ((G + P) > SeeUtils.getElWidth(D.gDiv)) {
					var K = I - P + 1;
					SeeUtils.css(D.nDiv, "left", K)
				} else {
					SeeUtils.css(D.nDiv, "left", G - 5)
				}
				if (SeeUtils.hasClass(Q, "sorted")) {
					SeeUtils.addClass(D.nBtn, "srtd")
				} else {
					SeeUtils.removeClass(D.nBtn, "srtd")
				}
			}
		}
	};
	var C = "ThMouseleave" + E.id;
	window[C] = function (H) {
		SeeUtils.removeClass(H, "thOver");
		var G = SeeUtils.getAttrEl(H, "abbr");
		if (G != E.sortname) {
			SeeUtils.eachByTag(H, "div", function (J) {
				SeeUtils.removeClass(J, "s" + E.sortorder)
			})
		} else {
			if (G == E.sortname) {
				var I = (E.sortorder == "asc") ? "desc" : "asc";
				SeeUtils.eachByTag(H, "div", function (J) {
					SeeUtils.addClass(J, "s" + E.sortorder);
					SeeUtils.removeClass(J, "s" + E.no)
				})
			}
		}
		if (D.colCopy) {
			SeeUtils.removeEl(D.cdropleft);
			SeeUtils.removeEl(D.cdropright);
			D.dcolt = null
		}
	};
	this._changeThTdObj(B)
};
MxtSeeGrid.prototype._changeThTdObj = function (B) {
	var C = this;
	var D = this.options;
	var A = SeeUtils.getElByTag(C.hDiv, "thead");
	$("thead tr:first th", C.hDiv).each(function () {
		var E = document.createElement("div");
		if ($(this).attr("abbr")) {
			if ($(this).attr("abbr") == D.sortname) {
				this.className = "sorted";
				E.className = "s" + D.sortorder
			}
		}
		if (this.hidden) {
			$(this).hide()
		}
		if (!D.colmodel) {
			$(this).attr("axis", "col" + B++)
		}
		$(E).css({
			textAlign: this.align,
			width: this.width + "px"
		});
		E.innerHTML = this.innerHTML;
		$(this).empty().append(E).removeAttr("width").mousedown(function (F) {
			C.dragStart("colMove", F, this)
		})
	})
};
function _parseOrder(B) {
	var A = {
		u: B,
		u_width: -1
	};
	var C = B.split("#");
	A.u = C[0];
	if (C.length > 1) {
		A.u_width = C[1]
	}
	return A
}
MxtSeeGrid.prototype._initColWidth = function (E, D, B, A, H, G) {
	for (var C = 0; C < E.length; C++) {
		var F = E[C];
		if (F.name == D.u) {
			if (D.u_width != (-1)) {
				if (!H) {
					F.width = D.u_width;
					F.hide = false
				}
			} else {
				F.hide = true
			}
			A[B.length] = C;
			if (F.hide == undefined) {
				if (!(F.isToggleHideShow !== undefined && F.hide && !F.isToggleHideShow)) {
					F.hide = ((G[D.u] === 0 || G[D.u] === "0") && (!H)) ? true : false
				}
			}
			B.push(F)
		}
	}
};
MxtSeeGrid.prototype._initAddNewCol = function (E, F, A, C) {
	for (var B = 0; B < E.length; B++) {
		var D = E[B];
		if (!F.contains(D.name)) {
			A[C.length] = B;
			C.push(D)
		}
	}
};
function _getColWidth(B, G, E) {
	var D = null;
	if (G.gridType === "autoGrid") {
		var A = SeeUtils.getElWidth(E.bDiv);
		if (!E.hasScrollerFlag) {
			var C = ((G.holewidth - 20 - G.colModel.length * 12) * parseInt(B.width) / E.summaryWidth);
			if (SeeUtils.isIE8) {
				B.width = C - 4
			} else {
				B.width = C
			}
			D = B.width
		} else {
			D = B.width - 10
		}
	} else {
		if (B.width) {
			var F = B.width + "";
			if (F.indexOf("%") > -1) {
				var C = (G.holewidth - 10) * parseInt(F) / 100;
				B.width = C - 10;
				D = B.width
			} else {
				D = B.width - 10
			}
		}
	}
	return D
}
MxtSeeGrid.prototype._initHeaderLabel = function (A) {
	var C = this.options;
	var B = "";
	if (A.display != undefined) {
		if (A.type == "checkbox") {
			B = "<input  type='checkbox' onclick=\"getGridSetAllCheckBoxSelect123456(this,'" + C.gridClassName + "')\"/>"
		} else {
			if (A.type == "radio") {
				B = ""
			} else {
				B = A.display
			}
		}
	}
	return B
};
var colWidthMapping = {
	smallest: 50,
	small: 80,
	medium: 140,
	big: 300
};
function _initAutoGridColInfo(E, D) {
	var F = SeeUtils.getElWidth(D.bDiv);
	if (E.gridType === "autoGrid") {
		var G = 0;
		var B = 0;
		for (var C = 0; C < E.colModel.length; C++) {
			var A = E.colModel[C];
			if (!AssertUtils.isNumber(A.width)) {
				A.width = colWidthMapping[A.width]
			}
			G = parseFloat(G) + parseFloat(A.width)
		}
		D.summaryWidth = G;
		if (G > F) {
			D.hasScrollerFlag = true
		} else {
			D.hasScrollerFlag = false
		}
	}
}
MxtSeeGrid.prototype.addGridTh = function (I) {
	var G = this;
	var A = this.options;
	var P = "ThClick" + A.id;
	var K = "ThMouseenter" + A.id;
	var Q = "ThMouseleave" + A.id;
	var F = [];
	_initAutoGridColInfo(A, G);
	for (var D = 0; D < A.colModel.length; D++) {
		var N = A.colModel[D];
		var J = "";
		if (N) {
			var C = this._initHeaderLabel(N);
			N.sortType = N.sortType ? N.sortType : "string";
			var O = N.isToggleHideShow == undefined ? true : N.isToggleHideShow;
			if (N.name == "id" || N.name == "name" || N.name == "title") {
				O = false
			}
			if (N.name && N.sortable) {
				J = " abbr='" + (N.sortname ? N.sortname : N.name) + "'"
			}
			if (N.align == undefined) {
				N.align = "left"
			}
			var M = _getColWidth(N, A, G);
			var H = "";
			if (N.hide) {
				H = " hide=true "
			}
			var L = "";
			if (N.process) {
				L = " process=" + N.process + ""
			}
			var B = "";
			if (N.type == "checkbox") {
				B = " class='grid_checkbox' "
			}
			F.push("<th align='" + N.align + "' width='" + M + "' isToggleHideShow='" + O + "' colMode='" + N.name + "' sortType='" + N.sortType + "' axis='col" + D + "'  " + B + "  " + H + "  " + L + "  " + J + " onclick='" + P + "(event,this)' onmouseenter='" + K + "(this)' onmouseleave='" + Q + "(this)'>" + C + "</th>")
		} else {
			F.push("<th width='30' axis='col" + D + "' onclick='" + P + "(event,this)' onmouseenter='" + K + "(this)' onmouseleave='" + Q + "(this)'></th>")
		}
	}
	var E = "<thead id='" + I + "'><tr>" + F.join("") + "</tr></thead>";
	SeeUtils.innerHTMl(this.tObj, E);
	this._initThProp(I)
};
MxtSeeGrid.prototype._initThProp = function (A) {
	SeeUtils.eachByTag(A, "th", function (B) {
		var C = SeeUtils.getAttrEl(B, "hide");
		if (C === "true" || C === true) {
			B.hidden = true
		}
		var D = SeeUtils.getAttrEl(B, "process");
		if (D === "true" || D === true) {
			B.process = true
		}
		var E = SeeUtils.getAttrEl(B, "align");
		if (AssertUtils.isNotEmpty(E)) {
			B.align = E
		} else {
			B.align = "left"
		}
	})
};
MxtSeeGrid.prototype._setColInfoByDsCol = function (J, B) {
	var F = this;
	var A = this.options;
	if (A.customId && J) {
		J = $.parseJSON(J);
		J = J[A.customId];
		if (J && !(J instanceof Array)) {
			var D = [],
			I = {},
			G = [];
			var C = J.__ORDER;
			if (J.resetWidth != undefined) {
				B = J.resetWidth
			}
			if (C && (!B)) {
				for (var E = 0; E < C.length; E++) {
					var H = _parseOrder(C[E]);
					if (H.u === "") {
						return
					}
					G.push(H.u);
					this._initColWidth(A.colModel, H, D, I, B, J)
				}
			}
			this._initAddNewCol(A.colModel, G, I, D);
			A.colModel = D;
			A._modesMap = I
		}
	} else {
		J = null
	}
};
MxtSeeGrid.prototype._initGridHeaderLabel = function () {
	var E = this.options;
	var A = this;
	var D;
	var C = SeeUtils.getUUid();
	if ($.ctx) {
		D = $.ctx._currentPathId
	}
	if (D && !E.customId) {
		E.customId = D
	}
	var G = false;
	if (E.colModel) {
		if (getCtpTop().vPortal && E.customize && getCtpTop().vPortal.customize) {
			var F = getCtpTop().vPortal.customize.grid_pref;
			this._setColInfoByDsCol(F, G)
		}
		this.addGridTh(C)
	}
	this.hTable_thId = C;
	var B = SeeUtils.getElObj(C);
	if (B) {
		SeeUtils.appendTo(B, A.hTable)
	}
	B = null
};
MxtSeeGrid.prototype.addTopBottomVGrip = function () {
	var D = this;
	var E = this.options;
	var C = "downVGrip";
	window[C] = function (H) {
		if (!SeeUtils.isIE8) {
			D.dragStart("vresize", H)
		}
	};
	var A = "slideToggleUpHandle" + E.id;
	var G = "slideToggleDownHandle" + E.id;
	if (E.resizable && E.height != "auto") {
		var F = "";
		if (E.slideToggleBtn) {
			F = "<div class='vGrip_line'><table align='center' border='0' cellpadding='0' cellspacing='0' height='7'><tr><td align='center'><span onclick='" + A + "()' class='slideUpBtn spiretBarHidden4'><em></em></span><span onclick='" + G + "()' class='slideDownBtn spiretBarHidden3' style='border-left:0;'><em></em></span></td></tr></table></div>"
		} else {
			F = "<span id='dragBtn'></span>"
		}
		var B = '<div class="vGrip" id="' + E.id + 'vGrip" onmousedown="' + C + '(event)">' + F + "</div>";
		SeeUtils.insertAfter(B, D.bDiv);
		D.vDiv = document.getElementById(E.id + "vGrip");
		if (SeeUtils.isIE8) {
			$(D.vDiv).mousedown(function (H) {
				D.dragStart("vresize", H)
			})
		}
		if (E.slideToggleBtn) {
			window[A] = function () {
				E.slideToggleUpHandle(E, D)
			};
			window[G] = function () {
				E.slideToggleDownHandle(E, D)
			}
		} else {
			window[A] = function () {};
			window[G] = function () {}
		}
	}
};
MxtSeeGrid.prototype.addLeftRightVGrip = function () {
	var C = this;
	var E = this.options;
	var A = "rDivDown";
	window[A] = function (F) {
		if (!SeeUtils.isIE8) {
			C.dragStart("vresize", F, true)
		}
	};
	if (E.resizable && E.width != "auto" && !E.nohresize) {
		var B = SeeUtils.getUUid();
		var D = "<div id='" + B + "' style='height: " + SeeUtils.getElHeight("g.gDiv") + "px' class='hGrip' onmousedown='" + A + "(event)'><span></span></div>";
		SeeUtils.appendTo(D, C.gDiv);
		this.rDiv = SeeUtils.getElObj(B)
	}
	if (SeeUtils.isIE8) {
		$("#" + B).mousedown(function (F) {
			C.dragStart("vresize", F, true)
		})
	}
};
MxtSeeGrid.prototype._loadData = function () {
	var B = this.options;
	var A = this;
	if (B.managerName) {
		$("head").append("<script src='" + _ctxPath + "/ajax.do?managerName=" + B.managerName + CsrfGuard.getUrlSurffix() + "' type='text/javascript'><\/script>")
	}
	if (B.datas && B.autoload) {
		A.populate()
	}
};
MxtSeeGrid.prototype._endGridInit = function () {
	var E = this;
	var F = this.options;
	this.tObj.p = F;
	this.tObj.grid = E;
	$(this.tObj).attrObj("_grid", E);
	if ($._autofill) {
		var C = this.tObj.id;
		var B = $._autofill,
		A = B.filllists;
		if (A && A[C]) {
			A[C].rows = A[C].data;
			E.addData(A[C]);
			A[C] = null
		} else {
			var G = _getTableObj(E, E.hDiv);
			var D = _getTableObj(E, E.bDiv);
			if (G != null && D != null) {
				SeeUtils.setElHeight(D, SeeUtils.getElHeight(G));
				SeeUtils.setElWidth(D, SeeUtils.getElWidth(G))
			}
		}
	}
};
function _getTableObj(B, C) {
	var A = SeeUtils.getElByTag(C, "table");
	if (A.length > 0) {
		return A[0]
	}
}
MxtSeeGrid.prototype._addEditorLayer = function () {
	var D = this.options;
	var B = this;
	var C = SeeUtils.getUUid();
	var A = "<div class='iDiv' id='" + C + "' style='display: none'></div>";
	SeeUtils.appendTo(A, B.bDiv);
	B.iDiv = SeeUtils.getElObj()
};
MxtSeeGrid.prototype._initDocumentEvents = function () {
	var A = this;
	if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
		$(document).mousemove(function (B) {
			A.dragMove(B)
		})
	} else {
		SeeUtils.addEvent(document, "mousemove", function (B) {
			A.dragMove(B)
		})
	}
	SeeUtils.addEvent(document, "mousemove", function (B) {
		A.dragMove(B)
	});
	SeeUtils.addEvent(document, "mouseup", function (B) {
		A.dragEnd()
	});
	SeeUtils.addEvent(document, "hover", function (B) {
		A.dragEnd()
	})
};
MxtSeeGrid.prototype.addLinDrap = function () {
	var N = this;
	var L = this.options;
	N.cDrag = document.createElement("div");
	var O = _getHeaderThTrObj(N);
	var F = null;
	if (O != null) {
		var B = SeeUtils.getElByTag(O, "th");
		if (B.length > 0) {
			F = B[0]
		}
	}
	if (F != null) {
		var H = SeeUtils.getElByTag(F, "div");
		var J = null;
		if (H.length > 0) {
			J = H[0]
		}
		if (J != null) {
			var C = SeeUtils.getCss(J, "borderLeftWidth");
			var S = SeeUtils.getCss(J, "borderRightWidth");
			var Q = SeeUtils.getCss(J, "paddingLeft");
			var A = SeeUtils.getCss(J, "paddingRight");
			var K = SeeUtils.getCss(F, "borderLeftWidth");
			var I = SeeUtils.getCss(F, "borderRightWidth");
			var R = SeeUtils.getCss(F, "paddingLeft");
			var M = SeeUtils.getCss(F, "paddingRight");
			N.cDrag.className = "cDrag";
			N.cdpad = 0;
			N.cdpad += (isNaN(parseInt(C)) ? 0 : parseInt(C));
			N.cdpad += (isNaN(parseInt(S)) ? 0 : parseInt(S));
			N.cdpad += (isNaN(parseInt(Q)) ? 0 : parseInt(Q));
			N.cdpad += (isNaN(parseInt(A)) ? 0 : parseInt(A));
			N.cdpad += (isNaN(parseInt(K)) ? 0 : parseInt(K));
			N.cdpad += (isNaN(parseInt(I)) ? 0 : parseInt(I));
			N.cdpad += (isNaN(parseInt(R)) ? 0 : parseInt(R));
			N.cdpad += (isNaN(parseInt(M)) ? 0 : parseInt(M))
		}
		SeeUtils.insertBefore(N.cDrag, N.bDiv);
		var E = SeeUtils.getElHeight(N.bDiv);
		var D = SeeUtils.getElHeight(N.hDiv);
		SeeUtils.css(N.cDrag, "top", -D + "px");
		var P = "cgMouseDownId_" + L.id;
		window[P] = function (U, T) {
			N.dragStart("colresize", U, T)
		};
		var G = "cgDbClickDownId_" + L.id;
		window[G] = function (U, T) {
			N.autoResizeColumn(T)
		};
		var O = _getHeaderThTrObj(N);
		SeeUtils.eachByTag(O, "th", function () {
			var U = SeeUtils.getUUid();
			var T = '<div class="cgDiv" id="' + U + '" onmousedown="' + P + '(event,this)" ondblclick="' + G + '(event,this)" style="height: ' + (E + D) + 'px"></div>';
			SeeUtils.appendTo(T, N.cDrag);
			if (!L.cgwidth) {
				L.cgwidth = SeeUtils.getElWidth(U)
			}
		})
	}
};
MxtSeeGrid.prototype.addVGrip = function () {
	this.addTopBottomVGrip();
	this.addLeftRightVGrip()
};
MxtSeeGrid.prototype.initGridBodyProp = function () {
	var A = this;
	var B = this.options;
	if (B.hChange) {
		var C = SeeUtils.getElObj(A.gDiv).parentNode;
		SeeUtils.css(C, "overflow", "hidden");
		B.height = C.height() - B.hChangeParam.subHeight
	}
	if (B.height < 50) {
		B.height = "auto"
	}
	SeeUtils.css(A.bDiv, "height", (B.height == "auto") ? "auto" : B.height - 37 + "px");
	SeeUtils.addEvent(A.bDiv, "scroll", function (D) {
		if (SeeUtils.isIE8) {
			if (A.finished) {
				setTimeout(function () {
					A.hDiv.scrollLeft = A.bDiv.scrollLeft;
					A.rePosDrag();
					A.finished = true
				}, 200);
				A.finished = false
			}
		} else {
			A.scroll()
		}
	});
	SeeUtils.appendTo(this.tObj, A.bDiv);
	if (B.height == "auto") {
		SeeUtils.eachByTag(A.bDiv, "table", function (D) {
			SeeUtils.addClass(D, "autoht")
		})
	}
};
function __initVChangeParam(A) {
	if (A.vChangeParam.changeTar == undefined) {
		A.vChangeParam.changeTar = "grid_detail"
	}
	if (A.vChangeParam.overflow == undefined) {
		A.vChangeParam.overflow = "auto"
	}
	if (A.vChangeParam.subHeight == undefined) {
		A.vChangeParam.subHeight = 0
	}
	if (A.vChangeParam.autoResize == undefined) {
		A.vChangeParam.autoResize = true
	}
}
function __slideToggleUpHandle(B, A) {
	if (B.UMD == "down") {
		B.UMD = "middle"
	} else {
		if (B.UMD == "middle") {
			B.UMD = "up"
		} else {
			if (B.UMD == "up") {
				A.resizeGridUpDown(B.UMD)
			}
		}
	}
	A.resizeGridUpDown(B.UMD)
}
function __slideToggleDownHandle(B, A) {
	if (B.UMD == "down") {
		A.resizeGridUpDown(B.UMD)
	} else {
		if (B.UMD == "middle") {
			B.UMD = "down"
		} else {
			if (B.UMD == "up") {
				B.UMD = "middle"
			}
		}
	}
	A.resizeGridUpDown(B.UMD)
}
(function (A) {
	A.addFlex = function (C, F) {
		if (typeof(C) === "undefined") {
			return
		}
		if (C.grid) {
			return C
		}
		var D = true;
		var E = new MxtSeeGrid(C);
		E.extendOptions(F);
		E.initGridCtl();
		return C
	};
	var B = false;
	A(document).ready(function () {
		B = true
	});
	A.fn.ajaxgrid = function (C) {
		return A.addFlex(this[0], C)
	};
	A.fn.resizeGrid = function (C) {
		return
	};
	A.fn.getSelectCheckbox = function () {
		var D = this[0].className;
		var C = this[0].className + "_bDiv";
		return A("." + D).find("input[gridRowCheckBox=" + D + "]:checked")
	};
	A.fn.flexReload = function (C) {
		return this.each(function () {
			if (this.grid && this.p.managerName) {
				this.grid.populate()
			}
		})
	};
	A.fn.flexOptions = function (C) {
		return this.each(function () {
			if (this.grid) {
				A.extend(this.p, C)
			}
		})
	};
	A.fn.flexToggleCol = function (D, C) {
		return this.each(function () {
			if (this.grid) {
				this.grid.toggleCol(D, C)
			}
		})
	};
	A.fn.ajaxgridLoad = function (C) {
		return this.each(function () {
			if (this.grid) {
				this.grid.populate(C)
			}
		})
	};
	A.fn.ajaxgridData = function (C) {
		return this.each(function () {
			if (this.grid) {
				this.grid.addData(C)
			}
		})
	};
	A.fn.noSelect = function (D) {
		var C = (D == null) ? true : D;
		if (C) {
			return this.each(function () {
				if (SeeUtils.isIE || SeeUtils.isSafari) {
					A(this).bind("selectstart", function () {
						return false
					})
				} else {
					if (SeeUtils.isFF) {
						A(this).css("MozUserSelect", "none");
						A("body").trigger("focus")
					} else {
						if (SeeUtils.isOpera) {
							A(this).bind("mousedown", function () {
								return false
							})
						} else {
							A(this).attr("unselectable", "on")
						}
					}
				}
			})
		} else {
			return this.each(function () {
				if (SeeUtils.isIE || SeeUtils.isSafari) {
					A(this).unbind("selectstart")
				} else {
					if (SeeUtils.isFF) {
						A(this).css("MozUserSelect", "inherit")
					} else {
						if (SeeUtils.isOpera) {
							A(this).unbind("mousedown")
						} else {
							A(this).removeAttr("unselectable", "on")
						}
					}
				}
			})
		}
	};
	A.fn.flexSearch = function (C) {
		return this.each(function () {
			if (this.grid && this.p.searchitems) {
				this.grid.doSearch()
			}
		})
	}
})(jQuery);
function getGridSetAllCheckBoxSelect123456(B, A) {
	if ($(B).prop("checked")) {
		$(".flexigrid").find("input[gridRowCheckBox=" + A + "]").not("input[type=checkbox][disabled]").prop("checked", true)
	} else {
		$(".flexigrid").find("input[gridRowCheckBox=" + A + "]").prop("checked", false)
	}
	if (typeof(gridSelectAllPersonalFunction) == "function") {
		gridSelectAllPersonalFunction($(B).prop("checked"))
	}
};
function MxtLayout(A) {
	var D = {
		id: A.id,
		spritHeight: A.spritHeight == null ? 7 : A.spritHeight,
		borderWidth: A.borderWidth == null ? 1 : A.borderWidth,
		northArea: A.northArea,
		southArea: A.southArea,
		eastArea: A.eastArea,
		westArea: A.westArea,
		centerArea: A.centerArea,
		successFn: A.successFn,
		setCallFun: A.setCallFun == null ? function () {}
		 : A.setCallFun,
		moveCallFun: A.moveCallFun == null ? function () {}
		 : A.moveCallFun,
		isFixLayout: (A.isFixLayout == null || A.isFixLayout == undefined) ? true : A.isFixLayout,
		disableDrag: (A.disableDrag == undefined) ? false : true,
		spiretBarN: function () {
			if (A.northArea) {
				if (A.northArea.spiretBar) {
					if (A.northArea.spiretBar.show) {
						return A.northArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarS: function () {
			if (A.southArea) {
				if (A.southArea.spiretBar) {
					if (A.southArea.spiretBar.show) {
						return A.southArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarE: function () {
			if (A.eastArea) {
				if (A.eastArea.spiretBar) {
					if (A.eastArea.spiretBar.show) {
						return A.eastArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarW: function () {
			if (A.westArea) {
				if (A.westArea.spiretBar) {
					if (A.westArea.spiretBar.show) {
						return A.westArea.spiretBar
					}
				}
			}
			return false
		}
		()
	};
	var B = {
		init: function (E) {
			B.height = SeeUtils.getElHeight(B.mainObj);
			B.width = SeeUtils.getElWidth(B.mainObj);
			B._100 = B.width;
			B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
			B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
			B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
			B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
			E.__initNorth(B, D);
			E.__initEast(B, D);
			E.__initCenter(B, D);
			E.__initWest(B, D);
			E.__initSouth(B, D)
		},
		fixLayout: function (F, E, I) {
			var G = false;
			if (I == "north") {
				var H = SeeUtils.getElHeight(B.nObj) + D.borderWidth * (D.northBorder ? 2 : 0) + E;
				D.northArea.minHeight = D.northArea.minHeight == null ? 20 : D.northArea.minHeight;
				D.northArea.maxHeight = D.northArea.maxHeight == null ? 100 : D.northArea.maxHeight;
				if (H < D.northArea.minHeight) {
					D.nHeight = D.northArea.minHeight;
					G = true
				} else {
					if (H > D.northArea.maxHeight) {
						D.nHeight = D.northArea.maxHeight;
						G = true
					} else {
						D.nHeight = H
					}
				}
				B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
				B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
				SeeUtils.setElHeight(B.nObj, (D.nHeight - D.borderWidth * (D.northBorder ? 2 : 0)) + "px");
				if (G) {
					SeeUtils.css(B.northSpObj, "top", D.nHeight + "px")
				}
				if (B.eObj != null) {
					SeeUtils.cssByJson(B.eObj, {
						height: B._m_height - D.borderWidth * (D.eastBorder ? 2 : 0),
						top: B._m_top
					});
					SeeUtils.cssByJson(B.eastSpObj, {
						height: (B._m_height + D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
						top: B._m_top
					})
				}
				if (B.cObj != null) {
					SeeUtils.cssByJson(B.cObj, {
						height: B._m_height - D.borderWidth * (D.centerBorder ? 2 : 0),
						top: B._m_top
					})
				}
				if (B.wObj != null) {
					SeeUtils.cssByJson(B.wObj, {
						height: B._m_height - D.borderWidth * (D.westBorder ? 2 : 0),
						top: B._m_top
					});
					SeeUtils.cssByJson(B.westSpObj, {
						height: (B._m_height + D.borderWidth * (D.westBorder ? 2 : 0)) + "px",
						top: B._m_top
					})
				}
			} else {
				if (I == "south") {
					var H = SeeUtils.getElHeight(B.sObj) + D.borderWidth * (D.southBorder ? 2 : 0) - E;
					D.southArea.minHeight = D.southArea.minHeight == null ? 20 : D.southArea.minHeight;
					D.southArea.maxHeight = D.southArea.maxHeight == null ? 100 : D.southArea.maxHeight;
					if (H < D.southArea.minHeight) {
						D.sHeight = D.southArea.minHeight;
						G = true
					} else {
						if (H > D.southArea.maxHeight) {
							D.sHeight = D.southArea.maxHeight;
							G = true
						} else {
							D.sHeight = H
						}
					}
					B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
					B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
					SeeUtils.cssByJson(B.sObj, {
						height: (D.sHeight - D.borderWidth * (D.southBorder ? 2 : 0)) + "px",
						top: (B.height - D.sHeight) + "px"
					});
					if (G) {
						SeeUtils.css(B.southSpObj, "top", (B.height - D.sHeight - D.spritHeight) + "px")
					}
					if (B.eObj != null) {
						SeeUtils.cssByJson(B.eObj, {
							height: (B._m_height - D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
							top: B._m_top + "px"
						});
						SeeUtils.cssByJson(B.eastSpObj, {
							height: (B._m_height + D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
							top: B._m_top + "px"
						})
					}
					if (B.cObj != null) {
						SeeUtils.cssByJson(B.cObj, {
							height: B._m_height - D.borderWidth * (D.centerBorder ? 2 : 0),
							top: B._m_top
						})
					}
					if (B.wObj != null) {
						SeeUtils.cssByJson(B.wObj, {
							height: B._m_height - D.borderWidth * (D.westBorder ? 2 : 0),
							top: B._m_top
						});
						SeeUtils.cssByJson(B.westSpObj, {
							height: (B._m_height + D.borderWidth * (D.westBorder ? 2 : 0)) + "px",
							top: B._m_top
						})
					}
				} else {
					if (I == "west") {
						var H = SeeUtils.getElWidth(B.wObj) + D.borderWidth * (D.westBorder ? 2 : 0) + F;
						D.westArea.minWidth = D.westArea.minWidth == null ? 20 : D.westArea.minWidth;
						D.westArea.maxWidth = D.westArea.maxWidth == null ? 250 : D.westArea.maxWidth;
						if (H < D.westArea.minWidth) {
							D.wWidth = D.westArea.minWidth;
							G = true
						} else {
							if (H > D.westArea.maxWidth) {
								D.wWidth = D.westArea.maxWidth;
								G = true
							} else {
								D.wWidth = H;
								if (isNaN(H) && this.hresize.sx > D.westArea.maxWidth) {
									D.wWidth = D.westArea.maxWidth;
									G = true
								} else {
									if (isNaN(H) && this.hresize.sx < D.westArea.maxWidth) {
										D.wWidth = this.hresize.sx;
										G = true
									}
								}
								if (!isNaN(H) && this.hresize.sx < D.westArea.maxWidth) {
									D.wWidth = H;
									G = true
								} else {
									if (!isNaN(H) && this.hresize.sx > D.westArea.maxWidth) {
										D.wWidth = H;
										G = true
									}
								}
							}
						}
						B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
						B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
						SeeUtils.setElWidth(B.wObj, D.wWidth - D.borderWidth * (D.westBorder ? 2 : 0));
						if (G) {
							SeeUtils.css(B.westSpObj, "left", D.wWidth + "px")
						}
						SeeUtils.cssByJson(B.cObj, {
							width: (B._c_width - D.borderWidth * (D.centerBorder ? 2 : 0)) + "px",
							left: B._c_left + "px"
						})
					} else {
						if (I == "east") {
							var H = SeeUtils.getElWidth(B.eObj) + D.borderWidth * (D.eastBorder ? 2 : 0) - F;
							D.eastArea.minWidth = D.eastArea.minWidth == null ? 20 : D.eastArea.minWidth;
							D.eastArea.maxWidth = D.eastArea.maxWidth == null ? 250 : D.eastArea.maxWidth;
							if (H < D.eastArea.minWidth) {
								D.eWidth = D.eastArea.minWidth;
								G = true
							} else {
								if (H > D.eastArea.maxWidth) {
									D.eWidth = D.eastArea.maxWidth;
									G = true
								} else {
									D.eWidth = H
								}
							}
							B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
							B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
							SeeUtils.cssByJson(B.eObj, {
								width: D.eWidth - D.borderWidth * (D.eastBorder ? 2 : 0),
								left: (B.width - D.eWidth) + "px"
							});
							if (G) {
								SeeUtils.css(B.eastSpObj, "left", (B.width - D.eWidth - D.spritHeight) + "px")
							}
							SeeUtils.cssByJson(B.cObj, {
								width: (B._c_width - D.borderWidth * (D.centerBorder ? 2 : 0)) + "px",
								left: B._c_left + "px"
							})
						}
					}
				}
			}
		},
		dragStart: function (H, G, F, I) {
			if (D.disableDrag) {
				return
			}
			if (H == "h") {
				var E = false;
				if (F) {
					E = true;
					SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "row-resize")
				}
				D.move = F;
				this.hresize = {
					t: parseInt(F.style.top),
					l: parseInt(F.style.left),
					sy: G.pageY,
					sx: G.pageX,
					hgo: E,
					direct: I
				}
			}
			$("<div class='layout_mask'></div>").css({
				position: "absolute",
				background: "#ffffff",
				width: $("#" + D.id).width() + "px",
				height: $("#" + D.id).height() + "px",
				"z-index": 2,
				top: 0,
				left: 0,
				"-moz-opacity": 0,
				opacity: 0
			}).prependTo($("body"));
			$("body").noSelect()
		},
		dragMove: function (H) {
			if (this.hresize) {
				var F = this.hresize;
				var I = H.pageY;
				var G = I - F.sy;
				if (F.hgo) {
					var E = H.pageX;
					this.hresize.xdiff = E - F.sx;
					this.hresize.ydiff = I - F.sy;
					if (this.hresize.direct == "north" || this.hresize.direct == "south") {
						SeeUtils.css(D.move, "top", F.t + this.hresize.ydiff)
					} else {
						SeeUtils.css(D.move, "left", F.l + this.hresize.xdiff)
					}
				}
				F = null
			}
		},
		dragEnd: function () {
			if (this.hresize) {
				this.fixLayout(this.hresize.xdiff, this.hresize.ydiff, this.hresize.direct);
				D.setCallFun({
					offsetX: this.hresize.xdiff,
					offsetY: this.hresize.ydiff
				});
				this.hresize = false
			}
			D.move = null;
			var E = document.querySelector(".layout_mask");
			if (E != null) {
				SeeUtils.removeEl(E)
			}
			SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "default");
			$("body").noSelect(false)
		}
	};
	if (D.isFixLayout) {
		$("html").css({
			height: "100%",
			overflow: "hidden"
		});
		$("body").css({
			height: "100%",
			overflow: "hidden",
			padding: "0px",
			margin: "0px",
			border: "0px"
		})
	}
	B.mainObj = SeeUtils.getElObj(D.id);
	SeeUtils.cssByJson(B.mainObj, {
		overflow: "hidden",
		position: "relative",
		padding: "0px",
		margin: "0px",
		border: "0px"
	});
	if (D.isFixLayout) {
		SeeUtils.setElHeight(B.mainObj, "100%")
	}
	if (document.querySelector("#" + D.id) == null) {
		B.nObj = D.northArea == null ? null : document.querySelector("#" + D.northArea.id);
		B.eObj = D.eastArea == null ? null : document.querySelector("#" + D.eastArea.id);
		B.cObj = D.centerArea == null ? null : document.querySelector("#" + D.centerArea.id);
		B.wObj = D.westArea == null ? null : document.querySelector("#" + D.westArea.id);
		B.sObj = D.southArea == null ? null : document.querySelector("#" + D.southArea.id)
	} else {
		B.nObj = D.northArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.northArea.id);
		B.eObj = D.eastArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.eastArea.id);
		B.cObj = D.centerArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.centerArea.id);
		B.wObj = D.westArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.westArea.id);
		B.sObj = D.southArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.southArea.id)
	}
	B._h_spritSize = 0;
	D.northFlag = 0;
	D.nHeight = 0;
	D.northBorder = false;
	if (D.northArea != null) {
		D.nHeight = D.northArea.height == null ? 50 : D.northArea.height;
		D.northFlag = 1;
		if (D.northArea.sprit == null || D.northArea.sprit == true) {
			B._h_spritSize += 1;
			D.northFlag = 2
		}
		if (D.northArea.border == null || D.northArea.border == true) {
			D.northBorder = true
		}
	}
	D.southFlag = 0;
	D.sHeight = 0;
	D.southBorder = false;
	if (D.southArea != null) {
		D.sHeight = D.southArea.height == null ? 50 : D.southArea.height;
		D.southFlag = 1;
		if (D.southArea.sprit == null || D.southArea.sprit == true) {
			B._h_spritSize += 1;
			D.southFlag = 2
		}
		if (D.southArea.border == null || D.southArea.border == true) {
			D.southBorder = true
		}
	}
	B._w_spritSize = 0;
	D.eastFlag = 0;
	D.eWidth = 0;
	D.eastBorder = false;
	if (D.eastArea != null) {
		D.eWidth = D.eastArea.width == null ? 200 : D.eastArea.width;
		D.eastFlag = 1;
		if (D.eastArea.sprit == null || D.eastArea.sprit == true) {
			B._w_spritSize += 1;
			D.eastFlag = 2
		}
		if (D.eastArea.border == null || D.eastArea.border == true) {
			D.eastBorder = true
		}
	}
	D.westFlag = 0;
	D.wWidth = 0;
	D.westBorder = false;
	if (D.westArea != null) {
		D.wWidth = D.westArea.width == null ? 200 : D.westArea.width;
		D.westFlag = 1;
		if (D.westArea.sprit == null || D.westArea.sprit == true) {
			B._w_spritSize += 1;
			D.westFlag = 2
		}
		if (D.westArea.border == null || D.westArea.border == true) {
			D.westBorder = true
		}
	}
	D.centerBorder = false;
	if (D.centerArea != null) {
		if (D.centerArea.border != null && D.centerArea.border == true) {
			D.centerBorder = true
		}
	}
	B.init(this);
	if (D.successFn != null) {
		D.successFn()
	}
	this.params = D;
	this.methods = B;
	if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
		$(document).mousemove(function (E) {
			B.dragMove(E);
			if (B.moveStart) {
				if (E.stopPropagation) {
					E.stopPropagation()
				}
				if (E.preventDefault) {
					E.preventDefault()
				}
				E.cancelBubble = true;
				E.returnValue = false;
				return false
			}
		})
	} else {
		SeeUtils.addEvent(document, "mousemove", function (E) {
			B.dragMove(E);
			if (B.moveStart) {
				if (E.stopPropagation) {
					E.stopPropagation()
				}
				if (E.preventDefault) {
					E.preventDefault()
				}
				E.cancelBubble = true;
				E.returnValue = false;
				return false
			}
		})
	}
	SeeUtils.addEvent(document, "mouseup", function (E) {
		B.dragEnd();
		B.moveStart = false
	});
	SeeUtils.addEvent(document, "mousedown", function (F) {
		var E = SeeUtils.closestByClass(F.target, "spiret");
		if (E != null) {
			B.moveStart = true
		}
		E = SeeUtils.closestByClass(F.target, ".vGrip_line");
		if (E != null) {
			B.moveStart = true
		}
	});
	SeeUtils.addEvent(document, "hover", function (E) {
		B.dragEnd()
	});
	var C = this;
	$(window).resize(function () {
		B.init(C)
	})
}
MxtLayout.prototype.__initWest = function (F, G) {
	if (F.wObj) {
		if (SeeUtils.getElObj("westSp_" + G.id) != null) {
			SeeUtils.removeEl("westSp_" + G.id)
		}
		var H = "";
		var E = G.westBorder ? 1 : 0;
		if (!G.disableDrag) {
			var B = "cursor:e-resize;"
		} else {
			var B = ""
		}
		if (G.westFlag == 2) {
			H = "<span class='spiret spiret_L' id='westSp_" + G.id + "' style='" + B + "z-index:3;width:" + G.spritHeight + "px;height:" + (F._m_height + G.borderWidth * (G.westBorder ? 2 : 0)) + "px;left:" + (G.wWidth) + "px;top:" + (F._m_top) + "px;'><table border='0' cellpadding='0' cellspacing='0' width='100%' style='display:" + (G.spiretBarW ? "table" : "none") + ";margin-top:" + ((F._m_height - G.borderWidth * (G.eastBorder ? 2 : 0)) / 2 - 25) + "px'><tr><td valign='middle'><span class='spiretBarHidden hidden'><em></em></span><span class='spiretBarHidden2'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(F.wObj, {
			height: (F._m_height - G.borderWidth * (G.westBorder ? 2 : 0)) + "px",
			left: "0px",
			top: (F._m_top) + "px",
			width: (G.wWidth - G.borderWidth * (G.westBorder ? 2 : 0)) + "px",
			"border-width": E + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(F.wObj);
		SeeUtils.insertAfter(H, F.wObj);
		F.westSpObj = SeeUtils.getElObj("westSp_" + G.id);
		$("#westSp_" + G.id).mousedown(function (I) {
			if (I.target == this) {
				F.dragStart("h", I, this, "west")
			}
		});
		F.westSpObj = SeeUtils.getElObj("westSp_" + G.id);
		if (G.spiretBarW.show) {
			var C = SeeUtils.getElObj("westSp_" + G.id);
			var D = C.querySelector(".spiretBarHidden");
			var A = C.querySelector(".spiretBarHidden2");
			window.layout_westSpBarRClick = function () {
				SeeUtils.showEl(A);
				SeeUtils.hideEl(D);
				G.spiretBarW.handlerR()
			};
			SeeUtils.attrEl(D, "onclick", "layout_westSpBarRClick()");
			window.layout_westSpBarLClick = function () {
				SeeUtils.showEl(D);
				SeeUtils.hideEl(A);
				G.spiretBarW.handlerL()
			};
			SeeUtils.attrEl(A, "onclick", "layout_westSpBarLClick()")
		}
	}
};
MxtLayout.prototype.__initSouth = function (F, B) {
	if (F.sObj) {
		if (typeof(SeeUtils.getElObj("southSp_" + B.id)) != "undefined") {
			SeeUtils.removeEl("southSp_" + B.id)
		}
		var H = "";
		var E = B.southBorder ? 1 : 0;
		if (!B.disableDrag) {
			var D = "cursor:row-resize;"
		} else {
			var D = ""
		}
		if (B.southFlag == 2) {
			H = "<span id='southSp_" + B.id + "' upordown='down' class='spiret spiret_T' style='" + D + "z-index:3;width:" + F.width + "px;height:" + B.spritHeight + "px;left:0px;top:" + (F.height - B.sHeight - B.spritHeight) + "px;'><table align='center' border='0' cellpadding='0' cellspacing='0' height='100%' style='display:" + (B.spiretBarS ? "table" : "none") + ";'><tr><td align='center'><span class='spiretBarHidden4'><em></em></span><span class='spiretBarHidden3'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(F.sObj, {
			height: (B.sHeight - B.borderWidth * (B.southBorder ? 2 : 0)) + "px",
			left: "0px",
			top: (F.height - B.sHeight) + "px",
			width: F._100 + "px",
			"border-width": E + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(F.sObj);
		SeeUtils.insertAfter(H, F.sObj);
		F.southSpObj = SeeUtils.getElObj("southSp_" + B.id);
		if (B.southSpritBar != true) {
			$("#southSp_" + B.id).mousedown(function (J) {
				if (J.target == this) {
					F.dragStart("h", J, this, "south")
				}
			})
		}
		if (B.spiretBarS.show) {
			var C = SeeUtils.getElObj("southSp_" + B.id);
			var G = C.querySelector(".spiretBarHidden3");
			var I = C.querySelector(".spiretBarHidden4");
			SeeUtils.css(I, "borderRight", 0);
			if (B.spiretBarS.type == "1") {
				SeeUtils.hideEl(I);
				SeeUtils.css(I, "borderRight", "")
			}
			window.layout_southSpBarBClick = function () {
				if (B.spiretBarS.type == "1") {
					SeeUtils.showEl(I);
					SeeUtils.hideEl(G)
				}
				B.spiretBarS.handlerB()
			};
			SeeUtils.attrEl(G, "onclick", "layout_southSpBarBClick()");
			var A = this;
			window.layout_southSpBarTClick = function () {
				if (B.spiretBarS.type == "1") {
					SeeUtils.hideEl(I);
					SeeUtils.showEl(G)
				}
				B.spiretBarS.handlerT();
				F.init(A)
			};
			SeeUtils.attrEl(I, "onclick", "layout_southSpBarTClick()")
		}
	}
};
MxtLayout.prototype.__initCenter = function (B, C) {
	var A = (B._m_height - C.borderWidth * (C.centerBorder ? 2 : 0));
	if (B.cObj != null && A > 0) {
		SeeUtils.cssByJson(B.cObj, {
			height: (B._m_height - C.borderWidth * (C.centerBorder ? 2 : 0)) + "px",
			left: B._c_left + "px",
			top: (B._m_top) + "px",
			width: (B._c_width - C.borderWidth * (C.centerBorder ? 2 : 0)) + "px",
			"border-width": C.centerBorder ? 1 : 0 + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(B.cObj)
	}
};
MxtLayout.prototype.__initEast = function (D, F) {
	if (D.eObj) {
		if (SeeUtils.getElObj("eastSp_" + F.id) != null) {
			SeeUtils.removeEl("eastSp_" + F.id)
		}
		var G = "";
		var B = F.eastBorder ? 1 : 0;
		if (!F.disableDrag) {
			var A = "cursor:e-resize;"
		} else {
			var A = ""
		}
		if (F.eastFlag == 2) {
			G = "<span class='spiret spiret_R' id='eastSp_" + F.id + "' style='" + A + "z-index:3;width:" + F.spritHeight + "px;height:" + (D._m_height + F.borderWidth * (F.eastBorder ? 2 : 0)) + "px;left:" + (D.width - F.eWidth - F.spritHeight) + "px;top:" + (D._m_top) + "px;'><table valign='middle' border='0' cellpadding='0' cellspacing='0' width='100%' style='display:" + (F.spiretBarE ? "table" : "none") + ";margin-top:" + ((D._m_height - F.borderWidth * (F.eastBorder ? 2 : 0)) / 2 - 25) + "px'><tr><td><span class='spiretBarHidden'><em></em></span><span class='spiretBarHidden2'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(D.eObj, {
			height: (D._m_height - F.borderWidth * (F.eastBorder ? 2 : 0)) + "px",
			left: (D.width - F.eWidth) + "px",
			top: (D._m_top) + "px",
			width: (F.eWidth - F.borderWidth * (F.eastBorder ? 2 : 0)) + "px",
			"border-width": B + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(D.eObj);
		SeeUtils.insertAfter(G, D.eObj);
		D.eastSpObj = SeeUtils.getElObj("eastSp_" + F.id);
		$("#eastSp_" + F.id).mousedown(function (I) {
			if (I.target == this) {
				D.dragStart("h", I, this, "east")
			}
		});
		if (F.spiretBarE.show) {
			var E = SeeUtils.getElObj("eastSp_" + F.id);
			var H = E.querySelector(".spiretBarHidden");
			var C = E.querySelector(".spiretBarHidden2");
			if (F.spiretBarE.showItem == "L") {
				SeeUtils.hideEl(H)
			} else {
				SeeUtils.hideEl(C)
			}
			window.layout_eastSpBarRClick = function () {
				SeeUtils.showEl(C);
				SeeUtils.hideEl(H);
				F.spiretBarE.handlerR()
			};
			SeeUtils.attrEl(H, "onclick", "layout_eastSpBarRClick()");
			window.layout_eastSpBarLClick = function () {
				SeeUtils.showEl(H);
				SeeUtils.hideEl(C);
				F.spiretBarE.handlerL()
			};
			SeeUtils.attrEl(C, "onclick", "layout_eastSpBarLClick()")
		}
	}
};
MxtLayout.prototype.__initNorth = function (E, A) {
	if (E.nObj) {
		if (SeeUtils.getElObj("northSp_" + A.id) != null) {
			SeeUtils.removeEl("northSp_" + A.id)
		}
		var I = "";
		var G = A.nHeight;
		var D = A.northBorder ? 1 : 0;
		if (!A.disableDrag) {
			var C = "cursor:row-resize;"
		} else {
			var C = ""
		}
		if (A.northFlag == 2) {
			I = "<span id='northSp_" + A.id + "' class='spiret spiret_T align_center' style='" + C + "z-index:3;width:" + E.width + "px;height:" + A.spritHeight + "px;left:0px;top:" + (A.nHeight) + "px;'><table align='center' border='0' cellpadding='0' cellspacing='0' height='100%' style='display:" + (A.spiretBarN ? "table" : "none") + ";'><tr><td align='center'><span class='spiretBarHidden4'><em></em></span><span class='spiretBarHidden3'><em></em></span></td></tr></table></span>";
			G = A.northArea.height
		}
		if (SeeUtils.getAttrEl(E.nObj, "style") == null) {
			SeeUtils.setElHeight(E.nObj, (G - A.borderWidth * (A.northBorder ? 2 : 0)) + "px")
		}
		SeeUtils.cssByJson(E.nObj, {
			left: "0px",
			top: "0px",
			"border-width": D + "px",
			width: E._100 - A.borderWidth * (A.northBorder ? 2 : 0) + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(E.nObj);
		SeeUtils.insertAfter(I, E.nObj);
		if (A.northFlag == 2) {
			var H = SeeUtils.getElObj("northSp_" + A.id);
			E.northSpObj = H;
			$("#northSp_" + A.id).mousedown(function (J) {
				if (J.target == this) {
					E.dragStart("h", J, this, "north")
				}
			});
			if (A.spiretBarN.show) {
				var B = H.querySelector(".spiretBarHidden3");
				var F = H.querySelector(".spiretBarHidden4");
				SeeUtils.css(F, "borderRight", 0);
				if (A.spiretBarN.type == "1") {
					SeeUtils.hideEl(H.querySelector(".spiretBarHidden3"));
					SeeUtils.css(F, "borderRight", "")
				}
				window.layout_northSpBarBClick = function () {
					if (A.spiretBarN.type == "1") {
						SeeUtils.showEl(F);
						SeeUtils.hideEl(B)
					}
					A.spiretBarN.handlerB()
				};
				SeeUtils.attrEl(B, "onclick", "layout_northSpBarBClick()");
				window.layout_northSpBarTClick = function () {
					if (A.spiretBarN.type == "1") {
						SeeUtils.hideEl(F);
						SeeUtils.showEl(B)
					}
					A.spiretBarN.handlerT()
				};
				SeeUtils.attrEl(F, "onclick", "layout_northSpBarTClick()")
			}
		}
	}
};
MxtLayout.prototype.setEast = function (C) {
	if (C == undefined) {
		return
	}
	var A = this.params;
	var F = this.methods;
	if (F.eObj) {
		var K = parseInt(SeeUtils.getElWidth(F.eObj));
		var D = parseInt(SeeUtils.getCss(F.eObj, "left"));
		var B = K - C;
		SeeUtils.setElWidth(F.eObj, C);
		A.eWidth = C;
		var J = D + B;
		SeeUtils.css(F.eObj, "left", J)
	}
	if (F.eastSpObj) {
		var I = parseInt(SeeUtils.getCss(F.eastSpObj, "left"));
		var H = I + B;
		SeeUtils.css(F.eastSpObj, "left", H)
	}
	if (F.cObj) {
		var E = parseInt(SeeUtils.getElWidth(F.cObj));
		var G = E + B;
		SeeUtils.setElWidth(F.cObj, G)
	}
	A.setCallFun({
		offsetX: B
	})
};
MxtLayout.prototype.setWest = function (D) {
	if (D == undefined) {
		return
	}
	var A = this.params;
	var F = this.methods;
	if (F.wObj) {
		this._clearScroll({
			obj: F.wObj,
			mode: "hidden"
		});
		var J = parseInt(SeeUtils.getElWidth(F.wObj));
		var B = J - D;
		SeeUtils.setElWidth(F.wObj, D);
		A.wWidth = D;
		this._clearScroll({
			obj: F.wObj,
			mode: "show"
		})
	}
	if (F.westSpObj) {
		var C = parseInt(SeeUtils.getCss(F.westSpObj, "left"));
		var H = C - B;
		SeeUtils.css(F.westSpObj, "left", H)
	}
	if (F.cObj) {
		var G = parseInt(SeeUtils.getElWidth(F.cObj));
		var I = G + B;
		var K = parseInt(SeeUtils.getCss(F.cObj, "left"));
		var E = K - B;
		SeeUtils.setElWidth(F.cObj, I);
		SeeUtils.css(F.cObj, "left", E)
	}
	A.setCallFun({
		offsetX: B
	})
};
MxtLayout.prototype.setSouth = function (S) {
	if (S == undefined) {
		return
	}
	var K = this.params;
	var N = this.methods;
	if (N.sObj) {
		var R = parseInt(SeeUtils.getElHeight(N.sObj));
		var L = parseInt(SeeUtils.getCss(N.sObj, "top"));
		var H = R - S;
		var O = L + H;
		SeeUtils.setElHeight(N.sObj, S);
		K.sHeight = S;
		SeeUtils.css(N.sObj, "top", O)
	}
	if (N.southSpObj) {
		var C = parseInt(SeeUtils.getCss(N.southSpObj, "top"));
		var A = C + H;
		SeeUtils.css(N.southSpObj, "top", A)
	}
	if (N.cObj) {
		var B = parseInt(SeeUtils.getElHeight(N.cObj));
		var F = B + H;
		SeeUtils.setElHeight(N.cObj, F)
	}
	if (N.wObj) {
		var D = parseInt(SeeUtils.getElHeight(N.wObj));
		var M = D + H;
		SeeUtils.setElHeight(N.wObj, M)
	}
	if (N.eObj) {
		var E = parseInt(SeeUtils.getElHeight(N.eObj));
		var J = E + H;
		SeeUtils.setElHeight(N.eObj, J)
	}
	if (N.westSpObj) {
		var P = parseInt(SeeUtils.getElHeight(N.westSpObj));
		var Q = P + H;
		SeeUtils.setElHeight(N.westSpObj, Q)
	}
	if (N.eastSpObj) {
		var I = parseInt(SeeUtils.getElHeight(N.eastSpObj));
		var G = I + H;
		SeeUtils.setElHeight(N.eastSpObj, G)
	}
	K.setCallFun({
		offsetY: H
	})
};
MxtLayout.prototype.setNorth = function (Z) {
	if (Z == undefined) {
		return
	}
	var R = this.params;
	var U = this.methods;
	if (U.nObj) {
		var E = SeeUtils.getElHeight(U.nObj);
		var M = E - Z;
		SeeUtils.setElHeight(U.nObj, Z);
		R.nHeight = Z
	}
	if (U.northSpObj) {
		var L = parseInt(SeeUtils.getCss(U.northSpObj, "top"));
		var A = L - M;
		SeeUtils.css(U.northSpObj, "top", A)
	}
	if (U.cObj) {
		var B = SeeUtils.getElHeight(U.cObj);
		var J = B + M;
		SeeUtils.setElHeight(U.cObj, J);
		var T = parseInt(SeeUtils.getCss(U.cObj, "top"));
		var a = T - M;
		SeeUtils.css(U.cObj, "top", a)
	}
	if (U.wObj) {
		var D = SeeUtils.getElHeight(U.wObj);
		var V = parseInt(SeeUtils.getCss(U.wObj, "top"));
		var S = D + M;
		var I = V - M;
		SeeUtils.setElHeight(U.wObj, S);
		SeeUtils.css(U.wObj, "top", I)
	}
	if (U.westSpObj) {
		var W = SeeUtils.getElHeight(U.westSpObj);
		var Q = parseInt(SeeUtils.getCss(U.westSpObj, "top"));
		var Y = W + M;
		var N = Q - M;
		SeeUtils.setElHeight(U.westSpObj, Y);
		SeeUtils.css(U.westSpObj, "top", N)
	}
	if (U.eObj) {
		var F = SeeUtils.getElHeight(U.eObj);
		var X = parseInt(SeeUtils.getCss(U.eObj, "top"));
		var P = F + M;
		var G = X - M;
		SeeUtils.setElHeight(U.eObj, P);
		SeeUtils.css(U.eObj, "top", G)
	}
	if (U.eastSpObj) {
		var O = SeeUtils.getElHeight(U.eastSpObj);
		var H = parseInt(SeeUtils.getCss(U.eastSpObj, "top"));
		var K = O + M;
		var C = H - M;
		SeeUtils.setElHeight(U.eastSpObj, K);
		SeeUtils.css(U.eastSpObj, "top", C)
	}
	R.setCallFun({
		offsetY: M
	})
};
MxtLayout.prototype.getNorthHeight = function () {
	var A = this.params;
	return A.nHeight
};
MxtLayout.prototype.getSouthHeight = function () {
	var A = this.params;
	return A.sHeight
};
MxtLayout.prototype.getWestWidth = function () {
	var A = this.params;
	return A.wWidth
};
MxtLayout.prototype.getEastWidth = function () {
	var A = this.params;
	return A.eWidth
};
MxtLayout.prototype._clearScroll = function (A) {
	if (A.mode == "hidden") {
		SeeUtils.css(A.obj, "overflow", "hidden")
	} else {
		SeeUtils.css(A.obj, "overflow", "")
	}
};
MxtLayout.prototype.setEastSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.eastFlag = 2
	} else {
		C.eastFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setWestSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.westFlag = 2
	} else {
		C.westFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setSouthSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.southFlag = 2
	} else {
		C.southFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setNorthSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.northFlag = 2
	} else {
		C.northFlag = 1
	}
	B.init(this)
};
$(document).ready(function () {
	if ($.browser.msie) {}
});
(function (A) {
	A.extend({
		init_stadic_layout: function () {
			A("html").css({
				height: "100%",
				overflow: "hidden"
			});
			A("body").css({
				height: "100%",
				overflow: "hidden",
				padding: "0px",
				margin: "0px",
				border: "0px"
			})
		}
	});
	A.fn.noSelect = function (C) {
		var B = (C == null) ? true : C;
		if (B) {
			return this.each(function () {
				if (A.browser.msie || A.browser.safari) {
					A(this).bind("selectstart", function () {
						return false
					})
				} else {
					if (A.browser.mozilla) {
						A(this).css("MozUserSelect", "none");
						A("body").trigger("focus")
					} else {
						if (A.browser.opera) {
							A(this).bind("mousedown", function () {
								return false
							})
						} else {
							A(this).attr("unselectable", "on")
						}
					}
				}
			})
		} else {
			return this.each(function () {
				if (A.browser.msie || A.browser.safari) {
					A(this).unbind("selectstart")
				} else {
					if (A.browser.mozilla) {
						A(this).css("MozUserSelect", "inherit")
					} else {
						if (A.browser.opera) {
							A(this).unbind("mousedown")
						} else {
							A(this).removeAttr("unselectable", "on")
						}
					}
				}
			})
		}
	}
})(jQuery);
function commonMenuSimple(C, Q) {
	var B = C.id ? C.id : "menuSimple_" + Math.floor(Math.random() * 1000000000);
	var M = C.data ? C.data : [];
	var E = C.width ? C.width : 128;
	var R = C.height ? C.height : "";
	var A = C.maxHeight ? C.maxHeight : "";
	var I = C.event ? C.event : "click";
	var G = C.direction ? C.direction : "BL";
	var N = C.offsetLeft ? C.offsetLeft : 0;
	var D = C.offsetTop ? C.offsetTop : 0;
	var K = C.mRow ? C.mRow : false;
	function O() {
		var a = $("body");
		if (Q == null) {
			var V = a.data("isMenuSimple");
			if (V != B) {
				SeeUtils.removeEl(V);
				SeeUtils.removeEl(V + "_iframe_mask");
				a.data("isMenuSimple", B)
			}
		} else {
			var f = $(Q);
			var V = f.data("isMenuSimple");
			if (V != B) {
				SeeUtils.removeEl(V);
				SeeUtils.removeEl(V + "_iframe_mask");
				f.data("isMenuSimple", B)
			}
		}
		var d = document.getElementById(B);
		if (d != null) {
			SeeUtils.removeEl(d);
			SeeUtils.removeEl(B + "_iframe_mask")
		}
		function c(r, s) {
			var k = "";
			var p = "";
			if (R != "") {
				p = "height:" + R + "px;overflow-y:auto;"
			}
			if (A != "") {
				p = "max-height:" + A + "px;overflow-y:auto;"
			}
			k += '<div id="' + B + '" class="menu_simple_box" style="z-index:20001;left:' + s + "px;top:" + r + "px;" + p + '"><div class="menu_simple">';
			var n = "";
			K != true ? n = " text_overflow" : null;
			for (var o = 0; o < M.length; o++) {
				if (M[o].isShow == false) {
					continue
				}
				if (M[o].type == "line") {
					k += '<div class="line"></div>'
				} else {
					M[o].id != null ? "" : M[o].id = "menuSimple_item" + Math.floor(Math.random() * 1000000000);
					var l = "";
					M[o].className != null ? l = "<span class='ico16 margin_r_5 " + M[o].className + "'></span>" : null;
					var j = "";
					M[o].customAttr != null ? j = M[o].customAttr : null;
					var m = "";
					M[o].disabled == true ? m = "disabled" : null;
					var q = "";
					k += '<a id="' + M[o].id + "\" title='" + q + "'" + j + " class='" + m + " " + n + "'>" + l + M[o].name + "</a>"
				}
			}
			k += "</div></div>";
			k += '<iframe id="' + B + '_iframe_mask" style="left:' + s + "px;top:" + r + "px;" + p + '"></iframe>';
			return k
		}
		if (Q == null) {
			var h = C.left ? C.left : 0;
			var g = C.top ? C.top : 0
		} else {
			var e = (function () {
				if (Q != null && Q.indexOf("#") == 0) {
					return Q.split("#")[1]
				}
			})();
			if (e == null || e == "") {
				return void(0)
			}
			var Z = document.getElementById(e);
			if (Z != null) {
				var h = function () {
					switch (G) {
					case "BL":
						left = SeeUtils.getElOffest(Z).left + N;
						if ((left + E) > SeeUtils.getDocumentWidth()) {
							left = SeeUtils.getDocumentWidth() - E - 20
						}
						return left;
						break;
					case "BR":
						left = SeeUtils.getElOffest(Z).left + SeeUtils.getElWidth(Z) - E - 12 + N;
						if ((left + E) > SeeUtils.getDocumentWidth()) {
							left = SeeUtils.getDocumentWidth() - E - 20
						}
						return left;
						break
					}
				}
				();
				var g = function () {
					var j = SeeUtils.getElOffest(Z).top + SeeUtils.getElHeight(Z) + 5 + D;
					var i = SeeUtils.getDocumentHeight();
					if ((j + SeeUtils.getElHeight(d) + 5) > i) {
						j = i - SeeUtils.getElHeight(d) - 5
					}
					return j
				}
				()
			}
		}
		SeeUtils.appendToBody(c(g, h));
		SeeUtils.cssByJson(B + "_iframe_mask", {
			display: "none",
			zIndex: 20000,
			position: "absolute",
			top: g + "px",
			left: h + "px",
			width: SeeUtils.getElWidth(document.getElementById(B)) + "px",
			height: SeeUtils.getElHeight(document.getElementById(B)) + "px"
		});
		if (Q == null) {
			SeeUtils.showEl(B);
			SeeUtils.showEl(B + "_iframe_mask");
			hideOfficeObj()
		}
		var T = SeeUtils.getByClass(SeeUtils.getElObj(B), ".menu_simple");
		if (T != null) {
			var U = T[0];
			if (U != null) {
				var Y = U.children;
				for (var b = 0; b < Y.length; b++) {
					var X = Y[b];
					var W = (function (j) {
						return function () {
							if (M[j].disabled != true) {
								M[j].handle({
									id: M[j].id,
									name: M[j].name,
									obj: $(this)
								})
							}
						}
					})(b);
					SeeUtils.addEvent(X, "click", W)
				}
			}
		}
	}
	O();
	function J() {
		var T = document.getElementById(B);
		SeeUtils.addEvent(T, "click", function () {
			if (R != "") {
				T.scrollTop = 0
			}
			SeeUtils.hideEl(T);
			var U = document.getElementById(B + "_iframe_mask");
			SeeUtils.hideEl(U);
			showOfficeObj()
		});
		SeeUtils.addEvent(T, "mouseleave", function () {
			if (R != "") {
				T.scrollTop = 0
			}
			SeeUtils.hideEl(T);
			var U = document.getElementById(B + "_iframe_mask");
			SeeUtils.hideEl(U);
			P = true;
			showOfficeObj()
		});
		SeeUtils.addEvent(T, "mouseenter", function () {
			P = false
		})
	}
	var L = (function () {
		if (Q != null && Q.indexOf("#") == 0) {
			return Q.split("#")[1]
		}
	})();
	if (L == null || L == "") {
		return void(0)
	}
	var H = document.getElementById(L);
	var S = function () {
		J();
		setTimeout(function () {
			if (H.getAttribute("disable") != "disable") {
				var T = function () {
					var X;
					switch (G) {
					case "BL":
						X = SeeUtils.getElOffest(H).left + N;
						if ((X + E) > SeeUtils.getDocumentWidth()) {
							X = SeeUtils.getDocumentWidth() - E - 20
						}
						return X;
						break;
					case "BR":
						X = SeeUtils.getElOffest(H).left + SeeUtils.getElWidth(H) - E - 12 + N;
						if ((X + E) > SeeUtils.getDocumentWidth()) {
							X = SeeUtils.getDocumentWidth() - E - 20
						}
						return X;
						break
					}
				}
				();
				var W = function () {
					var Y = SeeUtils.getElOffest(H).top + SeeUtils.getElHeight(H) + 5 + D;
					var X = SeeUtils.getDocumentHeight();
					if ((Y + SeeUtils.getElHeight(B) + 5) > X) {
						Y = X - SeeUtils.getElHeight(B) - 5
					}
					return Y
				}
				();
				var V = document.getElementById(B);
				SeeUtils.css(V, "left", T + "px");
				SeeUtils.css(V, "top", W + "px");
				SeeUtils.showEl(V);
				var U = document.getElementById(B + "_iframe_mask");
				SeeUtils.css(U, "left", T + "px");
				SeeUtils.css(U, "top", W + "px");
				SeeUtils.css(U, "width", (E * 1 + 16) + "px");
				SeeUtils.showEl(U);
				hideOfficeObj()
			}
		}, 100)
	};
	if (H) {
		SeeUtils.removeEvent(H, I, S);
		SeeUtils.addEvent(H, I, S)
	}
	var P = true;
	var F = function () {
		setTimeout(function () {
			if (P) {
				var T = document.getElementById(B);
				if (R != "") {
					T.scrollTop = 0
				}
				SeeUtils.hideEl(T);
				SeeUtils.hideEl(B + "_iframe_mask");
				showOfficeObj()
			}
		}, 100)
	};
	if (H) {
		SeeUtils.removeEvent(H, "mouseleave", F);
		SeeUtils.addEvent(H, "mouseleave", F)
	}
}
$.fn.menuSimple = function (A) {
	commonMenuSimple(A, $(this).selector)
};
$.menuSimple = function (A) {
	commonMenuSimple(A, null)
};
var _orgManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath + "/ajax.do?method=ajaxAction&managerName=orgManager",
		canShowPeopleCard: function () {
			return this.ajaxCall(arguments, "canShowPeopleCard")
		},
		getMemberExternalType: function () {
			return this.ajaxCall(arguments, "getMemberExternalType")
		}
	});
function insertScript(D) {
	if (SeeUtils.getSizeById("script_people") == 0) {
		var G = document.createElement("div");
		G.id = "script_people";
		G.className = "hidden";
		SeeUtils.addNodeToHeader(G);
		SeeUtils.addScriptToHeader(_ctxPath + "/ajax.do?managerName=peopleCardManager,orgManager" + CsrfGuard.getUrlSurffix(), null, true, "orgManager");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/collaboration/js/CollaborationApi.js", null, true, "CollaborationApi");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/webmail/js/webmail.js", null, false, "webmail");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/sms/js/sms.js", null, false, "sms");
		var B = document.createElement("script");
		B.innerHTML = "var dialog;";
		SeeUtils.addNodeToHeader(B);
		SeeUtils.addCssToHeader(_ctxPath + "/common/css/peoplecard.css")
	}
	if (typeof(peopleCardManager) == "undefined") {
		return
	}
	var F = D.memberId;
	var E = new peopleCardManager();
	var A = D;
	var C = E.showPeoPleCardMini(F);
	A.data = C;
	return A
}
function insertScriptP() {
	if (SeeUtils.getSizeById("script_people") == 0) {
		var A = document.createElement("div");
		A.id = "script_people";
		A.className = "hidden";
		SeeUtils.addNodeToHeader(A);
		SeeUtils.addScriptToHeader(_ctxPath + "/ajax.do?managerName=peopleCardManager,orgManager" + CsrfGuard.getUrlSurffix(), function () {}, true, "orgManager")
	}
}
function createPanel(F) {
	var Q = getA8Top();
	var V = 0;
	var K = SeeUtils.getSizeById("main", Q);
	while (K == 0 && V < 5) {
		Q = Q.v3x.getParentWindow().getA8Top();
		V++
	}
	var J = false;
	var X = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (X == null || X == undefined) {
		X = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	var B = X.id;
	var R = F.data.emailaddress;
	var U = $.ctx && $.ctx._emailShow || vPortal._emailShow;
	if (U == null || U == undefined) {
		U = getCtpTop().$.ctx && getCtpTop().$.ctx._emailShow || getCtpTop().vPortal._emailShow
	}
	if (F.memberId == B) {
		J = true
	} else {
		J = false
	}
	var A = false;
	if (!F.id) {
		A = true
	}
	var Y = document.getElementById("miniCrad");
	var M = "";
	if (F.accountShortName && F.accountShortName != "" && F.accountShortName != "null" && F.accountShortName != "undefined") {
		M = "(" + F.accountShortName + ")"
	}
	var O = F.data.deptName;
	if (O.length > 20) {
		O = O.substring(0, 20) + "..."
	}
	var G = F.data.postName;
	if (G.length > 20) {
		G = G.substring(0, 20) + "..."
	}
	var I = F.data.name + M;
	if (I.length > 20) {
		I = I.substring(0, 16) + "..."
	}
	var T = "<div class='peoplecard_pageTur  ' style='margin: 0px 0px; position: relative;'><em class='peoplecard_pageTurning'></em><div class='peoplecard_cd_list peoplecard_overflow peoplecard_cd_show peoplecard_left' style='border-bottom:transparent; padding-right: 33px;'><div class='peoplecard_cardMsg'><div class='peoplecard_cd_img peoplecard_left'><span><img width='50' height='50' class='radius' src='" + F.data.imgurl + "'></span></div><dl class='peoplecard_left'><dd class='peoplecard_cd_name'><span>" + I + "</span></dd><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("relate.memberinfo.dep") + "</span><span class='peoplecard_cd_message'>&nbsp;" + O + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("relate.memberinfo.post1") + "</span><span class='peoplecard_cd_message'>&nbsp;" + G + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("org.account_form.telephone.label") + ":</span><span class='peoplecard_cd_message'>&nbsp;" + F.data.officenumber + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("member.mobile") + ":</span><span class='peoplecard_cd_message'>&nbsp;" + F.data.telnumber + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("member.email") + ":</span><span class='peoplecard_cd_message peoplecard_cd_email'>&nbsp;" + F.data.emailaddress + "</span></dt></dl></div></div><div class='peoplecard_sendMessage peoplecard_overflow'><div class='peoplecard_msgImg_list' style='width: 441px;'>";
	T = T + "<a  id='sendcollaboration' name='sendcollaboration' title='" + $.i18n("people.send.collaborative") + "' class='peoplecard_button peoplecard_margin_l_92'  href='javascript:void(0)'><em class='peoplecard_icon16 peoplecard_addConection_icon16' style='margin-bottom:3px;'></em></a>";
	if (R != "" && U) {
		T = T + "<a  href='javascript:void(0)' class='peoplecard_button ' id='sendemail' name='sendemail' title='" + $.i18n("people.send.email") + "'><em class='peoplecard_icon16 peoplecard_sendMsg_icon16' style='margin-bottom:3px;'></em></a>"
	}
	if (X.canSendSMS) {
		T = T + "<a  href='javascript:void(0)' class='peoplecard_button '  id='sendSMS'  name='sendSMS' title='" + $.i18n("people.send.SMS") + "' ><em class='peoplecard_icon16 peoplecard_sendShortMsg_icon16' style='margin-bottom:3px;'></em></a>"
	}
	if (!J) {
		T = T + "<a  id='addcorrelation' name='addcorrelation' title='" + $.i18n("people.add.correlation") + "' class='peoplecard_button ' style='background: rgb(243, 243, 243);'  href='javascript:void(0)'><em class='peoplecard_icon16 peoplecard_sendEmail_icon16 peoplecard_addcorrelation_icon16' style='margin-bottom:3px;'></em></a>"
	}
	"</div></div></div>";
	if (Y.length == 0) {
		var H = document.createElement("div");
		H.id = "miniCrad";
		H.className = "peoplecard_cardmini h100b peoplecard_hidden";
		H.innerHTML = T;
		var Z = document.getElementsByTagName("body");
		Z[0].appendChild(H)
	} else {
		Y.innerHTML = T
	}
	SeeUtils.addEvent("sendcollaboration", "mouseenter", function () {
		var a = document.getElementById("sendcollaboration");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-176px -31px"
	});
	SeeUtils.addEvent("sendcollaboration", "mouseleave", function () {
		var a = document.getElementById("sendcollaboration");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "0 -32px"
	});
	SeeUtils.addEvent("sendemail", "mouseenter", function () {
		var a = document.getElementById("sendemail");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-209px -31px"
	});
	SeeUtils.addEvent("sendemail", "mouseleave", function () {
		var a = document.getElementById("sendemail");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-33px -31px"
	});
	SeeUtils.addEvent("sendSMS", "mouseenter", function () {
		var a = document.getElementById("sendSMS");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-224px -32px"
	});
	SeeUtils.addEvent("sendSMS", "mouseleave", function () {
		var a = document.getElementById("sendSMS");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-48px -32px"
	});
	SeeUtils.addEvent("addcorrelation", "mouseenter", function () {
		var a = document.getElementById("addcorrelation");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-241px -31px"
	});
	SeeUtils.addEvent("addcorrelation", "mouseleave", function () {
		var a = document.getElementById("addcorrelation");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-65px -31px"
	});
	var P = function () {
		dialog = $.dialog({
				id: "url",
				url: _ctxPath + "/relateMember.do?method=addRelativePeople&receiverId=" + F.data.id,
				width: 420,
				height: 200,
				targetWindow: getCtpTop(),
				title: $.i18n("peoplecard.addrelpeple.js")
			})
	};
	SeeUtils.removeEvent("addcorrelation", "click", P);
	SeeUtils.addEvent("addcorrelation", "click", P);
	var L = function () {
		if (document.getElementById("emailaddress").innerHTML != "") {
			sendMail(document.getElementById("emailaddress").innerHTML)
		}
	};
	SeeUtils.removeEvent("sendemail", "click", L);
	SeeUtils.addEvent("sendemail", "click", L);
	var N = function () {
		var a = {
			personId: F.data.id,
			from: "peopleCard"
		};
		collaborationApi.newColl(a)
	};
	SeeUtils.removeEvent("sendcollaboration", "click", N);
	SeeUtils.addEvent("sendcollaboration", "click", N);
	var S = function () {
		sendSMS(F.data.id)
	};
	SeeUtils.removeEvent("sendSMS", "click", S);
	SeeUtils.addEvent("sendSMS", "click", S);
	var E = $.ctx && $.ctx.resources || vPortal.resources;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.resources || getCtpTop().vPortal.resources
	}
	try {
		if (!E.contains("F01_newColl")) {
			SeeUtils.hideEl("sendcollaboration")
		}
		if (!E.contains("F12_mailcreate")) {
			SeeUtils.hideEl("sendemail")
		}
	} catch (W) {}
	if (!X.canSendSMS) {
		SeeUtils.hideEl("sendSMS")
	}
	var C = $.ctx && $.ctx.plugins || vPortal.plugins;
	if (C == null || C == undefined) {
		C = getCtpTop().$.ctx && getCtpTop().$.ctx.plugins || getCtpTop().vPortal.plugins
	}
	var D = $.dialog({
			id: "dialog_cardMini",
			width: 444,
			height: 258,
			type: "panel",
			htmlId: "miniCrad",
			targetId: F.id,
			left: F.obj.offset().left,
			top: F.obj.offset().top + F.obj.innerHeight(),
			shadow: false,
			panelParam: {
				show: A,
				margins: false,
				inside: A
			},
			timeout: 1000
		});
	return D
}
function createPanelWithOutButton(F) {
	var O = getA8Top();
	var S = 0;
	var I = SeeUtils.getSizeById("main", O);
	while (I == 0 && S < 5) {
		O = getA8Top().v3x.getParentWindow().getA8Top();
		S++
	}
	var H = false;
	var U = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (U == null || U == undefined) {
		U = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	var B = U.id;
	var P = F.data.emailaddress;
	if (F.memberId == B) {
		H = true
	} else {
		H = false
	}
	var A = false;
	if (!F.id) {
		A = true
	}
	var V = document.getElementById("miniCrad");
	var J = "";
	if (F.accountShortName && F.accountShortName != "" && F.accountShortName != "null" && F.accountShortName != "undefined") {
		J = "(" + F.accountShortName + ")"
	}
	var M = F.data.orgDepartmentId;
	if (M.length > 20) {
		M = M.substring(0, 20) + "..."
	}
	var R = "<div class='left'style='width:90px;'><div class=' align_center'><span class='people_img relative display_inline-block  over_hidden margin_t_5'><img class='radius' id='memberimg' src='" + F.data.imgurl + "' width='70'height='70'></span></div><div class=' align_center'>";
	R = R + "</div></div><form name='peoplecardminiform'id='peoplecardminiform'method='post'><div style='height:127px;' class='over_hidden adapt_w font_size12 form_area people_msg'><table cellpadding='0'cellspacing='0'width='100%'class='padding_5 margin_l_10'><caption class='align_left font_bold font_size14'><label id='name'/><div class='cut_string margin_5'>" + F.data.name + J + "</div></caption><tr><td width='100%'colspan='2'class='font_bold'style='font-size:14px;'><label id='orgDepartmentId'/><div class='cut_string'>" + M + "</div></td></tr><tr><th nowrap='nowrap'>" + $.i18n("org.account_form.telephone.label") + ":</th><td width='400'><label id='officenumber'/>" + F.data.officenumber + "</td></tr><tr><th nowrap='nowrap'>" + $.i18n("member.mobile") + ":</th><td><label id='telnumber'/>" + F.data.telnumber + "</td></tr><tr><th nowrap='nowrap'>" + $.i18n("member.email") + ":</th><td><label  id='emailaddress'/>" + F.data.emailaddress + "</td></tr></table></div></form><ul class='font_size12 align_center card_operate border_t clear'>";
	R = R + "</ul>";
	if (V.length == 0) {
		var G = document.createElement("div");
		G.id = "miniCrad";
		G.className = "cardmini h100b hidden";
		G.innerHTML = R;
		var W = document.getElementsByTagName("body");
		W[0].appendChild(G)
	} else {
		V.innerHTML = R
	}
	if ("" == F.data.relateType) {
		var N = function () {
			dialog = $.dialog({
					id: "url",
					url: _ctxPath + "/relateMember.do?method=addRelativePeople&receiverId=" + F.data.id,
					width: 420,
					height: 200,
					targetWindow: getCtpTop(),
					title: $.i18n("peoplecard.addrelpeple.js")
				})
		};
		SeeUtils.removeEvent("addcorrelation", "click", N);
		SeeUtils.addEvent("addcorrelation", "click", N)
	} else {
		document.getElementById("addcorrelation").innerText = F.data.relateType
	}
	var K = function () {
		if (document.getElementById("emailaddress").innerHTML != "") {
			sendMail(document.getElementById("emailaddress").innerHTML)
		}
	};
	SeeUtils.removeEvent("sendemail", "click", K);
	SeeUtils.addEvent("sendemail", "click", K);
	var L = function () {
		appToColl4DialogMode("peopleCard", F.data.id)
	};
	SeeUtils.removeEvent("sendcollaboration", "click", L);
	SeeUtils.addEvent("sendcollaboration", "click", L);
	var Q = function () {
		sendSMS(F.data.id)
	};
	SeeUtils.removeEvent("sendSMS", "click", Q);
	SeeUtils.addEvent("sendSMS", "click", Q);
	var E = $.ctx && $.ctx.resources || vPortal.resources;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.resources || getCtpTop().vPortal.resources
	}
	try {
		if (!E.contains("F01_newColl")) {
			SeeUtils.hideEl("sendcollaboration")
		}
		if (!E.contains("F12_mailcreate")) {
			SeeUtils.hideEl("sendemail")
		}
	} catch (T) {}
	if (!U.canSendSMS) {
		SeeUtils.hideEl("sendSMS")
	}
	var C = $.ctx && $.ctx.plugins || vPortal.plugins;
	if (C == null || C == undefined) {
		C = getCtpTop().$.ctx && getCtpTop().$.ctx.plugins || getCtpTop().vPortal.plugins
	}
	var D = $.dialog({
			id: "dialog_cardMini",
			width: 330,
			height: 161,
			type: "panel",
			htmlId: "miniCrad",
			targetId: F.id,
			left: F.left,
			top: F.top,
			shadow: false,
			panelParam: {
				show: A,
				margins: false,
				inside: A
			}
		});
	return D
}
var size = 0;
function PeopleCard(B) {
	var F = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!F.canShowPeopleCard(D.id, B.memberId)) {
		return
	}
	var E = F.getMemberExternalType(B.memberId);
	var A = E == 0 ? true : false;
	var C = "530";
	if (!A) {
		C = "300"
	}
	newPeopleCardDialog = getA8Top().$.dialog({
			id: "newPeopleCardDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: _ctxPath + "/organization/peopleCard.do?method=showPeoPleCard&type=withbutton&memberId=" + B.memberId + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: C,
			top: B.top,
			closeParam: {
				show: false
			}
		});
	return newPeopleCardDialog
}
function PeopleCardWithOutButton(A) {
	var C = new _orgManager();
	var B = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (B == null || B == undefined) {
		B = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!C.canShowPeopleCard(B.id, A.memberId)) {
		return
	}
	newPeopleCardWithoutButtonDialog = getA8Top().$.dialog({
			id: "newPeopleCardWithoutButtonDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: _ctxPath + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A.memberId + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: 530,
			top: A.top,
			closeParam: {
				show: false
			}
		});
	return newPeopleCardWithoutButtonDialog
}
function PeopleCardMini_flash(C) {
	var E = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!E.canShowPeopleCard(D.id, C.memberId)) {
		return
	}
	this.memberId = C.memberId;
	this.data = C.data;
	this.left = C.left;
	this.top = C.top;
	this.accountShortName = C.accountShortName;
	this.id = null;
	var B = this;
	var A = createPanel(B);
	return A
}
function PeopleCardMini_flashWithOutButton(C) {
	var E = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!E.canShowPeopleCard(D.id, C.memberId)) {
		return
	}
	this.memberId = C.memberId;
	this.data = C.data;
	this.left = C.left;
	this.top = C.top;
	this.accountShortName = C.accountShortName;
	this.id = null;
	var B = this;
	var A = createPanelWithOutButton(B);
	return A
}
function PeopleCardMini(D, F) {
	var G = new _orgManager();
	var E = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!G.canShowPeopleCard(E.id, D.memberId)) {
		return
	}
	this.memberId = D.memberId;
	this.obj = F;
	this.data = D.data;
	this.id = F.attr("id");
	var C;
	var B = this;
	var A = true;
	this.obj.bind({
		mouseenter: function () {
			C = createPanel(B);
			SeeUtils.addEvent(C.id + "_main", "mouseenter", function () {
				A = false
			});
			SeeUtils.addEvent(C.id + "_main", "mouseleave", function () {
				C.hideDialog()
			})
		},
		mouseleave: function () {
			setTimeout(function () {
				if (A) {
					try {
						C.hideDialog()
					} catch (H) {}
				}
			}, 200)
		}
	});
	return C
}
function PeopleCardMiniWithOutButton(D, F) {
	var G = new _orgManager();
	var E = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!G.canShowPeopleCard(E.id, D.memberId)) {
		return
	}
	this.memberId = D.memberId;
	this.obj = F;
	this.data = D.data;
	this.id = F.attr("id");
	var C;
	var B = this;
	var A = true;
	this.obj.bind({
		mouseenter: function () {
			C = createPanelWithOutButton(B);
			SeeUtils.addEvent(C.id, "mouseenter", function () {
				A = false
			});
			SeeUtils.addEvent(C.id, "mouseleave", function () {
				C.hideDialog()
			})
		},
		mouseleave: function () {
			setTimeout(function () {
				if (A) {
					try {
						C.hideDialog()
					} catch (H) {}
				}
			}, 200)
		}
	});
	return C
};
function thisclose() {
	if (!window.close()) {
		printIt(45)
	}
}
function printIt(C) {
	var A = document.getElementById("WebBrowser");
	if (C == 1) {
		window.print()
	} else {
		try {
			A.ExecWB(C, 1)
		} catch (B) {}
	}
}
function __cap4SmallerOrBig(B) {
	if (SeeUtils.isIE) {
		B.style.zoom = 1 + _currentZoom
	} else {
		if (navigator.userAgent.indexOf("Chrome") > -1) {
			B.style.zoom = 1 + _currentZoom;
			var A = $("#__templateIframeBody").width()
		} else {
			$(B).css({
				"-moz-transform": "scale(" + (1 + _currentZoom) + ")",
				"-moz-transform-origin": "top left"
			})
		}
	}
}
function zoomIt(B, A, D) {
	if (B) {
		if (!A) {
			A = 0;
			_currentZoom = 0
		}
		_currentZoom = _currentZoom + A;
		if ($.browser.version == "8.0") {
			if (_currentZoom > 0) {
				$(".body").css("overflow", "scroll")
			} else {
				$(".body").css("overflow", "auto")
			}
		}
		var C = getQueryString("from");
		if (C === "formPrint") {
			__cap4SmallerOrBig(B)
		} else {
			if (B.style.zoom) {
				B.style.zoom = 1 + _currentZoom
			} else {
				$(B).css({
					"-moz-transform": "scale(" + (1 + _currentZoom) + ")",
					"-moz-transform-origin": "top left"
				})
			}
		}
		clearnText(D)
	}
}
function clearnText(D) {
	var C = document.getElementById("print8");
	var B = document.getElementById("context");
	if (C && B) {
		var A = 1 + _currentZoom;
		C.value = Math.ceil(parseInt(A * 100))
	}
	if (D != null && D > 0) {
		C.value = D
	}
}
function __hideToolBtn() {
	var D = getParentWindow();
	var E = D.plist;
	var C = E.size();
	for (var A = 0; A < C; A++) {
		var B = E.get(A);
		if (B.hide == true) {
			$("#dataNameBox" + A).parent().hide();
			$("#dataNameBox" + A).hide()
		}
		$("#dataNameBox2").parent().css("visibility", "hidden")
	}
	$("#printall").parent().hide()
}
function getQueryString(A) {
	var B = new RegExp("(^|&)" + A + "=([^&]*)(&|$)", "i");
	var C = window.location.search.substr(1).match(B);
	if (C != null) {
		return unescape(C[2])
	}
	return null
}
function initBodyHeight(E) {
	var B = $(E).attr("src");
	if (B != null && (B + "").indexOf("print.html") > 0) {
		IframeUtils.loadCap4Content();
		__hideToolBtn()
	} else {
		if (printType === "cap4Print") {
			__hideToolBtn()
		} else {
			setTimeout(function () {
				IframeUtils.getIframeBody()
			}, 1000)
		}
	}
	$("span").css("white-space", "normal");
	if ($.browser.msie) {
		var K = parseInt(document.body.scrollWidth);
		var G = parseInt(document.body.clientWidth);
		if (K > G) {
			document.body.style.width = K + "px"
		}
	}
	var J = jQuery(".flexigrid");
	if (J.length > 0) {
		jQuery(".flexigrid a").removeAttr("onclick");
		jQuery(".flexigrid tr,.flexigrid th").removeAttr("onclick onmousedown onmouseup onmouseenter onmouseleave");
		jQuery(".hDivBox thead th div").each(function () {
			var L = $(this).html();
			$(this).parent().html(L)
		});
		var I = jQuery(".hDivBox thead");
		jQuery(".bDiv tbody td div").each(function () {
			var L = $(this).html();
			$(this).parent().html(L)
		});
		var C = jQuery(".bDiv tbody");
		var H = "";
		var A = I.html();
		var F = C.html();
		if (A == null || A == "null") {
			A = ""
		}
		if (F == null || F == "null") {
			F = ""
		}
		if (J.hasClass("dataTable")) {
			H += "<table class='table-header-print table-header-print-dataTable' border='0' cellspacing='0' cellpadding='0'>"
		} else {
			H += "<table class='table-header-print' border='0' cellspacing='0' cellpadding='0'>"
		}
		H += "<thead>";
		H += A;
		H += "</thead>";
		H += "<tbody>";
		H += F;
		H += "</tbody>";
		H += "</table>";
		var D = J.parent();
		D.append($(H));
		J.remove();
		if ($("#logCategory").length > 0) {
			$("#logCategory").remove()
		}
		jQuery(".table-header-print thead th").attr("nowrap", "nowrap")
	}
}
function isMSie8() {
	if ($.browser.msie && $.browser.version == "8.0") {
		return true
	}
	return false
}
function removeSign() {
	var B = document.getElementsByName("iHtmlSignature");
	for (var A = 0; A < B.length; A++) {
		$(B[A]).remove()
	}
}
var signaturesDataPublic = null;
function loadSign() {
	var D = document.getElementsByName("iHtmlSignature").length;
	var E = $(".comp[comptype=htmlSignature]");
	if (E.length > 0 && contentType != "20") {
		E.each(function () {
			$("object", $(this).parent()).remove();
			$(this).comp()
		})
	}
	if (typeof(window.opener.parent.parent.summaryId) != "undefined" && window.opener.parent.parent.summaryId) {
		var C = null;
		try {
			var B = document.getElementById("__templateIframe");
			if (B != null && B.contentWindow != null && B.contentWindow.isignatureData != null) {
				C = B.contentWindow.isignatureData();
				signaturesDataPublic = JSON.stringify(C)
			} else {
				if (signaturesDataPublic != null) {
					C = JSON.parse(signaturesDataPublic)
				}
			}
		} catch (A) {}
		if (C != null) {
			loadSignatures(window.opener.parent.parent.summaryId, "true", "true", "true", null, true, C)
		} else {
			loadSignatures(window.opener.parent.parent.summaryId)
		}
	}
}
function __cap4CenterAlign(A) {
	var B = 0;
	if ($("#__templateIframeBody").find(".cap4-form").get(0) != null) {
		B = $("#__templateIframeBody").find(".cap4-form").width()
	} else {
		if (parseFloat(A) > 0) {
			B = A
		}
	}
	$("#__templateIframeBody").width(B).css("margin", "auto").css("float", "none")
}
function printIframeLoad() {
	var F = getParentWindow();
	var B = document.getElementById("context");
	var I = F.plist;
	if (I == null) {
		return void(0)
	}
	var C = I.size();
	for (var G = 0; G < C; G++) {
		var L = I.get(G);
		if (G == 2) {}
		else {
			if (typeof(L.dataHtml) === "undefined" || typeof(L.dataHtml) === undefined) {
				B.innerHTML += "<p></p>"
			} else {
				B.innerHTML += "<p>" + L.dataHtml + "</p>"
			}
		}
	}
	var D = F.styleData;
	if (D != null) {
		setStyle(D)
	}
	var H = document.getElementById("checkOption");
	var A = F.plist;
	var K = I.size();
	var J = 0;
	var E = "";
	if (printType === "cap4Print") {
		E = "visibility: hidden;"
	}
	for (var G = 0; G < K; G++) {
		var L = A.get(G);
		if (L.dataName != null && L.dataName != "") {
			H.innerHTML += "<label for='dataNameBox" + G + "' class='margin_r_10 hand' style='" + E + "'><input disabled='disabled' class='radio_com' type=checkbox checked name='dataNameBoxes' id=dataNameBox" + G + " onclick='printMain(this)'><font style='font-size:12px' color='black'>" + L.dataName + "</font></label>&nbsp;&nbsp;";
			J++
		}
	}
	if (J > 0) {
		H.innerHTML += "<font style='font-size:12px' color='black'><label for='printall' class='margin_r_10 hand'><input  disabled='disabled' class='radio_com' type=checkbox id ='printall' checked name=cboxs onclick=printAll(this)>" + $.i18n("print.printall.label.js") + "</label></font>"
	}
	if (F.notPrintDefaultSelect != null) {
		for (var G = 0; G < F.notPrintDefaultSelect.length; G++) {
			if (document.getElementById("dataNameBox" + F.notPrintDefaultSelect[G]) != null) {
				document.getElementById("dataNameBox" + F.notPrintDefaultSelect[G]).checked = false
			}
		}
	}
	document.close();
	var B = document.getElementById("context");
	creatIframeDataHtml(I, B);
	disabledLink()
}
function removeDivEvent() {
	var A = document.getElementById("__templateIframeBody");
	var C = $("#__templateIframeBody *");
	for (var B = 0; B < C.length; B++) {
		$(C[B]).unbind()
	}
}
var removeIframeEvent = function () {
	var B = document.getElementById("__templateIframe");
	if (B.contentWindow.$ != null) {
		var C = B.contentWindow.$("*");
		for (var A = 0; A < C.length; A++) {
			$(C[A]).unbind();
			if ($(C[A]).attr("onClick") != null) {
				$(C[A]).attr("onClick", "javascript:void(0);return false;")
			}
			if ($(C[A]).attr("onmouseover") != null) {
				$(C[A]).attr("onmouseover", "javascript:void(0);return false;")
			}
			if ($(C[A]).attr("onmouseenter") != null) {
				$(C[A]).attr("onmouseenter", "javascript:void(0);return false;")
			}
			if ($(C[A]).attr("onmouseleave") != null) {
				$(C[A]).attr("onmouseleave", "javascript:void(0);return false;")
			}
		}
	}
};
function _removeEmptyTr(A) {
	try {
		A.find("div").each(function () {
			if ($.trim($(this).text()) === "" && ($(this).html() === "" || $.trim($(this).html()) === "&nbsp;")) {
				$(this).remove()
			}
		})
	} catch (B) {}
}
function removejscssfile(A, C) {
	var E = (C == "js") ? "script" : (C == "css") ? "link" : "none";
	var D = (C == "js") ? "src" : (C == "css") ? "href" : "none";
	var F = document.getElementsByTagName(E);
	for (var B = F.length; B >= 0; B--) {
		if (F[B] && F[B].getAttribute(D) != null && F[B].getAttribute(D).indexOf(A) != -1) {
			F[B].parentNode.removeChild(F[B])
		}
	}
}
function loadCssStyle(B) {
	var A = document.createElement("style");
	A.type = "text/css";
	if (A.styleSheet) {
		A.styleSheet.cssText = B
	} else {
		A.innerHTML = B
	}
	document.getElementsByTagName("head")[0].appendChild(A)
}
function loadCssFile(B, C) {
	var A = document.getElementsByTagName("head").item(0);
	css = document.createElement("link");
	css.href = B;
	css.rel = "stylesheet";
	css.type = "text/css";
	A.appendChild(css)
}
var loadStyleFlag = false;
var loadCss = false;
function loadIframeContentByUrl(F) {
	if (IframeUtils.loadContentFlag) {
		return void(0)
	}
	var C = document.getElementById("__templateIframe");
	if (C != null && C.contentWindow.$ != null) {
		var A = C.contentWindow.$("#bodyBlock");
		A.find(".content_text").css("padding", "0px");
		if (F != "cap4Print") {
			try {
				if (loadCss === false) {
					var E = document.getElementById("__templateIframe").contentWindow.document;
					$(E).find("link").each(function () {
						var G = $(this).attr("href");
						loadCssFile(G)
					});
					loadCss = true
				}
			} catch (D) {}
		}
		try {
			if (loadStyleFlag === false) {
				var B = document.getElementById("__templateIframe").contentWindow.document;
				$(B).find("style").each(function () {
					loadCssStyle($(this).html())
				});
				loadStyleFlag = true
			}
			setTimeout(function () {
				loadIframeContent()
			}, 200)
		} catch (D) {}
		setTimeout(function () {
			IframeUtils.loadContent = true
		}, 600);
		removeIframeEvent()
	}
}
function loadIframeContent() {
	if (IframeUtils.loadContent && printType === "commonPrint") {
		loadContentFromIframe();
		IframeUtils.loadContentFlag = true
	} else {
		if (printType !== "commonPrint") {
			loadContentFromIframe()
		}
	}
}
function loadContentFromIframe() {
	var A = document.getElementById("__templateIframe").contentWindow.document;
	$(A).find("script").each(function () {
		$(this).remove()
	});
	var B = document.getElementById("__templateIframe").contentWindow.document.body.innerHTML;
	$(document.getElementById("__templateIframeBody")).html(B);
	$(document.getElementById("__templateIframeBody")).find("[name='iHtmlSignature']").remove();
	afterLoadContent();
	if (progress1 != null) {
		progress1.close();
		progress1 = null
	}
}
function afterLoadContent() {
	$(document.getElementById("__templateIframeBody")).find(".GoTo_Top_scan").parent().remove();
	if (printType !== "cap4Print") {
		loadSign()
	}
	$(".radio_com").attr("disabled", false);
	initContentState();
	removeDivEvent()
}
var imgHtml = "";
var IframeUtils = {
	loadContentFlag: false,
	loadContent: false,
	loadPageFlag: false,
	loadCap4Css: function (A) {
		if (document.getElementById("__templateIframe").contentWindow.transmissionStyleList != null) {
			var B = document.getElementById("__templateIframe").contentWindow.transmissionStyleList();
			if (AssertUtils.isNotNull(B) && AssertUtils.isArray(B)) {
				$(B).each(function (C, D) {
					loadCssFile(D, "cap4Print")
				})
			}
		}
		__cap4CenterAlign(A);
		setTimeout(function () {
			loadIframeContentByUrl("cap4Print")
		}, 1000)
	},
	loadCap4Content: function () {
		if (IframeUtils.loadPageFlag) {
			var A = document.getElementById("__templateIframe");
			if (imgHtml != "") {
				$("#context").css("textAlign", "center");
				$("#__templateIframe").css("textAlign", "center");
				$(document.getElementById("__templateIframeBody")).html(imgHtml);
				progress1.close()
			} else {
				setTimeout(function () {
					IframeUtils.loadCap4Content()
				}, 500)
			}
		}
	},
	getCap4Body: function () {},
	getIframeBody: function (A) {
		var B = getQueryString("from");
		if (B === "formPrint") {
			$("body").css("overflow", "auto");
			return void(0)
		}
		if (IframeUtils.loadPageFlag) {
			loadIframeContentByUrl("cap3Print");
			if (!IframeUtils.loadContent) {
				setTimeout(function () {
					IframeUtils.getIframeBody(A)
				}, 500)
			}
		} else {
			setTimeout(function () {
				IframeUtils.getIframeBody(A)
			}, 500)
		}
	},
	execIframeFun: function (iframeId, iframeFun, backFun, params) {
		var iframe = document.getElementById(iframeId);
		var execFun = eval("iframe.contentWindow." + iframeFun);
		if (backFun != null) {
			backFun(execFun(params))
		} else {
			execFun(params)
		}
	}
};
function getPrintParams() {
	var A = getParentWindow();
	return A.printObj
}
function printMain(F) {
	var E = getParentWindow();
	var H = E.plist;
	var C = document.getElementById("context");
	creatIframeDataHtml(H, C);
	checkCount(F, H);
	disabledLink();
	if (C.className == "content set_ul_ls") {
		var G = $("#context>div>ul>li.comment_li");
		for (var B = 0, A = G.length; B < A; B++) {
			G[B].style.listStyle = "none"
		}
		var D = $("#context div[class=content]>ul>li");
		for (var B = 0, A = D.length; B < A; B++) {
			D[B].style.listStyle = "none"
		}
	}
}
var pageUrl = "";
function initContentState(A) {
	$("#__templateIframeBody").find("input[type='radio']").each(function () {
		$(this).attr("disabled", true)
	});
	$("#__templateIframeBody").find("input[type='checkbox']").each(function () {
		$(this).attr("disabled", true)
	})
}
function creatIframeDataHtml(H, A) {
	var B = H.size();
	var G = new StringBuffer();
	G.append("");
	var E = false;
	var D = null;
	for (var F = 0; F < B; F++) {
		var L = H.get(F);
		if (F == 2) {
			var K = document.getElementById("dataNameBox2");
			if (K.checked) {
				if ($("#__templateIframeBody").get(0) != null && $("#__templateIframeBody").html().length > 0) {
					var J = $("#__templateIframeBody").css("display");
					if (J === "none") {
						E = true
					}
					$("#__templateIframeBody").show();
					D = $("#__templateIframeBody").get(0);
					G.append('<div id="__templateIframeBodyTemp"  style="display: none"></div>');
					continue
				} else {
					if ($("#__templateIframeBody").get(0) == null) {
						G.append('<div id="__templateIframeBody" style="padding-bottom: 5px;"></div><iframe src="' + L.dataHtml + '" style="zoom:1;visibility: hidden;" onload="IframeUtils.loadPageFlag=true;initBodyHeight(this);" width="0" height="0" id="__templateIframe"  frameborder="0" scrolling="no" ></iframe>');
						continue
					}
				}
			} else {
				if ($("#__templateIframeBody").get(0) != null) {
					$("#__templateIframeBody").hide();
					D = $("#__templateIframeBody").get(0);
					G.append('<div id="__templateIframeBodyTemp" style="display: none"></div>');
					continue
				}
			}
		}
		if (L.dataName != null && L.dataName != "") {
			var K = document.getElementById("dataNameBox" + F);
			if (K.checked) {
				if (typeof(L.dataHtml) === "undefined" || typeof(L.dataHtml) === undefined) {
					G.append("<p></p>")
				} else {
					if (SeeUtils.isIE11 && F == 0) {
						try {
							L.dataHtml = L.dataHtml.replace("margin", "padding")
						} catch (I) {}
					}
					G.append("<p>" + L.dataHtml + "</p>")
				}
			} else {
				var C = document.getElementById("printall");
				C.checked = false
			}
		}
	}
	$(A).empty();
	$(A).html(G.toString());
	if (D != null) {
		$("#__templateIframeBodyTemp").before($(D))
	}
	if (E) {
		$("#__templateIframeBody").show()
	}
	$(":checkbox", $("div[id^='formmain_']")).removeProp("disabled").removeAttr("name").removeAttr("id").attr("onclick", "return false;").unbind("click").bind("click", function () {
		return false
	})
};
var plist = null;
var styleData = null;
var printDefaultSelect = null;
var notPrintDefaultSelect = null;
var otherPrarams = null;
var contentType = null;
var viewState = null;
var moduleId = null;
var isFormPrintFlag = false;
var printObj = null;
function printList(A, B, C) {
	if (!A) {
		return
	}
	plist = A;
	styleData = B;
	if (arguments[8] != null) {
		printObj = arguments[8]
	}
	if (arguments[2] != null) {
		printDefaultSelect = arguments[2]
	} else {
		printDefaultSelect = null
	}
	if (arguments[3] != null) {
		notPrintDefaultSelect = arguments[3]
	} else {
		notPrintDefaultSelect = null
	}
	if (arguments[4] != null) {
		contentType = arguments[4]
	} else {
		contentType = null
	}
	if (arguments[5] != null) {
		viewState = arguments[5]
	} else {
		viewState = null
	}
	if (arguments[6] != null) {
		otherPrarams = arguments[6]
	} else {
		otherPrarams = null
	}
	if (arguments[7] != null && arguments[7] != "undefined&isPrint=true") {
		printFormButton("true", A, arguments[7]);
		return
	}
	if (typeof C != "undefined" && C == "true") {
		printButton("true")
	} else {
		printButton("false")
	}
}
function printFormButton(D, C, B) {
	if (C.instance[2]["dataContent"] != null && (C.instance[2]["dataContent"] + "").indexOf("c2printcontent") != -1) {
		C.instance[2]["dataHtml"] = C.instance[2]["dataContent"];
		printButton("true")
	} else {
		var A = _ctxPath + "/common/print/printForm.jsp?isEdge=" + D + "&jsessionid=" + _sessionid;
		if ((B + "").indexOf("cap4") > 0) {
			A = _ctxPath + "/common/print/captPrintForm.jsp?from=formPrint&isEdge=" + D + "&jsessionid=" + _sessionid
		}
		if (contentType) {
			A += "&contentType=" + contentType
		}
		if (viewState) {
			A += "&viewState=" + viewState
		}
		window.open(A)
	}
}
function printButton(B) {
	var A = _ctxPath + "/common/print/print.jsp?isEdge=" + B + "&jsessionid=" + _sessionid;
	if (contentType) {
		A += "&contentType=" + contentType
	}
	if (viewState) {
		A += "&viewState=" + viewState
	}
	window.open(A)
}
function printListLodop(G, A, H, F, D, E, C, B) {
	if (!G) {
		return
	}
	plist = G;
	styleData = A;
	if (H != null) {
		printDefaultSelect = H
	} else {
		printDefaultSelect = null
	}
	if (F != null) {
		notPrintDefaultSelect = F
	} else {
		notPrintDefaultSelect = null
	}
	if (D != null) {
		contentType = D
	} else {
		contentType = null
	}
	if (E != null) {
		viewState = E
	} else {
		viewState = null
	}
	if (C != null) {
		otherPrarams = C
	} else {
		otherPrarams = null
	}
	if (B != null) {
		moduleId = B
	} else {
		moduleId = null
	}
	printButtonLodop()
}
function printButtonLodop() {
	var A = _ctxPath + "/common/print/lodopprint.jsp?jsessionid=" + _sessionid;
	if (contentType) {
		A += "&contentType=" + contentType
	}
	if (viewState) {
		A += "&viewState=" + viewState
	}
	if (moduleId) {
		A += "&moduleId=" + moduleId
	}
	window.open(A)
}
function getParentWindow(A) {
	A = A || window;
	if (A.dialogArguments) {
		return A.dialogArguments
	} else {
		return A.opener || A
	}
}
function printLoad() {
	var E = getParentWindow();
	var B = document.getElementById("context");
	var H = E.plist;
	var C = H.size();
	for (var F = 0; F < C; F++) {
		var K = H.get(F);
		if (typeof(K.dataHtml) === "undefined" || typeof(K.dataHtml) === undefined) {
			B.innerHTML += "<p></p>"
		} else {
			B.innerHTML += "<p>" + K.dataHtml + "</p>"
		}
	}
	var D = E.styleData;
	setStyle(D);
	var G = document.getElementById("checkOption");
	var A = E.plist;
	var J = H.size();
	var I = 0;
	for (var F = 0; F < J; F++) {
		var K = A.get(F);
		if (K.dataName != null && K.dataName != "") {
			G.innerHTML += "<div for='dataNameBox" + F + "' class='margin_r_10 hand left'><input class='radio_com' type=checkbox checked name='dataNameBoxes' id=dataNameBox" + F + " onclick='printMain(this)'><font style='font-size:12px' color='black'>" + K.dataName + "</font></label>&nbsp;&nbsp;";
			I++
		}
	}
	if (I > 0) {
		G.innerHTML += "<font style='font-size:12px' color='black'><div for='printall' class='margin_r_10 hand left'><input class='radio_com' type=checkbox id ='printall' checked name=cboxs onclick=printAll(this)>" + $.i18n("print.printall.label.js") + "</div></font>"
	}
	if (E.notPrintDefaultSelect != null) {
		for (var F = 0; F < E.notPrintDefaultSelect.length; F++) {
			if (document.getElementById("dataNameBox" + E.notPrintDefaultSelect[F]) != null) {
				document.getElementById("dataNameBox" + E.notPrintDefaultSelect[F]).checked = false
			}
		}
	}
	document.close();
	var B = document.getElementById("context");
	creatDataHtml(H, B);
	disabledLink()
}
function printMain(F) {
	var E = getParentWindow();
	var H = E.plist;
	var C = document.getElementById("context");
	creatDataHtml(H, C);
	checkCount(F, H);
	disabledLink();
	initBodyHeight();
	loadSign();
	if (C.className == "content set_ul_ls") {
		var G = $("#context>div>ul>li.comment_li");
		for (var B = 0, A = G.length; B < A; B++) {
			G[B].style.listStyle = "none"
		}
		var D = $("#context div[class=content]>ul>li");
		for (var B = 0, A = D.length; B < A; B++) {
			D[B].style.listStyle = "none"
		}
	}
}
function cleanSpecial(E) {
	var A = E.indexOf("<DIV>");
	if (A == -1) {
		return E
	}
	var C = E.substr(0, A - 1);
	var D = E.substr(A);
	var B = D.indexOf("</DIV>");
	var F = D.substr(B + 6);
	return cleanSpecial(C + F)
}
function creatDataHtml(G, A) {
	var B = G.size();
	var E = new StringBuffer();
	E.append("");
	for (var D = 0; D < B; D++) {
		var J = G.get(D);
		if (J.dataName != null && J.dataName != "") {
			var I = document.getElementById("dataNameBox" + D);
			if (I.checked) {
				if (typeof(J.dataHtml) === "undefined" || typeof(J.dataHtml) === undefined) {
					E.append("<p></p>")
				} else {
					if (SeeUtils.isIE11 && D == 0) {
						try {
							J.dataHtml = J.dataHtml.replace("margin", "padding")
						} catch (H) {}
					}
					E.append("<p>" + J.dataHtml + "</p>")
				}
			} else {
				var C = document.getElementById("printall");
				C.checked = false
			}
		}
		if (J.dataName == "") {
			if (typeof(J.dataHtml) === "undefined" || typeof(J.dataHtml) === undefined) {
				E.append("<p></p>")
			} else {
				E.append("<p>" + J.dataHtml + "</p>")
			}
		}
	}
	var F = E.toString();
	$(A).html(E.toString());
	if (contentType == 20 || (contentType == 10 && $("div[id^='formmain_']", $(A)).length > 0)) {
		replaceFormCompField();
		initFormContent(true)
	} else {
		if (contentType == 10 && F.indexOf("formmain_") != -1) {
			initFormContent(true, true)
		}
	}
	$(":checkbox", $("div[id^='formmain_']")).removeProp("disabled").removeAttr("name").removeAttr("id").attr("onclick", "return false;").unbind("click").bind("click", function () {
		return false
	})
}
function replaceFormCompField() {
	var G = null;
	var A = $("span[id$='_span']", $("#context"));
	var B = getParentWindow().otherPrarams;
	if (B) {
		if (B.formObj) {
			G = B.formObj
		}
	}
	for (var C = 0; C < A.length; C++) {
		var E = $(A[C]);
		var F = E.attr("fieldVal");
		if (F == undefined) {
			continue
		} else {
			F = $.parseJSON(F)
		}
		var D = E.attr("id").split("_")[0];
		if (F.inputType == "attachment" || F.inputType == "document" || F.inputType == "image") {
			if (20 == contentType && G != null) {
				E.html(B[getRecordIdByJqueryField(E) + "_" + D]);
				E.find("div[id^=attachment2Area]").css("background-color", "white");
				E.find("div[id^=attachmentArea]").css("background-color", "white")
			}
			E.find(".ico16").each(function () {
				if ($(this).hasClass("affix_del_16") || $(this).hasClass("affix_16") || $(this).hasClass("associated_document_16") || $(this).hasClass("insert_pic_16") || $(this).hasClass("editor_16")) {
					$(this).hide()
				}
				if ($(this).hasClass("collection_16")) {
					$(this).attr("title", "")
				}
			});
			E.find(".attachment_operate").remove();
			E.find("a").each(function () {
				$(this).attr("title", "")
			})
		} else {
			if (F.inputType == "barcode") {
				if (20 == contentType && G != null) {
					E.html(B[getRecordIdByJqueryField(E) + "_" + D])
				}
			}
		}
	}
}
function checkCount(F, D) {
	var A = D.size();
	var H = 0;
	for (var C = 0; C < A; C++) {
		var I = D.get(C);
		if (I.dataName == undefined) {
			H = H + 1
		}
	}
	H = A - H;
	if (F.checked == false) {
		var E = 0;
		for (var C = 0; C < A; C++) {
			var I = D.get(C);
			if (I.dataName != null && I.dataName != "") {
				var G = document.getElementById("dataNameBox" + C);
				if (G.checked == false) {
					E++
				}
			}
		}
		if (E == H) {
			alert("\u6253\u5370\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a");
			if (F.id == "printall") {
				var B = parent.getParentWindow();
				if (B.printDefaultSelect != null) {
					if (document.getElementById("dataNameBox" + B.printDefaultSelect[0]) != null) {
						document.getElementById("dataNameBox" + B.printDefaultSelect[0]).checked = true
					} else {
						document.getElementById("dataNameBox0").checked = true
					}
				} else {
					document.getElementById("dataNameBox0").checked = true
				}
			} else {
				F.checked = true
			}
			printMain(F);
			return false
		}
	}
}
function PrintFragment(A, B) {
	this.dataName = A;
	this.dataHtml = B
}
function disabledLink() {
	var K = document.body.getElementsByTagName("a");
	var U = document.body.getElementsByTagName("span");
	var B = document.body.getElementsByTagName("u");
	var G = document.body.getElementsByTagName("table");
	var C = document.body.getElementsByTagName("INPUT");
	var J = document.body.getElementsByTagName("img");
	var Y = document.body.getElementsByTagName("select");
	var H = document.body.getElementsByTagName("TEXTAREA");
	var O = document.body.getElementsByTagName("td");
	var I = document.body.getElementsByTagName("tr");
	var A = document.body.getElementsByTagName("OBJECT");
	var L = $(".xdRepeatingSection");
	var T = "border-left:0px;border-top:0px;border-right:0px;border-bottom:0px solid #ff0000";
	for (var P = 0; P < K.length; P++) {
		K[P].target = "_self";
		K[P].style.color = "#000000";
		K[P].onclick = "";
		K[P].href = "###";
		K[P].style.textDecoration = "none";
		K[P].style.cursor = "default"
	}
	for (var P = 0; P < U.length; P++) {
		U[P].onmouseout = "";
		U[P].onmouseover = "";
		U[P].onclick = "";
		U[P].style.cursor = "default"
	}
	for (var P = 0; P < B.length; P++) {
		B[P].onclick = function () {}
	}
	for (var P = 0; P < G.length; P++) {
		G[P].onclick = ""
	}
	for (var P = C.length - 1; P >= 0; P--) {
		if (C[P].type == "checkbox") {
			if (C[P].parentNode.parentNode.id == "checkOption" || C[P].id == "printall") {
				continue
			}
		} else {
			if (C[P].type == "text") {
				if (C[P].id != "print8") {
					var Q = C[P].style.cssText;
					var E = "WORD-WRAP: break-word;TABLE-LAYOUT: fixed;word-break:break-all;";
					if (Q == "") {
						Q = E + "display:inline-block"
					} else {
						if (Q.toLowerCase().indexOf("display") == -1) {
							E = E + "display:inline-block"
						}
						Q = Q + ";" + E
					}
					if (Q && Q.indexOf('"') != -1) {
						Q = Q.replace(/"/g, "&quot;")
					}
					var R = C[P].value.escapeSameWidthSpace() ? C[P].value.escapeSameWidthSpace() : C[P].title.escapeSameWidthSpace();
					C[P].outerHTML = '<span type="text" id="' + C[P].id + '" class="' + C[P].className + '" style="' + Q + '">' + R + "</span>";
					continue
				}
			}
		}
		var W = "print1 print2 print3 print4 print5 print6 print7 print8 dataNameBox0 dataNameBox1 dataNameBox2 dataNameBox3 dataNameBox4 dataNameBox5 printall";
		if (W.indexOf(C[P].id) == -1) {
			C[P].disabled = "disabled";
			C[P].onkeypress = "";
			C[P].onchange = "";
			C[P].onclick = "";
			C[P].onmouseout = "";
			C[P].onmouseover = "";
			C[P].onfocus = "";
			C[P].onblur = "";
			if (!v3x.isMSIE) {
				C[P].disabled = "disabled"
			}
		}
	}
	for (var P = 0; P < J.length; P++) {
		J[P].onkeypress = "";
		J[P].onchange = "";
		J[P].onclick = "";
		J[P].style.cursor = "default";
		J[P].alt = "";
		J[P].title = "";
		try {
			var N = J[P].src.toString();
			if (N.indexOf("form/image/selecetUser.gif") != -1 || N.indexOf("form/image/date.gif") != -1 || N.indexOf("form/image/add.gif") != -1 || N.indexOf("form/image/addEmpty.gif") != -1 || N.indexOf("form/image/delete.gif") != -1 || N.indexOf("handwrite.gif") != -1 || N.indexOf("seeyon/apps_res/v3xmain/images/message/16/attachment.gif") != -1 || N.indexOf("seeyon/apps_res/form/image/quoteform.gif") != -1) {
				J[P].outerHTML = "&nbsp;&nbsp;&nbsp;";
				P--
			}
			if (N.indexOf("handwrite.gif") != -1) {
				for (var X = 0; X < A.length; X++) {
					if (A[X].innerHTML.indexOf("Enabled") != -1) {
						A[X].Enabled = false
					}
				}
			}
		} catch (S) {}
	}
	for (var M = Y.length - 1; M >= 0; M--) {
		var Q = Y[M].style.cssText;
		try {
			var D = Y[M].parentNode.childNodes;
			for (var V = 0; V < D.length; V++) {
				if (D[V].id == Y[M].id + "_autocomplete") {
					Q = D[V].style.cssText;
					break
				}
			}
		} catch (S) {}
		if (Q && Q.indexOf('"') != -1) {
			Q = Q.replace(/"/g, "&quot;")
		}
		$(Y[M].parentNode).replaceWith('<span class="' + Y[M].className + '" style="' + Q + '">' + Y[M].options[Y[M].selectedIndex].text + "</span>")
	}
	for (var P = 0; P < H.length; P++) {
		try {
			var F = "overflow-y:visible;overflow-x:visible;";
			var Q = H[P].style.cssText;
			if (Q == "") {
				Q = F
			} else {
				Q = Q + ";" + F
			}
			H[P].style.cssText = Q;
			H[P].onclick = "";
			H[P].onkeypress = "";
			H[P].onchange = "";
			H[P].onmouseout = "";
			H[P].onmouseover = "";
			H[P].onfocus = "";
			H[P].onblur = ""
		} catch (S) {}
		H[P].readOnly = "readOnly"
	}
	for (var P = 0; P < O.length; P++) {
		O[P].onclick = ""
	}
	for (var P = 0; P < I.length; P++) {
		I[P].onclick = "";
		$(I[P]).unbind("click").attr("onclick", "")
	}
	L.each(function () {
		this.onclick = "";
		$(this).unbind("click").attr("onclick", "")
	})
}
function printInnerLoad() {
	var D = document.getElementById("context");
	var F = parent.getParentWindow();
	var G = F.plist;
	var C = G.size();
	for (var B = 0; B < C; B++) {
		var E = G.get(B);
		if (typeof(E.dataHtml) === "undefined" || typeof(E.dataHtml) === undefined) {
			D.innerHTML += "<p></p>"
		} else {
			D.innerHTML += "<p>" + E.dataHtml + "</p>"
		}
	}
	var A = F.styleData;
	if (!A) {
		setStyle(A)
	}
}
function setStyle(A) {
	if (A.size() > 0) {
		var B = document.getElementById("linkList");
		if (B == null) {
			return
		}
		for (var C = 0; C < A.size(); C++) {
			var D = document.createElement("link");
			D.setAttribute("rel", "stylesheet");
			D.setAttribute("href", A.get(C));
			D.setAttribute("type", "text/css");
			B.appendChild(D)
		}
	}
}
function printAll(C) {
	var A = document.getElementsByName("dataNameBoxes");
	if (C.checked) {
		for (var B = 0; B < A.length; B++) {
			A[B].checked = true
		}
		printMain(C)
	} else {
		for (var B = 0; B < A.length; B++) {
			A[B].checked = false
		}
		printMain(C)
	}
	loadSign()
}
function onbeforeprint() {
	document.getElementById("checkOption").style.display = "none"
}
function onafterprint() {
	document.getElementById("checkOption").style.display = ""
};
function MxtProgressBar(A) {
	if (A == undefined) {
		A = {}
	}
	this.id = A.id ? A.id : "MxtProgressBar" + Math.floor(Math.random() * 100000000);
	this.text = A.text ? A.text : "";
	this.progress = A.progress ? A.progress : "";
	this.width = A.width ? A.width : 600;
	this.height = A.height ? A.height : 70;
	this.isMode = A.isMode == undefined ? true : A.isMode;
	this.buttons = A.buttons;
	if (this.buttons != null) {
		this.height += 30
	}
	this.borderSize = 1;
	this.init();
	MxtProgressBar.current = this
}
MxtProgressBar.current = null;
MxtProgressBar.createCtpTopBar = function (A) {
	var C = null;
	try {
		C = getCtpTop()
	} catch (B) {
		return null
	}
	if (C != null) {
		C.MxtProgressBar.current = new C.MxtProgressBar(A);
		return C.MxtProgressBar.current
	} else {
		return null
	}
};
MxtProgressBar.getCtpTopBar = function () {
	var B = null;
	try {
		B = getCtpTop()
	} catch (A) {
		return null
	}
	if (B != null) {
		return B.MxtProgressBar.current
	} else {
		return null
	}
};
MxtProgressBar.prototype.init = function () {
	var G = this.id + "_mask";
	var K = document.body.clientWidth;
	var B = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
	var D = getMaxZindex(2);
	if (document.getElementById(G) == null && this.isMode == true) {
		var L = document.createElement("div");
		L.style.height = B + "px";
		L.style.width = K + "px";
		L.style.zIndex = D;
		L.id = G;
		L.className = "mask";
		L.innerHTML = "&nbsp;";
		SeeUtils.prependToBody(L)
	}
	var E = document.getElementById(this.id);
	if (E != null) {
		E.remove()
	}
	var A = "";
	if (this.progress == "") {
		var N = (K - 66) / 2;
		var M = (document.documentElement.clientHeight - 66) / 2;
		A += "<div id='" + this.id + "' class='common_loading_progress_box absolute clearfix' style='left:" + (N + document.documentElement.scrollLeft) + "px;top:" + (M + document.documentElement.scrollTop) + "px;z-index:" + (D + 1) + "'></div>";
		if (this.text != "" && this.text != undefined) {
			A += "<div id='" + this.id + "_text' class='absolute clearfix' style='width:auto;overflow:hidden;border:0px #286fbf solid;background:#f8f8f8;font-size:12px;padding:5px;left:" + (N + document.documentElement.scrollLeft - 76) + "px;top:" + (M + document.documentElement.scrollTop + 66) + "px;z-index:" + (D + 1) + "'>" + this.text + "</div>"
		}
	} else {
		var N = (K - (this.width + 5)) / 2;
		var M = (document.documentElement.clientHeight - (this.height + 5)) / 2;
		A += "<div id='" + this.id + "' class='common_progress_box absolute clearfix' style='left:" + ((N < 0 ? 0 : N) + document.documentElement.scrollLeft) + "px;top:" + ((M < 0 ? 0 : M) + document.documentElement.scrollTop) + "px;z-index:" + (D + 1) + "'>";
		A += "<div id='" + this.id + "_shadow' class='common_progress_shadow absolute' style='width:" + (this.width + this.borderSize * 2) + "px;height:" + (this.height + this.borderSize * 2) + "px;'>&nbsp;</div>";
		A += "<div class='common_progress_strip absolute padding_5' style='width:" + (this.width - 10) + "px;height:" + (this.height - 10) + "px;'>";
		if (this.text != "") {
			A += "<dl id='" + this.id + "_title' class='common_progress_strip_title margin_b_5 margin_t_5 '>" + this.text + "</dl>"
		}
		A += "<dl id='" + this.id + "_text' class='common_progress_strip_per margin_l_10 right margin_r_5'>" + this.progress + "%</dl>";
		A += "<dl class='common_progress_strip_content'>";
		A += "<dt id='" + this.id + "_progress' class='common_progress_strip_bg' style='width:" + this.progress + "%'></dt>";
		A += "</dl>";
		A += "<div class='padding_10'><table class='common_right'><tr><td class='clearfix' id='" + this.id + "_buttons'>";
		A += "</td></tr></table></div>";
		A += "</div>";
		A += "</div>"
	}
	var J = document.createElement("div");
	J.id = this.id + "_box";
	J.innerHTML = A;
	SeeUtils.prependToBody(J);
	if (this.buttons != null) {
		for (var F = 0; F < this.buttons.length; F++) {
			var H = this.buttons[F];
			var C = document.createElement("a");
			C.id = H.id;
			C.className = "common_button common_button_gray margin_r_10";
			C.setAttribute("href", "javascript:void(0)");
			C.innerHTML = H.text;
			SeeUtils.addEvent(C, "click", H.handler);
			SeeUtils.appendTo(C, this.id + "_buttons")
		}
	}
	var I = SeeUtils.getElWidth(this.id + "_text");
	if (AssertUtils.isNumber(I)) {
		SeeUtils.css(this.id + "_text", "left", N + document.documentElement.scrollLeft - ((parseFloat(I) - 56) / 2) + "px")
	}
};
MxtProgressBar.prototype.setText = function (B) {
	var A = document.getElementById(this.id + "_text");
	SeeUtils.css(A, "width", "100%");
	SeeUtils.css(A, "textAlign", "center");
	SeeUtils.css(A, "left", "0");
	SeeUtils.css(A, "background", "none");
	SeeUtils.html(A, "<span style='text-align: center;background-color: #f8f8f8;padding: 3px 5px'>" + B + "</span>")
};
MxtProgressBar.prototype.setProgress = function (A) {
	SeeUtils.css(this.id + "_text", "width", A + "%");
	SeeUtils.html(this.id + "_text", A + "%")
};
MxtProgressBar.prototype.setTitle = function (A) {
	SeeUtils.html(this.id + "_title", A)
};
MxtProgressBar.prototype.close = function () {
	if (SeeUtils != null) {
		SeeUtils.removeEl(this.id + "_mask");
		SeeUtils.removeEl(this.id + "_box");
		SeeUtils.removeEl(this.id);
		if (this.text != "" && this.text != undefined) {
			SeeUtils.removeEl(this.id + "_text")
		}
		MxtProgressBar.current = null
	}
};
MxtProgressBar.prototype.start = function () {
	SeeUtils.showEl(this.id + "_mask");
	SeeUtils.showEl(this.id);
	if (this.text != "" && this.text != undefined) {
		SeeUtils.showEl(this.id + "_text")
	}
};
var Bord = ({
	base: function (B) {
		var A = B.find("option:selected");
		if (A.length == 0) {
			$.alert($.i18n("assistantSetup.select.label"));
			return false
		}
		return A
	},
	add: function () {
		with (this) {
			var addList = base(addObj);
			if (addList == false) {
				return false
			}
			for (var i = 0; i < addList.length; i++) {
				if (maxLength != false && (i > maxLength - 1 || removeObj.find("option").length >= maxLength)) {
					$.alert($.i18n("portal.select.max.label", maxLength));
					return
				}
				if (isKeep == true) {
					if (!addObj.find($(addList[i])).hasClass("color_gray")) {
						removeObj.append($(addList[i]).clone(true))
					} else {
						$.alert($.i18n("portal.select.repeat.label"));
						return false
					}
					addObj.find($(addList[i])).addClass("color_gray")
				} else {
					addObj.find($(addList[i])).remove();
					removeObj.append($(addList[i]).clone(true))
				}
			}
		}
		return true
	},
	remove: function () {
		with (this) {
			var removeList = base(removeObj);
			if (removeList == false) {
				return false
			}
			for (var i = 0; i < removeList.length; i++) {
				removeObj.find($(removeList[i])).remove();
				var selectId = $(removeList[i]).attr("type");
				if (isKeep == true) {
					var val = $(removeList[i]).val();
					$("#" + selectId).find("option[value='" + val + "']").removeClass("color_gray")
				} else {
					$("#" + selectId).append(removeList[i])
				}
			}
		}
		return true
	},
	moveT: function (F) {
		var E = this.base(F);
		for (var B = 0; B < E.length; B++) {
			var C = $(E[B]);
			var D = F.find("option").eq(B);
			var A = C.prev("option");
			C.after(A)
		}
	},
	moveB: function (H) {
		var G = this.base(H);
		var E = G.length;
		var B = H.find("option").length;
		for (var C = 0; C < G.length; C++) {
			var D = $(G[E - C - 1]);
			var F = H.find("option").eq(B - C - 1);
			var A = D.next("option");
			if (D.attr("value") != F.attr("value")) {
				D.before(A)
			}
		}
	},
	refreash: function () {
		with (this) {
			var options = removeObj.find("option");
			$.each(options, function (i, n) {
				var selectId = $(n).attr("type");
				var val = $(n).val();
				if (isKeep == true) {
					$("#" + selectId).find("option[value='" + val + "']").addClass("color_gray")
				} else {
					$("#" + selectId).find("option[value='" + val + "']").remove()
				}
			})
		}
	}
});
function setBord(A) {
	this.maxLength = A.maxLength;
	this.isKeep = A.isKeep;
	this.addObj = A.addObj;
	this.removeObj = A.removeObj;
	if (A.dbbinds) {
		$.each(A.dbbinds, function (B, C) {
			$(B).bind("dblclick", C)
		})
	}
}
setBord.prototype = Bord;
function MxtTab(A) {
	this.id = A.id;
	this.width = A.width ? A.width : null;
	this.height = A.height ? A.height : null;
	this.auoHeight = A.height ? false : true;
	this.parentId = A.parentId ? A.parentId : null;
	this.showTabIndex = A.showTabIndex ? A.showTabIndex : 0;
	this.refreashTab = A.refreashTab ? A.refreashTab : false;
	this.hideTabHeight = A.hideTabHeight ? A.hideTabHeight : false;
	this.tabsEquallyWidth = A.tabsEquallyWidth ? A.tabsEquallyWidth : false;
	this.needPage = A.needPage == null ? false : A.needPage;
	this._headHeight = SeeUtils.getElHeight(this.id + "_head") + 1;
	if (A.triggerCurrent != null) {
		this.triggerCurrent = A.triggerCurrent == false ? false : true
	} else {
		this.triggerCurrent = true
	}
	this.init()
}
MxtTab.prototype.init = function () {
	this.tabs_head_obj = SeeUtils.getElObj(this.id + "_head");
	this.tabs_head_ul_obj = SeeUtils.getElByTagAndIndex(this.tabs_head_obj, "ul", 0);
	this.tabs_body_obj = SeeUtils.getElObj(this.id + "_body");
	var B = document.body.clientWidth;
	var E = document.documentElement.clientHeight;
	if (this.width == null) {
		this.width = B
	}
	if (this.height == null) {
		this.height = E - this._headHeight
	}
	if (this.parentId != null) {
		this.width = SeeUtils.getElWidth(this.parentId);
		this.height = SeeUtils.getElHeight(this.parentId) - this._headHeight
	}
	if (this.hideTabHeight) {
		this.height = this.height - this._headHeight
	}
	if (this.tabs_head_obj != null) {
		SeeUtils.setElWidth(this.tabs_head_obj, this.width)
	}
	if (this.tabs_body_obj != null) {
		SeeUtils.setElWidth(this.tabs_body_obj, this.width);
		SeeUtils.setElHeight(this.tabs_body_obj, this.height)
	}
	this.tabObjs = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	if (this.tabsEquallyWidth == true) {
		var C = this.width / this.tabObjs.length - 16;
		for (var A = 0; A < this.tabObjs.length; A++) {
			var F = this.tabObjs[A];
			SeeUtils.setElWidth(F, C);
			SeeUtils.css(F, "maxWidth", C)
		}
	}
	if (this.needPage) {
		this.reCalcSize()
	}
	this.setClick();
	if (this.triggerCurrent) {
		var D = SeeUtils.getElByTagAndIndex(this.tabs_head_ul_obj, "a", this.showTabIndex);
		if (D != null) {
			D.click()
		}
	}
	var G = this;
	$(window).resize(function () {
		G.reSetHeight()
	})
};
MxtTab.prototype.reSetHeight = function () {
	if (this.auoHeight) {
		this.height = null
	}
	var B = document.documentElement.clientHeight;
	if (this.height == null) {
		this.height = B - this._headHeight - 2
	}
	if (this.parentId != null) {
		this.height = SeeUtils.getElHeight(this.parentId) - this._headHeight - 2
	}
	if (this.hideTabHeight) {
		this.height = this.height - this._headHeight
	}
	this.height = this.height - 6;
	if (this.tabs_body_obj != null) {
		SeeUtils.setElHeight(this.tabs_body_obj, this.height)
	}
	this.setBodyChildrenHeight();
	try {}
	catch (A) {}
};
MxtTab.prototype.setBodyChildrenHeightAndWidth = function () {
	if (this.tabs_body_obj != null) {
		var B = this.tabs_body_obj.children;
		for (var C = 0, A = B.length; C < A; C++) {
			SeeUtils.setElHeight(B[C], this.height);
			SeeUtils.setElWidth(B[C], this.width)
		}
	}
};
MxtTab.prototype.setBodyChildrenHeight = function () {
	if (this.tabs_body_obj != null) {
		var B = this.tabs_body_obj.children;
		for (var C = 0, A = B.length; C < A; C++) {
			SeeUtils.setElHeight(B[C], this.height)
		}
	}
};
MxtTab.prototype.disabled = function (E) {
	var A = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	for (var B = 0; B < A.length; B++) {
		var D = A[B];
		var C = SeeUtils.getAttrEl(D, "tgt");
		if (C == E) {
			SeeUtils.addClass(D, "disable");
			SeeUtils.removeEvent(D, "click", tabClick)
		}
	}
};
MxtTab.prototype.enable = function (E) {
	var A = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	for (var B = 0; B < A.length; B++) {
		var D = A[B];
		var C = SeeUtils.getAttrEl(D, "tgt");
		if (C == E) {
			C = SeeUtils.getElObj(C);
			SeeUtils.removeClass(D, "disable");
			SeeUtils.addEvent(A[B], "click", tabClick)
		}
	}
};
function _setTabLiCurrent(A) {
	SeeUtils.addClass(A.parentNode, "current");
	SeeUtils.eachBySiblings(A.parentNode, function (B) {
		SeeUtils.removeClass(B, "current")
	})
}
function _setTabBodeyCurrent(A) {
	SeeUtils.removeClass(A, "hidden");
	SeeUtils.addClass(A, "show");
	SeeUtils.eachBySiblings(A, function (B) {
		SeeUtils.removeClass(B, "show");
		SeeUtils.addClass(B, "hidden")
	})
}
MxtTab.prototype.getIframeSize = function () {
	if (this.tabs_body_obj != null) {
		var A = SeeUtils.getElByTag(this.tabs_body_obj, "iframe");
		return A.length
	}
	return 0
};
MxtTab.prototype.setCurrent = function (G) {
	var B = this;
	var A = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	for (var C = 0; C < A.length; C++) {
		var E = A[C];
		var D = SeeUtils.getAttrEl(E, "tgt");
		if (D == G) {
			_setTabLiCurrent(E);
			D = SeeUtils.getElObj(D);
			if (D != null) {
				_setTabBodeyCurrent(D);
				if (D.tagName.toLowerCase() == "iframe" && B.getIframeSize() != 1) {
					if (!SeeUtils.getAttrEl(D, "hSrc")) {
						SeeUtils.attrEl(D, "hSrc", SeeUtils.getAttrEl(D, "src"))
					}
					var F = SeeUtils.getAttrEl(D, "src");
					SeeUtils.attrEl(D, "src", "");
					SeeUtils.attrEl(D, "src", F)
				}
			}
		}
	}
};
MxtTab.prototype.setMouseOver = function () {
	var B = this;
	var A = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	for (var C = 0; C < A.length; C++) {
		var E = A[C];
		var D = SeeUtils.getAttrEl(E, "tgt");
		D = SeeUtils.getElObj(D);
		if (D != null) {
			if (C != 0 && D.tagName.toLowerCase() == "iframe" && B.getIframeSize() != 1) {
				SeeUtils.attrEl(D, "hSrc", SeeUtils.getAttrEl(D, "src"));
				SeeUtils.attrEl(D, "src", "")
			}
		}
		SeeUtils.removeEvent(E, "click", tabClick);
		$(E).mouseover(function () {
			if (D != null) {
				_setTabLiCurrent(E);
				_setTabBodeyCurrent(D);
				if (SeeUtils.getAttrEl(D, "src") == "" && D.tagName.toLowerCase() == "iframe" && B.getIframeSize() != 1) {
					SeeUtils.attrEl(D, "src", SeeUtils.getAttrEl(D, "hSrc"))
				}
			}
		})
	}
};
var _getTarget = function (B) {
	var A = B || window.event;
	if (typeof A.target !== "undefined") {
		return A.target
	} else {
		return A.srcElement
	}
};
function _getIframeSize(B) {
	var A = SeeUtils.getElByTag(B + "_body", "iframe");
	return A.length
}
function tabClick(D) {
	var D = D || window.event;
	var E = SeeUtils.closestByTagName(_getTarget(D), "a");
	var C = SeeUtils.getAttrEl(E, "tgt");
	var A = SeeUtils.getAttrEl(E, "falg");
	var B = SeeUtils.getAttrEl(E, "refreashTab");
	var F = SeeUtils.getAttrEl(E, "tabCtlId");
	C = SeeUtils.getElObj(C);
	if (C != null) {
		_setTabLiCurrent(E);
		if (A) {
			SeeUtils.eachByTag("moreTabsList", "li", function (G) {
				SeeUtils.removeClass(G, "current")
			})
		}
		_setTabBodeyCurrent(C);
		if ((SeeUtils.getAttrEl(C, "src") == "" || B == "true") && C.tagName.toLowerCase() == "iframe" && _getIframeSize(F) != 1) {
			SeeUtils.attrEl(C, "src", SeeUtils.getAttrEl(C, "hSrc"))
		}
	}
}
function _initTabsInfo(C, A, B) {
	for (var D = 0; D < C.length; D++) {
		var F = C[D];
		var E = SeeUtils.getAttrEl(F, "tgt");
		E = SeeUtils.getElObj(E);
		if (E != null) {
			SeeUtils.setElHeight(E, B.height);
			if (E.tagName.toLowerCase() == "iframe" && _getIframeSize(B.id) != 1) {
				if (!SeeUtils.getAttrEl(E, "hSrc")) {
					SeeUtils.attrEl(E, "hSrc", SeeUtils.getAttrEl(E, "src"))
				}
				SeeUtils.attrEl(E, "src", "")
			}
		}
		if (A) {
			SeeUtils.attrEl(C[D], "falg", A)
		}
		SeeUtils.attrEl(C[D], "refreashTab", B.refreashTab);
		SeeUtils.attrEl(C[D], "tabCtlId", B.id);
		$(C[D]).click(function (G) {
			tabClick(G)
		})
	}
}
MxtTab.prototype.setClick = function () {
	var A = this;
	this.tabObjs = SeeUtils.getElByTag(this.tabs_head_ul_obj, "a");
	_initTabsInfo(this.tabObjs, true, A);
	_initTabsInfo(SeeUtils.getElByTag("moreTabsList", "a"), false, A)
};
MxtTab.prototype.resetSize = function (A) {
	if (this.width == null) {
		this.width = _client_width - 2
	}
	if (this.height == null) {
		this.height = _client_height - this._headHeight - 2
	}
	if (this.parentId != null) {
		this.width = SeeUtils.getElWidth(this.parentId) - 2;
		this.height = SeeUtils.getElHeight(this.parentId) - this._headHeight - 2
	}
	if (this.hideTabHeight) {
		this.height = this.height - this._headHeight
	}
	var A = A;
	if (A == null) {
		A = []
	}
	if (A.width != null) {
		this.width = A.width
	}
	if (A.height != null) {
		this.height = A.height
	}
	if (this.tabs_head_obj != null) {
		SeeUtils.setElWidth(this.tabs_head_obj, this.width)
	}
	if (this.tabs_body_obj != null) {
		SeeUtils.setElWidth(this.tabs_body_obj, this.width);
		SeeUtils.setElHeight(this.tabs_body_obj, this.height)
	}
	this.setBodyChildrenHeightAndWidth()
};
MxtTab.prototype.reCalcSize = function () {
	var D = SeeUtils.getElWidth(this.id) - 20;
	var A = SeeUtils.getElByTag(this.tabs_head_ul_obj, "li");
	var K = 0;
	var G = 0;
	var J = A.length;
	var C = 0;
	var H = false;
	for (var F = 0; F <= J; F++) {
		SeeUtils.css(A[F], "display", "inline-block");
		G = SeeUtils.getElWidth(A[F]);
		SeeUtils.css(A[F], "display", "inline");
		K += G;
		if (K > D) {
			H = true;
			break
		}
		C = F + 1
	}
	var A = $("#" + this.id).find("ul").find("li");
	this.tabs_head = $("#" + this.id + "_head");
	if (H == true) {
		this.tabs_head.append('<div id="moreTabsArea" class="moreTabsArea left"><div id="moreTabsArror" class="moreTabsArror"><span class="ico16 arrow_2_b"></span></div><div id="moreTabsList" class="moreTabsList"></div></div>');
		$("#moreTabsArror").height(this._headHeight);
		$("#moreTabsArror").find(".ico16").css("top", (this._headHeight - 16) / 2);
		$("#moreTabsList").css("top", this._headHeight);
		var I = "";
		for (var E = C; E <= J; E++) {
			var B = A.eq(E).clone();
			A.eq(E).remove();
			B.css("display", "inline-block");
			$("#moreTabsList").append(B)
		}
	}
};
function MxtTimeLine(A) {
	this.id = A.id != undefined ? A.id : Math.floor(Math.random() * 100000000);
	this.height = A.height == undefined ? 500 : A.height;
	this.render = A.render;
	this.timeStep = A.timeStep == undefined ? ["8:00", "18:00"] : A.timeStep;
	this.date = A.date;
	if (this.date == undefined) {
		var B = new Date();
		this.date[0] = B.getFullYear();
		this.date[1] = B.getMonth() + 1;
		this.date[2] = B.getDate()
	}
	this.autoHeight = 0;
	this.dateHeight = 20;
	this.editHeight = 10;
	this.boxPadding = 10;
	this.isHasMaxEvent = false;
	this.hideFlag = true;
	this.items = A.items;
	this.action = A.action;
	this.searchClick = A.searchClick == undefined ? function () {}
	 : A.searchClick;
	this.editClick = A.editClick == undefined ? function () {}
	 : A.editClick;
	this.maxClick = A.maxClick == undefined ? function () {}
	 : A.maxClick;
	this.MonHead = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	this.scaleArray = new Object();
	this.scaleHourArray = new Object();
	this.initTimeLine();
	this.initType()
}
MxtTimeLine.prototype.initTimeLine = function () {
	this.isHasMax();
	if (this.isHasMaxEvent) {
		this.boxPadding = 25
	}
	this.timeLineHeight = this.height - this.dateHeight - this.editHeight - this.boxPadding - this.autoHeight;
	this.time_line_box = $("<div class='time_line_box' id='" + this.id + "_box' style='padding-bottom:" + this.boxPadding + "px'></div>");
	this.time_line_edit = $("<div class='clearfix'><span id='" + this.id + "_editor' class='ico16 editor_16 left'></span><span id='" + this.id + "_maximize' class='ico16 maximize_16 right'></span> </div>");
	this.time_line_edit_div = $("<div class='time_line_edit hidden over_hidden'></div>");
	this.time_line_date = $("<div class='time_line_date' style='height:30px;letter-spacing:1px;'><span id='" + this.id + "_date'>" + (this.date[1].length == 1 ? "0" + this.date[1] : this.date[1]) + "-" + (this.date[2].length == 1 ? "0" + this.date[2] : this.date[2]) + "</span></div>");
	this.time_line_date_set = $("<div id='" + this.id + "_time_line_date_set' class='hidden' style='height:20px'></div>");
	this.time_line_date_set_mouth = $("<select class='left " + this.id + "_time_line_date_set_mouth' id='" + this.id + "_time_line_date_set_mouth'></select>");
	this.time_line_date_set_day = $("<select class='left " + this.id + "_time_line_date_set_day' id='" + this.id + "_time_line_date_set_day'></select>");
	this.time_line_date_set_ok = $("<a class='tooltip_close font_size12 right margin_r_10 margin_t_5 hand color_blue'>" + $.i18n("common.button.ok.label") + "</a>");
	this.time_line_date_set_cancel = $("<a class='tooltip_close font_size12 right margin_t_5 hand color_blue'>" + $.i18n("common.button.cancel.label") + "</a>");
	this.time_line_date_set.append(this.time_line_date_set_mouth);
	this.time_line_date_set.append("<span class='left font_size12' style='margin-top:2px;margin-right:10px;'>" + $.i18n("calendar_month") + "</span>");
	this.time_line_date_set.append(this.time_line_date_set_day);
	this.time_line_date_set.append("<span class='left font_size12 ' style='margin-top:2px;margin-right:2px;'>" + $.i18n("calendar_day") + "</span>");
	this.time_line_date_set.append(this.time_line_date_set_cancel);
	this.time_line_date_set.append(this.time_line_date_set_ok);
	this.time_line_date.append(this.time_line_date_set);
	this.time_line_edit_div.append(this.time_line_edit);
	$("body").append(this.time_line_edit_div);
	this.time_line_box.append(this.time_line_date);
	this.time_line_main = $("<div class='time_line_main relative' style='height:" + this.timeLineHeight + "px' id='" + this.id + "_main'></div>");
	this.timeStepInt = parseInt(this.timeStep[1], 10) - parseInt(this.timeStep[0], 10);
	this.subTime = this.timeLineHeight / (this.timeStepInt * 2);
	for (var E = 0; E < this.timeStepInt * 2; E++) {
		if (E == 0) {
			var C = $("<div class='time_hour_scale absolute'></div>");
			C.css({
				top: E * this.subTime - 1
			});
			this.time_line_main.append(C);
			var B = $("<div class='time_hour absolute clearfix'><div class='time_hour_number' style='width:13px;'>" + (parseInt(this.timeStep[0], 10) + E / 2) + "</div><div class='time_hour_number_00' style='width:17px;'>:00</div></div>");
			B.css({
				top: (E * this.subTime - 6) - 7
			});
			this.time_line_main.append(B);
			this.scaleArray[parseInt(this.timeStep[0], 10) + E / 2] = E * this.subTime;
			this.scaleHourArray[parseInt(this.timeStep[0], 10) + E / 2] = B
		} else {
			if (E % 2 == 0) {
				var C = $("<div class='time_hour_scale absolute'></div>");
				C.css({
					top: E * this.subTime - 1
				});
				this.time_line_main.append(C);
				var B = $("<div class='time_hour absolute clearfix'><div class='time_hour_number'>" + (parseInt(this.timeStep[0], 10) + E / 2) + "</div><div class='time_hour_number_00'>00</div></div>");
				B.css({
					top: (E * this.subTime - 6) - 7
				});
				this.time_line_main.append(B);
				this.scaleArray[parseInt(this.timeStep[0], 10) + E / 2] = E * this.subTime;
				this.scaleHourArray[parseInt(this.timeStep[0], 10) + E / 2] = B
			} else {
				var G = $("<div class='time_harf_hour_scale absolute'></div>");
				G.css({
					top: E * this.subTime
				});
				this.time_line_main.append(G)
			}
		}
	}
	var G = $("<div class='time_hour_scale absolute'></div>");
	G.css({
		top: this.timeStepInt * 2 * this.subTime - 1
	});
	var B = $("<div class='time_hour absolute clearfix'><div class='time_hour_number'>" + parseInt(this.timeStep[1], 10) + "</div><div class='time_hour_number_00'>00</div></div>");
	B.css({
		top: (this.timeStepInt * 2 * this.subTime - 6) - 7
	});
	this.time_line_main.append(B);
	this.scaleArray[parseInt(this.timeStep[1], 10)] = this.timeStepInt * 2 * this.subTime;
	this.scaleHourArray[parseInt(this.timeStep[1], 10)] = B;
	this.time_line_main.append(G);
	this.time_line_box.append(this.time_line_main);
	if (this.render == undefined) {
		$("body").append(this.time_line_box)
	} else {
		$("#" + this.render).append(this.time_line_box)
	}
	this.year = this.date[0];
	this.month = parseInt(this.date[1], 10);
	this.day = this.date[2];
	for (var F = 1; F < 13; F++) {
		this.time_line_date_set_mouth.append($("<option " + (F == this.month ? "selected" : "") + ">" + F + "</option>"))
	}
	this.changeDate(parseInt(this.year, 10), parseInt(this.month, 10));
	var A = this;
	$("#" + this.id + "_editor").click(this.editClick);
	$("#" + this.id + "_maximize").click(this.maxClick);
	this.time_line_date_set_ok.click(this.searchClick);
	this.time_line_date_set_mouth.change(function () {
		A.changeDate(parseInt(A.date[0], 10), parseInt($(this).val(), 10))
	});
	var D = true;
	this.time_line_box.mouseenter(function () {
		var H = $(this).offset();
		A.time_line_edit_div.css({
			left: H.left,
			top: H.top - 16
		}).show();
		D = true
	}).mouseleave(function () {
		setTimeout(function () {
			if (D) {
				A.time_line_edit_div.hide()
			}
		}, 10)
	});
	this.time_line_edit_div.mouseenter(function () {
		$("#" + A.id + "_time_line_date_set_tooltip").hide();
		$(this).show();
		D = false
	}).mouseleave(function () {
		$(this).hide();
		D = true
	});
	this.time_line_date.click(function () {
		if (A.setDateTooltip == undefined) {
			var H = A.time_line_date.offset().left - 230;
			var I = A.time_line_date.offset().top;
			A.setDateTooltip = $.tooltip({
					id: A.id + "_time_line_date_set_tooltip",
					width: 230,
					openAuto: false,
					openPoint: [H, I],
					htmlID: A.id + "_time_line_date_set",
					direction: "RT",
					z_index: 900
				})
		}
		$("#" + A.id + "_time_line_date_set").show();
		A.setDateTooltip.show();
		if ($.browser.msie) {
			if ($.browser.version == "8.0" || $.browser.version == "7.0" || $.browser.version == "9.0") {
				$("." + A.id + "_time_line_date_set_mouth").val(parseInt(A.month, 10));
				$("." + A.id + "_time_line_date_set_day").val(parseInt(A.day, 10))
			}
		}
	})
};
MxtTimeLine.prototype.isHasMax = function () {
	for (var B = 0; B < this.items.length; B++) {
		var A = this.items[B];
		var D = parseInt(A.dateTime, 10);
		var C = A.childItems;
		if (D == parseInt(this.timeStep[1], 10) && C.length > 0) {
			this.isHasMaxEvent = true
		}
	}
};
MxtTimeLine.prototype.initType = function () {
	var Q = this;
	if (this.items && this.items.length > 0) {
		for (var H = 0; H < this.items.length; H++) {
			var K = this.items[H];
			var I = K.type;
			var B = parseInt(K.dateTime, 10);
			var L = K.childItems;
			if (B < parseInt(this.timeStep[0], 10) || B > parseInt(this.timeStep[1], 10)) {
				continue
			}
			var C = $("<span class='time_line_icon " + I + "'></span>");
			C.css({
				top: this.scaleArray[B] + 5
			});
			(function (S, R) {
				S.mouseenter(function () {
					$(this).addClass(R + "_over")
				}).mouseleave(function () {
					$(this).removeClass(R + "_over")
				})
			})(C, I);
			this.time_line_main.append(C);
			var F = "<div id='" + this.id + "_contentDiv" + H + "' class='" + this.id + "_time_dialog hidden'><ul class='time_dialog'>";
			for (var G = 0; G < L.length; G++) {
				var P = L[G];
				if (G == 0) {
					F += "<li style='border:0px;padding-top:0px;' onclick=" + this.action + "('" + P.id + "','" + (P.type == undefined ? I : P.type) + "')>"
				} else {
					if (G == (L.length - 1)) {
						F += "<li style='padding-bottom:0px' onclick=" + this.action + "('" + P.id + "','" + (P.type == undefined ? I : P.type) + "')>"
					} else {
						F += "<li onclick=" + this.action + "('" + P.id + "','" + (P.type == undefined ? I : P.type) + "')>"
					}
				}
				F += "<div class='title'><em class='time_type_icon " + P.type + "_ico  margin_r_5' style='position: static;display: inline-block;'></em><span style='display:inline-block;line-height:16px;height:16px;vertical-align:2px;'>" + P.title + "</span></div>";
				F += "<div class='content'>" + P.content + "</div>";
				F += "<div class='clearfix'>";
				var N = 90;
				var D = 90;
				var A = "";
				if (P.type == "task") {
					D = 200;
					N = 0;
					A = "display:none;"
				} else {
					if (P.type == "meeting") {
						D = 200;
						N = 0;
						A = "display:none;"
					} else {
						if (P.type == "plan") {
							D = 220;
							N = 0;
							A = "display:none;"
						} else {
							if (P.type == "event") {
								D = 200;
								N = 0;
								A = "display:none;"
							} else {
								if (P.type == "collaboration") {
									N = 70;
									D = 130
								} else {
									if (P.type == "edoc") {
										N = 130;
										D = 70
									}
								}
							}
						}
					}
				}
				if (P.account != undefined) {
					F += "<span class='left account' style='" + A + "width:" + N + "px; text-align:left;font-size:12px;' title='" + P.account + "'>" + P.account + "</span>"
				}
				if (P.type == "meeting") {
					F += "<span class='right' style='width:" + D + "px; text-align:right;font-size:12px;'>";
					if (P.account != undefined) {
						F += "<span class='margin_r_10'>" + P.account + "</span>"
					}
					F += P.dateTime + "</span></div>"
				} else {
					F += "<span class='right' style='width:" + D + "px; text-align:right;font-size:12px;'>" + P.dateTime + "</span></div>"
				}
				F += "</li>"
			}
			F += "</ul>";
			F += "</div>";
			C.append($(F));
			var E = C.offset().left - 260 - 6;
			var J = C.offset().top - 8;
			var M = Q.id + "_contentDiv" + H;
			var O = Q.id + "_tooltip_" + H;
			(function (W, R, T, Y, V, X) {
				var S;
				var U;
				$(W).mouseenter(function () {
					$("#" + Y).removeClass("hidden");
					if (U == undefined) {
						U = $.tooltip({
								id: R,
								width: 260,
								openAuto: false,
								openPoint: [V, X],
								htmlID: Y,
								direction: "RT",
								z_index: 900
							})
					}
					(function (Z, a) {
						$("#" + Z).mouseenter(function () {
							a.hideFlag = false;
							$(this).show()
						}).mouseleave(function () {
							a.hideFlag = true;
							$(this).hide()
						})
					})(R, T);
					S = setTimeout(function () {
							T.hideFlag = true;
							$("div.tooltip").hide();
							$("#" + R).show();
							if ($.browser.msie) {
								if ($.browser.version == "6.0") {
									var a = $("#" + R).find(".time_dialog").eq(0);
									var Z = a.height();
									if (Z > 300) {
										a.height(300)
									}
								}
							}
						}, 500)
				}).mouseleave(function () {
					clearTimeout(S);
					setTimeout(function () {
						if (T.hideFlag) {
							U.hide();
							$("#" + Y).addClass("hidden");
							T.hideFlag = false
						}
					}, 100)
				})
			})(C, O, Q, M, E, J)
		}
	}
};
MxtTimeLine.prototype.clearLine = function () {
	this.scaleArray = new Object();
	this.scaleHourArray = new Object();
	this.boxPadding = 10;
	this.isHasMaxEvent = false;
	this.setDateTooltip = undefined;
	$("#" + this.id + "_editor").remove();
	$("#" + this.id + "_maximize").remove();
	$("#" + this.id + "_box").remove();
	$("#" + this.id + "_time_line_date_set").remove();
	$("#" + this.id + "_time_line_date_set_tooltip").remove();
	$("." + this.id + "_time_dialog").remove()
};
MxtTimeLine.prototype.reset = function (A) {
	this.timeStep = A.timeStep == undefined ? this.timeStep : A.timeStep;
	this.date = A.date == undefined ? this.date : A.date;
	this.autoHeight = A.autoHeight == undefined ? this.autoHeight : A.autoHeight;
	this.editClick = A.editClick == undefined ? this.editClick : A.editClick;
	this.maxClick = A.maxClick == undefined ? this.maxClick : A.maxClick;
	this.items = A.items == undefined ? this.items : A.items;
	this.clearLine();
	this.initTimeLine();
	this.initType()
};
MxtTimeLine.prototype.getDate = function () {
	var B = this.date[0];
	var D = $("#" + this.id + "_time_line_date_set_mouth").val();
	var A = $("#" + this.id + "_time_line_date_set_day").val();
	var E = this.timeStep[0];
	var C = this.timeStep[1];
	return {
		year: B,
		mounth: D,
		day: A,
		fromTime: E,
		toTime: C
	}
};
MxtTimeLine.prototype.setTimeLineDate = function (A) {
	this.year = A.year;
	this.mounth = A.mounth;
	this.day = A.day;
	if (this.mounth == undefined) {
		this.mounth = A.date.getMonth() + 1
	}
	if (this.day == undefined) {
		this.day = A.date.getDate()
	}
	$("#" + this.id + "_date").empty().html(this.mounth + "-" + this.day);
	$("#" + this.id + "_time_line_date_set_mouth").empty();
	for (var B = 1; B < 13; B++) {
		$("#" + this.id + "_time_line_date_set_mouth").append($("<option " + (B == this.mounth ? "selected" : "") + ">" + B + "</option>"))
	}
	this.changeDate(parseInt(this.year, 10), parseInt(this.mounth, 10))
};
MxtTimeLine.prototype.changeDate = function (B, A) {
	var C = this.MonHead[A - 1];
	if (A == 2 && this.IsPinYear(B)) {
		C++
	}
	this.writeDay(C)
};
MxtTimeLine.prototype.writeDay = function (C) {
	var B = "";
	for (var A = 1; A < (C + 1); A++) {
		B += "<option " + (A == parseInt(this.day, 10) ? "selected" : "") + " value='" + A + "'> " + A + "</option>"
	}
	$("#" + this.id + "_time_line_date_set_day").replaceWith("<select class='left " + this.id + "_time_line_date_set_day' id='" + this.id + "_time_line_date_set_day'>" + B + "</select>")
};
MxtTimeLine.prototype.IsPinYear = function (A) {
	return (0 == A % 4 && (A % 100 != 0 || A % 400 == 0))
};
MxtTimeLine.prototype.getDateObj = function (A) {
	var I = this.items;
	var E = null;
	if (I && I.length > 0) {
		for (var C = 0; C < I.length; C++) {
			var G = I[C];
			var D = G.childItems;
			if (D && D.length > 0) {
				for (var B = 0; B < D.length; B++) {
					var F = D[B];
					var H = F.id;
					if (H && H == A) {
						E = F;
						break
					}
				}
			}
		}
	}
	return E
};
function WebFXMenuBar(A) {
	this.allMenuBottons = [];
	this.menuStrBuffer = [];
	this.render = A.render;
	this.contextPath = A.contextPath == null ? "" : A.contextPath;
	this.isPager = true;
	if (A.isPager == false) {
		this.isPager = false
	}
	this.searchHtml = A.searchHtml;
	this.top = A.top == null ? 0 : A.top;
	this.left = A.left == null ? 0 : A.left;
	this.borderTop = 0;
	if (A.borderTop == true) {
		this.borderTop = 1
	}
	this.borderBottom = 0;
	if (A.borderBottom == true) {
		this.borderBottom = 1
	}
	this.borderRight = 0;
	if (A.borderRight == true) {
		this.borderRight = 1
	}
	this.borderLeft = 0;
	if (A.borderLeft == true) {
		this.borderLeft = 1
	}
	this.id = A.id ? A.id : Math.floor(Math.random() * 100000000);
	this.type = A.type;
	this.items = A.items;
	this.disabledItemArr = [];
	this.hideIdArray = [];
	this.showSeparate = A.showSeparate != undefined ? A.showSeparate : false
}
WebFXMenuBar.prototype.add = function (A) {
	this.allMenuBottons[this.allMenuBottons.length] = A
};
WebFXMenuBar.prototype.addMenu = function (A) {
	this.add(new WebFXMenuButton(A));
	var B = this.allMenuBottons[this.allMenuBottons.length - 1];
	B.toObj(document.getElementById("toolbar_" + this.id))
};
WebFXMenuBar.prototype.isA = false;
WebFXMenuBar.prototype.isB = false;
WebFXMenuBar.prototype.show = function () {
	var K = this;
	if (this.allMenuBottons.length > 0) {
		this.menuStrBuffer = [];
		if (this.isPager) {
			var E = "toolbar_m_r" + K.id + "Click";
			var G = "toolbar_m_l" + K.id + "Click";
			this.menuStrBuffer.push("<div id='toolbar_" + this.id + "_box' class='common_toolbar_box clearfix' style='overflow:hidden; border-top-width:" + this.borderTop + "px;border-bottom-width:" + this.borderBottom + "px;border-left-width:" + this.borderLeft + "px;border-right-width:" + this.borderRight + "px;border-color:#b6b6b6;border-style:solid;'>");
			this.menuStrBuffer.push("<div id='toolbar_" + this.id + "_wrap' class='toolbar_l clearfix' style='overflow:hidden'><div id='toolbar_" + this.id + "' style='height:30px;white-space:nowrap;width:auto'>");
			this.menuStrBuffer.push("</div></div><div id='toolbar_m' class='left hidden'><span class=' toolbar_m_l' onclick='" + G + "()'></span><span class=' toolbar_m_r' onclick='" + E + "()'></span></div>");
			this.menuStrBuffer.push("<div id='toolbar_" + this.id + "_wrap_right' class='toolbar_l clearfix' style='overflow:hidden;float: right;'><div id='toolbar_" + this.id + "_right' style='height:30px;white-space:nowrap;width:auto'></div></div>")
		} else {
			this.menuStrBuffer.push("<div class='common_toolbar_box clearfix' style='_display:inline; border-top-width:" + this.borderTop + "px;border-bottom-width:" + this.borderBottom + "px;border-left-width:" + this.borderLeft + "px;border-right-width:" + this.borderRight + "px;border-color:#b6b6b6;border-style:solid;'>");
			this.menuStrBuffer.push("<div id='toolbar_" + this.id + "' class='toolbar_l clearfix'>");
			this.menuStrBuffer.push("</div>")
		}
		if (this.searchHtml != null) {
			this.menuStrBuffer.push("<div class='toolbar_r clearfix'>");
			var F = document.getElementById(this.searchHtml);
			if (F != null) {
				this.menuStrBuffer.push(F.innerHTML)
			}
			this.menuStrBuffer.push("</div>");
			SeeUtils.removeEl(F)
		}
		this.menuStrBuffer.push("</div>")
	}
	if (this.render == undefined) {
		document.write(this.menuStrBuffer.join(""))
	} else {
		SeeUtils.appendTo(this.menuStrBuffer.join(""), this.render)
	}
	var J = document.getElementById("toolbar_" + this.id);
	var I = document.getElementById("toolbar_" + this.id + "_right");
	for (var S = 0; S < this.allMenuBottons.length; S++) {
		var H = this.allMenuBottons[S];
		H.toObj(J, I);
		if (this.showSeparate) {
			if (S != (this.allMenuBottons.length - 1)) {
				H.toSeparate(J)
			}
		}
	}
	if (this.isPager) {
		this.setPage()
	}
	var C = SeeUtils.getByClass(document, ".sub_ico");
	var B = SeeUtils.getByClass(document, ".rolling_btn_b");
	var L = [];
	for (var W = 0; W < C.length; W++) {
		L.push(C[W])
	}
	for (var U = 0; W < U.length; U++) {
		L.push(B[U])
	}
	for (var A = 0; A < L.length; A++) {
		var D = L[A];
		var N = D.id;
		K.initDisabledItem(N);
		var T = navigator.userAgent.toLowerCase();
		var V = (T.indexOf("opera") != -1);
		var M = (T.indexOf("msie") != -1 && !V);
		var R = "sub_" + N + "mouseover";
		var Q = "sub_" + N + "mouseout";
		var P = "sub_" + N + "mouseenter";
		var O = "sub_" + N + "mouseleave";
		if (M) {
			window[R] = function (X) {
				X = SeeUtils.getElObj(X);
				var Y = X.id;
				if (SeeUtils.hasClass(X, "common_menu_dis") !== true) {
					window.setTimeout(function () {
						K.showMoreMenu(Y)
					}, 20)
				}
			};
			window[Q] = function () {
				window.setTimeout(function () {
					K.hideMoreMenu()
				}, 20)
			}
		} else {
			window[P] = function (Y) {
				Y = SeeUtils.getElObj(Y);
				var X = Y.id;
				K.isA = true;
				if (SeeUtils.hasClass(Y, "common_menu_dis") !== true) {
					window.setTimeout(function () {
						K.showMoreMenu(X)
					}, 1)
				}
			};
			window[O] = function () {
				K.isA = false;
				window.setTimeout(function () {
					K.hideMoreMenu()
				}, 1)
			}
		}
	}
	this.menuStrBuffer = []
};
WebFXMenuBar.prototype.setPage = function (N) {
	var M = this;
	if (N == "hideBtn") {
		SeeUtils.css("toolbar_" + this.id + "_wrap", "width", "auto");
		SeeUtils.css("toolbar_m", "display", "none")
	}
	var B = SeeUtils.getElWidth("toolbar_" + this.id);
	var S = SeeUtils.getElWidth("toolbar_" + this.id + "_box");
	SeeUtils.attrEl("toolbar_" + this.id, "totalWidth", B);
	var I = 0;
	var U = SeeUtils.getByClass(document, ".common_search_condition");
	if (U != null && U.length > 0) {
		var A = SeeUtils.getElWidth(U[0]);
		var C = SeeUtils.getAttrEl(U[0], "searchWidth");
		if (C == null) {
			SeeUtils.attrEl(U[0], "searchWidth", A)
		} else {
			A = C
		}
		var R = SeeUtils.getByClass(U[0], "searchLicommon");
		var D = [];
		for (var Q = 0; Q < R.length; Q++) {
			var Y = R[Q];
			if (SeeUtils.getCss(Y, "display") != "none") {
				D.push(Y)
			}
		}
		var T = SeeUtils.getByClass(document, ".typeDatemulti");
		if (SeeUtils.getCss(U[0], "position") == "static") {
			I = 0
		} else {
			if (T != null && T.length > 0) {
				I = (A) * 3 - 10
			} else {
				if (D.length > 2) {
					I = A
				} else {
					I = A * 2
				}
			}
		}
	}
	var J = SeeUtils.getElWidth("toolbar_" + this.id + "_wrap_right");
	var F = SeeUtils.getElWidth("toolbar_m");
	if (B > (S - I - J - F)) {
		var L = S - I - J - F;
		var W = SeeUtils.getElObj("toolbar_" + this.id).children;
		var Z = W.length;
		var G = 0;
		this._subm = [];
		for (var P = 0; P < Z; P++) {
			var K = W[P];
			if (K) {
				var X = parseInt(SeeUtils.getCss(K, "margin-left"));
				if (isNaN(X)) {
					X = 0
				}
				var V = parseInt(SeeUtils.getCss(K, "margin-right"));
				if (isNaN(V)) {
					V = 0
				}
				var O = parseInt(K.offsetWidth);
				if (isNaN(O)) {
					O = 0
				}
				G = G + O + X + V;
				SeeUtils.attrEl(K, "pageNum", this._subm.length);
				if (G > L) {
					G = G - O - X - V;
					SeeUtils.attrEl(K, "pageNum", this._subm.length + 1);
					this._subm[this._subm.length] = G;
					G = O + X + V
				}
			}
		}
		if (this._subm.length > 0) {
			L = this._subm[0];
			SeeUtils.attrEl("toolbar_m", "move", 0)
		}
		SeeUtils.showEl("toolbar_m");
		SeeUtils.css("toolbar_" + this.id + "_wrap", "width", L);
		var E = "toolbar_m_r" + M.id + "Click";
		window[E] = function () {
			window.rightBt = setTimeout(function () {
					if (window.rightBt != null) {
						clearTimeout(window.rightBt)
					}
					var a = parseInt(SeeUtils.getNumber(SeeUtils.getCss("toolbar_" + M.id, "margin-left")));
					var b = parseInt(SeeUtils.getAttrEl("toolbar_m", "move"));
					if (M._subm[b]) {
						$("#toolbar_" + M.id).animate({
							"margin-left": a - M._subm[b]
						}, 200);
						if (SeeUtils.isIE8) {
							SeeUtils.attrEl("toolbar_" + M.id, "margin-left", a - M._subm[b])
						}
						b = b + 1;
						SeeUtils.attrEl("toolbar_m", "move", b)
					}
				}, 250)
		};
		var H = "toolbar_m_l" + M.id + "Click";
		window[H] = function () {
			window.leftBt = setTimeout(function () {
					if (window.leftBt != null) {
						clearTimeout(window.leftBt)
					}
					var a = parseInt(SeeUtils.getNumber(SeeUtils.getCss("toolbar_" + M.id, "margin-left")));
					if (SeeUtils.isIE8) {
						a = SeeUtils.getNumber(SeeUtils.getAttrEl("toolbar_" + M.id, "margin-left"))
					}
					var b = parseInt(SeeUtils.getAttrEl("toolbar_m", "move")) - 1;
					if (M._subm[b]) {
						$("#toolbar_" + M.id).animate({
							"margin-left": a + M._subm[b]
						}, 200);
						SeeUtils.attrEl("toolbar_m", "move", b)
					}
				}, 250)
		}
	}
};
WebFXMenuBar.prototype.hideMoreMenu = function (B) {
	if (this.isA || this.isB || this.isC) {
		return
	}
	this.hiddenFlag = true;
	var A = this;
	setTimeout(function () {
		A.hideMoreMenuAction(B)
	}, 20)
};
WebFXMenuBar.prototype.hideMoreMenuAction = function () {
	if (this.hiddenFlag == true) {
		SeeUtils.removeEl("toolbar_more");
		SeeUtils.removeEl("toolbar_more_iframe");
		showOfficeObj()
	}
};
WebFXMenuBar.prototype.getPosition = function (D) {
	if (this.top == 0 && this.left == 0) {
		var C = document.getElementById(D + "_a");
		var A = C.getBoundingClientRect().left + "px";
		var B = (C.getBoundingClientRect().top - 1) + C.offsetHeight + "px";
		return {
			position: "absolute",
			top: B,
			left: A,
			width: 185,
			"z-index": 500
		}
	} else {
		return {
			position: "absolute",
			top: this.top,
			left: this.left,
			width: 185,
			"z-index": 500
		}
	}
};
WebFXMenuBar.prototype.initDisabledItem = function (G) {
	if (G) {
		var C = this.getMenuButton(G);
		var A = C.subMenu;
		var E = A.allItems;
		var B = this.hideIdArray.join(",");
		for (var D = 0; D < E.length; D++) {
			var F = E[D];
			if (F.disabled != undefined && F.disabled == true) {
				this.disabledItemArr.push(F.id)
			}
		}
	}
};
WebFXMenuBar.prototype.showMoreMenu = function (I) {
	if (I) {
		this.hiddenFlag = false;
		var B = this.getMenuButton(I);
		var L = B.subMenu;
		if (SeeUtils.getElObj("toolbar_more") != null) {
			SeeUtils.removeEl("toolbar_more");
			SeeUtils.removeEl("toolbar_more_iframe")
		}
		var T = this.getPosition(I);
		var N = "toolbar_more" + this.id + "mouseover";
		var M = "toolbar_more" + this.id + "mouseout";
		var C = "<div id='toolbar_more' onmouseenter='" + N + "()' onmouseleave='" + M + "()' style='background:#ffffff;z-index:10' class='common_order_menu_box clearfix'><ul id='toolbar_more_ul' class='common_order_menu'></ul></div>";
		SeeUtils.appendToBody(C);
		SeeUtils.cssByJson("toolbar_more", T);
		var H = this;
		window[N] = function () {
			H.isB = true;
			H.hiddenFlag = false
		};
		window[M] = function () {
			H.hiddenFlag = true;
			H.isB = false;
			H.hideMoreMenu()
		};
		var G = L.allItems;
		var R = this.hideIdArray.join(",");
		for (var O = 0; O < G.length; O++) {
			var D = G[O];
			if (R.indexOf(D.id) != -1) {
				continue
			}
			var F = "toolbar_more_ul" + O + "Click";
			var K = '<li><a  id="' + D.id + '_a" onclick="' + F + '(this)" class="order_menuitem" title="' + D.name + '">' + D.name + "</a></li>";
			SeeUtils.appendTo(K, document.getElementById("toolbar_more_ul"));
			SeeUtils.attrEl(D.id + "_a", "value", D.value);
			if (this.disabledItemArr.indexOf(D.id) == -1) {
				(function (U) {
					window[F] = function (V) {
						WebFXMenuBar.prototype.isC = true;
						U.click.apply(V);
						setTimeout(function () {
							SeeUtils.removeEl("toolbar_more");
							SeeUtils.removeEl("toolbar_more_iframe");
							WebFXMenuBar.prototype.isC = false
						}, 100)
					}
				})(D)
			} else {
				window[F] = function () {};
				SeeUtils.css(D.id + "_a", "color", "#D2D2D2")
			}
		}
		var A = document.createElement("iframe");
		A.id = "toolbar_more_iframe";
		A.className = "absolute";
		A.setAttribute("src", "about:blank");
		A.setAttribute("frameborder", "0");
		A.style.zIndex = 9;
		A.style.top = parseFloat(SeeUtils.getCss("toolbar_more", "top")) + "px";
		A.style.left = parseFloat(SeeUtils.getCss("toolbar_more", "left")) + "px";
		A.style.width = SeeUtils.getElWidth("toolbar_more") + "px";
		A.style.height = SeeUtils.getElHeight("toolbar_more") + "px";
		SeeUtils.appendToBody(A);
		var P = document.getElementById(I + "_a");
		var E = parseInt(P.getBoundingClientRect().top) + parseInt(P.clientHeight);
		var Q = SeeUtils.getElHeight("toolbar_more");
		var J = parseInt(SeeUtils.getDocumentHeight());
		if ((E + Q) > J) {
			var S = SeeUtils.getElHeight(P);
			SeeUtils.css("toolbar_more", "height", J - E - S);
			SeeUtils.css("toolbar_more", "overflow", "auto");
			SeeUtils.addClass("toolbar_more", "border_all");
			SeeUtils.css("toolbar_more_ul", "border", 0);
			SeeUtils.css("toolbar_more_iframe", "height", J - E - S)
		}
		hideOfficeObj()
	}
};
WebFXMenuBar.prototype.disabledAll = function () {
	var A = this;
	for (var B = 0; B < this.allMenuBottons.length; B++) {
		var C = this.allMenuBottons[B];
		A.disabled(C.id)
	}
};
WebFXMenuBar.prototype.selected = function (C) {
	var A = this;
	if (C) {
		var B = C + "_a";
		SeeUtils.addClass(B, "selected")
	}
};
WebFXMenuBar.prototype.unselected = function (C) {
	var A = this;
	if (C) {
		var B = C + "_a";
		SeeUtils.removeClass(B, "selected")
	} else {
		SeeUtils.removeClass("toolbar_" + this.id + " a", "selected")
	}
};
function _enabledMouse(B) {
	var E = SeeUtils.getAttrEl(B, "bakonmouseover");
	var D = SeeUtils.getAttrEl(B, "bakonmouseout");
	var C = SeeUtils.getAttrEl(B, "bakonmouseenter");
	var A = SeeUtils.getAttrEl(B, "bakonmouseleave");
	if (typeof(C) != "undefined" || typeof(A) != "undefined") {
		SeeUtils.attrEl(B, "onmouseenter", C);
		SeeUtils.attrEl(B, "onmouseleave", A);
		SeeUtils.removeAttrEl(B, "bakonmouseenter");
		SeeUtils.removeAttrEl(B, "bakonmouseleave")
	}
	if (typeof(E) != "undefined" || typeof(D) != "undefined") {
		SeeUtils.attrEl(B, "onmouseover", E);
		SeeUtils.attrEl(B, "onmouseout", D);
		SeeUtils.removeAttrEl(B, "bakonmouseover");
		SeeUtils.removeAttrEl(B, "bakonmouseout")
	}
}
function _disabledMouse(B) {
	var E = SeeUtils.getAttrEl(B, "onmouseover");
	var D = SeeUtils.getAttrEl(B, "onmouseout");
	var C = SeeUtils.getAttrEl(B, "onmouseenter");
	var A = SeeUtils.getAttrEl(B, "onmouseleave");
	if (typeof(C) != "undefined" || typeof(A) != "undefined") {
		SeeUtils.attrEl(B, "bakonmouseenter", C);
		SeeUtils.attrEl(B, "bakonmouseleave", A);
		SeeUtils.attrEl(B, "onmouseenter", "void(0)");
		SeeUtils.attrEl(B, "onmouseleave", "void(0)")
	}
	if (typeof(E) != "undefined" || typeof(D) != "undefined") {
		SeeUtils.attrEl(B, "bakonmouseover", E);
		SeeUtils.attrEl(B, "bakonmouseout", D);
		SeeUtils.attrEl(B, "onmouseover", "void(0);");
		SeeUtils.attrEl(B, "onmouseout", "void(0);")
	}
}
WebFXMenuBar.prototype.disabled = function (B) {
	var I = this;
	if (B) {
		var A = B + "_a";
		SeeUtils.addClass(A, "common_menu_dis");
		var H = SeeUtils.getAttrEl(A, "onclick");
		var D = SeeUtils.getAttrEl(A, "bakclick");
		if (typeof(H) == "undefined") {
			var G = SeeUtils.getAttrEl(A, "onmouseover");
			var F = SeeUtils.getAttrEl(A, "onmouseout");
			var E = SeeUtils.getAttrEl(A, "onmouseenter");
			var C = SeeUtils.getAttrEl(A, "onmouseleave");
			if (typeof(G) == "undefined") {
				SeeUtils.attrEl(A, "bakonmouseenter", E);
				SeeUtils.attrEl(A, "bakonmouseleave", C);
				SeeUtils.attrEl(A, "onmouseenter", "void(0)");
				SeeUtils.attrEl(A, "onmouseleave", "void(0)")
			} else {
				SeeUtils.attrEl(A, "bakonmouseover", G);
				SeeUtils.attrEl(A, "bakonmouseout", F);
				SeeUtils.attrEl(A, "onmouseover", "void(0);");
				SeeUtils.attrEl(A, "onmouseout", "void(0);")
			}
		} else {
			if (H == "void(0);") {
				SeeUtils.attrEl(A, "bakclick", D)
			} else {
				SeeUtils.attrEl(A, "bakclick", H);
				_disabledMouse(A)
			}
			SeeUtils.attrEl(A, "onclick", "void(0);")
		}
		this.disabledItemArr.push(B)
	}
};
WebFXMenuBar.prototype.enabledAll = function () {
	var A = this;
	for (var B = 0; B < this.allMenuBottons.length; B++) {
		var C = this.allMenuBottons[B];
		A.enabled(C.id)
	}
};
WebFXMenuBar.prototype.enabled = function (B) {
	var L = this;
	if (B) {
		var A = B + "_a";
		if (SeeUtils.getElObj(A) && !SeeUtils.hasClass(A, "common_menu_dis")) {
			return
		}
		SeeUtils.removeClass(A, "common_menu_dis");
		var I = this.getMenuButton(B);
		if (I) {
			var H = SeeUtils.getAttrEl(A, "bakclick");
			if (typeof(H) == "undefined") {
				var G = SeeUtils.getAttrEl(A, "bakonmouseover");
				var E = SeeUtils.getAttrEl(A, "bakonmouseout");
				var D = SeeUtils.getAttrEl(A, "bakonmouseenter");
				var C = SeeUtils.getAttrEl(A, "bakonmouseleave");
				if (typeof(G) == "undefined") {
					SeeUtils.attrEl(A, "onmouseenter", D);
					SeeUtils.attrEl(A, "onmouseleave", C);
					SeeUtils.removeAttrEl(A, "bakonmouseenter");
					SeeUtils.removeAttrEl(A, "bakonmouseleave")
				} else {
					SeeUtils.attrEl(A, "onmouseover", G);
					SeeUtils.attrEl(A, "onmouseout", E);
					SeeUtils.removeAttrEl(A, "bakonmouseover");
					SeeUtils.removeAttrEl(A, "bakonmouseout")
				}
			} else {
				SeeUtils.attrEl(A, "onclick", H);
				SeeUtils.removeAttrEl(A, "bakclick");
				_enabledMouse(A)
			}
		}
		if (this.disabledItemArr.length > 0) {
			var J = [];
			for (var F = 0; F < this.disabledItemArr.length; F++) {
				var K = this.disabledItemArr[F];
				if (K != B) {
					J.push(K)
				}
			}
			this.disabledItemArr = J
		}
		SeeUtils.attrEl(A, "style", "")
	}
};
WebFXMenuBar.prototype.hideBtn = function (D) {
	var A = this;
	if (D) {
		this.hideIdArray.push(D);
		var B = D + "_a";
		if (document.getElementById(B) != null) {
			SeeUtils.hideEl(B);
			var C = document.getElementById(B).nextSibling;
			if (SeeUtils.hasClass(C, "seperate")) {
				SeeUtils.hideEl(C)
			}
			if (this.isPager) {
				this.setPage("hideBtn")
			}
		}
	}
};
WebFXMenuBar.prototype.showBtn = function (H) {
	var A = this;
	if (H) {
		if (this.hideIdArray.length > 0) {
			var G = [];
			for (var D = 0; D < this.hideIdArray.length; D++) {
				var C = this.hideIdArray[D];
				if (C != H) {
					G.push(C)
				}
			}
			this.hideIdArray = G
		}
		var B = H + "_a";
		SeeUtils.showEl(B);
		var E = document.getElementById(B);
		if (E == null) {
			return
		}
		var F = E.nextSibling;
		if (SeeUtils.hasClass(F, "seperate")) {
			SeeUtils.showEl(F)
		}
	}
};
WebFXMenuBar.prototype.getMenuButton = function (C) {
	if (C && this.allMenuBottons.length > 0) {
		for (var B = 0; B < this.allMenuBottons.length; B++) {
			var A = this.allMenuBottons[B];
			if (A.id == C) {
				return A
			}
		}
	}
};
function WebFXMenuButton(A) {
	this.id = A.id;
	this.name = A.name;
	this.click = A.click;
	this.className = typeof(A.className) == "undefined" ? "" : A.className;
	this.subMenu = A.subMenu;
	this.selected = A.selected;
	this.type = A.type;
	this.text = A.text;
	this.items = A.items;
	this.onchange = A.onchange;
	this.disabled = A.disabled;
	this.value = A.value;
	this.checked = A.checked;
	this.position = A.position;
	this.fontColor = A.fontColor;
	this.iconPosition = A.iconPosition;
	this.border = A.border
}
WebFXMenuButton.prototype.toObj = function (A, B) {
	var P = [];
	var H = this.name;
	var E = this;
	var N = "toolbar" + this.id + "_aChange";
	var O = "toolbar" + this.id + "_aClick";
	if (this.type == "select") {
		var Q = this.text;
		P.push("<select id='" + this.id + "'");
		if (this.disabled == true) {
			P.push(" disabled='true' ")
		} else {
			P.push(" onchange='" + N + "(this)' ");
			window[N] = function (R) {
				E.onchange.apply(R)
			}
		}
		P.push("class='valign_m " + this.className + "' ><option value='" + this.value + "'>" + Q + "</option>");
		if (this.items != null) {
			for (var M = 0; M < this.items.length; M++) {
				var G = this.items[M];
				P.push("<option value='" + G.value + "'>" + G.text + "</option>")
			}
		}
		P.push("</select>");
		if (A != null && A.get != null && A.get(0) != null) {
			SeeUtils.appendTo(P.join(""), A.get(0))
		} else {
			if (A != null) {
				SeeUtils.appendTo(P.join(""), A)
			}
		}
	} else {
		if (this.type == "checkbox") {
			P.push('<label for="' + this.id + '" class="margin_l_10 margin_r_10 hand"><input onclick="' + O + '()" type="checkbox" id="' + this.id + '" value="' + this.value + '" ');
			if (this.checked == true) {
				P.push(' checked="checked" ')
			}
			P.push(' class="radio_com">' + this.text + "</label>");
			if (A != null && A.get != null && A.get(0) != null) {
				SeeUtils.appendTo(P.join(""), A.get(0))
			} else {
				if (A != null) {
					SeeUtils.appendTo(P.join(""), A)
				}
			}
			window[O] = function () {
				E.click()
			}
		} else {
			var C = navigator.userAgent.toLowerCase();
			var D = (C.indexOf("opera") != -1);
			var F = (C.indexOf("msie") != -1 && !D);
			var L = "sub_" + this.id + "mouseover";
			var K = "sub_" + this.id + "mouseout";
			var J = "sub_" + this.id + "mouseenter";
			var I = "sub_" + this.id + "mouseleave";
			if (this.position == "right") {
				P.push("<a style='float:right;'  id='" + this.id + "_a' ");
				if (this.selected != undefined && this.selected == true) {
					P.push(" class='selected'")
				}
				if (this.iconPosition != "right" && this.subMenu != null) {
					if (F) {
						P.push(' onmouseover="' + L + "('" + this.id + '\')" onmouseout="' + K + "('" + this.id + "')\" >")
					} else {
						P.push(' onmouseenter="' + J + "('" + this.id + '\')" onmouseleave="' + I + "('" + this.id + "')\" >")
					}
				} else {
					P.push(" onclick='" + O + "()' >")
				}
				if (this.iconPosition == "right") {
					if (this.fontColor) {
						P.push("<span id='" + this.id + "_span' class='menu_span' style='color: " + this.fontColor + ";' title='" + H + "'>" + H + "</span>")
					} else {
						P.push("<span id='" + this.id + "_span' class='menu_span' title='" + H + "'>" + H + "</span>")
					}
					if (this.className != null) {
						P.push("<em id='" + this.id + "_em' class='" + this.className + "' style='margin-right: 0;'></em>")
					}
					if (this.subMenu != null) {
						P.push("<em id='" + this.id + "'  class='ico16 rolling_btn_b' style='margin-right:-5px;margin-left:5px;'></em>")
					}
					P.push("</a>")
				} else {
					if (this.className != null) {
						P.push("<em id='" + this.id + "_em' class='" + this.className + "'></em>")
					}
					P.push("<span id='" + this.id + "_span' class='menu_span' title='" + H + "'>" + H + "</span>");
					if (this.subMenu != null) {
						P.push("<em id='" + this.id + "'  class='sub_ico' style='margin-right:-5px;margin-left:5px;'></em>")
					}
					P.push("</a>")
				}
				if (B != null && B.get != null && B.get(0) != null) {
					SeeUtils.appendTo(P.join(""), B.get(0))
				} else {
					if (B != null) {
						SeeUtils.appendTo(P.join(""), B)
					}
				}
				window[O] = function () {
					E.click()
				}
			} else {
				P.push("<a   id='" + this.id + "_a' ");
				if (this.selected != undefined && this.selected == true) {
					P.push(" class='selected'")
				}
				if (this.subMenu != null) {
					if (F) {
						P.push(' onmouseover="' + L + "('" + this.id + '\')" onmouseout="' + K + "('" + this.id + "')\" >")
					} else {
						P.push(' onmouseenter="' + J + "('" + this.id + '\')" onmouseleave="' + I + "('" + this.id + "')\" >")
					}
				} else {
					P.push(" onclick='" + O + "()' >")
				}
				if (this.className != null) {
					P.push("<em id='" + this.id + "_em' class='" + this.className + "'></em>")
				}
				P.push("<span id='" + this.id + "_span' class='menu_span' title='" + H + "'>" + H + "</span>");
				if (this.subMenu != null) {
					P.push("<em id='" + this.id + "'  class='sub_ico' style='margin-right:-5px;margin-left:5px;'></em>")
				}
				P.push("</a>");
				if (A != null && A.get != null && A.get(0) != null) {
					SeeUtils.appendTo(P.join(""), A.get(0))
				} else {
					if (A != null) {
						SeeUtils.appendTo(P.join(""), A)
					}
				}
				window[O] = function () {
					E.click()
				}
			}
		}
	}
};
WebFXMenuButton.prototype.toSeparate = function (C) {
	var A = "seperate margin_lr_5";
	if (this.className && this.className.indexOf("hidden") != -1) {
		A = "seperate margin_lr_5 hidden"
	}
	var B = document.createElement("em");
	B.className = A;
	if (C != null && C.get != null && C.get(0) != null) {
		SeeUtils.appendTo(B, C.get(0))
	} else {
		if (C != null) {
			SeeUtils.appendTo(B, C)
		}
	}
};
function WebFXMenu() {
	this.allItems = []
}
WebFXMenu.prototype.add = function (A) {
	this.allItems[this.allItems.length] = A
};
function WebFXMenuItem(A) {
	this.id = A.id;
	this.name = A.name;
	this.click = A.click;
	this.className = A.className;
	this.value = A.value;
	this.disabled = A.disabled
};
function MxtToolTip(A) {
	this.id = A.id ? A.id : "toolTip_" + Math.floor(Math.random() * 1000000000);
	this.width = A.width ? A.width : 200;
	this.event = A.event ? A.event : null;
	this.targetId = A.targetId ? A.targetId : null;
	this.openPoint = A.openPoint ? A.openPoint : [];
	this.openAuto = A.openAuto ? A.openAuto : false;
	this.direction = A.direction ? A.direction : "TL";
	this.showHtmlID = A.htmlID ? A.htmlID : null;
	this.showMsg = A.msg ? A.msg : null;
	this.targetWindow = A.targetWindow == null ? window : A.targetWindow;
	this.z_index = this.targetWindow.getMaxZindex();
	this.left = 0;
	this.top = 0;
	this.init()
}
MxtToolTip.prototype.init = function () {
	var B = this;
	$(".tooltip").remove();
	var A = "";
	A += "<div id='" + this.id + "' class='tooltip' style='display:none; position: absolute; width: " + this.width + "px;z-index:" + this.z_index + "'>";
	A += "<div class='tooltip_border'>";
	A += "<span><em class='tooltip_em' style=''></em></span>";
	A += "<div class='tooltip_text'></div>";
	A += "</div>";
	A += "</div>";
	$(this.targetWindow.document).find("body").append(A);
	if (this.showHtmlID != null) {
		$("#" + this.showHtmlID).wrap("<div id='" + this.id + "_area'></div>");
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").append($("#" + this.showHtmlID).clone(true));
		$("#" + this.id + "_area").empty()
	} else {
		if (this.showMsg != null) {
			$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html(this.showMsg)
		} else {
			$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html($("#" + this.targetId).attr("tooltip"))
		}
	}
	this.setPoint(this.left, this.top);
	if (this.openAuto == true) {
		this.show()
	}
	var B = this;
	$(this.targetWindow.document).find("#" + this.id + " .tooltip_close").click(function () {
		B.hide()
	})
};
MxtToolTip.prototype.getPD = function () {
	var E;
	var B;
	var D = $(this.targetWindow.document).find("#" + this.id).width();
	var F = $(this.targetWindow.document).find("#" + this.id).height();
	var C = $(this.targetWindow).width();
	var A = $(this.targetWindow).height();
	if (this.event) {
		E = $("#" + this.targetId).offset().left;
		B = $("#" + this.targetId).offset().top + $("#" + this.targetId).height()
	} else {
		E = this.openPoint[0];
		B = this.openPoint[1]
	}
	if ((this.direction.substr(0, 1) == "T") || (this.direction.substr(0, 1) == "B")) {
		if (E + D > C) {
			this.direction = this.direction.substr(0, 1) + "R";
			this.left = E - D
		} else {
			this.left = E
		}
		if (B + F > A - 5) {
			this.direction = "B" + this.direction.substr(1);
			this.top = B - F
		} else {
			this.top = B + 5
		}
	} else {
		if (E + D > C) {
			this.direction = "R" + this.direction.substr(1);
			this.left = E - D
		} else {
			this.left = E
		}
		if (B + F > A) {
			this.direction = this.direction.substr(0, 1) + "B";
			this.top = B - F
		} else {
			this.top = B
		}
	}
	this.setDirection(this.direction)
};
MxtToolTip.prototype.setPoint = function (A, B) {
	this.left = A;
	this.top = B;
	this.getPD();
	$(this.targetWindow.document).find("#" + this.id).css({
		left: this.left + "px",
		top: this.top + "px"
	})
};
MxtToolTip.prototype.setDirection = function (B) {
	var C = $(this.targetWindow.document).find("#" + this.id + " .tooltip_em");
	var A = "";
	switch (B) {
	case "TL":
		A = "0 -166px";
		C.css({
			left: "",
			top: "-5px",
			right: "",
			bottom: ""
		});
		break;
	case "TR":
		A = "0 -166px";
		C.css({
			left: "",
			top: "-5px",
			right: "10px",
			bottom: ""
		});
		break;
	case "BL":
		A = "0 -160px";
		C.css({
			left: "",
			top: "",
			right: "",
			bottom: "-5px"
		});
		break;
	case "BR":
		A = "0 -160px";
		C.css({
			left: "",
			top: "",
			right: "10px",
			bottom: "-5px"
		});
		break;
	case "LT":
		A = "-22px -160px";
		C.css({
			left: "-5px",
			top: "",
			right: "",
			bottom: "",
			width: "6px",
			height: "11px"
		});
		break;
	case "LB":
		A = "-22px -160px";
		C.css({
			left: "-5px",
			top: "",
			right: "",
			bottom: "10px",
			width: "6px",
			height: "11px"
		});
		break;
	case "RT":
		A = "-16px -160px";
		C.css({
			left: "",
			top: "",
			right: "-5px",
			bottom: "",
			width: "6px",
			height: "11px"
		});
		break;
	case "RB":
		A = "-16px -160px";
		C.css({
			left: "",
			top: "",
			right: "-5px",
			bottom: "10px",
			width: "6px",
			height: "11px"
		});
		break
	}
	C.css({
		"background-position": A
	})
};
MxtToolTip.prototype.setHtml = function (A) {
	if (A.id) {
		if (this.showHtmlID != null) {
			$(this.targetWindow.document).find("#" + this.showHtmlID).clone(true).appendTo("#" + this.id + "_area");
			$("#" + this.showHtmlID).unwrap()
		}
		this.showHtmlID = A.id;
		$("#" + this.showHtmlID).wrap("<div id='" + this.showHtmlID + "_area'></div>");
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").empty().append($("#" + this.showHtmlID).clone(true));
		$("#" + this.showHtmlID + "_area").empty()
	}
	if (A.text) {
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html(A.text)
	}
};
MxtToolTip.prototype.close = function () {
	$(this.targetWindow.document).find("#" + this.showHtmlID).clone(true).appendTo("#" + this.id + "_area");
	$("#" + this.showHtmlID).unwrap();
	$(this.targetWindow.document).find("#" + this.id).remove()
};
MxtToolTip.prototype.show = function () {
	$(this.targetWindow.document).find("#" + this.id).show()
};
MxtToolTip.prototype.hide = function () {
	$(this.targetWindow.document).find("#" + this.id).hide()
};
function MxtTip(A) {
	this.settings = {
		id: "MxtTip" + Math.floor(Math.random() * 100000000),
		targetId: null,
		top: 0,
		left: 0,
		keepTime: 2000,
		autoShow: true,
		autoClose: true,
		offsetTop: 0,
		offsetLeft: 0,
		checkPosition: true,
		color: "#463900",
		background: "#FDF0A4",
		content: "\u9700\u8981\u4f60\u7ed9\u6211\u6307\u5b9a\u5185\u5bb9,\u4eb2~",
		beforeShowCallBack: function () {},
		callBack: function () {}
	};
	$.extend(this.settings, A);
	this.init()
}
MxtTip.prototype.init = function () {
	var E = this;
	var C = "";
	C += "<div id='" + E.settings.id + "' class='MxtTip' style='display:none;position:absolute;z-index:10000;left:0;top:0; background:" + E.settings.background + ";color:" + E.settings.color + ";'><div class='MxtTip_content' style='padding: 5px 10px;font-size:12px;'>" + E.settings.content + "<em class='close ico16 close_16' style='display:none;'></em></div></div>";
	$("body").append(C);
	E.myObj = $("#" + E.settings.id);
	if (E.settings.targetId) {
		var A = E.myObj.width();
		var G = $("#" + E.settings.targetId);
		var D = G.width() == null ? D = document.body.clientWidth : G.width();
		var H,
		I;
		var B = G.length ? G.offset().top : 0;
		var F = G.length ? G.offset().left : 0;
		H = B;
		I = F * 1 + (D - A) / 2;
		E.setPosition({
			top: H,
			left: I
		})
	} else {
		if (E.settings.top && E.settings.left) {
			E.setPosition({
				top: E.settings.top,
				left: E.settings.left
			})
		}
	}
	this.mouserHander();
	if (E.settings.autoShow) {
		E.show()
	}
};
MxtTip.prototype.setPosition = function (A) {
	var D = this;
	var C = A.top * 1 + D.settings.offsetTop;
	var B = A.left * 1 + D.settings.offsetLeft;
	if (D.settings.checkPosition) {
		C = C >= 0 ? C : 0;
		B = B >= 0 ? B : 0
	}
	D.myObj.css({
		top: C + "px",
		left: B + "px"
	})
};
MxtTip.prototype.mouserHander = function () {};
MxtTip.prototype.show = function () {
	var A = this;
	A.settings.beforeShowCallBack();
	A.myObj.fadeIn("fast");
	setTimeout(function () {
		A.close()
	}, A.settings.keepTime)
};
MxtTip.prototype.close = function () {
	var A = this;
	A.myObj.fadeOut("fast", function () {
		A.myObj.remove();
		A.settings.callBack()
	})
};
(function ($) {
	var settings = {},
	roots = {},
	caches = {},
	zId = 0,
	_consts = {
		event: {
			NODECREATED: "ztree_nodeCreated",
			CLICK: "ztree_click",
			EXPAND: "ztree_expand",
			COLLAPSE: "ztree_collapse",
			ASYNC_SUCCESS: "ztree_async_success",
			ASYNC_ERROR: "ztree_async_error"
		},
		id: {
			A: "_a",
			ICON: "_ico",
			SPAN: "_span",
			SWITCH: "_switch",
			UL: "_ul"
		},
		line: {
			ROOT: "root",
			ROOTS: "roots",
			CENTER: "center",
			BOTTOM: "bottom",
			NOLINE: "noline",
			LINE: "line"
		},
		folder: {
			OPEN: "open",
			CLOSE: "close",
			DOCU: "docu"
		},
		node: {
			CURSELECTED: "curSelectedNode"
		}
	},
	_setting = {
		treeId: "",
		treeObj: null,
		view: {
			addDiyDom: null,
			autoCancelSelected: true,
			dblClickExpand: true,
			expandSpeed: "fast",
			fontCss: {},
			nameIsHTML: false,
			selectedMulti: true,
			showIcon: true,
			showLine: true,
			showTitle: true
		},
		data: {
			key: {
				children: "children",
				name: "name",
				title: "",
				url: "url"
			},
			simpleData: {
				enable: false,
				idKey: "id",
				pIdKey: "pId",
				rootPId: null
			},
			keep: {
				parent: false,
				leaf: false
			}
		},
		async: {
			enable: false,
			contentType: "application/x-www-form-urlencoded",
			type: "post",
			dataType: "text",
			url: "",
			autoParam: [],
			otherParam: [],
			dataFilter: null
		},
		callback: {
			beforeAsync: null,
			beforeClick: null,
			beforeRightClick: null,
			beforeMouseDown: null,
			beforeMouseUp: null,
			beforeExpand: null,
			beforeCollapse: null,
			beforeRemove: null,
			onAsyncError: null,
			onAsyncSuccess: null,
			onNodeCreated: null,
			onClick: null,
			onRightClick: null,
			onMouseDown: null,
			onMouseUp: null,
			onExpand: null,
			onCollapse: null,
			onRemove: null
		}
	},
	_initRoot = function (setting) {
		var r = data.getRoot(setting);
		if (!r) {
			r = {};
			data.setRoot(setting, r)
		}
		r.children = [];
		r.expandTriggerFlag = false;
		r.curSelectedList = [];
		r.noSelection = true;
		r.createdNodes = []
	},
	_initCache = function (setting) {
		var c = data.getCache(setting);
		if (!c) {
			c = {};
			data.setCache(setting, c)
		}
		c.nodes = [];
		c.doms = []
	},
	_bindEvent = function (setting) {
		var o = setting.treeObj,
		c = consts.event;
		o.unbind(c.NODECREATED);
		o.bind(c.NODECREATED, function (event, treeId, node) {
			tools.apply(setting.callback.onNodeCreated, [event, treeId, node])
		});
		o.unbind(c.CLICK);
		o.bind(c.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			tools.apply(setting.callback.onClick, [srcEvent, treeId, node, clickFlag])
		});
		o.unbind(c.EXPAND);
		o.bind(c.EXPAND, function (event, treeId, node) {
			tools.apply(setting.callback.onExpand, [event, treeId, node])
		});
		o.unbind(c.COLLAPSE);
		o.bind(c.COLLAPSE, function (event, treeId, node) {
			tools.apply(setting.callback.onCollapse, [event, treeId, node])
		});
		o.unbind(c.ASYNC_SUCCESS);
		o.bind(c.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			tools.apply(setting.callback.onAsyncSuccess, [event, treeId, node, msg])
		});
		o.unbind(c.ASYNC_ERROR);
		o.bind(c.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			tools.apply(setting.callback.onAsyncError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown])
		})
	},
	_eventProxy = function (event) {
		var target = event.target,
		setting = settings[event.data.treeId],
		tId = "",
		node = null,
		nodeEventType = "",
		treeEventType = "",
		nodeEventCallback = null,
		treeEventCallback = null,
		tmp = null;
		if (tools.eqs(event.type, "mousedown")) {
			treeEventType = "mousedown"
		} else {
			if (tools.eqs(event.type, "mouseup")) {
				treeEventType = "mouseup"
			} else {
				if (tools.eqs(event.type, "contextmenu")) {
					treeEventType = "contextmenu"
				} else {
					if (tools.eqs(event.type, "click")) {
						if (tools.eqs(target.tagName, "span") && target.getAttribute("treeNode" + consts.id.SWITCH) !== null) {
							tId = target.parentNode.id;
							nodeEventType = "switchNode"
						} else {
							tmp = tools.getMDom(setting, target, [{
											tagName: "a",
											attrName: "treeNode" + consts.id.A
										}
									]);
							if (tmp) {
								tId = tmp.parentNode.id;
								nodeEventType = "clickNode"
							}
						}
					} else {
						if (tools.eqs(event.type, "dblclick")) {
							treeEventType = "dblclick";
							tmp = tools.getMDom(setting, target, [{
											tagName: "a",
											attrName: "treeNode" + consts.id.A
										}
									]);
							if (tmp) {
								tId = tmp.parentNode.id;
								nodeEventType = "switchNode"
							}
						}
					}
				}
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = tools.getMDom(setting, target, [{
							tagName: "a",
							attrName: "treeNode" + consts.id.A
						}
					]);
			if (tmp) {
				tId = tmp.parentNode.id
			}
		}
		if (tId.length > 0) {
			node = data.getNodeCache(setting, tId);
			switch (nodeEventType) {
			case "switchNode":
				if (!node.isParent) {
					nodeEventType = ""
				} else {
					if (tools.eqs(event.type, "click") || (tools.eqs(event.type, "dblclick") && tools.apply(setting.view.dblClickExpand, [setting.treeId, node], setting.view.dblClickExpand))) {
						nodeEventCallback = handler.onSwitchNode
					} else {
						nodeEventType = ""
					}
				}
				break;
			case "clickNode":
				nodeEventCallback = handler.onClickNode;
				break
			}
		}
		switch (treeEventType) {
		case "mousedown":
			treeEventCallback = handler.onZTreeMousedown;
			break;
		case "mouseup":
			treeEventCallback = handler.onZTreeMouseup;
			break;
		case "dblclick":
			treeEventCallback = handler.onZTreeDblclick;
			break;
		case "contextmenu":
			treeEventCallback = handler.onZTreeContextmenu;
			break
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	_initNode = function (setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!n) {
			return
		}
		var childKey = setting.data.key.children;
		n.level = level;
		n.tId = setting.treeId + "_" + (++zId);
		n.parentTId = parentNode ? parentNode.tId : null;
		if (n[childKey] && n[childKey].length > 0) {
			if (typeof n.open == "string") {
				n.open = tools.eqs(n.open, "true")
			}
			n.open = !!n.open;
			n.isParent = true;
			n.zAsync = true
		} else {
			n.open = false;
			if (typeof n.isParent == "string") {
				n.isParent = tools.eqs(n.isParent, "true")
			}
			n.isParent = !!n.isParent;
			n.zAsync = !n.isParent
		}
		n.isFirstNode = isFirstNode;
		n.isLastNode = isLastNode;
		n.getParentNode = function () {
			return data.getNodeCache(setting, n.parentTId)
		};
		n.getPreNode = function () {
			return data.getPreNode(setting, n)
		};
		n.getNextNode = function () {
			return data.getNextNode(setting, n)
		};
		n.isAjaxing = false;
		data.fixPIdKeyValue(setting, n)
	},
	_init = {
		bind: [_bindEvent],
		caches: [_initCache],
		nodes: [_initNode],
		proxys: [_eventProxy],
		roots: [_initRoot],
		beforeA: [],
		afterA: [],
		innerBeforeA: [],
		innerAfterA: [],
		zTreeTools: []
	},
	data = {
		addNodeCache: function (setting, node) {
			data.getCache(setting).nodes[node.tId] = node
		},
		addAfterA: function (afterA) {
			_init.afterA.push(afterA)
		},
		addBeforeA: function (beforeA) {
			_init.beforeA.push(beforeA)
		},
		addInnerAfterA: function (innerAfterA) {
			_init.innerAfterA.push(innerAfterA)
		},
		addInnerBeforeA: function (innerBeforeA) {
			_init.innerBeforeA.push(innerBeforeA)
		},
		addInitBind: function (bindEvent) {
			_init.bind.push(bindEvent)
		},
		addInitCache: function (initCache) {
			_init.caches.push(initCache)
		},
		addInitNode: function (initNode) {
			_init.nodes.push(initNode)
		},
		addInitProxy: function (initProxy) {
			_init.proxys.push(initProxy)
		},
		addInitRoot: function (initRoot) {
			_init.roots.push(initRoot)
		},
		addNodesData: function (setting, parentNode, nodes) {
			var childKey = setting.data.key.children;
			if (!parentNode[childKey]) {
				parentNode[childKey] = []
			}
			if (parentNode[childKey].length > 0) {
				parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
				view.setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1])
			}
			parentNode.isParent = true;
			parentNode[childKey] = parentNode[childKey].concat(nodes)
		},
		addSelectedNode: function (setting, node) {
			var root = data.getRoot(setting);
			if (!data.isSelectedNode(setting, node)) {
				root.curSelectedList.push(node)
			}
		},
		addCreatedNode: function (setting, node) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				root.createdNodes.push(node)
			}
		},
		addZTreeTools: function (zTreeTools) {
			_init.zTreeTools.push(zTreeTools)
		},
		exSetting: function (s) {
			$.extend(true, _setting, s)
		},
		fixPIdKeyValue: function (setting, node) {
			if (setting.data.simpleData.enable) {
				node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId
			}
		},
		getAfterA: function (setting, node, array) {
			for (var i = 0, j = _init.afterA.length; i < j; i++) {
				_init.afterA[i].apply(this, arguments)
			}
		},
		getBeforeA: function (setting, node, array) {
			for (var i = 0, j = _init.beforeA.length; i < j; i++) {
				_init.beforeA[i].apply(this, arguments)
			}
		},
		getInnerAfterA: function (setting, node, array) {
			for (var i = 0, j = _init.innerAfterA.length; i < j; i++) {
				_init.innerAfterA[i].apply(this, arguments)
			}
		},
		getInnerBeforeA: function (setting, node, array) {
			for (var i = 0, j = _init.innerBeforeA.length; i < j; i++) {
				_init.innerBeforeA[i].apply(this, arguments)
			}
		},
		getCache: function (setting) {
			return caches[setting.treeId]
		},
		getNextNode: function (setting, node) {
			if (!node) {
				return null
			}
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			if (node.isLastNode) {
				return null
			} else {
				if (node.isFirstNode) {
					return p[childKey][1]
				} else {
					for (var i = 1, l = p[childKey].length - 1; i < l; i++) {
						if (p[childKey][i] === node) {
							return p[childKey][i + 1]
						}
					}
				}
			}
			return null
		},
		getNodeByParam: function (setting, nodes, key, value) {
			if (!nodes || !key) {
				return null
			}
			var childKey = setting.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					return nodes[i]
				}
				var tmp = data.getNodeByParam(setting, nodes[i][childKey], key, value);
				if (tmp) {
					return tmp
				}
			}
			return null
		},
		getNodeCache: function (setting, tId) {
			if (!tId) {
				return null
			}
			var n = caches[setting.treeId].nodes[tId];
			return n ? n : null
		},
		getNodes: function (setting) {
			return data.getRoot(setting)[setting.data.key.children]
		},
		getNodesByParam: function (setting, nodes, key, value) {
			if (!nodes || !key) {
				return []
			}
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					result.push(nodes[i])
				}
				result = result.concat(data.getNodesByParam(setting, nodes[i][childKey], key, value))
			}
			return result
		},
		getNodesByParamFuzzy: function (setting, nodes, key, value) {
			if (!nodes || !key) {
				return []
			}
			var childKey = setting.data.key.children,
			result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (typeof nodes[i][key] == "string" && nodes[i][key].indexOf(value) > -1) {
					result.push(nodes[i])
				}
				result = result.concat(data.getNodesByParamFuzzy(setting, nodes[i][childKey], key, value))
			}
			return result
		},
		getNodesByFilter: function (setting, nodes, filter, isSingle) {
			if (!nodes) {
				return (isSingle ? null : [])
			}
			var childKey = setting.data.key.children,
			result = isSingle ? null : [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (tools.apply(filter, [nodes[i]], false)) {
					if (isSingle) {
						return nodes[i]
					}
					result.push(nodes[i])
				}
				var tmpResult = data.getNodesByFilter(setting, nodes[i][childKey], filter, isSingle);
				if (isSingle && !!tmpResult) {
					return tmpResult
				}
				result = isSingle ? tmpResult : result.concat(tmpResult)
			}
			return result
		},
		getPreNode: function (setting, node) {
			if (!node) {
				return null
			}
			var childKey = setting.data.key.children,
			p = node.parentTId ? node.getParentNode() : data.getRoot(setting);
			if (node.isFirstNode) {
				return null
			} else {
				if (node.isLastNode) {
					return p[childKey][p[childKey].length - 2]
				} else {
					for (var i = 1, l = p[childKey].length - 1; i < l; i++) {
						if (p[childKey][i] === node) {
							return p[childKey][i - 1]
						}
					}
				}
			}
			return null
		},
		getRoot: function (setting) {
			return setting ? roots[setting.treeId] : null
		},
		getSetting: function (treeId) {
			return settings[treeId]
		},
		getSettings: function () {
			return settings
		},
		getTitleKey: function (setting) {
			return setting.data.key.title === "" ? setting.data.key.name : setting.data.key.title
		},
		getZTreeTools: function (treeId) {
			var r = this.getRoot(this.getSetting(treeId));
			return r ? r.treeTools : null
		},
		initCache: function (setting) {
			for (var i = 0, j = _init.caches.length; i < j; i++) {
				_init.caches[i].apply(this, arguments)
			}
		},
		initNode: function (setting, level, node, parentNode, preNode, nextNode) {
			for (var i = 0, j = _init.nodes.length; i < j; i++) {
				_init.nodes[i].apply(this, arguments)
			}
		},
		initRoot: function (setting) {
			for (var i = 0, j = _init.roots.length; i < j; i++) {
				_init.roots[i].apply(this, arguments)
			}
		},
		isSelectedNode: function (setting, node) {
			var root = data.getRoot(setting);
			for (var i = 0, j = root.curSelectedList.length; i < j; i++) {
				if (node === root.curSelectedList[i]) {
					return true
				}
			}
			return false
		},
		removeNodeCache: function (setting, node) {
			var childKey = setting.data.key.children;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					arguments.callee(setting, node[childKey][i])
				}
			}
			delete data.getCache(setting).nodes[node.tId]
		},
		removeSelectedNode: function (setting, node) {
			var root = data.getRoot(setting);
			for (var i = 0, j = root.curSelectedList.length; i < j; i++) {
				if (node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i].tId)) {
					root.curSelectedList.splice(i, 1);
					i--;
					j--
				}
			}
		},
		setCache: function (setting, cache) {
			caches[setting.treeId] = cache
		},
		setRoot: function (setting, root) {
			roots[setting.treeId] = root
		},
		setZTreeTools: function (setting, zTreeTools) {
			for (var i = 0, j = _init.zTreeTools.length; i < j; i++) {
				_init.zTreeTools[i].apply(this, arguments)
			}
		},
		transformToArrayFormat: function (setting, nodes) {
			if (!nodes) {
				return []
			}
			var childKey = setting.data.key.children,
			r = [];
			if (tools.isArray(nodes)) {
				for (var i = 0, l = nodes.length; i < l; i++) {
					r.push(nodes[i]);
					if (nodes[i][childKey]) {
						r = r.concat(data.transformToArrayFormat(setting, nodes[i][childKey]))
					}
				}
			} else {
				r.push(nodes);
				if (nodes[childKey]) {
					r = r.concat(data.transformToArrayFormat(setting, nodes[childKey]))
				}
			}
			return r
		},
		transformTozTreeFormat: function (setting, sNodes) {
			var i,
			l,
			key = setting.data.simpleData.idKey,
			parentKey = setting.data.simpleData.pIdKey,
			childKey = setting.data.key.children;
			if (!key || key == "" || !sNodes) {
				return []
			}
			if (tools.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i = 0, l = sNodes.length; i < l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i]
				}
				for (i = 0, l = sNodes.length; i < l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey]) {
							tmpMap[sNodes[i][parentKey]][childKey] = []
						}
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i])
					} else {
						r.push(sNodes[i])
					}
				}
				return r
			} else {
				return [sNodes]
			}
		}
	},
	event = {
		bindEvent: function (setting) {
			for (var i = 0, j = _init.bind.length; i < j; i++) {
				_init.bind[i].apply(this, arguments)
			}
		},
		bindTree: function (setting) {
			var eventParam = {
				treeId: setting.treeId
			},
			o = setting.treeObj;
			o.unbind("click", event.proxy);
			o.bind("click", eventParam, event.proxy);
			o.unbind("dblclick", event.proxy);
			o.bind("dblclick", eventParam, event.proxy);
			o.unbind("mouseover", event.proxy);
			o.bind("mouseover", eventParam, event.proxy);
			o.unbind("mouseout", event.proxy);
			o.bind("mouseout", eventParam, event.proxy);
			o.unbind("mousedown", event.proxy);
			o.bind("mousedown", eventParam, event.proxy);
			o.unbind("mouseup", event.proxy);
			o.bind("mouseup", eventParam, event.proxy);
			o.unbind("contextmenu", event.proxy);
			o.bind("contextmenu", eventParam, event.proxy)
		},
		doProxy: function (e) {
			var results = [];
			for (var i = 0, j = _init.proxys.length; i < j; i++) {
				var proxyResult = _init.proxys[i].apply(this, arguments);
				results.push(proxyResult);
				if (proxyResult.stop) {
					break
				}
			}
			return results
		},
		proxy: function (e) {
			var setting = data.getSetting(e.data.treeId);
			if (!tools.uCanDo(setting, e)) {
				return true
			}
			var results = event.doProxy(e),
			r = true,
			x = false;
			for (var i = 0, l = results.length; i < l; i++) {
				var proxyResult = results[i];
				if (proxyResult.nodeEventCallback) {
					x = true;
					r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r
				}
				if (proxyResult.treeEventCallback) {
					x = true;
					r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r
				}
			}
			try {
				if (x && $("input:focus").length == 0) {
					tools.noSel(setting)
				}
			} catch (e) {}
			return r
		}
	},
	handler = {
		onSwitchNode: function (event, node) {
			var setting = settings[event.data.treeId];
			if (node.open) {
				if (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) {
					return true
				}
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node)
			} else {
				if (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) {
					return true
				}
				data.getRoot(setting).expandTriggerFlag = true;
				view.switchNode(setting, node)
			}
			return true
		},
		onClickNode: function (event, node) {
			var setting = settings[event.data.treeId],
			clickFlag = ((setting.view.autoCancelSelected && event.ctrlKey) && data.isSelectedNode(setting, node)) ? 0 : (setting.view.autoCancelSelected && event.ctrlKey && setting.view.selectedMulti) ? 2 : 1;
			if (tools.apply(setting.callback.beforeClick, [setting.treeId, node, clickFlag], true) == false) {
				return true
			}
			if (clickFlag === 0) {
				view.cancelPreSelectedNode(setting, node)
			} else {
				view.selectNode(setting, node, clickFlag === 2)
			}
			setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]);
			return true
		},
		onZTreeMousedown: function (event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeMouseDown, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseDown, [event, setting.treeId, node])
			}
			return true
		},
		onZTreeMouseup: function (event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeMouseUp, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onMouseUp, [event, setting.treeId, node])
			}
			return true
		},
		onZTreeDblclick: function (event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeDblClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onDblClick, [event, setting.treeId, node])
			}
			return true
		},
		onZTreeContextmenu: function (event, node) {
			var setting = settings[event.data.treeId];
			if (tools.apply(setting.callback.beforeRightClick, [setting.treeId, node], true)) {
				tools.apply(setting.callback.onRightClick, [event, setting.treeId, node])
			}
			return (typeof setting.callback.onRightClick) != "function"
		}
	},
	tools = {
		apply: function (fun, param, defaultValue) {
			if ((typeof fun) == "function") {
				return fun.apply(zt, param ? param : [])
			}
			return defaultValue
		},
		canAsync: function (setting, node) {
			var childKey = setting.data.key.children;
			return (setting.async.enable && node && node.isParent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)))
		},
		clone: function (jsonObj) {
			var buf;
			if (jsonObj instanceof Array) {
				buf = [];
				var i = jsonObj.length;
				while (i--) {
					buf[i] = arguments.callee(jsonObj[i])
				}
				return buf
			} else {
				if (typeof jsonObj == "function") {
					return jsonObj
				} else {
					if (jsonObj instanceof Object) {
						buf = {};
						for (var k in jsonObj) {
							buf[k] = arguments.callee(jsonObj[k])
						}
						return buf
					} else {
						return jsonObj
					}
				}
			}
		},
		eqs: function (str1, str2) {
			return str1.toLowerCase() === str2.toLowerCase()
		},
		isArray: function (arr) {
			return Object.prototype.toString.apply(arr) === "[object Array]"
		},
		getMDom: function (setting, curDom, targetExpr) {
			if (!curDom) {
				return null
			}
			while (curDom && curDom.id !== setting.treeId) {
				for (var i = 0, l = targetExpr.length; curDom.tagName && i < l; i++) {
					if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
						return curDom
					}
				}
				curDom = curDom.parentNode
			}
			return null
		},
		noSel: function (setting) {
			var r = data.getRoot(setting);
			if (r.noSelection) {
				try {
					window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty()
				} catch (e) {}
			}
		},
		uCanDo: function (setting, e) {
			return true
		}
	},
	view = {
		addNodes: function (setting, parentNode, newNodes, isSilent) {
			if (setting.data.keep.leaf && parentNode && !parentNode.isParent) {
				return
			}
			if (!tools.isArray(newNodes)) {
				newNodes = [newNodes]
			}
			if (setting.data.simpleData.enable) {
				newNodes = data.transformTozTreeFormat(setting, newNodes)
			}
			if (parentNode) {
				var target_switchObj = $("#" + parentNode.tId + consts.id.SWITCH),
				target_icoObj = $("#" + parentNode.tId + consts.id.ICON),
				target_ulObj = $("#" + parentNode.tId + consts.id.UL);
				if (!parentNode.open) {
					view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						display: "none"
					})
				}
				data.addNodesData(setting, parentNode, newNodes);
				view.createNodes(setting, parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					view.expandCollapseParentNode(setting, parentNode, true)
				}
			} else {
				data.addNodesData(setting, data.getRoot(setting), newNodes);
				view.createNodes(setting, 0, newNodes, null)
			}
		},
		appendNodes: function (setting, level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) {
				return []
			}
			var html = [],
			childKey = setting.data.key.children,
			nameKey = setting.data.key.name,
			titleKey = data.getTitleKey(setting);
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i],
				tmpPNode = (parentNode) ? parentNode : data.getRoot(setting),
				tmpPChild = tmpPNode[childKey],
				isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
				isLastNode = (i == (nodes.length - 1));
				if (initFlag) {
					data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
					data.addNodeCache(setting, node)
				}
				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					childHtml = view.appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open)
				}
				if (openFlag) {
					var url = view.makeNodeUrl(setting, node),
					fontcss = view.makeNodeFontCss(setting, node),
					fontStyle = [];
					for (var f in fontcss) {
						fontStyle.push(f, ":", fontcss[f], ";")
					}
					html.push("<li id='", node.tId, "' class='level", node.level, "' tabindex='0' hidefocus='true' treenode>", "<span id='", node.tId, consts.id.SWITCH, "' title='' class='", view.makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH, "></span>");
					data.getBeforeA(setting, node, html);
					html.push("<a id='", node.tId, consts.id.A, "' class='level", node.level, "' treeNode", consts.id.A, ' onclick="', (node.click || ""), '" ', ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='", view.makeNodeTarget(node), "' style='", fontStyle.join(""), "'");
					if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && node[titleKey]) {
						html.push("title='", node[titleKey].replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), "'")
					}
					html.push(">");
					data.getInnerBeforeA(setting, node, html);
					var name = setting.view.nameIsHTML ? node[nameKey] : node[nameKey].replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
					html.push("<span id='", node.tId, consts.id.ICON, "' title='' treeNode", consts.id.ICON, " class='", view.makeNodeIcoClass(setting, node), "' style='", view.makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN, "'>", name, "</span>");
					data.getInnerAfterA(setting, node, html);
					html.push("</a>");
					data.getAfterA(setting, node, html);
					if (node.isParent && node.open) {
						view.makeUlHtml(setting, node, html, childHtml.join(""))
					}
					html.push("</li>");
					data.addCreatedNode(setting, node)
				}
			}
			return html
		},
		appendParentULDom: function (setting, node) {
			var html = [],
			nObj = $("#" + node.tId),
			ulObj = $("#" + node.tId + consts.id.UL),
			childKey = setting.data.key.children,
			childHtml = view.appendNodes(setting, node.level + 1, node[childKey], node, false, true);
			view.makeUlHtml(setting, node, html, childHtml.join(""));
			if (!nObj.get(0) && !!node.parentTId) {
				view.appendParentULDom(setting, node.getParentNode());
				nObj = $("#" + node.tId)
			}
			if (ulObj.get(0)) {
				ulObj.remove()
			}
			nObj.append(html.join(""));
			view.createNodeCallback(setting)
		},
		asyncNode: function (setting, node, isSilent, callback) {
			var i,
			l;
			if (node && !node.isParent) {
				tools.apply(callback);
				return false
			} else {
				if (node && node.isAjaxing) {
					return false
				} else {
					if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {
						tools.apply(callback);
						return false
					}
				}
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = $("#" + node.tId + consts.id.ICON);
				icoObj.attr({
					style: "",
					"class": "button ico_loading"
				})
			}
			var isJson = (setting.async.contentType == "application/json"),
			tmpParam = isJson ? "{" : "",
			jTemp = "";
			for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {
				var pKey = setting.async.autoParam[i].split("="),
				spKey = pKey;
				if (pKey.length > 1) {
					spKey = pKey[1];
					pKey = pKey[0]
				}
				if (isJson) {
					jTemp = (typeof node[pKey] == "string") ? '"' : "";
					tmpParam += '"' + spKey + ('":' + jTemp + node[pKey]).replace(/'/g, "\\'") + jTemp + ","
				} else {
					tmpParam += spKey + ("=" + node[pKey]).replace(/&/g, "%26") + "&"
				}
			}
			if (tools.isArray(setting.async.otherParam)) {
				for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[i + 1] == "string") ? '"' : "";
						tmpParam += '"' + setting.async.otherParam[i] + ('":' + jTemp + setting.async.otherParam[i + 1]).replace(/'/g, "\\'") + jTemp + ","
					} else {
						tmpParam += setting.async.otherParam[i] + ("=" + setting.async.otherParam[i + 1]).replace(/&/g, "%26") + "&"
					}
				}
			} else {
				for (var p in setting.async.otherParam) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[p] == "string") ? '"' : "";
						tmpParam += '"' + p + ('":' + jTemp + setting.async.otherParam[p]).replace(/'/g, "\\'") + jTemp + ","
					} else {
						tmpParam += p + ("=" + setting.async.otherParam[p]).replace(/&/g, "%26") + "&"
					}
				}
			}
			if (tmpParam.length > 1) {
				tmpParam = tmpParam.substring(0, tmpParam.length - 1)
			}
			if (isJson) {
				tmpParam += "}"
			}
			$.ajax({
				contentType: setting.async.contentType,
				type: setting.async.type,
				url: tools.apply(setting.async.url, [setting.treeId, node], setting.async.url),
				data: tmpParam,
				dataType: setting.async.dataType,
				success: function (msg) {
					var newNodes = [];
					try {
						if (!msg || msg.length == 0) {
							newNodes = []
						} else {
							if (typeof msg == "string") {
								newNodes = eval("(" + msg + ")")
							} else {
								newNodes = msg
							}
						}
					} catch (err) {}
					if (node) {
						node.isAjaxing = null;
						node.zAsync = true
					}
					view.setNodeLineIcos(setting, node);
					if (newNodes && newNodes != "") {
						newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);
						view.addNodes(setting, node, !!newNodes ? tools.clone(newNodes) : [], !!isSilent)
					} else {
						view.addNodes(setting, node, [], !!isSilent)
					}
					setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
					tools.apply(callback)
				},
				error: function (XMLHttpRequest, textStatus, errorThrown) {
					if (node) {
						node.isAjaxing = null
					}
					view.setNodeLineIcos(setting, node);
					setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown])
				}
			});
			return true
		},
		cancelPreSelectedNode: function (setting, node) {
			var list = data.getRoot(setting).curSelectedList;
			for (var i = 0, j = list.length - 1; j >= i; j--) {
				if (!node || node === list[j]) {
					$("#" + list[j].tId + consts.id.A).removeClass(consts.node.CURSELECTED);
					view.setNodeName(setting, list[j]);
					if (node) {
						data.removeSelectedNode(setting, node);
						break
					}
				}
			}
			if (!node) {
				data.getRoot(setting).curSelectedList = []
			}
		},
		createNodeCallback: function (setting) {
			if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {
				var root = data.getRoot(setting);
				while (root.createdNodes.length > 0) {
					var node = root.createdNodes.shift();
					tools.apply(setting.view.addDiyDom, [setting.treeId, node]);
					if (!!setting.callback.onNodeCreated) {
						setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node])
					}
				}
			}
		},
		createNodes: function (setting, level, nodes, parentNode) {
			if (!nodes || nodes.length == 0) {
				return
			}
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			openFlag = !parentNode || parentNode.open || !!$("#" + parentNode[childKey][0].tId).get(0);
			root.createdNodes = [];
			var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, true, openFlag);
			if (!parentNode) {
				setting.treeObj.append(zTreeHtml.join(""))
			} else {
				var ulObj = $("#" + parentNode.tId + consts.id.UL);
				if (ulObj.get(0)) {
					ulObj.append(zTreeHtml.join(""))
				}
			}
			view.createNodeCallback(setting)
		},
		expandCollapseNode: function (setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			if (!node) {
				tools.apply(callback, []);
				return
			}
			if (root.expandTriggerFlag) {
				var _callback = callback;
				callback = function () {
					if (_callback) {
						_callback()
					}
					if (node.open) {
						setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node])
					} else {
						setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node])
					}
				};
				root.expandTriggerFlag = false
			}
			if (node.open == expandFlag) {
				tools.apply(callback, []);
				return
			}
			if (!node.open && node.isParent && ((!$("#" + node.tId + consts.id.UL).get(0)) || (node[childKey] && node[childKey].length > 0 && !$("#" + node[childKey][0].tId).get(0)))) {
				view.appendParentULDom(setting, node)
			}
			var ulObj = $("#" + node.tId + consts.id.UL),
			switchObj = $("#" + node.tId + consts.id.SWITCH),
			icoObj = $("#" + node.tId + consts.id.ICON);
			if (node.isParent) {
				node.open = !node.open;
				if (node.iconOpen && node.iconClose) {
					icoObj.attr("style", view.makeNodeIcoStyle(setting, node))
				}
				if (node.open) {
					view.replaceSwitchClass(node, switchObj, consts.folder.OPEN);
					view.replaceIcoClass(node, icoObj, consts.folder.OPEN);
					if (animateFlag == false || setting.view.expandSpeed == "") {
						ulObj.show();
						tools.apply(callback, [])
					} else {
						if (node[childKey] && node[childKey].length > 0) {
							ulObj.slideDown(setting.view.expandSpeed, callback)
						} else {
							ulObj.show();
							tools.apply(callback, [])
						}
					}
				} else {
					view.replaceSwitchClass(node, switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(node, icoObj, consts.folder.CLOSE);
					if (animateFlag == false || setting.view.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
						ulObj.hide();
						tools.apply(callback, [])
					} else {
						ulObj.slideUp(setting.view.expandSpeed, callback)
					}
				}
			} else {
				tools.apply(callback, [])
			}
		},
		expandCollapseParentNode: function (setting, node, expandFlag, animateFlag, callback) {
			if (!node) {
				return
			}
			if (!node.parentTId) {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);
				return
			} else {
				view.expandCollapseNode(setting, node, expandFlag, animateFlag)
			}
			if (node.parentTId) {
				view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback)
			}
		},
		expandCollapseSonNode: function (setting, node, expandFlag, animateFlag, callback) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			treeNodes = (node) ? node[childKey] : root[childKey],
			selfAnimateSign = (node) ? false : animateFlag,
			expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;
			data.getRoot(setting).expandTriggerFlag = false;
			if (treeNodes) {
				for (var i = 0, l = treeNodes.length; i < l; i++) {
					if (treeNodes[i]) {
						view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign)
					}
				}
			}
			data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;
			view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback)
		},
		makeNodeFontCss: function (setting, node) {
			var fontCss = tools.apply(setting.view.fontCss, [setting.treeId, node], setting.view.fontCss);
			return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {}
		},
		makeNodeIcoClass: function (setting, node) {
			var icoCss = ["ico"];
			if (!node.isAjaxing) {
				icoCss[0] = (node.iconSkin ? node.iconSkin + "_" : "") + icoCss[0];
				if (node.isParent) {
					icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE)
				} else {
					icoCss.push(consts.folder.DOCU)
				}
			}
			return "button " + icoCss.join("_")
		},
		makeNodeIcoStyle: function (setting, node) {
			var icoStyle = [];
			if (!node.isAjaxing) {
				var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
				if (icon) {
					icoStyle.push("background:url(", icon, ") 0 0 no-repeat;")
				}
				if (setting.view.showIcon == false || !tools.apply(setting.view.showIcon, [setting.treeId, node], true)) {
					icoStyle.push("width:0px;height:0px;")
				}
			}
			return icoStyle.join("")
		},
		makeNodeLineClass: function (setting, node) {
			var lineClass = [];
			if (setting.view.showLine) {
				if (node.level == 0 && node.isFirstNode && node.isLastNode) {
					lineClass.push(consts.line.ROOT)
				} else {
					if (node.level == 0 && node.isFirstNode) {
						lineClass.push(consts.line.ROOTS)
					} else {
						if (node.isLastNode) {
							lineClass.push(consts.line.BOTTOM)
						} else {
							lineClass.push(consts.line.CENTER)
						}
					}
				}
			} else {
				lineClass.push(consts.line.NOLINE)
			}
			if (node.isParent) {
				lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE)
			} else {
				lineClass.push(consts.folder.DOCU)
			}
			return view.makeNodeLineClassEx(node) + lineClass.join("_")
		},
		makeNodeLineClassEx: function (node) {
			return "button level" + node.level + " switch "
		},
		makeNodeTarget: function (node) {
			return (node.target || "_blank")
		},
		makeNodeUrl: function (setting, node) {
			var urlKey = setting.data.key.url;
			return node[urlKey] ? node[urlKey] : null
		},
		makeUlHtml: function (setting, node, html, content) {
			html.push("<ul id='", node.tId, consts.id.UL, "' class='level", node.level, " ", view.makeUlLineClass(setting, node), "' style='display:", (node.open ? "block" : "none"), "'>");
			html.push(content);
			html.push("</ul>")
		},
		makeUlLineClass: function (setting, node) {
			return ((setting.view.showLine && !node.isLastNode) ? consts.line.LINE : "")
		},
		removeChildNodes: function (setting, node) {
			if (!node) {
				return
			}
			var childKey = setting.data.key.children,
			nodes = node[childKey];
			if (!nodes) {
				return
			}
			for (var i = 0, l = nodes.length; i < l; i++) {
				data.removeNodeCache(setting, nodes[i])
			}
			data.removeSelectedNode(setting);
			delete node[childKey];
			if (!setting.data.keep.parent) {
				node.isParent = false;
				node.open = false;
				var tmp_switchObj = $("#" + node.tId + consts.id.SWITCH),
				tmp_icoObj = $("#" + node.tId + consts.id.ICON);
				view.replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);
				$("#" + node.tId + consts.id.UL).remove()
			} else {
				$("#" + node.tId + consts.id.UL).empty()
			}
		},
		removeNode: function (setting, node) {
			var root = data.getRoot(setting),
			childKey = setting.data.key.children,
			parentNode = (node.parentTId) ? node.getParentNode() : root;
			node.isFirstNode = false;
			node.isLastNode = false;
			node.getPreNode = function () {
				return null
			};
			node.getNextNode = function () {
				return null
			};
			$("#" + node.tId).remove();
			data.removeNodeCache(setting, node);
			data.removeSelectedNode(setting, node);
			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i].tId == node.tId) {
					parentNode[childKey].splice(i, 1);
					break
				}
			}
			var tmp_ulObj,
			tmp_switchObj,
			tmp_icoObj;
			if (!setting.data.keep.parent && parentNode[childKey].length < 1) {
				parentNode.isParent = false;
				parentNode.open = false;
				tmp_ulObj = $("#" + parentNode.tId + consts.id.UL);
				tmp_switchObj = $("#" + parentNode.tId + consts.id.SWITCH);
				tmp_icoObj = $("#" + parentNode.tId + consts.id.ICON);
				view.replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);
				view.replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);
				tmp_ulObj.css("display", "none")
			} else {
				if (setting.view.showLine && parentNode[childKey].length > 0) {
					var newLast = parentNode[childKey][parentNode[childKey].length - 1];
					newLast.isLastNode = true;
					newLast.isFirstNode = (parentNode[childKey].length == 1);
					tmp_ulObj = $("#" + newLast.tId + consts.id.UL);
					tmp_switchObj = $("#" + newLast.tId + consts.id.SWITCH);
					tmp_icoObj = $("#" + newLast.tId + consts.id.ICON);
					if (parentNode == root) {
						if (parentNode[childKey].length == 1) {
							view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT)
						} else {
							var tmp_first_switchObj = $("#" + parentNode[childKey][0].tId + consts.id.SWITCH);
							view.replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);
							view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM)
						}
					} else {
						view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM)
					}
					tmp_ulObj.removeClass(consts.line.LINE)
				}
			}
		},
		replaceIcoClass: function (node, obj, newName) {
			if (!obj || node.isAjaxing) {
				return
			}
			var tmpName = obj.attr("class");
			if (tmpName == undefined) {
				return
			}
			var tmpList = tmpName.split("_");
			switch (newName) {
			case consts.folder.OPEN:
			case consts.folder.CLOSE:
			case consts.folder.DOCU:
				tmpList[tmpList.length - 1] = newName;
				break
			}
			obj.attr("class", tmpList.join("_"))
		},
		replaceSwitchClass: function (node, obj, newName) {
			if (!obj) {
				return
			}
			var tmpName = obj.attr("class");
			if (tmpName == undefined) {
				return
			}
			var tmpList = tmpName.split("_");
			switch (newName) {
			case consts.line.ROOT:
			case consts.line.ROOTS:
			case consts.line.CENTER:
			case consts.line.BOTTOM:
			case consts.line.NOLINE:
				tmpList[0] = view.makeNodeLineClassEx(node) + newName;
				break;
			case consts.folder.OPEN:
			case consts.folder.CLOSE:
			case consts.folder.DOCU:
				tmpList[1] = newName;
				break
			}
			obj.attr("class", tmpList.join("_"));
			if (newName !== consts.folder.DOCU) {
				obj.removeAttr("disabled")
			} else {
				obj.attr("disabled", "disabled")
			}
		},
		selectNode: function (setting, node, addFlag) {
			if (!addFlag) {
				view.cancelPreSelectedNode(setting)
			}
			$("#" + node.tId + consts.id.A).addClass(consts.node.CURSELECTED);
			data.addSelectedNode(setting, node)
		},
		setNodeFontCss: function (setting, treeNode) {
			var aObj = $("#" + treeNode.tId + consts.id.A),
			fontCss = view.makeNodeFontCss(setting, treeNode);
			if (fontCss) {
				aObj.css(fontCss)
			}
		},
		setNodeLineIcos: function (setting, node) {
			if (!node) {
				return
			}
			var switchObj = $("#" + node.tId + consts.id.SWITCH),
			ulObj = $("#" + node.tId + consts.id.UL),
			icoObj = $("#" + node.tId + consts.id.ICON),
			ulLine = view.makeUlLineClass(setting, node);
			if (ulLine.length == 0) {
				ulObj.removeClass(consts.line.LINE)
			} else {
				ulObj.addClass(ulLine)
			}
			switchObj.attr("class", view.makeNodeLineClass(setting, node));
			if (node.isParent) {
				switchObj.removeAttr("disabled")
			} else {
				switchObj.attr("disabled", "disabled")
			}
			icoObj.removeAttr("style");
			icoObj.attr("style", view.makeNodeIcoStyle(setting, node));
			icoObj.attr("class", view.makeNodeIcoClass(setting, node))
		},
		setNodeName: function (setting, node) {
			var nameKey = setting.data.key.name,
			titleKey = data.getTitleKey(setting),
			nObj = $("#" + node.tId + consts.id.SPAN);
			nObj.empty();
			if (setting.view.nameIsHTML) {
				nObj.html(node[nameKey])
			} else {
				nObj.text(node[nameKey])
			}
			if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && node[titleKey]) {
				var aObj = $("#" + node.tId + consts.id.A);
				aObj.attr("title", node[titleKey])
			}
		},
		setNodeTarget: function (node) {
			var aObj = $("#" + node.tId + consts.id.A);
			aObj.attr("target", view.makeNodeTarget(node))
		},
		setNodeUrl: function (setting, node) {
			var aObj = $("#" + node.tId + consts.id.A),
			url = view.makeNodeUrl(setting, node);
			if (url == null || url.length == 0) {
				aObj.removeAttr("href")
			} else {
				aObj.attr("href", url)
			}
		},
		switchNode: function (setting, node) {
			if (node.open || !tools.canAsync(setting, node)) {
				view.expandCollapseNode(setting, node, !node.open)
			} else {
				if (setting.async.enable) {
					if (!view.asyncNode(setting, node)) {
						view.expandCollapseNode(setting, node, !node.open);
						return
					}
				} else {
					if (node) {
						view.expandCollapseNode(setting, node, !node.open)
					}
				}
			}
		}
	};
	$.fn.zTree = {
		consts: _consts,
		_z: {
			tools: tools,
			view: view,
			event: event,
			data: data
		},
		getZTreeObj: function (treeId) {
			var o = data.getZTreeTools(treeId);
			return o ? o : null
		},
		init: function (obj, zSetting, zNodes) {
			var setting = tools.clone(_setting);
			$.extend(true, setting, zSetting);
			setting.treeId = obj.attr("id");
			setting.treeObj = obj;
			setting.treeObj.empty();
			settings[setting.treeId] = setting;
			if ($.browser.msie && parseInt($.browser.version) < 7) {
				setting.view.expandSpeed = ""
			}
			data.initRoot(setting);
			var root = data.getRoot(setting),
			childKey = setting.data.key.children;
			zNodes = zNodes ? tools.clone(tools.isArray(zNodes) ? zNodes : [zNodes]) : [];
			if (setting.data.simpleData.enable) {
				root[childKey] = data.transformTozTreeFormat(setting, zNodes)
			} else {
				root[childKey] = zNodes
			}
			data.initCache(setting);
			event.bindTree(setting);
			event.bindEvent(setting);
			var zTreeTools = {
				setting: setting,
				addNodes: function (parentNode, newNodes, isSilent) {
					if (!newNodes) {
						return null
					}
					if (!parentNode) {
						parentNode = null
					}
					if (parentNode && !parentNode.isParent && setting.data.keep.leaf) {
						return null
					}
					var xNewNodes = tools.clone(tools.isArray(newNodes) ? newNodes : [newNodes]);
					function addCallback() {
						view.addNodes(setting, parentNode, xNewNodes, (isSilent == true))
					}
					if (tools.canAsync(setting, parentNode)) {
						view.asyncNode(setting, parentNode, isSilent, addCallback)
					} else {
						addCallback()
					}
					return xNewNodes
				},
				cancelSelectedNode: function (node) {
					view.cancelPreSelectedNode(this.setting, node)
				},
				expandAll: function (expandFlag) {
					expandFlag = !!expandFlag;
					view.expandCollapseSonNode(this.setting, null, expandFlag, true);
					return expandFlag
				},
				expandNode: function (node, expandFlag, sonSign, focus, callbackFlag) {
					if (!node || !node.isParent) {
						return null
					}
					if (expandFlag !== true && expandFlag !== false) {
						expandFlag = !node.open
					}
					callbackFlag = !!callbackFlag;
					if (callbackFlag && expandFlag && (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false)) {
						return null
					} else {
						if (callbackFlag && !expandFlag && (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false)) {
							return null
						}
					}
					if (expandFlag && node.parentTId) {
						view.expandCollapseParentNode(this.setting, node.getParentNode(), expandFlag, false)
					}
					if (expandFlag === node.open && !sonSign) {
						return null
					}
					data.getRoot(setting).expandTriggerFlag = callbackFlag;
					if (sonSign) {
						view.expandCollapseSonNode(this.setting, node, expandFlag, true, function () {
							if (focus !== false) {
								$("#" + node.tId).focus().blur()
							}
						})
					} else {
						node.open = !expandFlag;
						view.switchNode(this.setting, node);
						if (focus !== false) {
							$("#" + node.tId).focus().blur()
						}
					}
					return expandFlag
				},
				getNodes: function () {
					return data.getNodes(this.setting)
				},
				getNodeByParam: function (key, value, parentNode) {
					if (!key) {
						return null
					}
					return data.getNodeByParam(this.setting, parentNode ? parentNode[this.setting.data.key.children] : data.getNodes(this.setting), key, value)
				},
				getNodeByTId: function (tId) {
					return data.getNodeCache(this.setting, tId)
				},
				getNodesByParam: function (key, value, parentNode) {
					if (!key) {
						return null
					}
					return data.getNodesByParam(this.setting, parentNode ? parentNode[this.setting.data.key.children] : data.getNodes(this.setting), key, value)
				},
				getNodesByParamFuzzy: function (key, value, parentNode) {
					if (!key) {
						return null
					}
					return data.getNodesByParamFuzzy(this.setting, parentNode ? parentNode[this.setting.data.key.children] : data.getNodes(this.setting), key, value)
				},
				getNodesByFilter: function (filter, isSingle, parentNode) {
					isSingle = !!isSingle;
					if (!filter || (typeof filter != "function")) {
						return (isSingle ? null : [])
					}
					return data.getNodesByFilter(this.setting, parentNode ? parentNode[this.setting.data.key.children] : data.getNodes(this.setting), filter, isSingle)
				},
				getNodeIndex: function (node) {
					if (!node) {
						return null
					}
					var childKey = setting.data.key.children,
					parentNode = (node.parentTId) ? node.getParentNode() : data.getRoot(this.setting);
					for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
						if (parentNode[childKey][i] == node) {
							return i
						}
					}
					return -1
				},
				getSelectedNodes: function () {
					var r = [],
					list = data.getRoot(this.setting).curSelectedList;
					for (var i = 0, l = list.length; i < l; i++) {
						r.push(list[i])
					}
					return r
				},
				isSelectedNode: function (node) {
					return data.isSelectedNode(this.setting, node)
				},
				reAsyncChildNodes: function (parentNode, reloadType, isSilent) {
					if (!this.setting.async.enable) {
						return
					}
					var isRoot = !parentNode;
					if (isRoot) {
						parentNode = data.getRoot(this.setting)
					}
					if (reloadType == "refresh") {
						parentNode[this.setting.data.key.children] = [];
						if (isRoot) {
							this.setting.treeObj.empty()
						} else {
							var ulObj = $("#" + parentNode.tId + consts.id.UL);
							ulObj.empty()
						}
					}
					view.asyncNode(this.setting, isRoot ? null : parentNode, !!isSilent)
				},
				refresh: function () {
					this.setting.treeObj.empty();
					var root = data.getRoot(this.setting),
					nodes = root[this.setting.data.key.children];
					data.initRoot(this.setting);
					root[this.setting.data.key.children] = nodes;
					data.initCache(this.setting);
					view.createNodes(this.setting, 0, root[this.setting.data.key.children])
				},
				removeChildNodes: function (node) {
					if (!node) {
						return null
					}
					var childKey = setting.data.key.children,
					nodes = node[childKey];
					view.removeChildNodes(setting, node);
					return nodes ? nodes : null
				},
				removeNode: function (node, callbackFlag) {
					if (!node) {
						return
					}
					callbackFlag = !!callbackFlag;
					if (callbackFlag && tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) {
						return
					}
					view.removeNode(setting, node);
					if (callbackFlag) {
						this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node])
					}
				},
				selectNode: function (node, addFlag) {
					if (!node) {
						return
					}
					if (tools.uCanDo(this.setting)) {
						addFlag = setting.view.selectedMulti && addFlag;
						if (node.parentTId) {
							view.expandCollapseParentNode(this.setting, node.getParentNode(), true, false, function () {
								$("#" + node.tId).focus().blur()
							})
						} else {
							$("#" + node.tId).focus().blur()
						}
						view.selectNode(this.setting, node, addFlag)
					}
				},
				transformTozTreeNodes: function (simpleNodes) {
					return data.transformTozTreeFormat(this.setting, simpleNodes)
				},
				transformToArray: function (nodes) {
					return data.transformToArrayFormat(this.setting, nodes)
				},
				updateNode: function (node, checkTypeFlag) {
					if (!node) {
						return
					}
					var nObj = $("#" + node.tId);
					if (nObj.get(0) && tools.uCanDo(this.setting)) {
						view.setNodeName(this.setting, node);
						view.setNodeTarget(node);
						view.setNodeUrl(this.setting, node);
						view.setNodeLineIcos(this.setting, node);
						view.setNodeFontCss(this.setting, node)
					}
				}
			};
			root.treeTools = zTreeTools;
			data.setZTreeTools(setting, zTreeTools);
			if (root[childKey] && root[childKey].length > 0) {
				view.createNodes(setting, 0, root[childKey])
			} else {
				if (setting.async.enable && setting.async.url && setting.async.url !== "") {
					view.asyncNode(setting)
				}
			}
			return zTreeTools
		}
	};
	var zt = $.fn.zTree,
	consts = zt.consts
})(jQuery);
(function (F) {
	var X = {
		event: {
			CHECK: "ztree_check"
		},
		id: {
			CHECK: "_check"
		},
		checkbox: {
			STYLE: "checkbox",
			DEFAULT: "chk",
			DISABLED: "disable",
			FALSE: "false",
			TRUE: "true",
			FULL: "full",
			PART: "part",
			FOCUS: "focus"
		},
		radio: {
			STYLE: "radio",
			TYPE_ALL: "all",
			TYPE_LEVEL: "level"
		}
	},
	L = {
		check: {
			enable: false,
			autoCheckTrigger: false,
			chkStyle: X.checkbox.STYLE,
			nocheckInherit: false,
			radioType: X.radio.TYPE_LEVEL,
			chkboxType: {
				Y: "ps",
				N: "ps"
			}
		},
		data: {
			key: {
				checked: "checked"
			}
		},
		callback: {
			beforeCheck: null,
			onCheck: null
		}
	},
	U = function (Y) {
		var Z = W.getRoot(Y);
		Z.radioCheckedList = []
	},
	D = function (Y) {},
	M = function (Y) {
		var Z = Y.treeObj,
		a = P.event;
		Z.unbind(a.CHECK);
		Z.bind(a.CHECK, function (c, d, b) {
			S.apply(Y.callback.onCheck, [c, d, b])
		})
	},
	N = function (f) {
		var g = f.target,
		i = W.getSetting(f.data.treeId),
		c = "",
		Z = null,
		a = "",
		d = "",
		Y = null,
		b = null;
		if (S.eqs(f.type, "mouseover")) {
			if (i.check.enable && S.eqs(g.tagName, "span") && g.getAttribute("treeNode" + P.id.CHECK) !== null) {
				c = g.parentNode.id;
				a = "mouseoverCheck"
			}
		} else {
			if (S.eqs(f.type, "mouseout")) {
				if (i.check.enable && S.eqs(g.tagName, "span") && g.getAttribute("treeNode" + P.id.CHECK) !== null) {
					c = g.parentNode.id;
					a = "mouseoutCheck"
				}
			} else {
				if (S.eqs(f.type, "click")) {
					if (i.check.enable && S.eqs(g.tagName, "span") && g.getAttribute("treeNode" + P.id.CHECK) !== null) {
						c = g.parentNode.id;
						a = "checkNode"
					}
				}
			}
		}
		if (c.length > 0) {
			Z = W.getNodeCache(i, c);
			switch (a) {
			case "checkNode":
				Y = K.onCheckNode;
				break;
			case "mouseoverCheck":
				Y = K.onMouseoverCheck;
				break;
			case "mouseoutCheck":
				Y = K.onMouseoutCheck;
				break
			}
		}
		var h = {
			stop: false,
			node: Z,
			nodeEventType: a,
			nodeEventCallback: Y,
			treeEventType: d,
			treeEventCallback: b
		};
		return h
	},
	T = function (b, f, e, Y, d, a, c) {
		if (!e) {
			return
		}
		var Z = b.data.key.checked;
		if (typeof e[Z] == "string") {
			e[Z] = S.eqs(e[Z], "true")
		}
		e[Z] = !!e[Z];
		e.checkedOld = e[Z];
		e.nocheck = !!e.nocheck || (b.check.nocheckInherit && Y && !!Y.nocheck);
		e.chkDisabled = !!e.chkDisabled || (Y && !!Y.chkDisabled);
		if (typeof e.halfCheck == "string") {
			e.halfCheck = S.eqs(e.halfCheck, "true")
		}
		e.halfCheck = !!e.halfCheck;
		e.check_Child_State = -1;
		e.check_Focus = false;
		e.getCheckStatus = function () {
			return W.getCheckStatus(b, e)
		};
		if (a) {
			W.makeChkFlag(b, Y)
		}
	},
	A = function (a, c, Z) {
		var Y = a.data.key.checked;
		if (a.check.enable) {
			W.makeChkFlag(a, c);
			if (a.check.chkStyle == P.radio.STYLE && a.check.radioType == P.radio.TYPE_ALL && c[Y]) {
				var b = W.getRoot(a);
				b.radioCheckedList.push(c)
			}
			Z.push("<span ID='", c.tId, P.id.CHECK, "' class='", I.makeChkClass(a, c), "' treeNode", P.id.CHECK, (c.nocheck === true ? " style='display:none;'" : ""), "></span>")
		}
	},
	J = function (a, Z) {
		Z.checkNode = function (f, e, g, d) {
			var b = this.setting.data.key.checked;
			if (f.chkDisabled === true) {
				return
			}
			if (e !== true && e !== false) {
				e = !f[b]
			}
			d = !!d;
			if (f[b] === e && !g) {
				return
			} else {
				if (d && S.apply(this.setting.callback.beforeCheck, [this.setting.treeId, f], true) == false) {
					return
				}
			}
			if (S.uCanDo(this.setting) && this.setting.check.enable && f.nocheck !== true) {
				f[b] = e;
				var c = F("#" + f.tId + P.id.CHECK);
				if (g || this.setting.check.chkStyle === P.radio.STYLE) {
					I.checkNodeRelation(this.setting, f)
				}
				I.setChkClass(this.setting, c, f);
				I.repairParentChkClassWithSelf(this.setting, f);
				if (d) {
					a.treeObj.trigger(P.event.CHECK, [a.treeId, f])
				}
			}
		};
		Z.checkAllNodes = function (b) {
			I.repairAllChk(this.setting, !!b)
		};
		Z.getCheckedNodes = function (c) {
			var b = this.setting.data.key.children;
			c = (c !== false);
			return W.getTreeCheckedNodes(this.setting, W.getRoot(a)[b], c)
		};
		Z.getChangeCheckedNodes = function () {
			var b = this.setting.data.key.children;
			return W.getTreeChangeCheckedNodes(this.setting, W.getRoot(a)[b])
		};
		Z.setChkDisabled = function (c, b) {
			b = !!b;
			I.repairSonChkDisabled(this.setting, c, b);
			if (!b) {
				I.repairParentChkDisabled(this.setting, c, b)
			}
		};
		var Y = Z.updateNode;
		Z.updateNode = function (d, e) {
			if (Y) {
				Y.apply(Z, arguments)
			}
			if (!d || !this.setting.check.enable) {
				return
			}
			var b = F("#" + d.tId);
			if (b.get(0) && S.uCanDo(this.setting)) {
				var c = F("#" + d.tId + P.id.CHECK);
				if (e == true || this.setting.check.chkStyle === P.radio.STYLE) {
					I.checkNodeRelation(this.setting, d)
				}
				I.setChkClass(this.setting, c, d);
				I.repairParentChkClassWithSelf(this.setting, d)
			}
		}
	},
	O = {
		getRadioCheckedList: function (b) {
			var a = W.getRoot(b).radioCheckedList;
			for (var Z = 0, Y = a.length; Z < Y; Z++) {
				if (!W.getNodeCache(b, a[Z].tId)) {
					a.splice(Z, 1);
					Z--;
					Y--
				}
			}
			return a
		},
		getCheckStatus: function (Z, b) {
			if (!Z.check.enable || b.nocheck) {
				return null
			}
			var Y = Z.data.key.checked,
			a = {
				checked: b[Y],
				half: b.halfCheck ? b.halfCheck : (Z.check.chkStyle == P.radio.STYLE ? (b.check_Child_State === 2) : (b[Y] ? (b.check_Child_State > -1 && b.check_Child_State < 2) : (b.check_Child_State > 0)))
			};
			return a
		},
		getTreeCheckedNodes: function (d, a, f, c) {
			if (!a) {
				return []
			}
			var e = d.data.key.children,
			Z = d.data.key.checked;
			c = !c ? [] : c;
			for (var b = 0, Y = a.length; b < Y; b++) {
				if (a[b].nocheck !== true && a[b][Z] == f) {
					c.push(a[b])
				}
				W.getTreeCheckedNodes(d, a[b][e], f, c)
			}
			return c
		},
		getTreeChangeCheckedNodes: function (d, a, c) {
			if (!a) {
				return []
			}
			var e = d.data.key.children,
			Z = d.data.key.checked;
			c = !c ? [] : c;
			for (var b = 0, Y = a.length; b < Y; b++) {
				if (a[b].nocheck !== true && a[b][Z] != a[b].checkedOld) {
					c.push(a[b])
				}
				W.getTreeChangeCheckedNodes(d, a[b][e], c)
			}
			return c
		},
		makeChkFlag: function (h, b) {
			if (!b) {
				return
			}
			var a = h.data.key.children,
			Y = h.data.key.checked,
			d = -1;
			if (b[a]) {
				var Z = false;
				for (var f = 0, c = b[a].length; f < c; f++) {
					var g = b[a][f];
					var e = -1;
					if (h.check.chkStyle == P.radio.STYLE) {
						if (g.nocheck === true) {
							e = g.check_Child_State
						} else {
							if (g.halfCheck === true) {
								e = 2
							} else {
								if (g.nocheck !== true && g[Y]) {
									e = 2
								} else {
									e = g.check_Child_State > 0 ? 2 : 0
								}
							}
						}
						if (e == 2) {
							d = 2;
							break
						} else {
							if (e == 0) {
								d = 0
							}
						}
					} else {
						if (h.check.chkStyle == P.checkbox.STYLE) {
							if (g.nocheck === true) {
								e = g.check_Child_State
							} else {
								if (g.halfCheck === true) {
									e = 1
								} else {
									if (g.nocheck !== true && g[Y]) {
										e = (g.check_Child_State === -1 || g.check_Child_State === 2) ? 2 : 1
									} else {
										e = (g.check_Child_State > 0) ? 1 : 0
									}
								}
							}
							if (e === 1) {
								d = 1;
								break
							} else {
								if (e === 2 && Z && e !== d) {
									d = 1;
									break
								} else {
									if (d === 2 && e > -1 && e < 2) {
										d = 1;
										break
									} else {
										if (e > -1) {
											d = e
										}
									}
								}
							}
							if (!Z) {
								Z = (g.nocheck !== true)
							}
						}
					}
				}
			}
			b.check_Child_State = d
		}
	},
	G = {},
	K = {
		onCheckNode: function (c, b) {
			if (b.chkDisabled === true) {
				return false
			}
			var a = W.getSetting(c.data.treeId),
			Y = a.data.key.checked;
			if (S.apply(a.callback.beforeCheck, [a.treeId, b], true) == false) {
				return true
			}
			b[Y] = !b[Y];
			I.checkNodeRelation(a, b);
			var Z = F("#" + b.tId + P.id.CHECK);
			I.setChkClass(a, Z, b);
			I.repairParentChkClassWithSelf(a, b);
			a.treeObj.trigger(P.event.CHECK, [a.treeId, b]);
			return true
		},
		onMouseoverCheck: function (b, a) {
			if (a.chkDisabled === true) {
				return false
			}
			var Z = W.getSetting(b.data.treeId),
			Y = F("#" + a.tId + P.id.CHECK);
			a.check_Focus = true;
			I.setChkClass(Z, Y, a);
			return true
		},
		onMouseoutCheck: function (b, a) {
			if (a.chkDisabled === true) {
				return false
			}
			var Z = W.getSetting(b.data.treeId),
			Y = F("#" + a.tId + P.id.CHECK);
			a.check_Focus = false;
			I.setChkClass(Z, Y, a);
			return true
		}
	},
	H = {},
	E = {
		checkNodeRelation: function (h, b) {
			var f,
			d,
			c,
			a = h.data.key.children,
			Z = h.data.key.checked,
			Y = P.radio;
			if (h.check.chkStyle == Y.STYLE) {
				var g = W.getRadioCheckedList(h);
				if (b[Z]) {
					if (h.check.radioType == Y.TYPE_ALL) {
						for (d = g.length - 1; d >= 0; d--) {
							f = g[d];
							f[Z] = false;
							g.splice(d, 1);
							I.setChkClass(h, F("#" + f.tId + P.id.CHECK), f);
							if (f.parentTId != b.parentTId) {
								I.repairParentChkClassWithSelf(h, f)
							}
						}
						g.push(b)
					} else {
						var e = (b.parentTId) ? b.getParentNode() : W.getRoot(h);
						for (d = 0, c = e[a].length; d < c; d++) {
							f = e[a][d];
							if (f[Z] && f != b) {
								f[Z] = false;
								I.setChkClass(h, F("#" + f.tId + P.id.CHECK), f)
							}
						}
					}
				} else {
					if (h.check.radioType == Y.TYPE_ALL) {
						for (d = 0, c = g.length; d < c; d++) {
							if (b == g[d]) {
								g.splice(d, 1);
								break
							}
						}
					}
				}
			} else {
				if (b[Z] && (!b[a] || b[a].length == 0 || h.check.chkboxType.Y.indexOf("s") > -1)) {
					I.setSonNodeCheckBox(h, b, true)
				}
				if (!b[Z] && (!b[a] || b[a].length == 0 || h.check.chkboxType.N.indexOf("s") > -1)) {
					I.setSonNodeCheckBox(h, b, false)
				}
				if (b[Z] && h.check.chkboxType.Y.indexOf("p") > -1) {
					I.setParentNodeCheckBox(h, b, true)
				}
				if (!b[Z] && h.check.chkboxType.N.indexOf("p") > -1) {
					I.setParentNodeCheckBox(h, b, false)
				}
			}
		},
		makeChkClass: function (Z, d) {
			var Y = Z.data.key.checked,
			f = P.checkbox,
			b = P.radio,
			e = "";
			if (d.chkDisabled === true) {
				e = f.DISABLED
			} else {
				if (d.halfCheck) {
					e = f.PART
				} else {
					if (Z.check.chkStyle == b.STYLE) {
						e = (d.check_Child_State < 1) ? f.FULL : f.PART
					} else {
						e = d[Y] ? ((d.check_Child_State === 2 || d.check_Child_State === -1) ? f.FULL : f.PART) : ((d.check_Child_State < 1) ? f.FULL : f.PART)
					}
				}
			}
			var a = Z.check.chkStyle + "_" + (d[Y] ? f.TRUE : f.FALSE) + "_" + e;
			a = (d.check_Focus && d.chkDisabled !== true) ? a + "_" + f.FOCUS : a;
			return "button " + f.DEFAULT + " " + a
		},
		repairAllChk: function (c, f) {
			if (c.check.enable && c.check.chkStyle === P.checkbox.STYLE) {
				var a = c.data.key.checked,
				e = c.data.key.children,
				Z = W.getRoot(c);
				for (var b = 0, Y = Z[e].length; b < Y; b++) {
					var d = Z[e][b];
					if (d.nocheck !== true) {
						d[a] = f
					}
					I.setSonNodeCheckBox(c, d, f)
				}
			}
		},
		repairChkClass: function (Z, a) {
			if (!a) {
				return
			}
			W.makeChkFlag(Z, a);
			var Y = F("#" + a.tId + P.id.CHECK);
			I.setChkClass(Z, Y, a)
		},
		repairParentChkClass: function (Z, a) {
			if (!a || !a.parentTId) {
				return
			}
			var Y = a.getParentNode();
			I.repairChkClass(Z, Y);
			I.repairParentChkClass(Z, Y)
		},
		repairParentChkClassWithSelf: function (Y, a) {
			if (!a) {
				return
			}
			var Z = Y.data.key.children;
			if (a[Z] && a[Z].length > 0) {
				I.repairParentChkClass(Y, a[Z][0])
			} else {
				I.repairParentChkClass(Y, a)
			}
		},
		repairSonChkDisabled: function (c, e, b) {
			if (!e) {
				return
			}
			var d = c.data.key.children;
			if (e.chkDisabled != b) {
				e.chkDisabled = b;
				if (e.nocheck !== true) {
					I.repairChkClass(c, e)
				}
			}
			if (e[d]) {
				for (var a = 0, Z = e[d].length; a < Z; a++) {
					var Y = e[d][a];
					I.repairSonChkDisabled(c, Y, b)
				}
			}
		},
		repairParentChkDisabled: function (Z, a, Y) {
			if (!a) {
				return
			}
			if (a.chkDisabled != Y) {
				a.chkDisabled = Y;
				if (a.nocheck !== true) {
					I.repairChkClass(Z, a)
				}
			}
			I.repairParentChkDisabled(Z, a.getParentNode(), Y)
		},
		setChkClass: function (Y, a, Z) {
			if (!a) {
				return
			}
			if (Z.nocheck === true) {
				a.hide()
			} else {
				a.show()
			}
			a.removeClass();
			a.addClass(I.makeChkClass(Y, Z))
		},
		setParentNodeCheckBox: function (j, b, h, e) {
			var a = j.data.key.children,
			Y = j.data.key.checked,
			f = F("#" + b.tId + P.id.CHECK);
			if (!e) {
				e = b
			}
			W.makeChkFlag(j, b);
			if (b.nocheck !== true && b.chkDisabled !== true) {
				b[Y] = h;
				I.setChkClass(j, f, b);
				if (j.check.autoCheckTrigger && b != e && b.nocheck !== true) {
					j.treeObj.trigger(P.event.CHECK, [j.treeId, b])
				}
			}
			if (b.parentTId) {
				var g = true;
				if (!h) {
					var Z = b.getParentNode()[a];
					for (var d = 0, c = Z.length; d < c; d++) {
						if ((Z[d].nocheck !== true && Z[d][Y]) || (Z[d].nocheck === true && Z[d].check_Child_State > 0)) {
							g = false;
							break
						}
					}
				}
				if (g) {
					I.setParentNodeCheckBox(j, b.getParentNode(), h, e)
				}
			}
		},
		setSonNodeCheckBox: function (j, b, h, e) {
			if (!b) {
				return
			}
			var a = j.data.key.children,
			Y = j.data.key.checked,
			f = F("#" + b.tId + P.id.CHECK);
			if (!e) {
				e = b
			}
			var Z = false;
			if (b[a]) {
				for (var d = 0, c = b[a].length; d < c && b.chkDisabled !== true; d++) {
					var g = b[a][d];
					I.setSonNodeCheckBox(j, g, h, e);
					if (g.chkDisabled === true) {
						Z = true
					}
				}
			}
			if (b != W.getRoot(j) && b.chkDisabled !== true) {
				if (Z && b.nocheck !== true) {
					W.makeChkFlag(j, b)
				}
				if (b.nocheck !== true) {
					b[Y] = h;
					if (!Z) {
						b.check_Child_State = (b[a] && b[a].length > 0) ? (h ? 2 : 0) : -1
					}
				} else {
					b.check_Child_State = -1
				}
				I.setChkClass(j, f, b);
				if (j.check.autoCheckTrigger && b != e && b.nocheck !== true) {
					j.treeObj.trigger(P.event.CHECK, [j.treeId, b])
				}
			}
		}
	},
	R = {
		tools: H,
		view: E,
		event: G,
		data: O
	};
	F.extend(true, F.fn.zTree.consts, X);
	F.extend(true, F.fn.zTree._z, R);
	var C = F.fn.zTree,
	S = C._z.tools,
	P = C.consts,
	I = C._z.view,
	W = C._z.data,
	Q = C._z.event;
	W.exSetting(L);
	W.addInitBind(M);
	W.addInitCache(D);
	W.addInitNode(T);
	W.addInitProxy(N);
	W.addInitRoot(U);
	W.addBeforeA(A);
	W.addZTreeTools(J);
	var V = I.createNodes;
	I.createNodes = function (a, b, Z, Y) {
		if (V) {
			V.apply(I, arguments)
		}
		if (!Z) {
			return
		}
		I.repairParentChkClassWithSelf(a, Y)
	};
	var B = I.removeNode;
	I.removeNode = function (Z, a) {
		var Y = a.getParentNode();
		if (B) {
			B.apply(I, arguments)
		}
		if (!a || !Y) {
			return
		}
		I.repairChkClass(Z, Y);
		I.repairParentChkClass(Z, Y)
	}
})(jQuery);
(function (F) {
	var Z = {
		event: {
			DRAG: "ztree_drag",
			DROP: "ztree_drop",
			REMOVE: "ztree_remove",
			RENAME: "ztree_rename"
		},
		id: {
			EDIT: "_edit",
			INPUT: "_input",
			REMOVE: "_remove"
		},
		move: {
			TYPE_INNER: "inner",
			TYPE_PREV: "prev",
			TYPE_NEXT: "next"
		},
		node: {
			CURSELECTED_EDIT: "curSelectedNode_Edit",
			TMPTARGET_TREE: "tmpTargetzTree",
			TMPTARGET_NODE: "tmpTargetNode"
		}
	},
	L = {
		edit: {
			enable: false,
			editNameSelectAll: false,
			showRemoveBtn: true,
			showRenameBtn: true,
			removeTitle: "remove",
			renameTitle: "rename",
			drag: {
				autoExpandTrigger: false,
				isCopy: true,
				isMove: true,
				prev: true,
				next: true,
				inner: true,
				minMoveSize: 5,
				borderMax: 10,
				borderMin: -5,
				maxShowNodeNum: 5,
				autoOpenTime: 500
			}
		},
		view: {
			addHoverDom: null,
			removeHoverDom: null
		},
		callback: {
			beforeDrag: null,
			beforeDragOpen: null,
			beforeDrop: null,
			beforeEditName: null,
			beforeRename: null,
			onDrag: null,
			onDrop: null,
			onRename: null
		}
	},
	V = function (a) {
		var b = X.getRoot(a);
		b.curEditNode = null;
		b.curEditInput = null;
		b.curHoverNode = null;
		b.dragFlag = 0;
		b.dragNodeShowBefore = [];
		b.dragMaskList = new Array();
		b.showHoverDom = true
	},
	C = function (a) {},
	M = function (a) {
		var b = a.treeObj;
		var d = P.event;
		b.unbind(d.RENAME);
		b.bind(d.RENAME, function (c, f, e) {
			T.apply(a.callback.onRename, [c, f, e])
		});
		b.unbind(d.REMOVE);
		b.bind(d.REMOVE, function (c, f, e) {
			T.apply(a.callback.onRemove, [c, f, e])
		});
		b.unbind(d.DRAG);
		b.bind(d.DRAG, function (e, c, g, f) {
			T.apply(a.callback.onDrag, [c, g, f])
		});
		b.unbind(d.DROP);
		b.bind(d.DROP, function (g, f, i, h, j, e, c) {
			T.apply(a.callback.onDrop, [f, i, h, j, e, c])
		})
	},
	N = function (i) {
		var j = i.target,
		m = X.getSetting(i.data.treeId),
		k = i.relatedTarget,
		g = "",
		b = null,
		c = "",
		h = "",
		a = null,
		f = null,
		d = null;
		if (T.eqs(i.type, "mouseover")) {
			d = T.getMDom(m, j, [{
							tagName: "a",
							attrName: "treeNode" + P.id.A
						}
					]);
			if (d) {
				g = d.parentNode.id;
				c = "hoverOverNode"
			}
		} else {
			if (T.eqs(i.type, "mouseout")) {
				d = T.getMDom(m, k, [{
								tagName: "a",
								attrName: "treeNode" + P.id.A
							}
						]);
				if (!d) {
					g = "remove";
					c = "hoverOutNode"
				}
			} else {
				if (T.eqs(i.type, "mousedown")) {
					d = T.getMDom(m, j, [{
									tagName: "a",
									attrName: "treeNode" + P.id.A
								}
							]);
					if (d) {
						g = d.parentNode.id;
						c = "mousedownNode"
					}
				}
			}
		}
		if (g.length > 0) {
			b = X.getNodeCache(m, g);
			switch (c) {
			case "mousedownNode":
				a = K.onMousedownNode;
				break;
			case "hoverOverNode":
				a = K.onHoverOverNode;
				break;
			case "hoverOutNode":
				a = K.onHoverOutNode;
				break
			}
		}
		var l = {
			stop: false,
			node: b,
			nodeEventType: c,
			nodeEventCallback: a,
			treeEventType: h,
			treeEventCallback: f
		};
		return l
	},
	U = function (c, g, f, a, e, b, d) {
		if (!f) {
			return
		}
		f.isHover = false;
		f.editNameFlag = false
	},
	J = function (b, a) {
		a.cancelEditName = function (d) {
			var c = X.getRoot(b),
			e = b.data.key.name,
			f = c.curEditNode;
			if (!c.curEditNode) {
				return
			}
			I.cancelCurEditNode(b, d ? d : f[e])
		};
		a.copyNode = function (g, f, e, h) {
			if (!f) {
				return null
			}
			if (g && !g.isParent && b.data.keep.leaf && e === P.move.TYPE_INNER) {
				return null
			}
			var c = T.clone(f);
			if (!g) {
				g = null;
				e = P.move.TYPE_INNER
			}
			if (e == P.move.TYPE_INNER) {
				function d() {
					I.addNodes(b, g, [c], h)
				}
				if (T.canAsync(b, g)) {
					I.asyncNode(b, g, h, d)
				} else {
					d()
				}
			} else {
				I.addNodes(b, g.parentNode, [c], h);
				I.moveNode(b, g, c, e, false, h)
			}
			return c
		};
		a.editName = function (c) {
			if (!c || !c.tId || c !== X.getNodeCache(b, c.tId)) {
				return
			}
			if (c.parentTId) {
				I.expandCollapseParentNode(b, c.getParentNode(), true)
			}
			I.editNode(b, c)
		};
		a.moveNode = function (e, d, c, g) {
			if (!d) {
				return d
			}
			if (e && !e.isParent && b.data.keep.leaf && c === P.move.TYPE_INNER) {
				return null
			} else {
				if (e && ((d.parentTId == e.tId && c == P.move.TYPE_INNER) || F("#" + d.tId).find("#" + e.tId).length > 0)) {
					return null
				} else {
					if (!e) {
						e = null
					}
				}
			}
			function f() {
				I.moveNode(b, e, d, c, false, g)
			}
			if (T.canAsync(b, e)) {
				I.asyncNode(b, e, g, f)
			} else {
				f()
			}
			return d
		};
		a.setEditable = function (c) {
			b.edit.enable = c;
			return this.refresh()
		}
	},
	O = {
		setSonNodeLevel: function (d, a, f) {
			if (!f) {
				return
			}
			var e = d.data.key.children;
			f.level = (a) ? a.level + 1 : 0;
			if (!f[e]) {
				return
			}
			for (var c = 0, b = f[e].length; c < b; c++) {
				if (f[e][c]) {
					X.setSonNodeLevel(d, f, f[e][c])
				}
			}
		}
	},
	G = {},
	K = {
		onHoverOverNode: function (d, c) {
			var b = X.getSetting(d.data.treeId),
			a = X.getRoot(b);
			if (a.curHoverNode != c) {
				K.onHoverOutNode(d)
			}
			a.curHoverNode = c;
			I.addHoverDom(b, c)
		},
		onHoverOutNode: function (d, c) {
			var b = X.getSetting(d.data.treeId),
			a = X.getRoot(b);
			if (a.curHoverNode && !X.isSelectedNode(b, a.curHoverNode)) {
				I.removeTreeDom(b, a.curHoverNode);
				a.curHoverNode = null
			}
		},
		onMousedownNode: function (o, g) {
			var w,
			t,
			n = X.getSetting(o.data.treeId),
			s = X.getRoot(n);
			if (o.button == 2 || !n.edit.enable || (!n.edit.drag.isCopy && !n.edit.drag.isMove)) {
				return true
			}
			var z = o.target,
			f = X.getRoot(n).curSelectedList,
			p = [];
			if (!X.isSelectedNode(n, g)) {
				p = [g]
			} else {
				for (w = 0, t = f.length; w < t; w++) {
					if (f[w].editNameFlag && T.eqs(z.tagName, "input") && z.getAttribute("treeNode" + P.id.INPUT) !== null) {
						return true
					}
					p.push(f[w]);
					if (p[0].parentTId !== f[w].parentTId) {
						p = [g];
						break
					}
				}
			}
			I.editNodeBlur = true;
			I.cancelCurEditNode(n, null, true);
			var AC = F(document),
			v,
			h,
			x,
			y = false,
			AA = n,
			a,
			e,
			q = null,
			d = null,
			m = null,
			b = P.move.TYPE_INNER,
			u = o.clientX,
			r = o.clientY,
			j = (new Date()).getTime();
			if (T.uCanDo(n)) {
				AC.bind("mousemove", k)
			}
			function k(A0) {
				if (s.dragFlag == 0 && Math.abs(u - A0.clientX) < n.edit.drag.minMoveSize && Math.abs(r - A0.clientY) < n.edit.drag.minMoveSize) {
					return true
				}
				var Av,
				Ar,
				AT,
				Am,
				Ae,
				Al = n.data.key.children;
				T.noSel(n);
				F("body").css("cursor", "pointer");
				if (s.dragFlag == 0) {
					if (T.apply(n.callback.beforeDrag, [n.treeId, p], true) == false) {
						AB(A0);
						return true
					}
					for (Av = 0, Ar = p.length; Av < Ar; Av++) {
						if (Av == 0) {
							s.dragNodeShowBefore = []
						}
						AT = p[Av];
						if (AT.isParent && AT.open) {
							I.expandCollapseNode(n, AT, !AT.open);
							s.dragNodeShowBefore[AT.tId] = true
						} else {
							s.dragNodeShowBefore[AT.tId] = false
						}
					}
					s.dragFlag = 1;
					s.showHoverDom = false;
					T.showIfameMask(n, true);
					var AE = true,
					AH = -1;
					if (p.length > 1) {
						var AR = p[0].parentTId ? p[0].getParentNode()[Al] : X.getNodes(n);
						Ae = [];
						for (Av = 0, Ar = AR.length; Av < Ar; Av++) {
							if (s.dragNodeShowBefore[AR[Av].tId] !== undefined) {
								if (AE && AH > -1 && (AH + 1) !== Av) {
									AE = false
								}
								Ae.push(AR[Av]);
								AH = Av
							}
							if (p.length === Ae.length) {
								p = Ae;
								break
							}
						}
					}
					if (AE) {
						a = p[0].getPreNode();
						e = p[p.length - 1].getNextNode()
					}
					v = F("<ul class='zTreeDragUL'></ul>");
					for (Av = 0, Ar = p.length; Av < Ar; Av++) {
						AT = p[Av];
						AT.editNameFlag = false;
						I.selectNode(n, AT, Av > 0);
						I.removeTreeDom(n, AT);
						Am = F("<li id='" + AT.tId + "_tmp'></li>");
						Am.append(F("#" + AT.tId + P.id.A).clone());
						Am.css("padding", "0");
						Am.children("#" + AT.tId + P.id.A).removeClass(P.node.CURSELECTED);
						v.append(Am);
						if (Av == n.edit.drag.maxShowNodeNum - 1) {
							Am = F("<li id='" + AT.tId + "_moretmp'><a>  ...  </a></li>");
							v.append(Am);
							break
						}
					}
					v.attr("id", p[0].tId + P.id.UL + "_tmp");
					v.addClass(n.treeObj.attr("class"));
					v.appendTo("body");
					h = F("<span class='tmpzTreeMove_arrow'></span>");
					h.attr("id", "zTreeMove_arrow_tmp");
					h.appendTo("body");
					n.treeObj.trigger(P.event.DRAG, [A0, n.treeId, p])
				}
				if (s.dragFlag == 1) {
					if (x && h.attr("id") == A0.target.id && m && (A0.clientX + AC.scrollLeft() + 2) > (F("#" + m + P.id.A, x).offset().left)) {
						var Az = F("#" + m + P.id.A, x);
						A0.target = (Az.length > 0) ? Az.get(0) : A0.target
					} else {
						if (x) {
							x.removeClass(P.node.TMPTARGET_TREE);
							if (m) {
								F("#" + m + P.id.A, x).removeClass(P.node.TMPTARGET_NODE + "_" + P.move.TYPE_PREV).removeClass(P.node.TMPTARGET_NODE + "_" + Z.move.TYPE_NEXT).removeClass(P.node.TMPTARGET_NODE + "_" + Z.move.TYPE_INNER)
							}
						}
					}
					x = null;
					m = null;
					y = false;
					AA = n;
					var Aw = X.getSettings();
					for (var An in Aw) {
						if (Aw[An].treeId && Aw[An].edit.enable && Aw[An].treeId != n.treeId && (A0.target.id == Aw[An].treeId || F(A0.target).parents("#" + Aw[An].treeId).length > 0)) {
							y = true;
							AA = Aw[An]
						}
					}
					var AQ = AC.scrollTop(),
					Ay = AC.scrollLeft(),
					AF = AA.treeObj.offset(),
					AY = AA.treeObj.get(0).scrollHeight,
					Ao = AA.treeObj.get(0).scrollWidth,
					Ax = (A0.clientY + AQ - AF.top),
					Ak = (AA.treeObj.height() + AF.top - A0.clientY - AQ),
					Af = (A0.clientX + Ay - AF.left),
					AP = (AA.treeObj.width() + AF.left - A0.clientX - Ay),
					AS = (Ax < n.edit.drag.borderMax && Ax > n.edit.drag.borderMin),
					A1 = (Ak < n.edit.drag.borderMax && Ak > n.edit.drag.borderMin),
					Ai = (Af < n.edit.drag.borderMax && Af > n.edit.drag.borderMin),
					AN = (AP < n.edit.drag.borderMax && AP > n.edit.drag.borderMin),
					AG = Ax > n.edit.drag.borderMin && Ak > n.edit.drag.borderMin && Af > n.edit.drag.borderMin && AP > n.edit.drag.borderMin,
					Ac = (AS && AA.treeObj.scrollTop() <= 0),
					Ab = (A1 && (AA.treeObj.scrollTop() + AA.treeObj.height() + 10) >= AY),
					AJ = (Ai && AA.treeObj.scrollLeft() <= 0),
					AW = (AN && (AA.treeObj.scrollLeft() + AA.treeObj.width() + 10) >= Ao);
					if (A0.target.id && AA.treeObj.find("#" + A0.target.id).length > 0) {
						var AO = A0.target;
						while (AO && AO.tagName && !T.eqs(AO.tagName, "li") && AO.id != AA.treeId) {
							AO = AO.parentNode
						}
						var AV = true;
						for (Av = 0, Ar = p.length; Av < Ar; Av++) {
							AT = p[Av];
							if (AO.id === AT.tId) {
								AV = false;
								break
							} else {
								if (F("#" + AT.tId).find("#" + AO.id).length > 0) {
									AV = false;
									break
								}
							}
						}
						if (AV) {
							if (A0.target.id && (A0.target.id == (AO.id + P.id.A) || F(A0.target).parents("#" + AO.id + P.id.A).length > 0)) {
								x = F(AO);
								m = AO.id
							}
						}
					}
					AT = p[0];
					if (AG && (A0.target.id == AA.treeId || F(A0.target).parents("#" + AA.treeId).length > 0)) {
						if (!x && (A0.target.id == AA.treeId || Ac || Ab || AJ || AW) && (y || (!y && AT.parentTId))) {
							x = AA.treeObj
						}
						if (AS) {
							AA.treeObj.scrollTop(AA.treeObj.scrollTop() - 10)
						} else {
							if (A1) {
								AA.treeObj.scrollTop(AA.treeObj.scrollTop() + 10)
							}
						}
						if (Ai) {
							AA.treeObj.scrollLeft(AA.treeObj.scrollLeft() - 10)
						} else {
							if (AN) {
								AA.treeObj.scrollLeft(AA.treeObj.scrollLeft() + 10)
							}
						}
						if (x && x != AA.treeObj && x.offset().left < AA.treeObj.offset().left) {
							AA.treeObj.scrollLeft(AA.treeObj.scrollLeft() + x.offset().left - AA.treeObj.offset().left)
						}
					}
					v.css({
						top: (A0.clientY + AQ + 3) + "px",
						left: (A0.clientX + Ay + 3) + "px"
					});
					var Aa = 0;
					var AZ = 0;
					if (x && x.attr("id") != AA.treeId) {
						var Aj = m == null ? null : X.getNodeCache(AA, m),
						Ad = (A0.ctrlKey && n.edit.drag.isMove && n.edit.drag.isCopy) || (!n.edit.drag.isMove && n.edit.drag.isCopy),
						AL = !!(a && m === a.tId),
						Ah = !!(e && m === e.tId),
						At = (AT.parentTId && AT.parentTId == m),
						Ag = (Ad || !Ah) && T.apply(AA.edit.drag.prev, [AA.treeId, p, Aj], !!AA.edit.drag.prev),
						AK = (Ad || !AL) && T.apply(AA.edit.drag.next, [AA.treeId, p, Aj], !!AA.edit.drag.next),
						AD = (Ad || !At) && !(AA.data.keep.leaf && !Aj.isParent) && T.apply(AA.edit.drag.inner, [AA.treeId, p, Aj], !!AA.edit.drag.inner);
						if (!Ag && !AK && !AD) {
							x = null;
							m = "";
							b = P.move.TYPE_INNER;
							h.css({
								display: "none"
							});
							if (window.zTreeMoveTimer) {
								clearTimeout(window.zTreeMoveTimer);
								window.zTreeMoveTargetNodeTId = null
							}
						} else {
							var AX = F("#" + m + P.id.A, x),
							Aq = Aj.isLastNode ? null : F("#" + Aj.getNextNode().tId + P.id.A, x.next()),
							As = AX.offset().top,
							Au = AX.offset().left,
							Ap = Ag ? (AD ? 0.25 : (AK ? 0.5 : 1)) : -1,
							AM = AK ? (AD ? 0.75 : (Ag ? 0.5 : 0)) : -1,
							AI = (A0.clientY + AQ - As) / AX.height();
							if ((Ap == 1 || AI <= Ap && AI >= -0.2) && Ag) {
								Aa = 1 - h.width();
								AZ = As - h.height() / 2;
								b = P.move.TYPE_PREV
							} else {
								if ((AM == 0 || AI >= AM && AI <= 1.2) && AK) {
									Aa = 1 - h.width();
									AZ = (Aq == null || (Aj.isParent && Aj.open)) ? (As + AX.height() - h.height() / 2) : (Aq.offset().top - h.height() / 2);
									b = P.move.TYPE_NEXT
								} else {
									Aa = 5 - h.width();
									AZ = As;
									b = P.move.TYPE_INNER
								}
							}
							h.css({
								display: "block",
								top: AZ + "px",
								left: (Au + Aa) + "px"
							});
							AX.addClass(P.node.TMPTARGET_NODE + "_" + b);
							if (q != m || d != b) {
								j = (new Date()).getTime()
							}
							if (Aj && Aj.isParent && b == P.move.TYPE_INNER) {
								var AU = true;
								if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== Aj.tId) {
									clearTimeout(window.zTreeMoveTimer);
									window.zTreeMoveTargetNodeTId = null
								} else {
									if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === Aj.tId) {
										AU = false
									}
								}
								if (AU) {
									window.zTreeMoveTimer = setTimeout(function () {
											if (b != P.move.TYPE_INNER) {
												return
											}
											if (Aj && Aj.isParent && !Aj.open && (new Date()).getTime() - j > AA.edit.drag.autoOpenTime && T.apply(AA.callback.beforeDragOpen, [AA.treeId, Aj], true)) {
												I.switchNode(AA, Aj);
												if (AA.edit.drag.autoExpandTrigger) {
													AA.treeObj.trigger(P.event.EXPAND, [AA.treeId, Aj])
												}
											}
										}, AA.edit.drag.autoOpenTime + 50);
									window.zTreeMoveTargetNodeTId = Aj.tId
								}
							}
						}
					} else {
						b = P.move.TYPE_INNER;
						if (x && T.apply(AA.edit.drag.inner, [AA.treeId, p, null], !!AA.edit.drag.inner)) {
							x.addClass(P.node.TMPTARGET_TREE)
						} else {
							x = null
						}
						h.css({
							display: "none"
						});
						if (window.zTreeMoveTimer) {
							clearTimeout(window.zTreeMoveTimer);
							window.zTreeMoveTargetNodeTId = null
						}
					}
					q = m;
					d = b
				}
				return false
			}
			AC.bind("mouseup", AB);
			function AB(AK) {
				if (window.zTreeMoveTimer) {
					clearTimeout(window.zTreeMoveTimer);
					window.zTreeMoveTargetNodeTId = null
				}
				q = null;
				d = null;
				AC.unbind("mousemove", k);
				AC.unbind("mouseup", AB);
				AC.unbind("selectstart", c);
				F("body").css("cursor", "auto");
				if (x) {
					x.removeClass(P.node.TMPTARGET_TREE);
					if (m) {
						F("#" + m + P.id.A, x).removeClass(P.node.TMPTARGET_NODE + "_" + P.move.TYPE_PREV).removeClass(P.node.TMPTARGET_NODE + "_" + Z.move.TYPE_NEXT).removeClass(P.node.TMPTARGET_NODE + "_" + Z.move.TYPE_INNER)
					}
				}
				T.showIfameMask(n, false);
				s.showHoverDom = true;
				if (s.dragFlag == 0) {
					return
				}
				s.dragFlag = 0;
				var AI,
				AE,
				AJ;
				for (AI = 0, AE = p.length; AI < AE; AI++) {
					AJ = p[AI];
					if (AJ.isParent && s.dragNodeShowBefore[AJ.tId] && !AJ.open) {
						I.expandCollapseNode(n, AJ, !AJ.open);
						delete s.dragNodeShowBefore[AJ.tId]
					}
				}
				if (v) {
					v.remove()
				}
				if (h) {
					h.remove()
				}
				var AD = (AK.ctrlKey && n.edit.drag.isMove && n.edit.drag.isCopy) || (!n.edit.drag.isMove && n.edit.drag.isCopy);
				if (!AD && x && m && p[0].parentTId && m == p[0].parentTId && b == P.move.TYPE_INNER) {
					x = null
				}
				if (x) {
					var AF = m == null ? null : X.getNodeCache(AA, m);
					if (T.apply(n.callback.beforeDrop, [AA.treeId, p, AF, b, AD], true) == false) {
						return
					}
					var AG = AD ? T.clone(p) : p;
					function AH() {
						if (y) {
							if (!AD) {
								for (var AM = 0, AL = p.length; AM < AL; AM++) {
									I.removeNode(n, p[AM])
								}
							}
							if (b == P.move.TYPE_INNER) {
								I.addNodes(AA, AF, AG)
							} else {
								I.addNodes(AA, AF.getParentNode(), AG);
								if (b == P.move.TYPE_PREV) {
									for (AM = 0, AL = AG.length; AM < AL; AM++) {
										I.moveNode(AA, AF, AG[AM], b, false)
									}
								} else {
									for (AM = -1, AL = AG.length - 1; AM < AL; AL--) {
										I.moveNode(AA, AF, AG[AL], b, false)
									}
								}
							}
						} else {
							if (AD && b == P.move.TYPE_INNER) {
								I.addNodes(AA, AF, AG)
							} else {
								if (AD) {
									I.addNodes(AA, AF.getParentNode(), AG)
								}
								if (b == P.move.TYPE_PREV) {
									for (AM = 0, AL = AG.length; AM < AL; AM++) {
										I.moveNode(AA, AF, AG[AM], b, false)
									}
								} else {
									for (AM = -1, AL = AG.length - 1; AM < AL; AL--) {
										I.moveNode(AA, AF, AG[AL], b, false)
									}
								}
							}
						}
						for (AM = 0, AL = AG.length; AM < AL; AM++) {
							I.selectNode(AA, AG[AM], AM > 0)
						}
						F("#" + AG[0].tId).focus().blur()
					}
					if (b == P.move.TYPE_INNER && T.canAsync(AA, AF)) {
						I.asyncNode(AA, AF, false, AH)
					} else {
						AH()
					}
					n.treeObj.trigger(P.event.DROP, [AK, AA.treeId, AG, AF, b, AD])
				} else {
					for (AI = 0, AE = p.length; AI < AE; AI++) {
						I.selectNode(AA, p[AI], AI > 0)
					}
					n.treeObj.trigger(P.event.DROP, [AK, n.treeId, p, null, null, null])
				}
			}
			AC.bind("selectstart", c);
			function c() {
				return false
			}
			if (o.preventDefault) {
				o.preventDefault()
			}
			return true
		}
	},
	H = {
		getAbs: function (a) {
			var b = a.getBoundingClientRect();
			return [b.left, b.top]
		},
		inputFocus: function (a) {
			if (a.get(0)) {
				a.focus();
				T.setCursorPosition(a.get(0), a.val().length)
			}
		},
		inputSelect: function (a) {
			if (a.get(0)) {
				a.focus();
				a.select()
			}
		},
		setCursorPosition: function (b, c) {
			if (b.setSelectionRange) {
				b.focus();
				b.setSelectionRange(c, c)
			} else {
				if (b.createTextRange) {
					var a = b.createTextRange();
					a.collapse(true);
					a.moveEnd("character", c);
					a.moveStart("character", c);
					a.select()
				}
			}
		},
		showIfameMask: function (h, f) {
			var e = X.getRoot(h);
			while (e.dragMaskList.length > 0) {
				e.dragMaskList[0].remove();
				e.dragMaskList.shift()
			}
			if (f) {
				var j = F("iframe");
				for (var d = 0, b = j.length; d < b; d++) {
					var c = j.get(d),
					a = T.getAbs(c),
					g = F("<div id='zTreeMask_" + d + "' class='zTreeMask' style='background-color:yellow;opacity: 0.3;filter: alpha(opacity=30);    top:" + a[1] + "px; left:" + a[0] + "px; width:" + c.offsetWidth + "px; height:" + c.offsetHeight + "px;'></div>");
					g.appendTo("body");
					e.dragMaskList.push(g)
				}
			}
		}
	},
	D = {
		addEditBtn: function (b, c) {
			if (c.editNameFlag || F("#" + c.tId + P.id.EDIT).length > 0) {
				return
			}
			if (!T.apply(b.edit.showRenameBtn, [b.treeId, c], b.edit.showRenameBtn)) {
				return
			}
			var d = F("#" + c.tId + P.id.A),
			a = "<span class='button edit' id='" + c.tId + P.id.EDIT + "' title='" + T.apply(b.edit.renameTitle, [b.treeId, c], b.edit.renameTitle) + "' treeNode" + P.id.EDIT + " style='display:none;'></span>";
			d.append(a);
			F("#" + c.tId + P.id.EDIT).bind("click", function () {
				if (!T.uCanDo(b) || T.apply(b.callback.beforeEditName, [b.treeId, c], true) == false) {
					return false
				}
				I.editNode(b, c);
				return false
			}).show()
		},
		addRemoveBtn: function (a, b) {
			if (b.editNameFlag || F("#" + b.tId + P.id.REMOVE).length > 0) {
				return
			}
			if (!T.apply(a.edit.showRemoveBtn, [a.treeId, b], a.edit.showRemoveBtn)) {
				return
			}
			var d = F("#" + b.tId + P.id.A),
			c = "<span class='button remove' id='" + b.tId + P.id.REMOVE + "' title='" + T.apply(a.edit.removeTitle, [a.treeId, b], a.edit.removeTitle) + "' treeNode" + P.id.REMOVE + " style='display:none;'></span>";
			d.append(c);
			F("#" + b.tId + P.id.REMOVE).bind("click", function () {
				if (!T.uCanDo(a) || T.apply(a.callback.beforeRemove, [a.treeId, b], true) == false) {
					return false
				}
				I.removeNode(a, b);
				a.treeObj.trigger(P.event.REMOVE, [a.treeId, b]);
				return false
			}).bind("mousedown", function (e) {
				return true
			}).show()
		},
		addHoverDom: function (a, b) {
			if (X.getRoot(a).showHoverDom) {
				b.isHover = true;
				if (a.edit.enable) {
					I.addEditBtn(a, b);
					I.addRemoveBtn(a, b)
				}
				T.apply(a.view.addHoverDom, [a.treeId, b])
			}
		},
		cancelCurEditNode: function (f, d) {
			var b = X.getRoot(f),
			e = f.data.key.name,
			g = b.curEditNode;
			if (g) {
				var c = b.curEditInput;
				var a = d ? d : c.val();
				if (!d && T.apply(f.callback.beforeRename, [f.treeId, g, a], true) === false) {
					g.editNameFlag = true;
					return false
				} else {
					g[e] = a ? a : c.val();
					if (!d) {
						f.treeObj.trigger(P.event.RENAME, [f.treeId, g])
					}
				}
				var h = F("#" + g.tId + P.id.A);
				h.removeClass(P.node.CURSELECTED_EDIT);
				c.unbind();
				I.setNodeName(f, g);
				g.editNameFlag = false;
				b.curEditNode = null;
				b.curEditInput = null;
				I.selectNode(f, g, false)
			}
			b.noSelection = true;
			return true
		},
		editNode: function (d, e) {
			var a = X.getRoot(d);
			I.editNodeBlur = false;
			if (X.isSelectedNode(d, e) && a.curEditNode == e && e.editNameFlag) {
				setTimeout(function () {
					T.inputFocus(a.curEditInput)
				}, 0);
				return
			}
			var c = d.data.key.name;
			e.editNameFlag = true;
			I.removeTreeDom(d, e);
			I.cancelCurEditNode(d);
			I.selectNode(d, e, false);
			F("#" + e.tId + P.id.SPAN).html("<input type=text class='rename' id='" + e.tId + P.id.INPUT + "' treeNode" + P.id.INPUT + " >");
			var b = F("#" + e.tId + P.id.INPUT);
			b.attr("value", e[c]);
			if (d.edit.editNameSelectAll) {
				T.inputSelect(b)
			} else {
				T.inputFocus(b)
			}
			b.bind("blur", function (f) {
				if (!I.editNodeBlur) {
					I.cancelCurEditNode(d)
				}
			}).bind("keydown", function (f) {
				if (f.keyCode == "13") {
					I.editNodeBlur = true;
					I.cancelCurEditNode(d, null, true)
				} else {
					if (f.keyCode == "27") {
						I.cancelCurEditNode(d, e[c])
					}
				}
			}).bind("click", function (f) {
				return false
			}).bind("dblclick", function (f) {
				return false
			});
			F("#" + e.tId + P.id.A).addClass(P.node.CURSELECTED_EDIT);
			a.curEditInput = b;
			a.noSelection = false;
			a.curEditNode = e
		},
		moveNode: function (m, d, p, c, AA, e) {
			var r = X.getRoot(m),
			j = m.data.key.children;
			if (d == p) {
				return
			}
			if (m.data.keep.leaf && d && !d.isParent && c == P.move.TYPE_INNER) {
				return
			}
			var u = (p.parentTId ? p.getParentNode() : r),
			o = (d === null || d == r);
			if (o && d === null) {
				d = r
			}
			if (o) {
				c = P.move.TYPE_INNER
			}
			var a = (d.parentTId ? d.getParentNode() : r);
			if (c != P.move.TYPE_PREV && c != P.move.TYPE_NEXT) {
				c = P.move.TYPE_INNER
			}
			if (c == P.move.TYPE_INNER) {
				if (o) {
					p.parentTId = null
				} else {
					if (!d.isParent) {
						d.isParent = true;
						d.open = !!d.open;
						I.setNodeLineIcos(m, d)
					}
					p.parentTId = d.tId
				}
			}
			var f,
			h;
			if (o) {
				f = m.treeObj;
				h = f
			} else {
				if (!e && c == P.move.TYPE_INNER) {
					I.expandCollapseNode(m, d, true, false)
				} else {
					if (!e) {
						I.expandCollapseNode(m, d.getParentNode(), true, false)
					}
				}
				f = F("#" + d.tId);
				h = F("#" + d.tId + P.id.UL);
				if (!h.get(0)) {
					var y = [];
					I.makeUlHtml(m, d, y, "");
					f.append(y.join(""))
				}
				h = F("#" + d.tId + P.id.UL)
			}
			var w = F("#" + p.tId);
			if (h.get(0) && c == P.move.TYPE_INNER) {
				h.append(w)
			} else {
				if (f.get(0) && c == P.move.TYPE_PREV) {
					f.before(w)
				} else {
					if (f.get(0) && c == P.move.TYPE_NEXT) {
						f.after(w)
					}
				}
			}
			var t,
			s,
			g = -1,
			v = 0,
			z = null,
			b = null,
			x = p.level;
			if (p.isFirstNode) {
				g = 0;
				if (u[j].length > 1) {
					z = u[j][1];
					z.isFirstNode = true
				}
			} else {
				if (p.isLastNode) {
					g = u[j].length - 1;
					z = u[j][g - 1];
					z.isLastNode = true
				} else {
					for (t = 0, s = u[j].length; t < s; t++) {
						if (u[j][t].tId == p.tId) {
							g = t;
							break
						}
					}
				}
			}
			if (g >= 0) {
				u[j].splice(g, 1)
			}
			if (c != P.move.TYPE_INNER) {
				for (t = 0, s = a[j].length; t < s; t++) {
					if (a[j][t].tId == d.tId) {
						v = t
					}
				}
			}
			if (c == P.move.TYPE_INNER) {
				if (!d[j]) {
					d[j] = new Array()
				}
				if (d[j].length > 0) {
					b = d[j][d[j].length - 1];
					b.isLastNode = false
				}
				d[j].splice(d[j].length, 0, p);
				p.isLastNode = true;
				p.isFirstNode = (d[j].length == 1)
			} else {
				if (d.isFirstNode && c == P.move.TYPE_PREV) {
					a[j].splice(v, 0, p);
					b = d;
					b.isFirstNode = false;
					p.parentTId = d.parentTId;
					p.isFirstNode = true;
					p.isLastNode = false
				} else {
					if (d.isLastNode && c == P.move.TYPE_NEXT) {
						a[j].splice(v + 1, 0, p);
						b = d;
						b.isLastNode = false;
						p.parentTId = d.parentTId;
						p.isFirstNode = false;
						p.isLastNode = true
					} else {
						if (c == P.move.TYPE_PREV) {
							a[j].splice(v, 0, p)
						} else {
							a[j].splice(v + 1, 0, p)
						}
						p.parentTId = d.parentTId;
						p.isFirstNode = false;
						p.isLastNode = false
					}
				}
			}
			X.fixPIdKeyValue(m, p);
			X.setSonNodeLevel(m, p.getParentNode(), p);
			I.setNodeLineIcos(m, p);
			I.repairNodeLevelClass(m, p, x);
			if (!m.data.keep.parent && u[j].length < 1) {
				u.isParent = false;
				u.open = false;
				var n = F("#" + u.tId + P.id.UL),
				q = F("#" + u.tId + P.id.SWITCH),
				k = F("#" + u.tId + P.id.ICON);
				I.replaceSwitchClass(u, q, P.folder.DOCU);
				I.replaceIcoClass(u, k, P.folder.DOCU);
				n.css("display", "none")
			} else {
				if (z) {
					I.setNodeLineIcos(m, z)
				}
			}
			if (b) {
				I.setNodeLineIcos(m, b)
			}
			if (!!m.check && m.check.enable && I.repairChkClass) {
				I.repairChkClass(m, u);
				I.repairParentChkClassWithSelf(m, u);
				if (u != p.parent) {
					I.repairParentChkClassWithSelf(m, p)
				}
			}
			if (!e) {
				I.expandCollapseParentNode(m, p.getParentNode(), true, AA)
			}
		},
		removeEditBtn: function (a) {
			F("#" + a.tId + P.id.EDIT).unbind().remove()
		},
		removeRemoveBtn: function (a) {
			F("#" + a.tId + P.id.REMOVE).unbind().remove()
		},
		removeTreeDom: function (a, b) {
			b.isHover = false;
			I.removeEditBtn(b);
			I.removeRemoveBtn(b);
			T.apply(a.view.removeHoverDom, [a.treeId, b])
		},
		repairNodeLevelClass: function (b, d, c) {
			if (c === d.level) {
				return
			}
			var e = F("#" + d.tId),
			h = F("#" + d.tId + P.id.A),
			g = F("#" + d.tId + P.id.UL),
			a = "level" + c,
			f = "level" + d.level;
			e.removeClass(a);
			e.addClass(f);
			h.removeClass(a);
			h.addClass(f);
			g.removeClass(a);
			g.addClass(f)
		}
	},
	R = {
		tools: H,
		view: D,
		event: Q,
		data: O
	};
	F.extend(true, F.fn.zTree.consts, Z);
	F.extend(true, F.fn.zTree._z, R);
	var B = F.fn.zTree,
	T = B._z.tools,
	P = B.consts,
	I = B._z.view,
	X = B._z.data,
	Q = B._z.event;
	X.exSetting(L);
	X.addInitBind(M);
	X.addInitCache(C);
	X.addInitNode(U);
	X.addInitProxy(N);
	X.addInitRoot(V);
	X.addZTreeTools(J);
	var S = I.cancelPreSelectedNode;
	I.cancelPreSelectedNode = function (c, d) {
		var e = X.getRoot(c).curSelectedList;
		for (var b = 0, a = e.length; b < a; b++) {
			if (!d || d === e[b]) {
				I.removeTreeDom(c, e[b]);
				if (d) {
					break
				}
			}
		}
		if (S) {
			S.apply(I, arguments)
		}
	};
	var W = I.createNodes;
	I.createNodes = function (c, d, b, a) {
		if (W) {
			W.apply(I, arguments)
		}
		if (!b) {
			return
		}
		if (I.repairParentChkClassWithSelf) {
			I.repairParentChkClassWithSelf(c, a)
		}
	};
	I.makeNodeUrl = function (a, b) {
		return (b.url && !a.edit.enable) ? b.url : null
	};
	var A = I.removeNode;
	I.removeNode = function (b, c) {
		var a = X.getRoot(b);
		if (a.curEditNode === c) {
			a.curEditNode = null
		}
		if (A) {
			A.apply(I, arguments)
		}
	};
	var Y = I.selectNode;
	I.selectNode = function (c, d, b) {
		var a = X.getRoot(c);
		if (X.isSelectedNode(c, d) && a.curEditNode == d && d.editNameFlag) {
			return false
		}
		if (Y) {
			Y.apply(I, arguments)
		}
		I.addHoverDom(c, d);
		return true
	};
	var E = T.uCanDo;
	T.uCanDo = function (b, c) {
		var a = X.getRoot(b);
		if (c && (T.eqs(c.type, "mouseover") || T.eqs(c.type, "mouseout") || T.eqs(c.type, "mousedown") || T.eqs(c.type, "mouseup"))) {
			return true
		}
		return (!a.curEditNode) && (E ? E.apply(I, arguments) : true)
	}
})(jQuery);
var CKEDITOR_BASEPATH = _ctxPath + "/common/ckeditor/";
function FCKeditor_OnComplete(A) {
	$("#" + A.Name).attr("editorReadyState", "complete");
	$("#" + A.Name).trigger("editorReady")
}
function getBrowserInfo() {
	var D = navigator.userAgent.toLowerCase();
	var E = /msie [\d.]+;/gi;
	var B = /firefox\/[\d.]+/gi;
	var A = /chrome\/[\d.]+/gi;
	var C = /safari\/[\d.]+/gi;
	if (D.indexOf("msie") > 0) {
		return D.match(E)
	}
	if (D.indexOf("firefox") > 0) {
		return D.match(B)
	}
	if (D.indexOf("chrome") > 0) {
		return D.match(A)
	}
	if (D.indexOf("safari") > 0 && D.indexOf("chrome") < 0) {
		return D.match(C)
	}
}
function realSupportCk5() {
	var B = getBrowserInfo();
	var A = (B + "").replace(/[^0-9.]/ig, "");
	if (B.indexOf("chrome") && parseFloat(A) > 51) {
		return true
	} else {
		return false
	}
	if (B.indexOf("firefox") && parseFloat(A) > 53) {
		return true
	} else {
		return false
	}
	if (B.indexOf("safari") && parseFloat(A) > 10) {
		return true
	} else {
		return false
	}
	return false
}
var ctpEventIntercept = {};
function ctpEventType(A) {
	if (A == "beforSendColl") {
		return ctpEventIntercept.ctpEventIntercept
	} else {
		if (A == "beforeSaveDraftColl") {
			return ctpEventIntercept.beforeSaveDraftColl
		} else {
			if (A == "dealRepeatChange") {
				return ctpEventIntercept.dealRepeatChange
			} else {
				if (A == "fieldValueChange") {
					return ctpEventIntercept.fieldValueChange
				} else {
					if (A == "beforeDealSubmit") {
						return ctpEventIntercept.beforeDealSubmit
					} else {
						if (A == "beforeDealSaveWait") {
							return ctpEventIntercept.beforeDealSaveWait
						} else {
							if (A == "beforeDealCancel") {
								return ctpEventIntercept.beforeDealCancel
							} else {
								if (A == "beforeDealstepback") {
									return ctpEventIntercept.beforeDealstepback
								} else {
									if (A == "beforeDealstepstop") {
										return ctpEventIntercept.beforeDealstepstop
									} else {
										if (A == "beforeDealaddnode") {
											return ctpEventIntercept.beforeDealaddnode
										} else {
											if (A == "beforeDealdeletenode") {
												return ctpEventIntercept.beforeDealdeletenode
											} else {
												if (A == "beforeDealspecifiesReturn") {
													return ctpEventIntercept.beforeDealspecifiesReturn
												} else {
													if (A == "beforeDoneTakeBack") {
														return ctpEventIntercept.beforeDoneTakeBack
													} else {
														if (A == "beforeWaitSendDelete") {
															return ctpEventIntercept.beforeWaitSendDelete
														} else {
															if (A == "beforeSentCancel") {
																return ctpEventIntercept.beforeSentCancel
															} else {
																return ctpEventIntercept[A]
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
function setCtpEvent(A, B) {
	if (A == "beforSendColl") {
		ctpEventIntercept.ctpEventIntercept = B
	} else {
		if (A == "beforeSaveDraftColl") {
			ctpEventIntercept.beforeSaveDraftColl = B
		} else {
			if (A == "dealRepeatChange") {
				ctpEventIntercept.dealRepeatChange = B
			} else {
				if (A == "fieldValueChange") {
					ctpEventIntercept.fieldValueChange = B
				} else {
					if (A == "beforeDealSubmit") {
						ctpEventIntercept.beforeDealSubmit = B
					} else {
						if (A == "beforeDealSaveWait") {
							ctpEventIntercept.beforeDealSaveWait = B
						} else {
							if (A == "beforeDealCancel") {
								ctpEventIntercept.beforeDealCancel = B
							} else {
								if (A == "beforeDealstepback") {
									ctpEventIntercept.beforeDealstepback = B
								} else {
									if (A == "beforeDealstepstop") {
										ctpEventIntercept.beforeDealstepstop = B
									} else {
										if (A == "beforeDealaddnode") {
											ctpEventIntercept.beforeDealaddnode = B
										} else {
											if (A == "beforeDealdeletenode") {
												ctpEventIntercept.beforeDealdeletenode = B
											} else {
												if (A == "beforeDealspecifiesReturn") {
													ctpEventIntercept.beforeDealspecifiesReturn = B
												} else {
													if (A == "beforeDoneTakeBack") {
														ctpEventIntercept.beforeDoneTakeBack = B
													} else {
														if (A == "beforeWaitSendDelete") {
															ctpEventIntercept.beforeWaitSendDelete = B
														} else {
															if (A == "beforeSentCancel") {
																ctpEventIntercept.beforeSentCancel = B
															} else {
																return ctpEventIntercept[A] = B
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
$.ctp = {
	bind: function (A, C) {
		var D = ctpEventType(A);
		var B = D;
		if (!Boolean(B)) {
			B = [];
			B.push(C);
			setCtpEvent(A, B)
		} else {
			B.push(C)
		}
	},
	trigger: function (A, D) {
		var C = ctpEventType(A);
		if (Boolean(C)) {
			for (var B = 0; B < C.length; B++) {
				if (!C[B](D)) {
					return false
				}
			}
		} else {
			return true
		}
		return true
	}
};
(function (D) {
	var Q = false;
	D.messageBox = function (Z) {
		return new MxtMsgBox(Z)
	};
	D.alert = function (a) {
		var Z = null;
		if (typeof(a) == "object") {
			Z = a
		}
		Z = Z == null ? {}
		 : Z;
		Z.title = Z.title ? Z.title : D.i18n("system.prompt.js");
		Z.type = Z.type ? Z.type : 0;
		Z.imgType = Z.imgType ? Z.imgType : 2;
		Z.close_fn = Z.close_fn ? Z.close_fn : null;
		if (typeof(a) != "object") {
			Z.msg = a
		}
		return new MxtMsgBox(Z)
	};
	D.infor = function (a) {
		var Z = null;
		if (typeof(a) == "object") {
			Z = a
		}
		var Z = Z == undefined ? {}
		 : Z;
		Z.title = D.i18n("system.prompt.js");
		Z.type = 0;
		if (typeof(a) != "object") {
			Z.msg = a
		}
		Z.imgType = Z.imgType ? Z.imgType : 0;
		Z.close_fn = Z.close_fn ? Z.close_fn : null;
		return new MxtMsgBox(Z)
	};
	D.confirm = function (Z) {
		var Z = Z == undefined ? {}
		 : Z;
		Z.title = Z.title ? Z.title : D.i18n("system.prompt.js");
		Z.type = 1;
		Z.imgType = Z.imgType ? Z.imgType : 4;
		Z.close_fn = Z.close_fn ? Z.close_fn : null;
		return new MxtMsgBox(Z)
	};
	D.error = function (a) {
		var Z = null;
		if (typeof(a) == "object") {
			Z = a
		}
		var Z = Z == undefined ? {}
		 : Z;
		Z.title = Z.title ? Z.title : D.i18n("system.prompt.js");
		Z.type = Z.type ? Z.type : 0;
		Z.imgType = Z.imgType ? Z.imgType : 1;
		Z.close_fn = Z.close_fn ? Z.close_fn : null;
		if (typeof(a) != "object") {
			Z.msg = a
		}
		return new MxtMsgBox(Z)
	};
	D.gc = function () {
		if (typeof(CollectGarbage) == "function") {
			CollectGarbage()
		}
	};
	D.releaseContext = function () {
		function a(c) {
			if (typeof c !== "undefined") {
				for (var d in c) {
					try {
						if (typeof c[d] == "object" && (c[d] != null)) {
							a(c[d])
						}
						c[d] = null
					} catch (b) {}
				}
			}
		}
		try {
			if (D && D.ctx) {
				a(D.ctx)
			}
			a(v3x);
			a(MainLang);
			a(CTPLang);
			a(sectionHandler);
			D("iframe").each(function () {
				var b = this.contentWindow;
				a(b.sectionHandler);
				a(b.MainLang);
				a(b.CTPLang);
				a(b.v3x);
				if (b.$ && b.$.ctx) {
					a(b.$.ctx)
				}
				this.src = "about:blank"
			})
		} catch (Z) {}
	};
	D.releaseOnunload = function () {
		if (D.browser.msie) {
			D(window).bind("unload", function () {
				D.releaseContext()
			})
		}
		D(window).unload(function () {
			for (var a in jQuery.cache) {
				if (jQuery.cache[a].handle) {
					try {
						jQuery.event.remove(jQuery.cache[a].handle.elem)
					} catch (Z) {}
				}
				delete jQuery.cache[a]
			}
		})
	};
	D.globalCache = function (Z, b) {
		var c = window.sessionStorage;
		if (typeof c !== "undefined" && c !== null && (typeof JSON !== "undefined")) {
			if (typeof b !== "undefined") {
				c.setItem(Z, JSON.stringify(b));
				return
			}
			var a = c.getItem(Z);
			if (a != undefined) {
				return JSON.parse(a)
			}
			return undefined
		}
	};
	D.progressBar = function (Z) {
		if (Z == undefined) {
			Z = {}
		}
		return new MxtProgressBar(Z)
	};
	D.dialog = function (Z) {
		var a = Z.targetWindow;
		if (!Z.targetWindow) {
			a = getCtpTop()
		}
		if (!(Z.url) && !(Z.type) && Z.htmlId) {
			if (!Z.targetWindow) {
				a = window;
				Z.contentCopyWindow = window
			} else {
				Z.contentCopyWindow = window
			}
		}
		if (Z.url) {
			Z.url = Z.url + CsrfGuard.getUrlSurffix(Z.url)
		}
		if (Z.type == "panel" && Z.htmlId) {
			a = window;
			Z.contentCopyWindow = window
		}
		if (Z.type == "panel" && Z.targetId && Z.url) {
			a = window;
			Z.contentCopyWindow = window
		}
		if (Z.type == "panel" && Z.targetId && Z.html) {
			a = window;
			Z.contentCopyWindow = window
		}
		Z.targetWindow = a;
		if (typeof(getCtpTop().isVJTop) != "undefined" && getCtpTop().isVJTop != null) {
			return getCtpTop().vjOpenDialog(Z)
		} else {
			if (Z.targetWindow.layer) {
				return Z.targetWindow.layer.open(Z)
			} else {
				return window.layer.open(Z)
			}
		}
	};
	D.PeopleCard = function (Z) {
		insertScriptP();
		return PeopleCard(Z)
	};
	D.PeopleCardWithOutButton = function (Z) {
		insertScriptP();
		return PeopleCardWithOutButton(Z)
	};
	D.PeopleCardMini = function (a) {
		var Z = insertScript(a);
		return new PeopleCardMini_flash(Z)
	};
	D.fn.PeopleCardMini = function (a) {
		var Z = insertScript(a);
		return new PeopleCardMini(Z, this)
	};
	D.metadata = function (a) {
		function Z(c) {
			this.data = c;
			function b(f, e, d) {
				var j = c[f];
				var h = j.columns;
				if (h != null) {
					for (var g = 0; g < h.length; g++) {
						if (h[g][d] == e) {
							return h[g]
						}
					}
				}
				return null
			}
			this.getColumn = function (e, d) {
				return b(e, d, "name")
			};
			this.getColumnByAlias = function (e, d) {
				return b(e, d, "alias")
			};
			this.getColumns = function (d) {
				var e = c[d];
				return e.columns
			}
		}
		return new Z(a)
	};
	D.renderMetadata = function () {};
	D.metadataForm = function (Z, h, j) {
		var c = serverMetadata;
		var e = [];
		function k(n) {
			var m = n.component;
			if (m == "codecfg") {
				return i(n)
			}
			var o = "";
			var l = "";
			var p = n.rule;
			if (m != null) {
				p = p == null ? "" : "," + p;
				o = ' class="comp" comp="type:\'' + m + "'" + p + '"'
			} else {
				if (p != null) {
					l = ' class="validate" validate="' + p + '"'
				}
			}
			return '<input type="text" ' + f(n.name) + o + l + "/>"
		}
		function f(m) {
			var n = 'name="' + m + '"';
			var l = ' id="' + m + '"';
			return l + n
		}
		function i(l) {
			var m = "";
			var n = l.rule;
			n = n == null ? "" : n;
			m = ' class="codecfg" codecfg="' + n + '"';
			return "<select " + f(l.name) + m + '><option value="">' + D.i18n("pleaseSelect") + "...</option></select>"
		}
		var b = j ? j.columns : null;
		var d = j ? j.position : "in";
		var g = D.metadata(c);
		var a = [];
		if (b) {
			D.each(b, function (m, l) {
				var n = g.getColumnByAlias(h, l);
				if (n) {
					a.push(n)
				} else {
					n = g.getColumn(h, l);
					if (n) {
						a.push(n)
					}
				}
			})
		} else {
			a = g.getColumns(h)
		}
		D.each(a, function (n, o) {
			var m = o.label;
			var l = k(o);
			e.push('<tr><th nowrap="nowrap"><label class="margin_r_10" for="' + o.name + '">' + m + ':</label></th><td><div class="common_txtbox_wrap">' + l + "</div></td></tr>")
		});
		if (d == "after") {
			D(Z).after(e.join(""))
		} else {
			if (d == "before") {
				D(Z).before(e.join(""))
			} else {
				D(Z).html(e.join(""))
			}
		}
	};
	function I(Z, m) {
		var a = m.code;
		var j = m.type;
		var l = m.suffix;
		function d(i) {
			var n = getA8Top();
			if (n) {
				n.showLocation(i)
			} else {
				Z.addClass("common_crumbs");
				Z.html(i)
			}
		}
		if (m.html) {
			d(g)
		}
		function b(q, n, r) {
			for (var o = 0; o < q.length; o++) {
				var s = q[o];
				s.parentMenu = n;
				var p = s.resourceCode;
				if (p != null) {
					r[p] = s
				}
				if (s.items) {
					b(s.items, s, r)
				}
			}
		}
		function c(q) {
			var p = getCtpTop ? getCtpTop() : parent;
			if (p) {
				if (p.vPortal && p.vPortal.memberMenus && p.vPortal.memberMenus.length > 0) {
					var n = p.vPortal.memberMenus
				} else {
					if (p.vPortal && p.vPortal.menu) {
						var n = p.vPortal.menu
					} else {
						return []
					}
				}
				if (n) {
					var s = "resourceMenuCache";
					var o = p.$.data(p.document.body, s);
					if (o == undefined || o.length == 0) {
						o = new Array();
						b(n, null, o);
						p.$.data(p.document.body, s, o)
					}
					var i = [];
					var r = o[q];
					if (r != undefined) {
						while (r != null) {
							i.push(r);
							r = r.parentMenu
						}
					}
					return i.reverse()
				}
			}
			return []
		}
		var e = c(a);
		if (e.length > 0) {
			var k = ("vp-" + getCtpTop().currentSpaceType) || "vp-home";
			var g = '<i class="vportal ' + k + '"></i>';
			g += '<span class="nowLocation_content">';
			var h = [];
			for (var f = 0; f < e.length; f++) {
				if (e[f].url) {
					h.push('<a class="hand" onclick="showMenu(\'' + _ctxPath + e[f].url + "')\">" + escapeStringToHTML(e[f].name, false) + "</a>")
				} else {
					h.push('<a style="cursor:default" >' + escapeStringToHTML(e[f].name, false) + "</a>")
				}
			}
			g += h.join(" > ");
			if (l) {
				g += " > " + l
			}
			g += "</span>";
			d(g)
		}
	}
	D.fn.tooltip = function (Z) {
		return F(Z, 1, D(this))
	};
	D.tooltip = function (Z) {
		return F(Z, 0)
	};
	function F(Z, d, b) {
		var Z = Z;
		var c;
		if (d == 1) {
			var a = b.attr("id").replace("#", "");
			D.extend(Z, {
				event: true,
				targetId: a
			});
			c = new MxtToolTip(Z);
			b.mouseenter(function () {
				c.setPoint(null, null);
				c.show()
			}).mouseleave(function () {
				c.hide()
			})
		} else {
			c = new MxtToolTip(Z)
		}
		return c
	}
	var A = 1;
	D.fn.layout = function () {
		var m = D(this),
		h = m.attrObj("_layout");
		if (h) {
			return h
		}
		var d = A,
		Z = m[0].id,
		c = D("#" + Z + " > .layout_north"),
		j = D("#" + Z + " > .layout_east"),
		a = D("#" + Z + " > .layout_west"),
		b = D("#" + Z + " > .layout_south"),
		g = D("#" + Z + " > .layout_center"),
		f = {
			id: Z
		},
		k,
		e,
		l;
		c.each(function () {
			this.id = this.id ? this.id : ("north" + d);
			k = {
				id: this.id
			};
			l = D(this).attr("layout");
			e = l ? D.parseJSON("{" + l + "}") : {};
			k = D.extend(k, e);
			f.northArea = k
		});
		j.each(function () {
			this.id = this.id ? this.id : ("east" + d);
			k = {
				id: this.id
			};
			l = D(this).attr("layout");
			e = l ? D.parseJSON("{" + l + "}") : {};
			k = D.extend(k, e);
			f.eastArea = k
		});
		a.each(function () {
			this.id = this.id ? this.id : ("west" + d);
			k = {
				id: this.id
			};
			l = D(this).attr("layout");
			e = l ? D.parseJSON("{" + l + "}") : {};
			k = D.extend(k, e);
			f.westArea = k
		});
		b.each(function () {
			this.id = this.id ? this.id : ("south" + d);
			k = {
				id: this.id
			};
			l = D(this).attr("layout");
			e = l ? D.parseJSON("{" + l + "}") : {};
			k = D.extend(k, e);
			f.southArea = k
		});
		g.each(function () {
			this.id = this.id ? this.id : ("center" + d);
			k = {
				id: this.id
			};
			l = D(this).attr("layout");
			e = l ? D.parseJSON("{" + l + "}") : {};
			k = D.extend(k, e);
			f.centerArea = k
		});
		m.attrObj("_layout", new MxtLayout(f));
		A++
	};
	D.fn.compThis = function (i) {
		var h = this;
		if (h.attrObj("_comp")) {
			h = h.attrObj("_comp")
		}
		var b = h.attr("comp"),
		Z,
		g;
		if (b) {
			Z = D.parseJSON("{" + b + "}");
			if (i) {
				Z = D.extend(Z, i);
				var a = D.toJSON(Z);
				h.attr("comp", a.substring(1, a.length - 1))
			}
			g = Z.type;
			h.attr("compType", g);
			switch (g) {
			case "onlyNumber":
				h.onlyNumber(Z);
				break;
			case "calendar":
				h.calendar(Z);
				break;
			case "layout":
				h.layout();
				break;
			case "tab":
				h.tab(Z);
				break;
			case "fileupload":
				try {
					T(h, Z)
				} catch (d) {}
				break;
			case "attachlist":
				S(h);
				break;
			case "showattachlist":
				C(h, Z);
				break;
			case "assdoc":
				V(h, Z);
				break;
			case "selectPeople":
				Z.srcElement = h;
				h.selectPeople(Z);
				break;
			case "barCode":
				h.barCode(Z);
				break;
			case "editor":
				h.showEditor(Z);
				break;
			case "tooltip":
				h.tooltip(Z);
				break;
			case "slider":
				var f = D("<div id='" + h.attr("id") + "'></div>");
				h.replaceWith(f);
				h = f;
				h.slider(Z);
				break;
			case "workflowEdit":
				var c = D.ctx.CurrentUser;
				if (Z.isTemplate) {
					if (Z.isView) {
						h.click(function () {
							showWFTDiagram(getCtpTop(), Z.workflowId, window, c.name, c.loginAccountName, Z.moduleType)
						})
					} else {
						h.click(function () {
							createWFTemplate(getCtpTop(), Z.moduleType, Z.formApp, Z.formId, Z.workflowId, window, Z.defaultPolicyId, c.id, c.name, c.loginAccountName, Z.flowPermAccountId, Z.operationName, Z.startOperationName, Z.defaultPolicyName)
						})
					}
				} else {
					if (Z.isView) {
						h.click(function () {
							showWFCDiagram(getCtpTop(), Z.caseId, Z.workflowId, false, false, null, null, "collaboration")
						})
					} else {
						h.click(function () {
							createWFPersonal(getCtpTop(), Z.moduleType, c.id, c.name, c.loginAccountName, Z.workflowId, window, Z.defaultPolicyId, c.loginAccount, Z.defaultPolicyName)
						})
					}
				}
				break;
			case "correlation_form":
				W(h, g, Z);
				break;
			case "affix":
				W(h, g, Z);
				break;
			case "associated_document":
				W(h, g, Z);
				break;
			case "insert_pic":
				W(h, g, Z);
				break;
			case "correlation_project":
				W(h, g, Z);
				break;
			case "data_task":
				W(h, g, Z);
				break;
			case "search":
				W(h, g, Z);
				break;
			case "breadcrumb":
				if (!Z.code) {
					Z.code = _resourceCode
				}
				I(h, Z);
				break;
			case "autocomplete":
				if (h.autocomplete) {
					h.autocomplete(Z)
				}
				break;
			case "select":
				if (Z.mode == "dropdown") {
					if (h.imageDropdown) {
						return h.imageDropdown(Z)
					}
				}
				break;
			case "office":
				h.showOffice(Z);
				break;
			case "PeopleCardMini":
				h.PeopleCardMini(Z);
				break;
			case "htmlSignature":
				h.htmlSignature(h, Z);
				break;
			case "chooseProject":
				h.chooseProject(Z);
				break;
			case "map":
				if (h.initMap) {
					h.initMap(Z)
				}
				break;
			case "fastSelect":
				Z.srcElement = h;
				h.fastSelect(Z);
				break;
			case "aceEditor":
				h.initAceEditor(Z);
				break
			}
		}
	};
	D.fn.comp = function (Z) {
		D(".comp", this).add(this).each(function (a) {
			D(this).compThis(Z)
		})
	};
	D.fn.chooseProject = function (e) {
		var a = D(this);
		var b = a.width();
		var d = a.attr("id");
		a.attr("id", d + "_txt");
		a.attr("name", d + "_txt");
		var c = D("<input id='" + d + "' name='" + d + "' type='hidden'/>");
		if (typeof(e.text) != "undefined") {
			a.val(e.text);
			a.attr("title", e.text)
		}
		if (typeof(e.value) != "undefined") {
			c.val(e.value)
		}
		a.before(c);
		var Z = D("<span class='ico16 correlation_project_16'></span>");
		a.after(Z);
		if (e.okCallback != undefined) {
			a.blur(function () {
				e.okCallback(Z)
			})
		}
		if (c.height() != 0) {
			a.height(c.height())
		}
		b = b - Z.outerWidth(true) - 8;
		if (b > 0) {
			a.width(b)
		} else {
			setTimeout(function () {
				b = a.width() - Z.outerWidth(true) - 8;
				a.width(b)
			}, 300)
		}
		Z.unbind("click").bind("click", function () {
			var h = a.prev().val();
			var i = e.resetCallback;
			var g = e.okCallback;
			var f = D.dialog({
					id: "projectSelectDialog",
					url: _ctxPath + "/project/project.do?method=projectSelect" + CsrfGuard.getUrlSurffix(),
					title: D.i18n("form.base.relationProject.title"),
					width: 700,
					height: 450,
					targetWindow: getCtpTop(),
					transParams: {
						projectRole: "0,1,2,3,4,5",
						projectState: "0,1,2",
						projectId: h
					},
					buttons: [{
							text: D.i18n("common.button.reset.label"),
							handler: function () {
								a.val("");
								a.prev().val("");
								if (i != undefined) {
									i(Z)
								}
								f.close()
							}
						}, {
							text: D.i18n("common.button.ok.label"),
							isEmphasize: true,
							handler: function () {
								var j = f.getReturnValue();
								if (j == false) {
									D.alert(D.i18n("form.base.relationProject.chooseItem"));
									return
								} else {
									a.val(j.projectName);
									a.attr("title", j.projectName);
									a.prev().val(j.projectId);
									if (g != undefined) {
										g(Z)
									}
									f.close()
								}
							}
						}, {
							text: D.i18n("common.button.cancel.label"),
							handler: function () {
								f.close()
							}
						}
					]
				})
		})
	};
	D.fn.showEditor = function (j) {
		var e = D(this);
		if (j.contentType == "html") {
			var a = _ctxPath;
			var b = D.extend({}, {
					toolbarSet: "Basic",
					category: "1",
					maxSize: 1048576,
					autoResize: true,
					showToolbar: true,
					backFun: function () {},
					height: "100%"
				}, j);
			e.attr("editorReadyState", "loading");
			D.ajaxSetup({
				cache: true
			});
			if (Q) {
				D.getScript(a + "/common/RTE/fckeditor.js", function () {
					var l = a + "/common/RTE/";
					var k = new FCKeditor(e[0].id);
					k.BasePath = l;
					k.Config.DefaultLanguage = _locale.replace("_", "-").toLowerCase();
					k.ToolbarSet = b.toolbarSet;
					k.Config.ImageUploadURL = a + "/fileUpload.do?method=processUpload&type=1&applicationCategory=" + b.category + "&extensions=jpg,gif,jpeg,png&maxSize=" + b.maxSize;
					k.Config.FlashUploadURL = a + "/fileUpload.do?method=processUpload&type=1&applicationCategory=" + b.category + "&extensions=swf,fla&maxSize=" + b.maxSize;
					k.Config.ImageUploadMaxFileSize = "1M";
					k.ReplaceTextarea()
				})
			} else {
				var i = "/common/ckeditor";
				var f = parseInt(D.browser.version, 10);
				var Z = navigator.userAgent;
				var g = D.browser.msie;
				var h;
				var d = false;
				if (typeof useHighVersionEditor !== "undefined") {
					h = useHighVersionEditor;
					if (!useHighVersionEditor && !(g && (f < 9))) {
						d = true;
						h = true
					}
					d = true;
					h = true
				} else {
					h = !(g && (f < 9))
				}
				if (h) {
					i = i + "410";
					CKEDITOR_BASEPATH = CKEDITOR_BASEPATH.replace("ckeditor", "ckeditor410")
				}
				function c() {
					CKEDITOR.basePath = a + i + "/";
					CKEDITOR.baseHref = CKEDITOR.basePath;
					if (CKEDITOR.instances[e[0].id]) {
						CKEDITOR.instances[e[0].id].destroy()
					}
					var k = D(e[0]).height();
					var l = (typeof(editorStartupFocus) == "undefined") ? false : editorStartupFocus;
					if (!b.showToolbar) {
						D(e[0]).parent().hide()
					}
					if (b.defaultStyle) {
						CKEDITOR.addCss(b.defaultStyle)
					}
					CKEDITOR.replace(e[0].id, {
						height: b.height,
						startupFocus: l,
						toolbar: b.toolbarSet,
						on: {
							instanceReady: function (q) {
								var o = CKEDITOR.instances[e.attr("id")];
								e.attr("editorReadyState", "complete");
								e.trigger("editorReady", q);
								if (k != 0) {
									try {
										o.document.getBody().setStyle("height", k - 10 + "px")
									} catch (r) {}
								}
								if (D.browser.mozilla && o.document.getBody().getHtml() == "<p><br></p>") {
									o.document.getBody().setHtml('<p><br type="_moz"></p>')
								}
								if (!b.showToolbar) {
									D("#" + q.editor.id + "_top").hide();
									D(e[0]).parent().show()
								}
								if (b.toolbarSet == "VerySimple" && D(e[0]).attr("comp") !== undefined && !(D.parseJSON("{" + D(e[0]).attr("comp") + "}").showToolbar)) {
									D("#" + q.editor.id + "_top").hide();
									D(e[0]).parent().show()
								}
								function m() {
									var v = CKEDITOR.instances[e.attr("id")];
									var w = v.ui.space("contents");
									if (w) {
										var s = document.body.clientHeight - D(w.$).offset().top;
										s = s < 0 ? 0 : s;
										try {
											if (_fckEditorDecentHeight) {
												s -= 20
											}
										} catch (x) {}
										w.setStyle("height", s + "px");
										var u = v.window.getFrame();
										if (u.$.style.width != "786px") {
											u.$.style.width = "786px"
										}
									}
									v.window.getFrame().$.style.display = "block";
									v.window.getFrame().$.style.margin = "auto";
									v.window.getFrame().$.parentNode.style.marginTop = "0px";
									var t = v.window.getFrame().$.parentNode.offsetHeight;
									v.window.getFrame().$.parentNode.style.backgroundColor = "#d8d9db"
								}
								if (b.autoResize) {
									m();
									window.onresize = function (s) {
										m()
									};
									D(e[0]).parent().resize(function () {
										m()
									})
								} else {
									var p = o.ui.space("contents");
									p.setStyle("height", b.height)
								}
								if (b.toolbarSet == "VerySimple") {
									o.document.getBody().setStyle("padding", 0);
									o.document.getBody().setStyle("margin", "5px 0 0 0");
									var n = o.window.getFrame();
									n.$.style.width = D(e[0]).width() + "px"
								}
								if (b.backFun != null && typeof b.backFun == "function") {
									b.backFun()
								}
								if (v3x && v3x.isMSIE) {
									q.editor.on("dialogShow", function (t) {
										var s = t.data._.element.$.getElementsByTagName("a");
										for (var v = 0; v < s.length; v++) {
											var u = s[v].getAttribute("href");
											if (u && u.indexOf("void(0)") > -1) {
												s[v].removeAttribute("href")
											}
										}
									})
								}
							}
						}
					})
				}
				if (!d) {
					c()
				} else {
					CKEDITOR = null;
					D.getScript(a + i + "/ckeditor.js", function () {
						c()
					})
				}
			}
			D.ajaxSetup({
				cache: false
			})
		}
	};
	D.fn.getEditorContent = function (c) {
		var b = D(this);
		var f = CKEDITOR.instances[D(this).attr("id")];
		if (f != null) {
			var Z = b.attr("comp");
			if (Z) {
				var d = D.parseJSON("{" + Z + "}");
				if (d.type == "editor" && d.contentType == "html") {
					if (Q) {
						return FCKeditorAPI.GetInstance(this.attr("id")).GetHTML()
					} else {
						var e = CKEDITOR.instances[this.attr("id")].getData();
						return e.replace(/\u200B/g, "").replace(/\n/g, "").replace(/\t/g, "")
					}
				}
			}
		} else {
			var a = D(this).val();
			if (a != null) {
				a = a.replace(/\n/g, "<br/>")
			}
			return a
		}
		return null
	};
	D.fn.getEditorText = function (h) {
		var f = D(this),
		e = "";
		var c = CKEDITOR.instances[D(this).attr("id")];
		if (c != null) {
			var a = f.attr("comp");
			if (a) {
				var Z = D.parseJSON("{" + a + "}");
				if (Z.type == "editor" && Z.contentType == "html") {
					if (Q) {
						return "not supported yet"
					} else {
						var b = CKEDITOR.instances[this.attr("id")].document.$.body;
						if (D.browser.mozilla && (D.browser.version).substring(0, 2) < 45) {
							e = b.textContent
						} else {
							if (Z.toolbarSet == "VerySimple") {
								var d = document.createElement("div");
								d.id = "VerySimple_tempHtml";
								d.innerHTML = b.innerHTML;
								f.append(d);
								var g = document.getElementById("VerySimple_tempHtml");
								if ((D.browser.msie && (parseInt(D.browser.version, 10) == 9)) || (D.browser.msie && (parseInt(D.browser.version, 10) == 10))) {
									g.innerHTML = g.innerHTML.replace(/<p>/g, "").replace(/<\/p>/g, "<br>");
									e = g.innerText
								} else {
									if (D.browser.msie && (parseInt(D.browser.version, 10) > 10)) {
										g.innerHTML = g.innerHTML.replace(/<p>/g, "").replace(/<\/p>/g, "");
										e = g.innerText
									} else {
										if (D.browser.mozilla) {
											b.innerHTML = b.innerHTML.replace(/<p>/g, "").replace(/<\/p>/g, "").replace(/<br><\/li>/g, "</li>");
											e = b.innerText
										} else {
											e = b.innerText
										}
									}
								}
								D(g).remove()
							} else {
								e = b.innerText
							}
						}
						e = e.replace(/\u00A0/g, " ");
						e = e.replace(/\ufeff/g, "");
						e = e.replace(/\u200b/g, "");
						return e
					}
				}
			}
		} else {
			var e = D(this).val();
			return e
		}
		return null
	};
	D.fn.toggleEditorToolbar = function (Z) {
		var a = CKEDITOR.instances[this.attr("id")];
		if (a) {
			if (Z.hide) {
				D("#" + a.id + "_top").hide()
			} else {
				D("#" + a.id + "_top").show()
			}
		}
	};
	function O(Z, b) {
		if (this.CKEDITOR) {
			var a = CKEDITOR.instances[Z];
			a.setData(b)
		}
		D("#" + Z).bind("editorReady", function () {
			var c = CKEDITOR.instances[Z];
			c.setData(b)
		})
	}
	D.fn.setEditorContent = function (c) {
		var a = D(this);
		var Z = a.attr("comp");
		if (Z) {
			var b = D.parseJSON("{" + Z + "}");
			if (b.type == "editor" && b.contentType == "html") {
				if (Q) {
					FCKeditorAPI.GetInstance(this.attr("id")).SetHTML(c)
				} else {
					O(this.attr("id"), c)
				}
				return null
			}
		}
		if (a.val) {
			a.val(c)
		}
		return null
	};
	D.fn.initEditorContent = function (f) {
		var b = D(this);
		var Z = b.attr("comp");
		if (Z) {
			var c = D.parseJSON("{" + Z + "}");
			if (c.type == "editor" && c.contentType == "html") {
				var d = CKEDITOR.instances[this.attr("id")];
				var a = d.createRange();
				a.selectNodeContents(d.editable());
				var e = d.getSelection();
				e.selectRanges([a]);
				d.insertHtml(f, "html", a);
				return null
			}
		}
		return null
	};
	D.fn.insertEditorContent = function (d) {
		var a = D(this);
		var Z = a.attr("comp");
		if (Z) {
			var b = D.parseJSON("{" + Z + "}");
			if (b.type == "editor" && b.contentType == "html") {
				var c = CKEDITOR.instances[this.attr("id")];
				c.insertHtml(d);
				return null
			}
		}
		return null
	};
	D.fn.selectPeople = function (b) {
		var h = D(this),
		l = h.attr("id"),
		o = h.attr("_inited"),
		r = 28;
		var m = l,
		f,
		c,
		a,
		i,
		d,
		e = b.showBtn != undefined ? b.showBtn : false;
		if (o) {
			f = h.next();
			m = f.attr("id");
			c = f.next(),
			a = c.attrObj("tmpclone"),
			i = c.attr("_hide");
			c.remove();
			f.remove()
		} else {
			h.attr("id", l + "_txt");
			h.attr("name", l + "_txt");
			h.attr("readonly", "readonly");
			if (e && !b.extendWidth && h.width() != 0) {
				h.width(h.width() - r)
			}
			h.attr("_inited", 1)
		}
		f = D('<input type="hidden" />');
		f.attr("id", m);
		f.attr("name", m);
		f.attrObj("_comp", h);
		if (b.value) {
			f.val(b.value)
		}
		h.after(f);
		if (b.valueChange) {
			f.change(b.valueChange(f))
		}
		if (e) {
			var s = !(b.maxSize === 1) || (h[0].tagName && h[0].tagName.toLowerCase() == "textarea");
			var q = {
				Account: "account",
				Department: "dept",
				Team: "team",
				Post: "post",
				Level: "level",
				Member: "people"
			};
			var k = q[b.selectType];
			k = k ? k : "people";
			d = D("<span></span>");
			h.attrObj("_rel", d);
			d.attr("_isrel", 1);
			d.attr("class", "ico16 " + (s ? "check" : "radio") + "_" + k + "_16");
			d.addClass("_autoBtn");
			if (a) {
				d.attrObj("tmpclone", a)
			}
			if (i == 1) {
				d.hide()
			}
			f.after(d)
		} else {
			d = h;
			d.css("cursor", "pointer")
		}
		if (b.extendWidth) {
			if (!D.browser.msie || (D.browser.msie && (parseInt(D.browser.version, 10) >= 9))) {
				var n = f.css("display");
				f.css("display", "block");
				if (f.css("width").indexOf("%") != -1) {
					h.css("width", f.css("width"))
				} else {
					if (f.width() > 0) {
						h.width(f.width())
					}
				}
				f.css("display", n)
			} else {
				var p = false;
				if (h.width() <= 0) {
					h.css("width", "100%");
					p = true
				}
				if (h.width() <= 0) {
					h.css("width", "100");
					p = true
				}
			}
			if (e) {
				var g = 0;
				if (D.browser.msie && D.browser.version == "7.0") {
					g = h.width() * 2 - h.outerWidth(true) - d.outerWidth(true) - 15
				} else {
					g = h.width() * 2 - h.outerWidth(true) - d.outerWidth(true) - 2
				}
				if (g > 0) {
					h.width(g)
				}
			}
		}
		if (b.text) {
			h.val(b.text);
			h.attr("title", b.text)
		}
		function Z(v) {
			h.val(v.text);
			h.attr("title", v.text);
			if (v.obj && (b.returnValueNeedType === false)) {
				h.data("obj", v.obj)
			}
			f.val(v.value);
			if (b.valueChange) {
				f.change(b.valueChange(f))
			}
			var t = h.attr("comp");
			if (t) {
				var w = D.parseJSON("{" + t + "}");
				w.value = v.value;
				w.text = v.text;
				var u = D.toJSON(w);
				h.attr("comp", u.substring(1, u.length - 1))
			}
		}
		if (b.excludeElements) {}
		b.id = h.attr("id");
		if (b.mode != "modal") {
			b.callbk = function (t) {
				Z(t);
				h.focus()
			}
		}
		if (!b.params) {
			b.params = {}
		}
		var j = b.elements;
		d.unbind("click").click(function () {
			b.params.value = f.val();
			b.params.text = h.val();
			if (!j) {
				var u = h.data("obj");
				if (u) {
					b.elements = u
				}
			}
			var t = D.selectPeople(b);
			if (t) {
				Z(t)
			}
		})
	};
	D.fn.initAceEditor = function (i) {
		var g = D(this).attr("id") + "Ace",
		f = i.height,
		Z = i.width,
		d = i.mode;
		var h = i.fontSize,
		c = i.theme,
		b = i.highlight;
		if (f == undefined || f == null) {
			f = "300"
		}
		if (Z == undefined || Z == null) {
			Z = "400"
		}
		var a = D("<pre id='" + g + "'  style='width: " + Z + "px;height: " + f + "px;'></div>");
		D(this).before(a);
		ace.require("ace/ext/language_tools");
		var e = ace.edit(g);
		if (d == undefined || d == null) {
			d = "java"
		}
		e.session.setMode("ace/mode/" + d);
		if (c == undefined || c == null) {
			c = "monokai"
		}
		e.setTheme("ace/theme/" + c);
		if (h == undefined || h == null) {
			h = 14
		}
		e.setFontSize(h);
		e.setHighlightActiveLine(true);
		e.setOptions({
			enableBasicAutocompletion: true,
			enableSnippets: true,
			enableLiveAutocompletion: true
		})
	};
	D.fn.fastSelect = function (b) {
		var s = {
			Account: "account",
			Department: "dept",
			Team: "team",
			Post: "post",
			Level: "level",
			Member: "people"
		};
		var m = s[b.selectType];
		var u = !(b.maxSize === 1);
		m = m ? m : "people";
		var i = D(this),
		n = b.id,
		r = i.attr("_inited"),
		t = 28;
		var c = D("<span id='" + n + "_btn' title='" + D.i18n("org.index.select.people.label.js") + "' class='selectPeopleIcon ico16 " + (u ? "check" : "radio") + "_" + m + "_16'></span>");
		b.srcElement.after(c);
		var o = n,
		h,
		f,
		d,
		a,
		j,
		e,
		g = b.showBtn != undefined ? b.showBtn : false;
		if (b.text) {
			i.val(b.text);
			i.attr("title", b.text)
		}
		h = D('<input type="hidden" />');
		h.attr("id", o);
		h.attr("name", o);
		f = D('<input type="hidden" />');
		f.attr("id", o + "_txt");
		f.attr("name", o + "_txt");
		h.attrObj("_comp", i);
		f.attrObj("_comp", i);
		if (b.value) {
			h.val(b.value)
		}
		i.after(h);
		i.after(f);
		if (b.valueChange) {
			h.change(b.valueChange(h))
		}
		if (b.extendWidth) {
			if (!D.browser.msie || (D.browser.msie && (parseInt(D.browser.version, 10) >= 9))) {
				var p = h.css("display");
				h.css("display", "block");
				if (h.css("width").indexOf("%") != -1) {
					i.css("width", h.css("width"))
				} else {
					if (h.width() > 0) {
						i.width(h.width())
					}
				}
				h.css("display", p)
			} else {
				var q = false;
				if (i.width() <= 0) {
					i.css("width", "100%");
					q = true
				}
				if (i.width() <= 0) {
					i.css("width", "100");
					q = true
				}
			}
		}
		if (b.extendWidth) {
			if (b.outBtn) {
				var k = b.srcElement.width() + 2;
				if (k < 140) {
					k = 140
				}
				b.srcElement.width(k - 30)
			}
		}
		function Z(AE) {
			var x;
			var AG;
			var y = [];
			var AH = [];
			var AD = i.select2("data");
			var w = AE.value.split(",");
			var AB = AE.text.split("\u3001");
			for (var AC = 0; AC < AD.length; AC++) {
				var AF = AD[AC];
				if ((AF.text.indexOf(D.i18n("ctp.select2.people.departure")) > -1 || AF.text.indexOf(D.i18n("ctp.select2.people.deactivate")) > -1) && (undefined == b.maxSize || b.maxSize > 1)) {
					y.push(AF.text);
					AH.push(AF.id)
				}
			}
			if (AH != "" && AH != null) {
				x = D.merge(AH, w)
			} else {
				x = w
			}
			if (AE.obj && (b.returnValueNeedType === false)) {
				i.data("obj", AE.obj)
			}
			if (null != x) {
				for (var AC = 0; AC < x.length; AC++) {
					var AF = x[AC];
					if (D.inArray(AF, AH) == -1) {
						AH.push(AF)
					}
				}
				h.val(AH.join(","))
			} else {
				h.val("")
			}
			if (y != "" && y != null) {
				AG = D.merge(y, AB)
			} else {
				AG = AB
			}
			f.val(AG.join("\u3001"));
			if (b.valueChange) {
				h.change(b.valueChange(h))
			}
			i.empty();
			for (var AC = 0; AC < AH.length; AC++) {
				if ("" != AH[AC]) {
					i.append("<option value='" + AH[AC] + "'>" + AG[AC] + "</option>")
				}
			}
			i.val(AH).trigger("change");
			var AA = i.attr("comp");
			if (AA) {
				var v = D.parseJSON("{" + AA + "}");
				var z = D.toJSON(v);
				i.attr("comp", z.substring(1, z.length - 1))
			}
		}
		if (b.excludeElements) {}
		if (b.mode != "modal") {
			b.callbk = function (v) {
				Z(v);
				i.focus()
			}
		}
		if (!b.params) {
			b.params = {}
		}
		var l = b.elements;
		switch (b.selectType) {
		case "Account":
			G(b, D.i18n("ctp.select2.account.placeholder"));
			break;
		case "Department":
			G(b, D.i18n("ctp.select2.account.placeholder"));
			break;
		case "Team":
			G(b, D.i18n("ctp.select2.team.placeholder"));
			break;
		case "Post":
			G(b, D.i18n("ctp.select2.post.placeholder"));
			break;
		case "Level":
			G(b, D.i18n("ctp.select2.leave.placeholder"));
			break;
		case "Member":
			G(b, D.i18n("ctp.select2.people.placeholder"));
			break
		}
		i.bind("change").change(function () {
			var z = i.val();
			var x = [];
			var AA = [];
			var v = i.select2("data");
			if (null != z) {
				for (var y = 0; y < z.length; y++) {
					var w = z[y];
					if (D.inArray(w, x) == -1) {
						x.push(w)
					}
				}
				h.val(x.join(","))
			} else {
				h.val("")
			}
			if (v != null) {
				for (var y = 0; y < v.length; y++) {
					var w = v[y];
					if (D.inArray(w, AA) == -1) {
						AA.push(w.text)
					}
				}
				f.val(AA.join("\u3001"))
			} else {
				f.val("")
			}
		});
		c.unbind("click").click(function () {
			b.params.value = null;
			if (null != i.val()) {
				b.params.value = i.val().join(",")
			} else {
				b.params.value = h.val()
			}
			if (!l) {
				var w = i.data("obj");
				if (w) {
					b.elements = w
				}
			}
			var v = D.selectPeople(b);
			if (v) {
				Z(v)
			}
		})
	};
	function G(k, h) {
		var c = k.maxSize;
		if (undefined == c || null == c) {
			c = 99999
		}
		var j = [];
		var e = [];
		if (undefined != k.value && k.value != "") {
			e = k.value.split(",")
		}
		var Z = [];
		if (undefined != k.text) {
			Z = k.text.split(",")
		}
		for (var g = 0; g < e.length; g++) {
			var d = {
				id: "",
				text: ""
			};
			d.id = e[g];
			d.text = Z[g];
			k.srcElement.append("<option value='" + e[g] + "'>" + Z[g] + "</option>");
			j.push(d)
		}
		var f = _locale;
		if (_locale == "zh_CN") {
			f = "zh-CN"
		}
		if (_locale == "zh_TW") {
			f = "zh-TW"
		}
		k.srcElement.select2({
			placeholder: h,
			language: f,
			maximumSelectionLength: c,
			initSelection: function (i, l) {
				if (undefined != k.value) {
					i.val(k.value.split(","));
					D("#" + k.id + "_txt").val(Z.join("\u3001"))
				}
				l(j)
			},
			ajax: {
				url: "/seeyon/organization/orgIndexController.do?method=getFastSelect" + k.selectType + "&time=" + new Date().getTime(),
				dataType: "json",
				delay: 250,
				data: function (i) {
					return {
						q: encodeURI(i.term),
						page: i.page
					}
				},
				processResults: function (p, q) {
					q.page = q.page || 1;
					var o = [];
					if (undefined == q.term) {
						var n = k.srcElement.select2("data");
						for (var m = 0; m < n.length; m++) {
							var l = {
								id: "",
								text: ""
							};
							var r = n[m];
							l.id = r.id;
							l.text = r.text;
							o.push(l)
						}
						p = o.concat(p)
					}
					return {
						results: p.unique()
					}
				},
				cache: true
			},
			allowClear: false,
			escapeMarkup: function (i) {
				var l = {
					"\\": "&#92;",
					"&": "&amp;",
					"<": "&lt;",
					">": "&gt;",
					'"': "&quot;",
					"'": "&#39;",
					"/": "&#47;"
				};
				if (typeof i !== "string") {
					return i
				}
				return String(i).replace(/[&<>"'\/\\]/g, function (m) {
					return l[m]
				})
			},
			minimumInputLength: 0,
			templateResult: a,
			templateSelection: b
		});
		function a(i) {
			return i.text
		}
		function b(i) {
			return i.text
		}
		Array.prototype.unique = function () {
			var p = [];
			var l = [];
			for (var o = 0; o < this.length; o++) {
				if (p.indexOf(this[o].id) == -1) {
					p.push(this[o].id);
					l.push(this[o])
				}
			}
			return l
		}
	}
	D.selectPeople = function (b) {
		var g = {
			mode: "div"
		};
		function f(j) {
			var k = [];
			for (var h = 0; h < j.length; h++) {
				if (Object.prototype.toString.call(j[h]) == "[object Array]") {
					k.push(f(j[h]))
				} else {
					k.push(j[h])
				}
			}
			return k
		}
		b._window = window;
		b = D.extend(g, b);
		var e = b.onlyShowChildrenAccount;
		var a = _ctxPath + "/selectpeople.do?onlyShowChildrenAccount=" + e + CsrfGuard.getUrlSurffix(),
		Z;
		if (b.mode == "modal") {
			if (b.preCallback) {
				b.preCallback(b)
			}
			var d = window.showModalDialog(a + "&isFromModel=true", b, "dialogWidth=708px;dialogHeight=568px");
			if (d != null && (typeof d == "object")) {
				d.obj = f(d.obj)
			} else {
				if (d == -1) {
					return
				}
			}
			if (d) {
				Z = d;
				if (b.callback) {
					b.callback(d, b)
				}
			}
		} else {
			if (b.preCallback) {
				b.preCallback(b)
			}
			var c = D.dialog({
					id: "SelectPeopleDialog",
					url: a,
					width: 820,
					height: 506,
					title: D.i18n("selectPeople.page.title"),
					checkMax: true,
					transParams: b,
					closeParam: {
						show: true,
						autoClose: true,
						handler: function () {
							if (b.canclecallback) {
								b.canclecallback()
							}
						}
					},
					targetWindow: getCtpTop(),
					buttons: [{
							text: D.i18n("common.button.ok.label"),
							isEmphasize: true,
							handler: function () {
								var l = c.getReturnValue(),
								h = true;
								if (l == -1) {
									return
								}
								if (l) {
									if (b.callbk && b.callbk(l)) {
										h = false
									}
									if (b.callback && b.callback(l, b)) {
										h = false
									}
								}
								if (h) {
									var j = "";
									var m = 0;
									var n = l.value.split(",");
									for (var k = 0; k < n.length; k++) {
										var o = n[k];
										if (o.indexOf("Member") == 0) {
											if (j == "") {
												j = o
											} else {
												j = j + "," + o
											}
											m++;
											if (m >= 30) {
												break
											}
										}
									}
									D.ajax({
										type: "POST",
										beforeSend: CsrfGuard.beforeAjaxSend,
										url: encodeURI("/seeyon/organization/orgIndexController.do?method=saveRecentData4OrgIndex&rData=" + j)
									});
									c.close(c.index)
								}
							}
						}, {
							text: D.i18n("common.button.cancel.label"),
							handler: function () {
								if (b.canclecallback) {
									b.canclecallback()
								}
								c.close()
							}
						}
					],
					bottomHTML: '<table id="flowTypeDiv" class="hidden" width="" border="0" height="20" align="center" cellpadding="0" cellspacing="0">\r\n  <tr>\r\n    <td id="concurrentType">&nbsp;&nbsp;&nbsp;&nbsp;\r\n      <label for="concurrent">\r\n        <input id="concurrent" name="flowtype" type="radio" value="1" checked>&nbsp;<span>' + D.i18n("selectPeople.flowtype.concurrent.lable") + '</span>\r\n      </label>&nbsp;&nbsp;&nbsp;\r\n    </td>\r\n    <td id="sequenceType">\r\n      <label for="sequence">\r\n        <input id="sequence" name="flowtype" type="radio" value="0">&nbsp;<span>' + D.i18n("selectPeople.flowtype.sequence.lable") + '</span>\r\n      </label>&nbsp;&nbsp;&nbsp;\r\n    </td>\r\n    <td id="multipleType">\r\n      <label for="multiple">\r\n        <input id="multiple" name="flowtype" type="radio" value="2">&nbsp;<span>' + D.i18n("selectPeople.flowtype.multiple.lable") + '</span>\r\n      </label>&nbsp;&nbsp;&nbsp;\r\n    </td>\r\n    <td id="colAssignType">\r\n      <label for="colAssign">\r\n        <input id="colAssign" name="flowtype" type="radio" value="3">&nbsp;<span>' + D.i18n("selectPeople.flowtype.colAssign.lable") + "</span>\r\n      </label>\r\n    </td>\r\n  </tr>\r\n</table>"
				})
		}
		return Z
	};
	D.selectStructuredDocFileds = function (a) {
		var c = D.extend({}, {
				appName: "",
				formAppId: "",
				fieldType: "",
				showSystemVariables: "",
				showFormVariables: "true",
				tableType: "",
				externalType: ""
			}, a);
		var Z = _ctxPath + "/custom/function.do?method=showParamBindIndex&appName=" + c.appName + "&formAppId=" + c.formAppId + "&tableType=" + c.tableType + "&fieldType=" + c.fieldType + "&showSystemVariables=" + c.showSystemVariables + "&showFormVariables=" + c.showFormVariables + "&externalType=" + c.externalType;
		var b = D.dialog({
				id: "SelectStructuredDocFiledsDialog",
				url: Z,
				width: 500,
				height: 500,
				title: D.i18n("workflow.customFunction.parmbind.label.js"),
				checkMax: true,
				transParams: a,
				targetWindow: getCtpTop(),
				buttons: [{
						text: D.i18n("common.button.ok.label"),
						isEmphasize: true,
						handler: function () {
							var d = b.getReturnValue();
							if (typeof(d) == undefined || d === null) {
								return
							}
							if (a.onOk) {
								a.onOk(d)
							}
							b.close()
						}
					}, {
						text: D.i18n("common.button.cancel.label"),
						handler: function () {
							b.close();
							if (a.onCancel) {
								a.onCancel()
							}
						}
					}
				]
			})
	};
	D.selectFunction = function (a) {
		var c = D.extend({}, {
				templateCode: "",
				category: "*"
			}, a);
		var Z = _ctxPath + "/custom/function.do?category=" + c.category + "&templateCode=" + c.templateCode;
		var b = D.dialog({
				id: "SelectFunctionDialog",
				url: Z,
				width: 708,
				height: 530,
				title: D.i18n("functionmod.title.info"),
				checkMax: true,
				transParams: a,
				targetWindow: getCtpTop(),
				buttons: [{
						text: D.i18n("common.button.ok.label"),
						isEmphasize: true,
						handler: function () {
							var d = b.getReturnValue();
							if (typeof(d) == undefined || d === null) {
								alert(D.i18n("functionmod.select.isnul"));
								return
							}
							c.methodName = d;
							if (a.onOk) {
								a.onOk(d)
							}
							b.close()
						}
					}, {
						text: D.i18n("common.button.cancel.label"),
						handler: function () {
							b.close()
						}
					}
				]
			})
	};
	function H(a) {
		var Z = _ctxPath + "/custom/function.do?method=setParams&category=" + a.category + "&templateCode=" + a.templateCode + "&methodName=" + a.methodName + "&formApp=" + a.formApp;
		var b = D.dialog({
				id: "SetParamsFunctionDialog",
				url: Z,
				width: 708,
				height: 530,
				title: D.i18n("functionmod.title.info"),
				checkMax: true,
				transParams: a,
				targetWindow: getCtpTop(),
				buttons: [{
						text: D.i18n("common.button.ok.label"),
						isEmphasize: true,
						handler: function () {
							var c = b.getReturnValue();
							if (c != null && c != "") {
								if (a.onOk) {
									a.onOk(c)
								}
								b.close()
							}
						}
					}, {
						text: D.i18n("common.button.cancel.label"),
						handler: function () {
							b.close()
						}
					}
				]
			})
	}
	D.callFormula = function (a) {
		var c = D.extend({}, {
				returnType: "String,Bool,Numberic,DateTime,Member,Department,Post,Level,Account,Role",
				formulaType: "Constant,Variable,GroovyFunction,JavaFunction",
				templateCode: "",
				catagory: "",
				appName: "",
				showFormVariables: "true"
			}, a);
		var Z = _ctxPath + "/formula/formula.do?method=callFormula";
		if (c.returnType) {
			Z += "&returnType=" + c.returnType
		}
		if (c.formulaType) {
			Z += "&formulaType=" + c.formulaType
		}
		if (c.templateCode) {
			Z += "&templateCode=" + c.templateCode
		}
		if (c.formulaType) {
			Z += "&formulaType=" + c.formulaType
		}
		if (c.appName) {
			Z += "&appName=" + c.appName
		}
		if (c.appName) {
			Z += "&catagory=" + c.catagory
		}
		if (c.showFormVariables) {
			Z += "&showFormVariables=" + c.showFormVariables
		}
		var b = D.dialog({
				id: "formulaDialog",
				url: Z,
				width: 600,
				height: 400,
				title: "\u8c03\u7528",
				checkMax: true,
				targetWindow: getCtpTop(),
				transParams: a,
				buttons: [{
						text: D.i18n("common.button.ok.label"),
						isEmphasize: true,
						handler: function () {
							var e = b.getReturnValue();
							if (e == "" || e == null || e == undefined) {
								alert("\u8bf7\u5148\u9009\u62e9!");
								return
							}
							b.close();
							c.methodName = e.formulaName;
							if (e.params != null && e.params != undefined && e.params != "") {
								K(c, e)
							} else {
								if (e.formulaType != "0" && e.formulaType != "1") {
									K(c, e)
								} else {
									var d = 'getVar("' + e.formulaName + '")';
									if (a.onOk) {
										a.onOk(d)
									}
								}
							}
						}
					}, {
						text: D.i18n("common.button.cancel.label"),
						handler: function () {
							b.close()
						}
					}
				]
			})
	};
	function K(a, c) {
		var Z = _ctxPath + "/formula/formula.do?method=setParams&id=" + c.id + "&category=" + a.category + "&templateCode=" + a.templateCode + "&methodName=" + a.methodName + "&appName=" + a.appName + "&showFormVariables=" + a.showFormVariables + "&formApp=" + a.formApp;
		var b = D.dialog({
				id: "SetParamsFunctionDialog",
				url: Z,
				width: 600,
				height: 400,
				title: "\u53c2\u6570\u8bbe\u7f6e",
				checkMax: true,
				targetWindow: getCtpTop(),
				buttons: [{
						text: D.i18n("common.button.ok.label"),
						isEmphasize: true,
						handler: function () {
							var d = b.getReturnValue();
							if (d != null && d != "") {
								if (a.onOk) {
									a.onOk(d)
								}
								b.close()
							}
						}
					}, {
						text: D.i18n("common.button.cancel.label"),
						handler: function () {
							b.close()
						}
					}
				]
			})
	}
	D.fn.showOffice = function (a) {
		var b = {
			webRoot: _ctxServer
		};
		a = D.extend(b, a);
		var d = [];
		d[".doc"] = ".wps";
		d[".wps"] = ".doc";
		d[".et"] = ".xls";
		d[".xls"] = ".et";
		d[".pdf"] = ".pdf";
		var c = D.ctx.isOfficeEnabled(a.fileType);
		if (!c && d[a.fileType]) {
			c = D.ctx.isOfficeEnabled(d[a.fileType])
		}
		if (c) {
			var Z = D('<div id="officeFrameDiv" style="display:none;height:100%"><iframe src="" name="officeEditorFrame" id="officeEditorFrame" frameborder="0" width="100%" height="100%"></iframe></div>');
			this.replaceWith(Z);
			a.handWriteCurrentUserId = D.ctx.CurrentUser.id;
			if (a.fileType == ".pdf") {
				createPdfOcx(a)
			} else {
				initBaseOffice(a)
			}
			if (typeof officeSupportCallback != "undefined") {
				officeSupportCallback()
			}
		} else {
			this.replaceWith(D('<center><font color="red" style="font-weight:bold">' + D.i18n("common.body.type.officeNotSupported") + "</font></center>"));
			if (typeof officeNotSupportCallback != "undefined") {
				officeNotSupportCallback()
			}
		}
	};
	D.fn.tab = function (a) {
		var Z = this.attrObj("tabObj");
		if (Z) {
			return Z
		}
		a.id = this.attr("id");
		Z = new MxtTab(a);
		this.attrObj("tabObj", Z);
		if (a.mode && "mouseOver" === a.mode) {
			Z.setMouseOver()
		}
	};
	D.fn.tabEnable = function (a) {
		var Z = this.attrObj("tabObj");
		if (Z) {
			Z.enable(a)
		}
	};
	D.fn.tabDisable = function (a) {
		var Z = this.attrObj("tabObj");
		if (Z) {
			Z.disabled(a)
		}
	};
	D.fn.tabCurrent = function (a) {
		var Z = this.attrObj("tabObj");
		if (Z) {
			Z.setCurrent(a)
		}
	};
	D.fn.toolbar = function (a) {
		var c = {
			contextPath: _ctxPath,
			render: this[0].id
		};
		c = D.extendParam(c, a);
		var d = new WebFXMenuBar(c),
		e = a.toolbar;
		this.attrObj("toolbarObj", d);
		if (e) {
			if (!_isDevelop) {
				var b = [];
				D.each(e, function (k, j) {
					var g = j.resCode,
					h = j.pluginId,
					i = false;
					D.privCheck(g, h, function () {
						b.push(j);
						i = true
					});
					if (i && j.subMenu) {
						var f = [];
						D.each(j.subMenu, function (l, m) {
							g = m.resCode,
							h = m.pluginId;
							D.privCheck(g, h, function () {
								f.push(m)
							})
						});
						j.subMenu = f
					}
				});
				e = b
			}
			D.each(e, function (h, g) {
				var f = D.extendParam({}, g);
				if (g.items) {
					f.items = g.items
				}
				if (g.subMenu) {
					f.subMenu = Z(g.subMenu)
				}
				f.id = f.id ? f.id : ("mb_" + h);
				d.add(new WebFXMenuButton(f))
			})
		}
		function Z(g) {
			var f = new WebFXMenu();
			D.each(g, function (k, j) {
				var i = D.extendParam({}, j),
				h;
				i.id = i.id ? i.id : ("mi_" + k);
				h = new WebFXMenuItem(i);
				f.add(h)
			});
			return f
		}
		d.show();
		return d
	};
	D.fn.toolbarEnable = function (a) {
		var Z = this.attrObj("toolbarObj");
		if (Z) {
			Z.enabled(a)
		}
	};
	D.fn.toolbarDisable = function (a) {
		var Z = this.attrObj("toolbarObj");
		if (Z) {
			Z.disabled(a)
		}
	};
	D.fn.menu = function (Z) {
		var a = D.extendParam({
				render: this[0].id
			}, Z);
		var b = new MxtMenuBar(a);
		if (Z.menus) {
			D.each(Z.menus, function (g, f) {
				var d = D.extendParam({}, f);
				var e = new MxtMenu(d);
				if (f.items) {
					D.each(f.items, function (h, i) {
						e.add(c(i))
					})
				}
				b.add(e)
			})
		}
		function c(d) {
			var e = D.extendParam({}, d);
			var f = new MxtMenuItem(e);
			if (d.items) {
				var g = new MxtSubMenu({});
				f.add(g);
				D.each(d.items, function (i, h) {
					g.add(c(h))
				})
			}
			return f
		}
		b.show()
	};
	function M() {
		var c = "DBstep.WebSignature.hasSetupHw";
		var a = D.globalCache(c);
		if (a == null) {
			var Z = false;
			try {
				if (D.v3x.isMSIE) {
					new ActiveXObject("DBstep.WebSignature");
					Z = true
				} else {
					Z = true
				}
			} catch (b) {
				Z = false
			}
			D.globalCache(c, Z);
			return Z
		} else {
			return a
		}
	}
	function L() {
		var Z = false;
		if (navigator.userAgent.toLowerCase().indexOf("edge") != -1) {
			Z = true
		}
		return Z
	}
	D.fn.htmlSignature = function (c, b) {
		if (!M()) {
			c.after(D('<center><font color="red" style="font-weight:bold">' + D.i18n("common.isignaturehtml.notInstall") + "</font></center>"))
		} else {
			if (L()) {
				c.after(D('<center><font color="red" style="font-weight:bold">\u5f53\u524d\u6d4f\u89c8\u5668\u4e0d\u652f\u6301office\u7b7e\u7ae0\uff01</font></center>'))
			} else {
				if (c.length > 0 && c[0].tagName.toLowerCase() === "input") {
					var Z = 0;
					if (c.css("width") === "100%" || c.width() == 0) {
						Z = c.parent("div").width()
					} else {
						Z = c.width()
					}
					var d = c.height();
					if (Z == 0) {
						Z = 100
					}
					if (d == 0) {
						d = 20
					}
					if (b.showButton == true) {
						var a = D("<span></span>");
						a.attr("id", "signButton");
						a.attr("class", b.buttonClass ? b.buttonClass : "ico16 signa_16");
						if (b.enabled === 1) {
							a.unbind("click").bind("click", function () {
								handWrite(b.recordId, b.signObj, false, "", D.ctx.CurrentUser.id)
							})
						}
						c.after(a);
						Z = Z - a.width() - 2
					}
					c[0].initWidth = Z + "";
					c[0].initHeight = d + "";
					c.attr("initWidth", Z + "");
					c.attr("initHeight", d + "")
				}
				b.signObj = c[0];
				b.currentUserId = D.ctx.CurrentUser.id;
				initHandWriteData(b)
			}
		}
	};
	D.fn.barCode = function (e) {
		var d = new barCodeManager();
		var p = e.width || 30,
		n = e.height || 30;
		var k = D(this),
		o = k.attr("id");
		var r = o + "_img";
		var i = D("<span style='display: block;float: left;'></span>");
		var g = D("<div id='" + r + "' class='left border_all' style='width: " + p + "px;height: " + n + "px;'></div>");
		var m = n > 40 ? n - 40 : 0;
		var s = D("<div class='left' style='vertical-align:bottom;width: 20px;height: " + n + "px;margin-top: " + m + "px'></div>");
		var f = D("<div class='ico16 affix_del_16 left' style='vertical-align: top'></div>");
		var b = D("<div class='ico16 two_dimensional_code_scanning_16 left' style='vertical-align: top'></div>");
		var l = e.showBtnAdd || false;
		var h = e.showBtnDel || false;
		var j;
		f.unbind("click").bind("click", function () {
			a()
		});
		b.unbind("click").bind("click", function () {
			var w = D.extend({}, e);
			w.preCallback = "";
			w.callback = "";
			var x = {};
			if (e.preCallback) {
				var u = e.preCallback(k);
				if (u && u.barOption) {
					w = D.extend(w, u.barOption)
				}
				j = w.width;
				if (u && u.customOption) {
					x = u.customOption
				}
			}
			var u = d.getBarCodeAttachment(w, x);
			if (!u.success) {
				D.alert(u.msg);
				return
			}
			var v = u.attachment;
			if (e.callback) {
				e.callback(v, g)
			}
			c(v)
		});
		i.append(g).append(s);
		s.append(f).append(b);
		k.after(i);
		k.hide();
		if (k.attr("attr")) {
			var q = k.attr("attr");
			q = D.parseJSON(q);
			c(q)
		} else {
			t(false)
		}
		function c(w) {
			Z();
			k.val(w.subReference);
			k.attr("reference", w.reference);
			var y = _ctxPath + "/fileUpload.do?method=showRTE&fileId=" + w.fileUrl + "&type=image";
			var z = D(g).width();
			var x = D(g).height();
			g.append("<img onclick='openCtpWindow({url:$(this).attr(\"src\")})' src='" + y + "'>");
			var v = D("img", g);
			var u;
			var AA = new Image();
			AA.onload = function () {
				u = AA.width;
				if (u > j || !j) {
					j = u
				}
				if (j != undefined && z != undefined && x != undefined) {
					if (j > z && j > x) {
						var AD = parseFloat(j / z);
						var AB = parseFloat(j / x);
						if (AD >= AB) {
							j = z
						} else {
							j = x
						}
					} else {
						if (j > z) {
							j = z
						} else {
							if (j > x) {
								j = x
							}
						}
					}
					var AC = D("img", g);
					AC.css({
						width: j,
						height: j,
						cursor: "pointer"
					})
				}
			};
			AA.src = D(v).attr("src");
			t(true)
		}
		function a() {
			D.confirm({
				msg: D.i18n("common.barcode.delete.label"),
				ok_fn: function () {
					Z();
					if (e.callback) {
						e.callback(null, g, true)
					}
				}
			})
		}
		function Z() {
			k.val("");
			g.html("");
			t(false)
		}
		function t(u) {
			b.hide();
			f.hide();
			if (l) {
				b.show()
			}
			if (h && u) {
				f.show()
			}
			if (!l && !h) {
				s.hide()
			}
		}
	};
	function J() {
		var a = D.globalCache("useUploadActivex");
		if (a == null) {
			try {
				var Z = new ActiveXObject("UFIDA_Upload.A8Upload.2");
				Z.SetLimitFileSize(1024);
				a = true
			} catch (b) {
				a = false
			}
			D.globalCache("useUploadActivex", a)
		}
		return a
	}
	function T(n, Z) {
		if (v3x && v3x.isMSIE7) {
			n.css("font-size", "0")
		}
		var l = D(n).attr("id");
		n.attrObj("_attachShow") ? n.attrObj("_attachShow").remove() : null;
		downloadURL = _ctxPath + "/fileUpload.do?type=" + ((Z.customType == undefined) ? 0 : Z.customType) + ((Z.firstSave == undefined) ? "" : ("&firstSave=" + Z.firstSave)) + "&inputId=" + l + "&applicationCategory=" + Z.applicationCategory + "&extensions=" + ((Z.extensions == undefined) ? "" : Z.extensions) + ((Z.quantity == undefined) ? "" : ("&quantity=" + Z.quantity)) + "&maxSize=" + ((Z.maxSize == undefined) ? "" : Z.maxSize) + "&isEncrypt=" + ((Z.isEncrypt == undefined) ? "" : Z.isEncrypt) + "&popupTitleKey=" + ((Z.attachmentTrId == undefined) ? "" : ("&attachmentTrId=" + Z.attachmentTrId)) + ((Z.embedInput == undefined) ? "" : ("&embedInput=" + Z.embedInput)) + ((Z.showReplaceOrAppend == undefined) ? "" : ("&selectRepeatSkipOrCover=" + Z.showReplaceOrAppend)) + ((Z.callMethod == undefined) ? "" : ("&callMethod=" + Z.callMethod)) + ((Z.isShowImg == undefined) ? "" : ("&isShowImg=" + Z.isShowImg)) + ((Z.takeOver == undefined) ? "" : ("&takeOver=" + Z.takeOver));
		var e = J();
		downloadURL += ((!e) ? "" : ("&isA8geniusAdded=" + e));
		var d = ((Z.displayMode == undefined) ? "auto;" : Z.displayMode);
		var b = "";
		if ((Z.autoHeight != undefined && Z.autoHeight == true) || Z.canDeleteOriginalAtts == true || (typeof(Z.noMaxheight) != undefined && Z.noMaxheight == true)) {
			if (Z.applicationCategory != undefined && Z.applicationCategory == 2 || Z.noMaxheight == true) {
				b = 'style="overflow: ' + d + ' *font-size:0;overflow-x:hidden;"'
			} else {
				b = 'style="overflow: ' + d + ' *font-size:0;max-height:192px; overflow-x:hidden;"'
			}
		} else {
			b = 'style="overflow: ' + d + ' *font-size:0; max-height:64px; overflow-x:hidden;"'
		}
		if (Z.isShowImg) {
			b = " "
		}
		var g = "<div id='attachmentArea" + (Z.attachmentTrId ? Z.attachmentTrId : "") + "' " + b + " requrl='" + downloadURL + "' " + ((Z.delCallMethod == undefined) ? "" : ("delCallMethod=" + Z.delCallMethod)) + "></div>";
		if (D("#downloadFileFrame").length == 0) {
			g = g + '<div style="display:none;"><iframe name="downloadFileFrame" id="downloadFileFrame" frameborder="0" width="0" height="0"></iframe></div>'
		}
		if (Z.embedInput) {
			n.append('<input type="text" style="display:none" id="' + (Z.embedInput ? Z.embedInput : "") + '" name="' + (Z.embedInput ? Z.embedInput : "") + '" value="">')
		}
		g = D(g);
		n.after(g);
		n.hide();
		n.attrObj("_attachShow", g);
		Y(n, Z, true, (Z.embedInput ? Z.embedInput : ""));
		if (n.attr("attsdata") != "") {
			var j = D.parseJSON(n.attr("attsdata"));
			if (j != null && Z.isShowImg && j.length > 0) {
				for (var f = 0; f < j.length; f++) {
					if (j[f].subReference == Z.attachmentTrId) {
						var m = D("#attachmentDiv_" + j[f].fileUrl);
						m.find("img").hide();
						var a = D("#" + Z.embedInput);
						a.parent("div").css("display", "block");
						a.css("display", "block");
						var c = a.width();
						var k = a.height();
						a.css("display", "none");
						var h = m.find(".ico16").width() + 2;
						m.width(c - h).height(k);
						m.css("overflow", "hidden");
						m.find("img").show().load(function () {
							D(this).css({
								"max-width": m.width() - h,
								"max-height": k,
								cursor: "pointer"
							});
							a.parent("div").css("display", "none")
						});
						break
					}
				}
			}
		}
	}
	function Y(j, Z, g, a) {
		var f = Z.attsdata ? Z.attsdata : j.attr("attsdata") ? D.parseJSON(j.attr("attsdata")) : null;
		if (f && f instanceof Array) {
			var h;
			for (var c = 0; c < f.length; c++) {
				h = f[c];
				if (g) {
					if (h.type == 2) {
						continue
					}
				} else {
					if (h.type != 2) {
						continue
					}
				}
				var d = true;
				var b = false;
				if (Z.canFavourite != undefined) {
					d = Z.canFavourite
				}
				if (Z.isShowImg != undefined) {
					b = Z.isShowImg
				}
				if (Z.attachmentTrId) {
					var e = Z.checkSubReference != undefined ? Z.checkSubReference : true;
					if (e && h.reference != h.subReference && Z.attachmentTrId != h.subReference) {
						continue
					}
					addAttachmentPoi(h.type, h.filename, h.mimeType, h.createdate ? h.createdate.toString() : null, h.size, h.fileUrl, Z.canDeleteOriginalAtts, Z.originalAttsNeedClone, h.description, h.extension, h.icon, Z.attachmentTrId, h.reference, h.category, false, null, a, true, h.officeTransformEnable, h.v, d, b, h.id, h.hasFavorite)
				} else {
					addAttachment(h.type, h.filename, h.mimeType, h.createdate ? h.createdate.toString() : null, h.size, h.fileUrl, Z.canDeleteOriginalAtts, Z.originalAttsNeedClone, h.description, h.extension, h.icon, h.reference, h.category, false, null, true, h.officeTransformEnable, h.v, d, h.hasFavorite)
				}
			}
		}
	}
	function N(Z) {
		if (fileUploadAttachments != null) {
			var d = fileUploadAttachments.values();
			var c = new Array();
			for (var a = 0; a < d.size(); a++) {
				var b = d.get(a);
				if (b.isImg()) {
					c.push({
						dataId: b.fileUrl2,
						src: _ctxPath + "/fileUpload.do?method=showRTE&type=image&fileId=" + b.fileUrl2 + "&createDate=" + b.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(b.filename)
					})
				}
			}
		}
	}
	function S(b) {
		theToShowAttachments = new ArrayList();
		var c = _ctxPath + "/fileUpload.do";
		var d = b.attr("attsdata");
		if (d != null && d != "") {
			d = D.parseJSON(d)
		}
		var Z;
		for (var a = 0; a < d.length; a++) {
			Z = d[a];
			theToShowAttachments.add(new Attachment(Z.id, Z.reference, Z.subReference, Z.category, Z.type, Z.filename, Z.mimeType, Z.createdate.toString(), Z.size, Z.fileUrl, "", null, Z.extension, Z.icon, true, "true"))
		}
	}
	function C(a, Z) {
		showAttachment(Z.subRef, Z.atttype, Z.attachmentTrId, Z.numberDivId)
	}
	function V(a, Z) {
		a.css("font-size", "0");
		var b = Z.noMaxheight == true ? "" : "max-height:96px;";
		a.after(D('<div id="attachment2Area' + (Z.attachmentTrId ? Z.attachmentTrId : "") + '" poi="' + (Z.attachmentTrId ? Z.attachmentTrId : "") + '"  ' + (Z.embedInput ? ' embedInput="' + Z.embedInput + '"' : "") + (Z.callMethod ? ' callMethod="' + Z.callMethod + '"' : "") + ' requestUrl="' + _ctxPath + "/ctp/common/associateddoc/assdocFrame.do?isBind=" + (Z.modids ? Z.modids : "") + "&referenceId=" + (Z.referenceId ? Z.referenceId : "") + "&applicationCategory=" + (Z.applicationCategory ? Z.applicationCategory : "") + "&poi=" + (Z.attachmentTrId ? Z.attachmentTrId : "") + ('" style="overflow: ' + ((Z.displayMode == undefined) ? "auto; *font-size:0;" + b : Z.displayMode) + '"></div>')));
		if (Z.embedInput) {
			a.append('<input type="hidden" id="' + (Z.embedInput ? Z.embedInput : "") + '" name="' + (Z.embedInput ? Z.embedInput : "") + '" value="">')
		}
		Y(a, Z, false, (Z.embedInput ? Z.embedInput : ""))
	}
	function W(c, Z, b) {
		var d = D(c[0]);
		d.width(d.width() - 21);
		var a = '<span class="margin_l_5 ico16 ' + Z + '_16"';
		b.fun ? a += " onclick='" + b.fun + "()'" : null;
		b.fun ? a += " title='" + b.title + "'" : null;
		a += "></span> ";
		d.after(a)
	}
	D.fn.ctpClone = function () {
		if (this) {
			return D.ctpClone(D(this))
		}
	};
	D.ctpClone = function (a) {
		if (a && a.size() > 0) {
			var Z;
			if (a[0].outerHTML) {
				Z = D(a[0].outerHTML.replace(/jQuery\d+="\d+"/g, ""))
			} else {
				Z = a.clone()
			}
			return Z
		}
	};
	D.batchExport = function (f, g) {
		var Z = 10000;
		if (f <= Z) {
			g(1, f);
			return
		}
		var b = Math.ceil(f / Z);
		var a = "";
		for (var e = 1; e <= b; e++) {
			a += '<option value="' + e + '">' + e + "</option>"
		}
		var d = '<table class="popupTitleRight bg_color_white margin_5" style="font-size: 12px;"><tr><td height="30">' + D.i18n("export.batch.desc.1.js") + '</td></tr><tr><td height="30">' + D.i18n("export.batch.desc.2.js", Z, f, b) + '</td></tr><tr><td height="30">' + D.i18n("export.batch.desc.3.js", '<select id="exportPageNo" style="width:60px" >' + a + "</select>") + "</td></tr></table>";
		var c = D.dialog({
				id: "dlgExport",
				html: d,
				title: D.i18n("export.batch.title.js"),
				width: 300,
				height: 120,
				targetWindow: window,
				buttons: [{
						id: "btnExport",
						text: D.i18n("export.batch.title.js"),
						handler: function () {
							var j = "btnExport";
							var m = parseInt(D("#exportPageNo").val());
							c.disabledBtn(j);
							var i = c.getBtn(j);
							var l = i.html();
							var k = 10;
							i.html("&#160;" + k + "&#160;");
							g(m, Z);
							if (m < b) {
								D("#exportPageNo").val(m + 1);
								var h = setInterval(function () {
										i.html("&#160;" + (--k) + "&#160;")
									}, 1000);
								setTimeout(function () {
									window.clearInterval(h);
									c.enabledBtn(j);
									i.html(l)
								}, 10000)
							} else {
								c.close()
							}
						}
					}, {
						text: D.i18n("collaboration.button.cancel.label"),
						handler: function () {
							c.close()
						}
					}
				]
			})
	};
	function P(f) {
		var Z = D(this);
		var d = Z.val();
		if (d.length > 0) {
			var a = f.data;
			if (isNaN(d) || !a.type.test(d)) {
				d = d.replace(a.start, "");
				if (d != "-" && d != "+" && isNaN(d)) {
					d = d.replace(a.nonNumber, "")
				}
			}
			if (a.decimalDigit != null) {
				var c = d.indexOf("."),
				b = d.length;
				if (c > -1) {
					if (a.decimalDigit <= 0) {
						d = d.substr(0, c)
					} else {
						d = d.substr(0, c + a.decimalDigit + 1)
					}
				}
			}
			if (Z.val() != d) {
				Z.val(d)
			}
		}
		Z = null
	}
	function X(f) {
		var Z = D(this);
		var d = Z.val();
		if (d.length > 0) {
			var a = f.data;
			if (isNaN(d) || !a.type.test(d)) {
				d = d.replace(a.end, "");
				if (d != "-" && d != "+" && isNaN(d)) {
					d = d.replace(a.nonNumber, "")
				}
			}
			if (a.decimalDigit != null) {
				var c = d.indexOf("."),
				b = d.length;
				if (c > -1) {
					if (a.decimalDigit <= 0) {
						d = d.substr(0, c)
					} else {
						d = d.substr(0, c + a.decimalDigit + 1)
					}
				}
			}
			Z.val(d)
		}
		Z = null
	}
	function E(c) {
		var Z = D(this);
		var b = Z.val();
		if (b.length > 0) {
			var a = b.lastIndexOf("%");
			var d = b;
			if (a > -1) {
				d = b.sub(0, a)
			}
			if (isNaN(d) || !/^[-+]?\d+(\.\d*)?$/.test(b)) {
				if (!D.isANumber(d)) {
					d = d.replace(/[^\d]+/g, "")
				}
				Z.val(d)
			}
		}
		Z = null
	}
	function R(c) {
		var Z = D(this);
		var b = Z.val();
		if (b.length > 0) {
			var a = b.lastIndexOf("%");
			var d = b;
			if (a > -1) {
				d = b.sub(0, a)
			}
			if (isNaN(d) || !/^\d+(\.\d+)?$/.test(b)) {
				if (!D.isANumber(d)) {
					d = d.replace(/[^\d]+/g, "")
				}
				Z.val(d + "%")
			}
		}
		Z = null
	}
	function U(b) {
		var Z = D(this);
		var a = Z.val();
		if (a.length > 0) {
			var d = a;
			if (a.length <= 3) {
				if (isNaN(d) || !/^[-+]?\d+$/.test(a)) {
					if (!D.isANumber(d)) {
						d = d.replace(/[^\d]+/g, "")
					}
					Z.val(d)
				}
			} else {
				var c = /^\d\d\d(,\d\d\d)*,\d{0,3}$/;
				if (!c.test(a)) {
					d = d.match(/\d\d\d(,\d\d\d)*(,\d{0,3})?/);
					if (d == null) {
						d = ""
					} else {
						d = d[0]
					}
					Z.val(d)
				}
			}
		}
		Z = null
	}
	function B(b) {
		var Z = D(this);
		var a = Z.val();
		if (a.length > 0) {
			var d = a;
			if (a.length <= 3) {
				if (isNaN(d) || !/^[-+]?\d+$/.test(a)) {
					if (!D.isANumber(d)) {
						d = d.replace(/[^\d]+/g, "").substr(0, 3)
					}
					Z.val(d)
				}
			} else {
				var c = /^\d\d\d(,\d\d\d)*$/;
				if (!c.test(a)) {
					d = d.match(/\d\d\d(,\d\d\d)*/);
					if (d == null) {
						d = ""
					} else {
						d = d[0]
					}
					Z.val(d)
				}
			}
		}
		Z = null
	}
	D.fn.extend({
		onlyNumber: function (b) {
			if (this[0] && this[0].nodeName && this[0].nodeName.toUpperCase() == "INPUT") {
				if (this.prop("type") == "text") {
					var a = b.numberType,
					c = b.decimalDigit;
					if (isNaN(c)) {
						c = null
					}
					if (a == "delete") {
						this.unbind("keyup", P).unbind("blur", X)
					} else {
						if (a == "percent") {
							this.unbind("keyup", E).unbind("blur", R);
							this.bind("keyup", E).bind("blur", R)
						} else {
							if (a == "thousandth") {
								this.unbind("keyup", U).unbind("blur", B);
								this.bind("keyup", U).bind("blur", B)
							} else {
								var Z = {};
								switch (a) {
								case "int":
									Z.start = /[^0123456789-]+|[-]{2,}|[-]$/g;
									Z.end = /[^0123456789-]+|[-]{2,}|[-]$/g;
									Z.nonNumber = /[-]+/g;
									Z.type = /^[-+]?\d+$/;
									Z.decimalDigit = c;
									break;
								case "float":
									Z.start = /^[.]|[^0123456789.-]+|[.-]{2,}/g;
									Z.end = /^[.]|[^0123456789.-]+|[.-]{2,}|[.-]$/g;
									Z.nonNumber = /[.-]+/g;
									Z.type = /^[-+]?\d+(\.\d+)?$/;
									Z.decimalDigit = c;
									break;
								default:
									Z.start = /^[.]|[^0123456789.-]+|[.-]{2,}/g;
									Z.end = /^[.]|[^0123456789.-]+|[.-]{2,}|[.-]$/g;
									Z.nonNumber = /[.-]+/g;
									Z.type = /^[-+]?\d+$/;
									Z.decimalDigit = c;
									break
								}
								this.unbind("keyup", P).unbind("blur", X);
								this.bind("keyup", Z, P).bind("blur", Z, X)
							}
						}
					}
				}
			}
		}
	})
})(jQuery);
var selectPictureDialog;
function selectPicture(A, C, B) {
	var D = $(top).width();
	var E = $(top).height();
	selectPictureDialog = $.dialog({
			targetWindow: top,
			id: "selectPictureDialog",
			url: "/seeyon/portal/portalDesigner.do?method=selectPictures&msn=" + A,
			width: D,
			height: E - 200,
			title: $.i18n("portal.common.imgdialog.title"),
			overflow: "hidden",
			buttons: [{
					text: $.i18n("common.button.ok.label"),
					isEmphasize: true,
					handler: function () {
						var F = selectPictureDialog.getReturnValue({
								innerButtonId: "ok"
							});
						if (F) {
							if (typeof B == "function") {
								selectPictureDialog.close();
								B(F)
							} else {
								selectPictureDialog.close();
								$.alert("\u6ca1\u6709\u4f20\u5165\u56de\u8c03\u65b9\u6cd5\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801!")
							}
						}
					}
				}, {
					text: $.i18n("common.button.cancel.label"),
					isEmphasize: false,
					handler: function () {
						selectPictureDialog.close()
					}
				}
			]
		})
}
var _makeDialogiconLibrary;
function iconLibrary(C, A, E, D) {
	var B = _ctxPath + "/portal/portalDesigner.do?method=iconLibrary&oprate=" + C + "&styleId=" + A + "&showType=" + D;
	_makeDialogiconLibrary = $.dialog({
			url: B,
			id: "moveToDialog",
			htmlId: "dialog",
			targetWindow: getA8Top(),
			width: 1500,
			height: 500,
			title: $.i18n("portal.button.fromiconlib"),
			overflow: "hidden",
			buttons: [{
					id: "ok",
					isEmphasize: true,
					text: $.i18n("common.button.ok.label"),
					handler: function () {
						if (A == 0) {
							$("#plane").hide();
							if (!$("#line").hasClass("choose")) {
								$("#line").addClass("choose")
							}
						} else {
							$("#line").hide();
							if (!$("#plane").hasClass("choose")) {
								$("#plane").addClass("choose")
							}
						}
						var F = _makeDialogiconLibrary.getReturnValue();
						if (typeof E == "function") {
							if (F == "noChoose") {
								$.alert($.i18n("portal.common.icon.alert1"))
							} else {
								_makeDialogiconLibrary.close();
								E(F)
							}
						} else {
							_makeDialogiconLibrary.close();
							$.alert("\u6ca1\u6709\u4f20\u5165\u56de\u8c03\u65b9\u6cd5\uff0c\u8bf7\u68c0\u67e5\u4ee3\u7801!")
						}
					}
				}, {
					id: "cancel",
					text: $.i18n("common.button.cancel.label"),
					handler: function () {
						_makeDialogiconLibrary.close()
					}
				}
			]
		})
}
var imageLibDialog;
function imageLibUploadDialog(C, B, A) {
	imageLibDialog = $.dialog({
			targetWindow: getA8Top(),
			id: "imageLibDialog",
			url: "/seeyon/ctp/common/imageIconUpload.do?method=imageUpload&fileId=" + (B || "") + "&filePath=" + encodeURIComponent(A || ""),
			width: 650,
			height: 320,
			title: $.i18n("link.jsp.add.img.upload"),
			overflow: "hidden",
			buttons: [{
					text: $.i18n("common.button.ok.label"),
					isEmphasize: true,
					handler: function () {
						var D = imageLibDialog.getReturnValue();
						if (D && D.length > 0) {
							if (typeof C == "function") {
								imageLibDialog.close();
								C(D)
							} else {
								imageLibDialog.close()
							}
						}
					}
				}, {
					text: $.i18n("common.button.cancel.label"),
					isEmphasize: false,
					handler: function () {
						imageLibDialog.close()
					}
				}
			]
		})
}
var iconLibDialog;
function iconLibUploadDialog(B, A) {
	if (!A) {
		A = "plane"
	}
	iconLibDialog = $.dialog({
			targetWindow: getA8Top(),
			id: "iconLibDialog",
			url: "/seeyon/ctp/common/imageIconUpload.do?method=iconUpload&iconType=" + A,
			width: 430,
			height: 220,
			title: $.i18n("portal.common.icondialog.title"),
			overflow: "hidden",
			buttons: [{
					text: $.i18n("common.button.ok.label"),
					isEmphasize: true,
					handler: function () {
						var C = iconLibDialog.getReturnValue();
						if (C && C.length == 2) {
							if (typeof B == "function") {
								iconLibDialog.close();
								B(C)
							} else {
								iconLibDialog.close()
							}
						}
					}
				}, {
					text: $.i18n("common.button.cancel.label"),
					isEmphasize: false,
					handler: function () {
						iconLibDialog.close()
					}
				}
			]
		})
};
(function ($) {
	var zt = $.fn.zTree,
	tools = zt._z.tools,
	consts = zt.consts,
	view = zt._z.view,
	data = zt._z.data,
	event = zt._z.event;
	_view = {
		addNodes: function (setting, parentNode, newNodes, isSilent) {
			if (setting.data.keep.leaf && parentNode && !parentNode.isParent) {
				return
			}
			if (!tools.isArray(newNodes)) {
				newNodes = [newNodes]
			}
			if (setting.data.simpleData.enable) {
				newNodes = data.transformTozTreeFormat(setting, newNodes)
			}
			if (parentNode) {
				var target_switchObj = $("#" + parentNode.tId + consts.id.SWITCH),
				target_icoObj = $("#" + parentNode.tId + consts.id.ICON),
				target_ulObj = $("#" + parentNode.tId + consts.id.UL);
				if (!parentNode.open) {
					view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);
					view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						display: "none"
					})
				}
				data.addNodesData(setting, parentNode, newNodes);
				view.createNodes(setting, parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					view.expandCollapseParentNode(setting, parentNode, true)
				}
			} else {
				data.addNodesData(setting, data.getRoot(setting), newNodes);
				view.createNodes(setting, 0, newNodes, null)
			}
			for (var i = 0; i < newNodes.length; i++) {
				newNodes[i].data[setting.data.simpleData.pIdKey] = newNodes[i][setting.data.simpleData.pIdKey]
			}
		},
		asyncNode: function (setting, node, isSilent, callback) {
			var i,
			l;
			if (node && !node.isParent) {
				tools.apply(callback);
				return false
			} else {
				if (node && node.isAjaxing) {
					return false
				} else {
					if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {
						tools.apply(callback);
						return false
					}
				}
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = $("#" + node.tId + consts.id.ICON);
				icoObj.attr({
					style: "",
					"class": "button ico_loading"
				})
			}
			var isJson = (setting.async.contentType == "application/json"),
			tmpParam = isJson ? "{" : "",
			jTemp = "";
			for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {
				var pKey = setting.async.autoParam[i].split("="),
				spKey = pKey;
				if (pKey.length > 1) {
					spKey = pKey[1];
					pKey = pKey[0]
				}
				if (isJson) {
					jTemp = (typeof node[pKey] == "string") ? '"' : "";
					tmpParam += '"' + spKey + ('":' + jTemp + node[pKey]).replace(/'/g, "\\'") + jTemp + ","
				} else {
					tmpParam += spKey + ("=" + node[pKey]).replace(/&/g, "%26") + "&"
				}
			}
			if (tools.isArray(setting.async.otherParam)) {
				for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[i + 1] == "string") ? '"' : "";
						tmpParam += '"' + setting.async.otherParam[i] + ('":' + jTemp + setting.async.otherParam[i + 1]).replace(/'/g, "\\'") + jTemp + ","
					} else {
						tmpParam += setting.async.otherParam[i] + ("=" + setting.async.otherParam[i + 1]).replace(/&/g, "%26") + "&"
					}
				}
			} else {
				for (var p in setting.async.otherParam) {
					if (isJson) {
						jTemp = (typeof setting.async.otherParam[p] == "string") ? '"' : "";
						tmpParam += '"' + p + ('":' + jTemp + setting.async.otherParam[p]).replace(/'/g, "\\'") + jTemp + ","
					} else {
						tmpParam += p + ("=" + setting.async.otherParam[p]).replace(/&/g, "%26") + "&"
					}
				}
			}
			if (tmpParam.length > 1) {
				tmpParam = tmpParam.substring(0, tmpParam.length - 1)
			}
			if (isJson) {
				tmpParam += "}"
			}
			var managerName = setting.managerName,
			managerMethod = setting.managerMethod;
			if (managerName && !setting._managerLoaded) {
				$("head").append("<script src='" + _ctxPath + "/ajax.do?managerName=" + managerName + "' type='text/javascript'><\/script>");
				setting._managerLoaded = true
			}
			if (managerName && managerMethod && window[managerName]) {
				var _bs = new window[managerName]();
				_bs[managerMethod]($.parseJSON(tmpParam), {
					success: function (msg) {
						var newNodes = [];
						try {
							if (!msg || msg.length == 0) {
								newNodes = []
							} else {
								if (typeof msg == "string") {
									newNodes = eval("(" + msg + ")")
								} else {
									newNodes = msg
								}
							}
						} catch (err) {}
						if (node) {
							node.isAjaxing = null;
							node.zAsync = true
						}
						view.setNodeLineIcos(setting, node);
						if (newNodes && newNodes != "") {
							newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);
							view.addNodes(setting, node, !!newNodes ? tools.clone(newNodes) : [], !!isSilent)
						} else {
							view.addNodes(setting, node, [], !!isSilent)
						}
						setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
						tools.apply(callback)
					},
					error: function (request, textStatus, errorThrown) {
						if (node) {
							node.isAjaxing = null
						}
						view.setNodeLineIcos(setting, node);
						setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, request, textStatus, errorThrown])
					}
				})
			}
			return true
		},
		appendNodes: function (setting, level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) {
				return []
			}
			var html = [],
			childKey = setting.data.key.children,
			nameKey = setting.data.key.name,
			titleKey = data.getTitleKey(setting);
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i],
				tmpPNode = (parentNode) ? parentNode : data.getRoot(setting),
				tmpPChild = tmpPNode[childKey],
				isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
				isLastNode = (i == (nodes.length - 1));
				if (initFlag) {
					data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);
					data.addNodeCache(setting, node)
				}
				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					childHtml = view.appendNodes(setting, level + 1, node[childKey], node, initFlag, openFlag && node.open)
				}
				if (openFlag) {
					var url = view.makeNodeUrl(setting, node),
					fontcss = view.makeNodeFontCss(setting, node),
					fontStyle = [];
					for (var f in fontcss) {
						fontStyle.push(f, ":", fontcss[f], ";")
					}
					html.push("<li id='", node.tId, "' class='level", node.level, "' tabindex='0' hidefocus='true' treenode>", "<span id='", node.tId, consts.id.SWITCH, "' title='' class='", view.makeNodeLineClass(setting, node), "' treeNode", consts.id.SWITCH, "></span>");
					data.getBeforeA(setting, node, html);
					html.push("<a id='", node.tId, consts.id.A, "' class='level", node.level, "' treeNode", consts.id.A, ' onclick="', (node.click || ""), '" ', ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='", view.makeNodeTarget(node), "' style='", fontStyle.join(""), "'");
					if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && node[titleKey] && node[titleKey].indexOf("title") == -1) {
						html.push("title='", node[titleKey].replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), "'")
					}
					html.push(">");
					data.getInnerBeforeA(setting, node, html);
					var name = setting.view.nameIsHTML ? node[nameKey] : node[nameKey].replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
					html.push("<span id='", node.tId, consts.id.ICON, "' title='' treeNode", consts.id.ICON, " class='", view.makeNodeIcoClass(setting, node), "' style='", view.makeNodeIcoStyle(setting, node), "'></span><span id='", node.tId, consts.id.SPAN, "'>", name, "</span>");
					data.getInnerAfterA(setting, node, html);
					html.push("</a>");
					data.getAfterA(setting, node, html);
					if (node.isParent && node.open) {
						view.makeUlHtml(setting, node, html, childHtml.join(""))
					}
					html.push("</li>");
					data.addCreatedNode(setting, node)
				}
			}
			return html
		}
	},
	_data = {
		fixPIdKeyValue: function (setting, node) {
			if (setting.data.simpleData.enable) {
				node.data[setting.data.simpleData.pIdKey] = node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId
			}
		},
		transformTozTreeFormat: function (setting, sNodes) {
			var i,
			l,
			key = setting.data.simpleData.idKey,
			parentKey = setting.data.simpleData.pIdKey,
			childKey = setting.data.key.children;
			if (!key || key == "" || !sNodes) {
				return []
			}
			if (!tools.isArray(sNodes)) {
				sNodes = [sNodes]
			}
			var d = [],
			nm = setting.data.key.name,
			titleKey = data.getTitleKey(setting);
			for (var i = 0; i < sNodes.length; i++) {
				var no = {};
				no[key] = sNodes[i][key];
				no[parentKey] = sNodes[i][parentKey];
				if (setting.render) {
					no[nm] = setting.render(sNodes[i][nm], sNodes[i])
				} else {
					no[nm] = sNodes[i][nm]
				}
				if (titleKey && titleKey != "") {
					no[titleKey] = sNodes[i][titleKey]
				}
				no.data = sNodes[i];
				var _iconSkin = sNodes[i]["iconSkin"];
				if (_iconSkin) {
					no.iconSkin = _iconSkin
				}
				if (setting.nodeHandler) {
					setting.nodeHandler(no)
				}
				d.push(no)
			}
			sNodes = d;
			var r = [];
			var tmpMap = [];
			for (i = 0, l = sNodes.length; i < l; i++) {
				tmpMap[sNodes[i][key]] = sNodes[i]
			}
			for (i = 0, l = sNodes.length; i < l; i++) {
				if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
					if (!tmpMap[sNodes[i][parentKey]][childKey]) {
						tmpMap[sNodes[i][parentKey]][childKey] = []
					}
					tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i])
				} else {
					r.push(sNodes[i])
				}
			}
			return r
		}
	},
	_z = {
		view: _view,
		data: _data
	};
	$.extend(true, $.fn.zTree._z, _z);
	$.fn.tree = function (options) {
		var settings = {};
		options = $.extend(settings, options);
		var checkValue = {};
		if (options.settings) {
			checkValue = options.settings.check
		}
		var opts = {
			async: {
				enable: false,
				autoParam: ["id"],
				contentType: "application/json"
			},
			edit: {
				enable: false,
				showRemoveBtn: false,
				showRenameBtn: false
			},
			callback: {},
			check: checkValue,
			data: {
				simpleData: {
					enable: true,
					idKey: "id",
					pIdKey: "pId",
					rootPId: 0
				},
				key: {
					name: "name"
				}
			},
			view: {
				selectedMulti: false
			}
		},
		oe = opts.edit,
		oc = opts.callback,
		od = opts.data,
		ods = od.simpleData,
		odk = od.key;
		if (options.onClick) {
			oc.onClick = options.onClick
		}
		if (options.onDblClick) {
			oc.onDblClick = options.onDblClick
		}
		if (options.beforeDrag) {
			oc.beforeDrag = options.beforeDrag
		}
		if (options.beforeDrop) {
			oc.beforeDrop = options.beforeDrop
		}
		if (options.onAsyncSuccess) {
			oc.onAsyncSuccess = options.onAsyncSuccess
		}
		if (options.onAsyncError) {
			oc.onAsyncError = options.onAsyncError
		}
		if (options.beforeAsync) {
			oc.beforeAsync = options.beforeAsync
		}
		if (options.idKey) {
			ods.idKey = options.idKey
		}
		if (options.pIdKey) {
			ods.pIdKey = options.pIdKey
		}
		if (options.rootPId) {
			ods.rootPId = options.rootPId
		}
		if (options.nameKey) {
			odk.name = options.nameKey
		}
		if (options.enableEdit) {
			oe.enable = true
		}
		if (options.enableRename) {
			oe.showRenameBtn = true
		}
		if (options.enableRemove) {
			oe.showRemoveBtn = true
		}
		if (options.enableCheck) {
			opts.check.enable = true
		}
		if (options.managerName) {
			opts.async.enable = true;
			opts.async.autoParam = [ods.idKey];
			if (options.asyncParam) {
				opts.async.otherParam = options.asyncParam
			}
		}
		if (options.fontCss) {
			opts.view.fontCss = options.fontCss
		}
		if (options.addHoverDom) {
			opts.view.addHoverDom = options.addHoverDom
		}
		if (options.removeHoverDom) {
			opts.view.removeHoverDom = options.removeHoverDom
		}
		if (options.dblClickExpand) {
			opts.view.dblClickExpand = options.dblClickExpand
		}
		if (options.render) {
			opts.view.nameIsHTML = true;
			opts.render = options.render
		}
		if (options.nodeHandler) {
			opts.nodeHandler = options.nodeHandler
		}
		if (options.managerName) {
			opts.managerName = options.managerName
		}
		if (options.managerMethod) {
			opts.managerMethod = options.managerMethod
		}
		if (options.title) {
			odk.title = options.title
		}
		oc.onRename = function (evt, tid, tNode) {
			tNode.data[odk.name] = tNode[odk.name]
		};
		var t = this[0],
		id = t.id,
		d = [];
		$(this).replaceWith("<ul id='" + id + "' class='ztree'></ul>");
		t = $("#" + id);
		if ($._autofill) {
			var $af = $._autofill,
			$afg = $af.filllists;
			if ($afg && $afg[id]) {
				d = $afg[id]
			}
		}
		$.fn.zTree.init(t, opts, d)
	};
	$.fn.treeObj = function () {
		var id = this[0].id;
		return $.fn.zTree.getZTreeObj(id)
	}
})(jQuery);
(function (E) {
	function B(F) {
		var G = E.extend({
				data: [],
				value: null
			}, F);
		this.data = G.data;
		this.value = G.value;
		this.onChange = G.onChange;
		this.originValue = this.value;
		function H(I) {
			return I.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
		}
		this.filter = function (K, I) {
			if (K == null) {
				return []
			}
			var J = new RegExp(H(I), "i");
			return E.grep(K, function (L) {
				return J.test(L.label || L.value || L)
			})
		};
		return this
	}
	B.prototype.search = function (G, F) {
		return this.filter(this.data, G)
	};
	B.prototype.get = function (G) {
		var F = E.grep(this.data, function (H) {
				return H.value == G
			});
		if (F.length > 0) {
			return F[0]
		}
		return null
	};
	B.prototype.getAll = function (F) {
		return this.data
	};
	B.prototype.val = function (F) {
		if (F) {
			this.value = F;
			E(this).trigger("change", F)
		}
		return this.value
	};
	B.prototype.restore = function () {
		this.val(this.originValue)
	};
	B.prototype.destroy = function (F) {
		this.data = null;
		this.value = null;
		E(this).unbind("change")
	};
	function C(F) {
		this.id = Math.random() * 10000;
		this.setting = E.extend({
				autoSize: false
			}, F);
		this.onSelect = F.onSelect;
		this.ui = F.ui;
		this._cursor = null;
		this.cursor = function (I) {
			if (I === null || I) {
				this._cursor = I
			}
			return this._cursor
		};
		this.ds = F.ds;
		this.data = F.ds.getAll();
		var H = this;
		function G() {
			var J = "autocomplete_popup";
			var I = E("#" + J);
			if (I.length == 0) {
				I = E("<div></div>").attr("id", J).addClass("autocomplete-popup").append(E("<div></div>").addClass("menu")).appendTo(E("body"));
				I.hide();
				I.mousedown(function (K) {
					var L = E(K.target).closest(".item").length == 0;
					if (!L) {
						H.close()
					} else {
						setTimeout(function () {
							E(document).one("mousedown", function (M) {
								if (I[0] != M.target && !E.contains(I, M.target)) {
									H.close()
								}
							})
						}, 1)
					}
					setTimeout(function () {
						clearTimeout(I.closing)
					}, 13);
					E(H).trigger("clicked")
				})
			}
			if (E("#" + J + "_mask").length == 0) {
				E("<iframe></iframe>").attr("id", J + "_mask").addClass("autocomplete-popup-mask").appendTo(E("body"))
			}
			E(this).unbind("moveFirst").bind("moveFirst", function (L, K) {
				H.moveFirst()
			}).unbind("moveNext").bind("moveNext", function (L, K) {
				H.moveNext()
			}).bind("movePrevious", function (L, K) {
				H.movePrevious()
			});
			return I
		}
		this.container = G();
		this.moveFirst = function () {
			H.cursor(E(H.container).find("div.menu div:first-child"));
			H.highlight()
		};
		this.moveNext = function () {
			if (H.cursor() == null) {
				H.moveFirst();
				return
			}
			var I = H.cursor().next();
			if (I.length > 0) {
				H.cursor(I);
				H.highlight()
			}
		};
		this.movePrevious = function () {
			if (H.cursor() == null) {
				H.moveFirst();
				return
			}
			var I = H.cursor().prev();
			if (I.length > 0) {
				H.cursor(I);
				H.highlight()
			}
		};
		this.highlight = function () {
			E(".item-selected").removeClass("item-selected");
			H.cursor().addClass("item-selected")
		};
		this.calcPosition = function () {
			var V = 300;
			var M = E(document).scrollTop();
			var Q = document.documentElement.clientWidth + E(document).scrollLeft();
			var O = document.documentElement.clientHeight + M;
			if (V > O) {
				V = O
			}
			var U = E(H.ui);
			var S = U.offset().top - 1;
			var K = U.outerHeight();
			var T = {
				left: 0,
				top: 0,
				width: 0,
				height: 0
			};
			T.upShow = false;
			T.left = U.offset().left;
			T.width = U.width();
			var R = U.next('input[name="acToggle"]').length > 0;
			if (R) {
				T.width = T.width + U.next('input[name="acToggle"]').outerWidth() - 3
			}
			var J = H.container;
			var N = S + K;
			var I = J.height("").outerHeight();
			var W = I;
			if (I > V) {
				I = V
			}
			if ((N + I > O) && (N > (O / 2))) {
				N = S - I - 2;
				T.upShow = true
			}
			if (N < M) {
				N = M
			}
			if (N < 0) {
				N = 0;
				if (I < S) {
					N = S - I
				}
				I = S - N
			}
			if (N + I + 5 < S) {
				N = S - I - 5
			}
			if (N + I > S + K) {
				N = S + K
			}
			if (N + I > O) {
				I = O - N - 10
			}
			if (W > I) {
				T.scroll = true
			}
			T.height = I;
			T.top = N;
			if (H.setting.autoSize) {
				var P = 0;
				E.each(H.data, function (Y, Z) {
					var X = Z.label.length;
					if (X > P) {
						P = X
					}
				});
				var L = P * 8 + 24;
				T.width = T.width > L ? T.width : L
			}
			return T
		}
	}
	C.prototype.refresh = function () {
		var G = this.container.find("div.menu");
		G.empty();
		var H = this;
		var F = this.ds.value;
		E.each(this.data, function (K, M) {
			var L = F && (M.value == F.value) ? " item-selected" : "";
			var N = typeof M.title == "undefined" ? "" : M.title.replace(/<script>/g, "");
			var J = typeof M.label == "undefined" ? "" : M.label.escapeHTML(true);
			var I = E("<div></div>").html(J).data("item", M).attr("title", N).addClass("item" + L).hover(function (O) {
					H.cursor(E(this));
					H.highlight()
				}).mousedown(function (O) {
					H.select(O)
				}).appendTo(G);
			if (L) {
				H.cursor(I)
			}
		});
		if (this.cursor() == null) {
			this.moveFirst()
		}
		this.highlight();
		if (this.data.length == 0) {
			G.addClass("empty-menu")
		} else {
			G.removeClass("empty-menu")
		}
	};
	C.prototype.search = function (F) {
		this.data = this.ds.search(F);
		this.cursor(null);
		this.refresh()
	};
	C.prototype.hide = function (F) {
		E("#autocomplete_popup_mask").hide();
		this.container.hide()
	};
	C.prototype.show = function () {
		var J = this;
		var I = this.calcPosition();
		var G = this.container;
		if (I.scroll) {
			G.css("overflow-y", "auto").css("overflow-x", "hidden").css("height", I.height + "px")
		} else {
			if (E.browser.msie && E.browser.version < 9) {
				G.css({
					height: "100px",
					overflow: "auto"
				})
			} else {
				G.css("height", "auto")
			}
		}
		G.css({
			width: I.width - 2 + "px",
			top: ((E.browser.msie && E.browser.version < 9 && I.upShow) ? (I.height - 100 - 5 + I.top) : I.top) + 1 + "px",
			left: I.left + 1 + "px"
		});
		var F = G.height();
		E("#autocomplete_popup_mask").css({
			width: I.width - 2 + "px",
			top: ((E.browser.msie && E.browser.version < 9 && I.upShow) ? (I.height - 100 - 5 + I.top) : I.top) - 0 + "px",
			left: I.left - 0 + "px",
			height: F + "px"
		}).show();
		E(G.parents()).scroll(function () {
			J.hide()
		});
		var H = E(J.ui).offset().top;
		setTimeout(function () {
			var K = E(J.ui).offset().top;
			if (K != H) {
				J.hide()
			}
		}, 500);
		this.container.show()
	};
	C.prototype.toggle = function () {
		this.container.toggle()
	};
	C.prototype.close = function (F) {
		this.hide()
	};
	C.prototype.visible = function () {
		return E(this.container).is(":visible")
	};
	C.prototype.select = function (F) {
		var G = this.cursor();
		if (G != null) {
			this.ds.val(G.data("item"))
		}
		E(this.ui.ui).focus()
	};
	C.prototype.destroy = function (F) {
		E(this).unbind("moveFirst").unbind("movePrevious").unbind("moveNext")
	};
	var A = {
		isClickPopup: false
	};
	function D(H) {
		var G = false;
		var L = this.keyCode;
		var K = E(H.ui);
		var M = this;
		var J = H.value;
		this.ds = new B({
				data: H.data,
				value: J
			});
		E(this.ds).unbind("change").bind("change", function (P, O) {
			if (O) {
				var N = K.data("value") == O.value;
				D.updateUi(K, O, N);
				if (H.onSelect) {
					H.onSelect(O)
				}
			}
		});
		var F = new C(E.extend(H, {
					ds: this.ds,
					input: this
				}));
		var I;
		K.unbind("keyup").bind("keyup", function (N) {
			switch (N.keyCode) {
			case L.PAGE_UP:
				break;
			case L.PAGE_DOWN:
				break;
			case L.UP:
				if (M.popup.visible()) {
					E(F).trigger("movePrevious")
				} else {
					M.popup.refresh();
					M.popup.show()
				}
				N.preventDefault();
				break;
			case L.DOWN:
				if (M.popup.visible()) {
					E(F).trigger("moveNext")
				} else {
					M.popup.refresh();
					M.popup.show()
				}
				N.preventDefault();
				break;
			case L.ENTER:
			case L.NUMPAD_ENTER:
				if (M.popup.visible()) {
					I = true;
					F.select();
					F.close();
					N.preventDefault()
				}
			case L.TAB:
				break;
			case L.ESCAPE:
				F.close(N);
				break;
			case L.CONTROL:
				F.close(N);
				break;
			case L.ALT:
				F.close(N);
				break;
			default:
				clearTimeout(M.searching);
				var O = E(this).val();
				M.searching = setTimeout(function () {
						F.search(O);
						F.show()
					}, 150);
				break
			}
		}).keypress(function (N) {
			if (I) {
				I = false;
				N.preventDefault()
			}
		}).unbind("click").bind("click", function (N) {
			F.refresh();
			setTimeout(function () {
				F.show()
			}, 0)
		}).unbind("blur").bind("blur", function (N) {
			E(this).val(E(this).data("label"));
			if (A.isClickPopup) {
				A.isClickPopup = false;
				return
			}
			A.isClickPopup = false;
			F.close();
			if (G) {
				F.select()
			}
			M.destroy()
		});
		E(F).unbind("clicked").bind("clicked", function (N) {
			A.isClickPopup = true
		});
		E(K.parents()).scroll(function () {
			F.close()
		});
		this.ui = K;
		this.popup = F
	}
	D.prototype.destroy = function (F) {
		this.popup.destroy(F);
		this.ds.destroy(F)
	};
	D.updateUi = function (F, H, G) {
		F.val(H.label).attr("title", H.title).data("value", H.value).data("label", H.label);
		if (!G) {
			F.trigger("changed", H)
		}
	};
	D.prototype.keyCode = {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91,
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91
	};
	E.autocomplete = function (G, H) {
		var K = E(G);
		if (typeof(G) == "string") {
			K = E("#" + G)
		}
		var J = K[0].nodeName.toLowerCase();
		if (H.visibility != "undefined") {
			if (J == "select") {
				var F = E("#" + K.attr("id") + "_txt");
				var I = F.next('input[name="acToggle"]');
				if (H.visibility) {
					F.show();
					if (E.browser.mozilla) {
						I.css("display", "inline-block")
					}
					I.show()
				} else {
					F.hide();
					I.hide()
				}
			}
		}
	};
	E.fn.autocomplete = function (J) {
		var V = false;
		if (this.length == 0) {
			return
		}
		var Q = {
			value: "",
			label: ""
		};
		var I = this[0].nodeName.toLowerCase();
		var Y = true;
		if (J && J.visibility != "undefined") {
			Y = J.visibility
		}
		function F(c, d, e) {
			if (!V) {
				c.trigger(d, e)
			}
		}
		function U(c) {
			if (b && b.length > 0) {
				c.removeAttr("disabled")
			} else {
				c.attr("disabled", true)
			}
		}
		function H(c) {
			var d = [];
			c.find("option").each(function () {
				var f = E(this);
				var e = f.text();
				var g = f.attr("title");
				if (g == undefined) {
					g = e
				}
				d.push({
					value: f.val(),
					label: e,
					title: g
				})
			});
			return d
		}
		function O(c) {
			var d = c.find("option:selected");
			d = (d.length > 0) ? d : c.find("option:first");
			if (d.length > 0) {
				return {
					value: d.val(),
					label: d.text()
				}
			} else {
				return {
					value: "",
					label: ""
				}
			}
		}
		if (I == "select") {
			var S = this;
			var N = this.data("binding");
			if (!N) {
				var T = this.outerWidth();
				var Z = this.attr("id") != undefined ? ('id="' + this.attr("id") + '_txt" ') : "";
				N = E('<input style="padding-left:0; padding-right:0;width: ' + (T - 2) + 'px;" ' + Z + 'type="text" widthVal="' + T + '" autocomplete="off" />').insertAfter(this);
				if (self.frameElement && self.frameElement.getAttribute("id") == "zwIframe" && N.width() < 10) {
					N.width(50)
				}
				if (Y == false) {
					N.hide()
				}
				N.data("binding", S);
				S.data("binding", N);
				S.change(function (f, e) {
					if (e) {
						return
					}
					var c = E(this);
					var g = O(c);
					var d = N.data("value") == g.value;
					D.updateUi(N, g, d);
					N.autocomplete({
						data: H(c),
						value: O(c)
					})
				});
				N.bind("changed", function (d, c) {
					if (J.valueChange) {
						J.valueChange(N)
					}
					S.val(c.value);
					F(S, "change", c)
				})
			}
			var a = O(this);
			this.hide();
			if (J && J.value) {
				if (J.value != a.value) {
					S.val(J.value);
					a = O(this)
				}
			}
			F(N, "change", a);
			D.updateUi(N, a, true);
			if (J.valueChange) {
				J.valueChange(N)
			}
			var L = E.extend({
					data: H(this)
				}, J);
			return N.autocomplete(L)
		}
		if (I != "input") {
			return
		}
		var W = E(this);
		this.showButton = true;
		var b = this.data("data");
		if (J) {
			if (J.data) {
				b = J.data
			}
			if (J.value) {
				this.data("value", J.value)
			}
		}
		if (this.showButton) {
			var P = this.next('input[name="acToggle"]').length > 0;
			if (!P) {
				var K = _ctxPath;
				if (!K) {
					K = ""
				}
				var X = "background-image:url('" + K + "/common/images/desc.gif');background-repeat:no-repeat;background-color: #ececec;background-position:center;width:" + 13 + "px;height:30px;border:1px #e4e4e4 solid;vertical-align:middle";
				var G = E('<input type="button" name="acToggle" tabindex="-1" onclick="$(this.previousSibling).trigger(\'focus\').trigger(\'click\');" style="' + X + '"/>');
				if (Y == false) {
					G.hide()
				}
				this.after(G);
				var M = 0;
				if (E.browser.msie && parseInt(E.browser.version, 10) < 9) {
					M = parseInt(this.attr("widthVal"), 10) - G.outerWidth(true) - 5;
					if (M <= 0) {
						var N = this;
						setTimeout(function () {
							var f = E("select", N.parent());
							if (f.length > 0) {
								var e = f.css("display");
								f.css("display", "");
								var d = f.width();
								f.css("display", e);
								var c = d - G.outerWidth(true) - 3;
								N.width(c)
							}
						}, 300)
					} else {
						this.width(M)
					}
				} else {
					M = this.width() - (this.outerWidth(true) - this.width()) - G.outerWidth(true) - 2;
					this.width(M)
				}
			}
		}
		U(this);
		var R = E.extend({
				data: b,
				ui: W,
				value: W.data("value"),
				autoSize: false
			}, J);
		this.focus(function () {
			this.select();
			new D(R)
		})
	}
})(jQuery);
var msBeautify = msBeautify || {};
(function ($) {
	msBeautify = {
		version: {
			msDropdown: "3.5.2"
		},
		author: "Marghoob Suleman",
		counter: 20,
		debug: function (v) {
			if (v !== false) {
				$(".ddOutOfVision").css({
					height: "auto",
					position: "relative"
				})
			} else {
				$(".ddOutOfVision").css({
					height: "0px",
					position: "absolute"
				})
			}
		},
		oldDiv: "",
		create: function (id, settings, type) {
			type = type || "dropdown";
			var data;
			switch (type.toLowerCase()) {
			case "dropdown":
			case "select":
				data = $(id).msDropdown(settings).data("dd");
				break
			}
			return data
		}
	};
	$.msDropDown = {};
	$.msDropdown = {};
	$.extend(true, $.msDropDown, msBeautify);
	$.extend(true, $.msDropdown, msBeautify);
	if ($.fn.prop === undefined) {
		$.fn.prop = $.fn.attr
	}
	if ($.fn.on === undefined) {
		$.fn.on = $.fn.bind;
		$.fn.off = $.fn.unbind
	}
	if (typeof $.expr.createPseudo === "function") {
		$.expr[":"].Contains = $.expr.createPseudo(function (arg) {
				return function (elem) {
					return $(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0
				}
			})
	} else {
		$.expr[":"].Contains = function (a, i, m) {
			return $(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0
		}
	}
	function dd(element, settings) {
		var settings = $.extend(true, {
				byJson: {
					data: null,
					selectedIndex: 0,
					name: null,
					size: 0,
					multiple: false,
					width: 0
				},
				mainCSS: "dd",
				height: 120,
				visibleRows: 7,
				rowHeight: 0,
				showIcon: true,
				zIndex: 9999,
				useSprite: false,
				animStyle: "slideDown",
				event: "click",
				openDirection: "auto",
				jsonTitle: true,
				style: "",
				disabledOpacity: 0.7,
				disabledOptionEvents: true,
				childWidth: 0,
				enableCheckbox: false,
				checkboxNameSuffix: "_mscheck",
				append: "",
				prepend: "",
				reverseMode: true,
				roundedCorner: true,
				enableAutoFilter: true,
				on: {
					create: null,
					open: null,
					close: null,
					add: null,
					remove: null,
					change: null,
					blur: null,
					click: null,
					dblclick: null,
					mousemove: null,
					mouseover: null,
					mouseout: null,
					focus: null,
					mousedown: null,
					mouseup: null
				}
			}, settings);
		var $this = this;
		var holderId = {
			postElementHolder: "_msddHolder",
			postID: "_msdd",
			postTitleID: "_title",
			postTitleTextID: "_titleText",
			postChildID: "_child"
		};
		var css = {
			dd: settings.mainCSS,
			ddTitle: "ddTitle",
			arrow: "ddArrow arrowoff",
			ddChild: "ddChild",
			ddTitleText: "ddTitleText",
			disabled: "disabled",
			enabled: "enabled",
			ddOutOfVision: "ddOutOfVision",
			borderTop: "borderTop",
			noBorderTop: "noBorderTop",
			selected: "selected",
			divider: "divider",
			optgroup: "optgroup",
			optgroupTitle: "optgroupTitle",
			description: "description",
			label: "ddlabel",
			hover: "hover",
			disabledAll: "disabledAll"
		};
		var css_i = {
			li: "_msddli_",
			borderRadiusTp: "borderRadiusTp",
			ddChildMore: "border shadow",
			fnone: "fnone"
		};
		var isList = false,
		isMultiple = false,
		isDisabled = false,
		cacheElement = {},
		element,
		orginial = {},
		isOpen = false;
		var DOWN_ARROW = 40,
		UP_ARROW = 38,
		LEFT_ARROW = 37,
		RIGHT_ARROW = 39,
		ESCAPE = 27,
		ENTER = 13,
		ALPHABETS_START = 47,
		SHIFT = 16,
		CONTROL = 17,
		BACKSPACE = 8,
		DELETE = 46;
		var shiftHolded = false,
		controlHolded = false,
		lastTarget = null,
		forcedTrigger = false,
		oldSelected,
		isCreated = false;
		var doc = document,
		ua = window.navigator.userAgent,
		isIE = ua.match(/msie/i);
		settings.reverseMode = settings.reverseMode.toString();
		settings.roundedCorner = settings.roundedCorner.toString();
		var isArray = function (obj) {
			return (Object.prototype.toString.call(obj) == "[object Array]") ? true : false
		};
		var msieversion = function () {
			var msie = ua.indexOf("MSIE");
			if (msie > 0) {
				return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)))
			} else {
				return 0
			}
		};
		var maxImgWidth = 0;
		var checkDataSetting = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var _ele = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element);
			settings.mainCSS = _ele.data("maincss") || settings.mainCSS;
			settings.visibleRows = _ele.data("visiblerows") || settings.visibleRows;
			if (_ele.data("showicon") == false) {
				settings.showIcon = _ele.data("showicon")
			}
			settings.useSprite = _ele.data("usesprite") || settings.useSprite;
			settings.animStyle = _ele.data("animstyle") || settings.animStyle;
			settings.event = _ele.data("event") || settings.event;
			settings.openDirection = _ele.data("opendirection") || settings.openDirection;
			settings.jsonTitle = _ele.data("jsontitle") || settings.jsonTitle;
			settings.disabledOpacity = _ele.data("disabledopacity") || settings.disabledOpacity;
			settings.childWidth = _ele.data("childwidth") || settings.childWidth;
			settings.enableCheckbox = _ele.data("enablecheckbox") || settings.enableCheckbox;
			settings.checkboxNameSuffix = _ele.data("checkboxnamesuffix") || settings.checkboxNameSuffix;
			settings.append = _ele.data("append") || settings.append;
			settings.prepend = _ele.data("prepend") || settings.prepend;
			settings.reverseMode = _ele.data("reversemode") || settings.reverseMode;
			settings.roundedCorner = _ele.data("roundedcorner") || settings.roundedCorner;
			settings.enableAutoFilter = _ele.data("enableautofilter") || settings.enableAutoFilter;
			settings.reverseMode = settings.reverseMode.toString();
			settings.roundedCorner = settings.roundedCorner.toString();
			settings.enableAutoFilter = settings.enableAutoFilter.toString()
		};
		var getElement = function (ele) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (cacheElement[ele] === undefined) {
				cacheElement[ele] = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + ele)[0]
			}
			return cacheElement[ele]
		};
		var getIndex = function (opt) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			return $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).index(opt)
		};
		var createByJson = function () {
			if (settings.byJson.data) {
				var validData = ["description", "image", "title"];
				try {
					if (!element.id) {
						element.id = "dropdown" + msBeautify.counter
					}
					settings.byJson.data = eval(settings.byJson.data);
					var id = "msdropdown" + (msBeautify.counter++);
					var obj = {};
					obj.id = settings.byJson.id || id;
					obj.name = settings.byJson.name || element.id;
					if (settings.byJson.size > 0) {
						obj.size = settings.byJson.size
					}
					obj.multiple = settings.byJson.multiple;
					var oSelect = createElement("select", obj);
					if (settings.byJson.className) {
						oSelect.className = settings.byJson.className
					}
					var hasImage = false;
					for (var i = 0; i < settings.byJson.data.length; i++) {
						var current = settings.byJson.data[i];
						if (typeof current.image != "undefined") {
							hasImage = true;
							break
						}
					}
					for (var i = 0; i < settings.byJson.data.length; i++) {
						var current = settings.byJson.data[i];
						if (hasImage && typeof current.image == "undefined") {
							current.image = "/seeyon/common/images/msdropdown/skin1/title-bg.gif"
						}
						var txt = (typeof(current.text) == "undefined") ? "" : current.text;
						var opt = new Option(txt, current.value);
						for (var p in current) {
							if (p.toLowerCase() != "text") {
								var key = ($.inArray(p.toLowerCase(), validData) != -1) ? "data-" : "";
								opt.setAttribute(key + p, current[p])
							}
						}
						oSelect.options[i] = opt
					}
					var spanUniqueId = settings.byJson.spanUniqueId;
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element.id).append(oSelect);
					$(oSelect).bind("change", function () {
						if (settings.byJson.change) {
							var func = window[settings.byJson.change];
							if (typeof func == "function") {
								func($(oSelect))
							}
						}
					});
					if (settings.byJson.inCalculate) {
						oSelect.setAttribute("inCalculate", settings.byJson.inCalculate)
					}
					if (settings.byJson.inCondition) {
						oSelect.setAttribute("inCondition", settings.byJson.inCondition)
					}
					if (settings.byJson.unique) {
						oSelect.setAttribute("unique", settings.byJson.unique)
					}
					if (settings.byJson.validate) {
						if (typeof settings.byJson.validate == "object") {
							var validateObj = settings.byJson.validate;
							var validateStr = "name:'" + validateObj.name + "',type:'" + validateObj.type + "',maxLength:" + validateObj.maxLength + ",notNull:" + validateObj.notNull + ",errorMsg:'" + validateObj.errorMsg + "',func:validateSelect";
							oSelect.setAttribute("validate", validateStr)
						} else {
							oSelect.setAttribute("validate", settings.byJson.validate)
						}
					}
					oSelect.selectedIndex = settings.byJson.selectedIndex;
					if (settings.byJson.width === undefined || settings.byJson.width === 0) {}
					else {
						$(oSelect).css({
							width: settings.byJson.width + "px"
						})
					}
					element = oSelect
				} catch (e) {
					throw "There is an error in json data."
				}
			}
		};
		var init = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			createByJson();
			if (!element.id) {
				element.id = "msdrpdd" + (msBeautify.counter++)
			}
			element = element.id;
			$this.element = element;
			checkDataSetting();
			isDisabled = getElement(element).disabled;
			var useCheckbox = settings.enableCheckbox;
			if (useCheckbox.toString() === "true") {
				getElement(element).multiple = true;
				settings.enableCheckbox = true
			}
			isList = (getElement(element).size > 1 || getElement(element).multiple == true) ? true : false;
			if (isList) {
				isMultiple = getElement(element).multiple
			}
			mergeAllProp();
			createLayout();
			updateProp("uiData", getDataAndUI());
			updateProp("selectedOptions", $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element + " option:selected"));
			var childid = getPostID("postChildID");
			oldSelected = $("#" + childid + " li." + css.selected);
			var _ele = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element);
			if (settings.reverseMode === "true") {
				_ele.on("change", function () {
					setValue(this.selectedIndex)
				})
			}
			getElement(element).refresh = function (e) {
				$("#" + element).msDropdown().data("dd").refresh()
			}
		};
		var getPostID = function (id) {
			return element + holderId[id]
		};
		var getInternalStyle = function (ele) {
			var s = (ele.style === undefined) ? "" : ele.style.cssText;
			return s
		};
		var parseOption = function (opt) {
			var imagePath = "",
			title = "",
			description = "",
			value = -1,
			text = "",
			className = "",
			imagecss = "",
			index;
			if (opt !== undefined && opt != null) {
				var attrTitle = opt.title || "";
				if (attrTitle != "") {
					var reg = /^\{.*\}$/;
					var isJson = reg.test(attrTitle);
					if (isJson && settings.jsonTitle) {
						var obj = eval("[" + attrTitle + "]")
					}
					title = (isJson && settings.jsonTitle) ? obj[0].title : title;
					description = (isJson && settings.jsonTitle) ? obj[0].description : description;
					imagePath = (isJson && settings.jsonTitle) ? obj[0].image : attrTitle;
					imagecss = (isJson && settings.jsonTitle) ? obj[0].imagecss : imagecss;
					index = opt.index
				}
				text = opt.text || "";
				value = opt.value || "";
				className = opt.className || "";
				title = $(opt).prop("data-title") || $(opt).data("title") || (title || "");
				description = $(opt).prop("data-description") || $(opt).data("description") || (description || "");
				imagePath = $(opt).prop("data-image") || $(opt).data("image") || (imagePath || "");
				imagecss = $(opt).prop("data-imagecss") || $(opt).data("imagecss") || (imagecss || "");
				index = $(opt).index()
			}
			var o = {
				image: imagePath,
				title: title,
				description: description,
				value: value,
				text: text,
				className: className,
				imagecss: imagecss,
				index: index
			};
			return o
		};
		var createElement = function (nm, attr, html) {
			var tag = doc.createElement(nm);
			if (attr) {
				for (var i in attr) {
					switch (i) {
					case "style":
						tag.style.cssText = attr[i];
						break;
					default:
						tag[i] = attr[i];
						break
					}
				}
			}
			if (html) {
				tag.innerHTML = html
			}
			return tag
		};
		var hideOriginal = function () {
			var hidid = getPostID("postElementHolder");
			if ($("#" + hidid).length == 0) {
				var obj = {
					style: "height: 0px;overflow: hidden;position: absolute;",
					className: css.ddOutOfVision
				};
				obj.id = hidid;
				var oDiv = createElement("div", obj);
				var spanUniqueId = settings.byJson.spanUniqueId;
				var _ele = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element);
				_ele.after(oDiv);
				$(oDiv).width(_ele.width());
				_ele.appendTo($("#" + hidid))
			} else {
				$("#" + hidid).css({
					height: 0,
					overflow: "hidden",
					position: "absolute"
				})
			}
			getElement(element).tabIndex = -1
		};
		var createWrapper = function () {
			var brdRds = (settings.roundedCorner == "true") ? " borderRadius" : "";
			var obj = {
				className: css.dd + " ddcommon" + brdRds
			};
			var intcss = getInternalStyle(getElement(element));
			var w = $("#" + element).outerWidth();
			obj.style = "width: " + w + "px;";
			if (intcss.length > 0) {
				obj.style = obj.style + "" + intcss
			}
			obj.id = getPostID("postID");
			obj.tabIndex = getElement(element).tabIndex;
			var oDiv = createElement("div", obj);
			return oDiv
		};
		var createTitle = function () {
			var selectedOption;
			if (getElement(element).selectedIndex >= 0) {
				selectedOption = getElement(element).options[getElement(element).selectedIndex]
			} else {
				selectedOption = {
					value: "",
					text: ""
				}
			}
			var spriteClass = "",
			selectedClass = "";
			var useSprite = $("#" + element).data("usesprite");
			if (useSprite) {
				settings.useSprite = useSprite
			}
			if (settings.useSprite != false) {
				spriteClass = " " + settings.useSprite;
				selectedClass = " " + selectedOption.className
			}
			var brdRdsTp = (settings.roundedCorner == "true") ? " " + css_i.borderRadiusTp : "";
			var oTitle = createElement("div", {
					className: css.ddTitle + spriteClass + brdRdsTp
				});
			var oDivider = createElement("span", {
					className: css.divider
				});
			var oArrow = createElement("span", {
					className: css.arrow
				});
			var titleid = getPostID("postTitleID");
			var oTitleText = createElement("span", {
					className: css.ddTitleText + selectedClass,
					id: titleid
				});
			var parsed = parseOption(selectedOption);
			var arrowPath = parsed.image;
			var sText = parsed.text || "";
			if (arrowPath != "" && settings.showIcon) {
				var oIcon = createElement("img");
				oIcon.src = arrowPath;
				if (parsed.imagecss != "") {
					oIcon.className = parsed.imagecss + " "
				}
			}
			var oTitleText_in = createElement("span", {
					className: css.label
				}, sText);
			oTitle.appendChild(oArrow);
			if (oIcon) {
				oTitleText.appendChild(oIcon)
			}
			oTitleText.appendChild(oTitleText_in);
			oTitle.appendChild(oTitleText);
			var oDescription = createElement("span", {
					className: css.description
				}, parsed.description);
			oTitleText.appendChild(oDescription);
			return oTitle
		};
		var createFilterBox = function () {
			var tid = getPostID("postTitleTextID");
			var brdRds = (settings.roundedCorner == "true") ? "borderRadius" : "";
			var sText = createElement("input", {
					id: tid,
					type: "text",
					value: "",
					autocomplete: "off",
					className: "text shadow " + brdRds,
					style: "display: none"
				});
			return sText
		};
		var createChild = function (opt) {
			var obj = {};
			var intcss = getInternalStyle(opt);
			if (intcss.length > 0) {
				obj.style = intcss
			}
			var css2 = (opt.disabled) ? css.disabled : css.enabled;
			css2 = (opt.selected) ? (css2 + " " + css.selected) : css2;
			css2 = css2 + " " + css_i.li;
			obj.className = css2;
			if (settings.useSprite != false) {
				obj.className = css2 + " " + opt.className
			}
			var li = createElement("li", obj);
			var parsed = parseOption(opt);
			if (parsed.title != "") {
				li.title = parsed.title
			}
			var arrowPath = parsed.image;
			if (arrowPath != "" && settings.showIcon) {
				var oIcon = createElement("img");
				oIcon.src = arrowPath;
				if (parsed.imagecss != "") {
					oIcon.className = parsed.imagecss + " "
				}
				setImageHeight(oIcon);
				if (typeof(settings.realImageHeight) == "undefined") {
					settings.realImageHeight = 0
				}
				settings.realImageHeight = oIcon.height > settings.realImageHeight ? oIcon.height : settings.realImageHeight
			}
			if (parsed.description != "") {
				var oDescription = createElement("span", {
						className: css.description
					}, parsed.description)
			}
			var sText = opt.text || "";
			var oTitleText = createElement("span", {
					className: css.label
				}, sText);
			if (settings.enableCheckbox === true) {
				var chkbox = createElement("input", {
						type: "checkbox",
						name: element + settings.checkboxNameSuffix + "[]",
						value: opt.value || "",
						className: "checkbox"
					});
				li.appendChild(chkbox);
				if (settings.enableCheckbox === true) {
					chkbox.checked = (opt.selected) ? true : false
				}
			}
			if (oIcon) {
				li.appendChild(oIcon)
			}
			li.appendChild(oTitleText);
			if (oDescription) {
				li.appendChild(oDescription)
			} else {
				if (oIcon) {
					oIcon.className = oIcon.className + css_i.fnone
				}
			}
			var oClear = createElement("div", {
					className: "clear"
				});
			li.appendChild(oClear);
			return li
		};
		var createChildren = function () {
			var childid = getPostID("postChildID");
			var obj = {
				className: css.ddChild + " ddchild_ " + css_i.ddChildMore,
				id: childid
			};
			if (isList == false) {
				obj.style = "z-index: " + settings.zIndex
			} else {
				obj.style = "z-index:1"
			}
			var childWidth = $("#" + element).data("childwidth") || settings.childWidth;
			if (childWidth) {
				obj.style = (obj.style || "") + ";width:" + childWidth
			}
			var oDiv = createElement("div", obj);
			var ul = createElement("ul");
			if (settings.useSprite != false) {
				ul.className = settings.useSprite
			}
			var allOptions = getElement(element).children;
			for (var i = 0; i < allOptions.length; i++) {
				var current = allOptions[i];
				var li;
				if (current.nodeName.toLowerCase() == "optgroup") {
					li = createElement("li", {
							className: css.optgroup
						});
					var span = createElement("span", {
							className: css.optgroupTitle
						}, current.label);
					li.appendChild(span);
					var optChildren = current.children;
					var optul = createElement("ul");
					for (var j = 0; j < optChildren.length; j++) {
						var opt_li = createChild(optChildren[j]);
						optul.appendChild(opt_li)
					}
					li.appendChild(optul)
				} else {
					li = createChild(current)
				}
				ul.appendChild(li)
			}
			oDiv.appendChild(ul);
			return oDiv
		};
		var childHeight = function (val) {
			var childid = getPostID("postChildID");
			if (val) {
				var ddChild = $('.ddChild[id="' + childid + '"] ');
				if (val == -1) {
					ddChild.css({
						height: "auto",
						overflow: "auto"
					})
				} else {
					ddChild.css("height", val + "px")
				}
				return false
			}
			var iHeight;
			var totalOptions = getElement(element).options.length;
			if (totalOptions > settings.visibleRows || settings.visibleRows) {
				var firstLI = $("#" + childid + " li:first");
				var margin = parseInt(firstLI.css("padding-bottom")) + parseInt(firstLI.css("padding-top"));
				if (settings.rowHeight === 0) {
					$("#" + childid).css({
						visibility: "hidden",
						display: "block"
					});
					settings.rowHeight = Math.ceil(firstLI.height());
					$("#" + childid).css({
						visibility: "visible"
					});
					if (!isList || settings.enableCheckbox === true) {
						$("#" + childid).css({
							display: "none"
						})
					}
				}
				iHeight = ((settings.rowHeight + margin) * Math.min(settings.visibleRows, totalOptions)) + 3
			} else {
				if (isList) {
					iHeight = $("#" + element).height()
				}
			}
			if (settings.imageHeight) {
				iHeight = ((settings.imageHeight + margin) * Math.min(settings.visibleRows, totalOptions)) + 3
			}
			return iHeight
		};
		var applyChildEvents = function () {
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			var _childidObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid);
			_childidObj.on("click", function (e) {
				if (isDisabled === true) {
					return false
				}
				e.preventDefault();
				e.stopPropagation();
				if (isList) {
					bind_on_events()
				}
			});
			var _childEnabledObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.enabled);
			_childEnabledObj.on("click", function (e) {
				if (e.target.nodeName.toLowerCase() !== "input") {
					close(this)
				}
			});
			_childEnabledObj.on("mousedown", function (e) {
				var spanUniqueId = settings.byJson.spanUniqueId;
				if (isDisabled === true) {
					return false
				}
				oldSelected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
				lastTarget = this;
				e.preventDefault();
				e.stopPropagation();
				if (settings.enableCheckbox === true) {
					if (e.target.nodeName.toLowerCase() === "input") {
						controlHolded = true
					}
				}
				if (isList === true) {
					if (isMultiple) {
						if (shiftHolded === true) {
							$(this).addClass(css.selected);
							var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
							var lastIndex = getIndex(this);
							if (selected.length > 1) {
								var items = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li);
								var ind1 = getIndex(selected[0]);
								var ind2 = getIndex(selected[1]);
								if (lastIndex > ind2) {
									ind1 = (lastIndex);
									ind2 = ind2 + 1
								}
								for (var i = Math.min(ind1, ind2); i <= Math.max(ind1, ind2); i++) {
									var current = items[i];
									if ($(current).hasClass(css.enabled)) {
										$(current).addClass(css.selected)
									}
								}
							}
						} else {
							if (controlHolded === true) {
								$(this).toggleClass(css.selected);
								if (settings.enableCheckbox === true) {
									var checkbox = this.childNodes[0];
									checkbox.checked = !checkbox.checked
								}
							} else {
								$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).removeClass(css.selected);
								$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " input:checkbox").prop("checked", false);
								$(this).addClass(css.selected);
								if (settings.enableCheckbox === true) {
									this.childNodes[0].checked = true
								}
							}
						}
					} else {
						$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).removeClass(css.selected);
						$(this).addClass(css.selected)
					}
				} else {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).removeClass(css.selected);
					$(this).addClass(css.selected)
				}
			});
			_childEnabledObj.on("mouseenter", function (e) {
				if (isDisabled === true) {
					return false
				}
				e.preventDefault();
				e.stopPropagation();
				if (lastTarget != null) {
					if (isMultiple) {
						$(this).addClass(css.selected);
						if (settings.enableCheckbox === true) {
							this.childNodes[0].checked = true
						}
					}
				}
			});
			_childEnabledObj.on("mouseover", function (e) {
				if (isDisabled === true) {
					return false
				}
				$(this).addClass(css.hover)
			});
			_childEnabledObj.on("mouseout", function (e) {
				if (isDisabled === true) {
					return false
				}
				var spanUniqueId = settings.byJson.spanUniqueId;
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.hover).removeClass(css.hover)
			});
			_childEnabledObj.on("mouseup", function (e) {
				if (isDisabled === true) {
					return false
				}
				e.preventDefault();
				e.stopPropagation();
				if (settings.enableCheckbox === true) {
					controlHolded = false
				}
				var spanUniqueId = settings.byJson.spanUniqueId;
				var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).length;
				forcedTrigger = (oldSelected.length != selected || selected == 0) ? true : false;
				fireAfterItemClicked();
				unbind_on_events();
				bind_on_events();
				lastTarget = null
			});
			if (settings.disabledOptionEvents == false) {
				var _liObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li);
				_liObj.on("click", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "click")
				});
				_liObj.on("mouseenter", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "mouseenter")
				});
				_liObj.on("mouseover", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "mouseover")
				});
				_liObj.on("mouseout", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "mouseout")
				});
				_liObj.on("mousedown", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "mousedown")
				});
				_liObj.on("mouseup", function (e) {
					if (isDisabled === true) {
						return false
					}
					fireOptionEventIfExist(this, "mouseup")
				})
			}
		};
		var removeChildEvents = function () {
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).off("click");
			var _liObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.enabled);
			_liObj.off("mouseenter");
			_liObj.off("click");
			_liObj.off("mouseover");
			_liObj.off("mouseout");
			_liObj.off("mousedown");
			_liObj.off("mouseup")
		};
		var triggerBypassingHandler = function (id, evt_n, handler) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).off(evt_n, handler);
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).trigger(evt_n);
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).on(evt_n, handler)
		};
		var applyEvents = function () {
			var id = getPostID("postID");
			var tid = getPostID("postTitleTextID");
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			var _idObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id);
			_idObj.on(settings.event, function (e) {
				if (isDisabled === true) {
					return false
				}
				fireEventIfExist(settings.event);
				e.preventDefault();
				e.stopPropagation();
				open(e)
			});
			_idObj.on("keydown", function (e) {
				var k = e.which;
				if (!isOpen && (k == ENTER || k == UP_ARROW || k == DOWN_ARROW || k == LEFT_ARROW || k == RIGHT_ARROW || (k >= ALPHABETS_START && !isList))) {
					open(e);
					if (k >= ALPHABETS_START) {
						showFilterBox()
					} else {
						e.preventDefault();
						e.stopImmediatePropagation()
					}
				}
			});
			_idObj.on("focus", wrapperFocusHandler);
			_idObj.on("blur", wrapperBlurHandler);
			var _tidObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid);
			_tidObj.on("blur", function (e) {
				triggerBypassingHandler(id, "focus", wrapperFocusHandler)
			});
			applyChildEvents();
			_idObj.on("dblclick", on_dblclick);
			_idObj.on("mousemove", on_mousemove);
			_idObj.on("mouseenter", on_mouseover);
			_idObj.on("mouseleave", on_mouseout);
			_idObj.on("mousedown", on_mousedown);
			_idObj.on("mouseup", on_mouseup)
		};
		var wrapperFocusHandler = function (e) {
			fireEventIfExist("focus")
		};
		var wrapperBlurHandler = function (e) {
			fireEventIfExist("blur")
		};
		var fixedForList = function () {
			var id = getPostID("postID");
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (isList === true && settings.enableCheckbox === false) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id + " ." + css.ddTitle).hide();
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).css({
					display: "block",
					position: "relative"
				})
			} else {
				if (settings.enableCheckbox === false) {
					isMultiple = false
				}
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id + " ." + css.ddTitle).show();
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).css({
					display: "none",
					position: "absolute"
				});
				var first = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected)[0];
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).removeClass(css.selected);
				var index = getIndex($(first).addClass(css.selected));
				setValue(index)
			}
			childHeight(childHeight())
		};
		var fixedForDisabled = function () {
			var id = getPostID("postID");
			var opc = (isDisabled == true) ? settings.disabledOpacity : 1;
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (isDisabled === true) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).addClass(css.disabledAll)
			} else {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).removeClass(css.disabledAll)
			}
		};
		var fixedSomeUI = function () {
			var tid = getPostID("postTitleTextID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (settings.enableAutoFilter == "true") {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid).on("keyup", applyFilters)
			}
			fixedForList();
			fixedForDisabled()
		};
		var createLayout = function () {
			var oDiv = createWrapper();
			maxImgWidth = $(oDiv).width() - 58;
			var oTitle = createTitle();
			oDiv.appendChild(oTitle);
			var oFilterBox = createFilterBox();
			oDiv.appendChild(oFilterBox);
			var oChildren = createChildren();
			oDiv.appendChild(oChildren);
			var spanUniqueId = settings.byJson.spanUniqueId;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).after(oDiv);
			hideOriginal();
			fixedSomeUI();
			applyEvents();
			var childid = getPostID("postChildID");
			if (settings.append != "") {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).append(settings.append)
			}
			if (settings.prepend != "") {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).prepend(settings.prepend)
			}
			if (typeof settings.on.create == "function") {
				settings.on.create.apply($this, arguments)
			}
		};
		var selectUI_LI = function (indexes) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).removeClass(css.selected);
			if (settings.enableCheckbox === true) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li + " input.checkbox").prop("checked", false)
			}
			if (isArray(indexes) === true) {
				for (var i = 0; i < indexes.length; i++) {
					updateNow(indexes[i])
				}
			} else {
				updateNow(indexes)
			}
			function updateNow(index) {
				var spanUniqueId = settings.byJson.spanUniqueId;
				$($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li)[index]).addClass(css.selected);
				if (settings.enableCheckbox === true) {
					$($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li)[index]).find("input.checkbox").prop("checked", "checked")
				}
			}
		};
		var selectMutipleOptions = function (bySelected, useIndexes) {
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			var selected = bySelected || $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
			for (var i = 0; i < selected.length; i++) {
				var ind = (useIndexes === true) ? selected[i] : getIndex(selected[i]);
				getElement(element).options[ind].selected = "selected"
			}
			setValue(selected)
		};
		var fireAfterItemClicked = function () {
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
			if (isMultiple && (shiftHolded || controlHolded) || forcedTrigger) {
				getElement(element).selectedIndex = -1
			}
			var index;
			if (selected.length == 0) {
				index = -1
			} else {
				if (selected.length > 1) {
					selectMutipleOptions(selected)
				} else {
					index = getIndex($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected))
				}
			}
			if ((getElement(element).selectedIndex != index || forcedTrigger) && selected.length <= 1) {
				forcedTrigger = false;
				var evt = has_handler("change");
				getElement(element).selectedIndex = index;
				setValue(index);
				if (typeof settings.on.change == "function") {
					var d = getDataAndUI();
					settings.on.change(d.data, d.ui)
				}
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).trigger("change")
			}
		};
		var setValue = function (index, byvalue) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (index !== undefined) {
				var selectedIndex,
				value,
				selectedText;
				if (index == -1) {
					selectedIndex = -1;
					value = "";
					selectedText = "";
					updateTitleUI(-1)
				} else {
					if (typeof index != "object") {
						var opt = getElement(element).options[index];
						getElement(element).selectedIndex = index;
						selectedIndex = index;
						value = parseOption(opt);
						selectedText = (index >= 0) ? getElement(element).options[index].text : "";
						updateTitleUI(undefined, value);
						value = value.value
					} else {
						selectedIndex = (byvalue && byvalue.index) || getElement(element).selectedIndex;
						value = (byvalue && byvalue.value) || getElement(element).value;
						selectedText = (byvalue && byvalue.text) || getElement(element).options[getElement(element).selectedIndex].text || "";
						updateTitleUI(selectedIndex)
					}
				}
				updateProp("selectedIndex", selectedIndex);
				updateProp("value", value);
				updateProp("selectedText", selectedText);
				updateProp("children", getElement(element).children);
				updateProp("uiData", getDataAndUI());
				updateProp("selectedOptions", $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element + " option:selected"))
			}
		};
		var has_handler = function (name) {
			var evt = {
				byElement: false,
				byJQuery: false,
				hasEvent: false
			};
			var spanUniqueId = settings.byJson.spanUniqueId;
			var obj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element);
			try {
				if (obj.prop("on" + name) !== null) {
					evt.hasEvent = true;
					evt.byElement = true
				}
			} catch (e) {}
			var evs;
			if (typeof $._data == "function") {
				evs = $._data(obj[0], "events")
			} else {
				evs = obj.data("events")
			}
			if (evs && evs[name]) {
				evt.hasEvent = true;
				evt.byJQuery = true
			}
			return evt
		};
		var bind_on_events = function () {
			unbind_on_events();
			$("body").on("click", close);
			$(document).on("keydown", on_keydown);
			$(document).on("keyup", on_keyup)
		};
		var unbind_on_events = function () {
			$("body").off("click", close);
			$(document).off("keydown", on_keydown);
			$(document).off("keyup", on_keyup)
		};
		var applyFilters = function (e) {
			if (e.keyCode < ALPHABETS_START && e.keyCode != BACKSPACE && e.keyCode != DELETE) {
				return false
			}
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			var tid = getPostID("postTitleTextID");
			var sText = getElement(tid).value;
			if (sText.length == 0) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:hidden").show();
				childHeight(childHeight())
			} else {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li").hide();
				var items = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:Contains('" + sText + "')").show();
				if ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible").length <= settings.visibleRows) {
					childHeight(-1)
				}
				if (items.length > 0 && !isList || !isMultiple) {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " ." + css.selected).removeClass(css.selected);
					$(items[0]).addClass(css.selected)
				}
			}
			if (!isList) {
				adjustOpen()
			}
		};
		var showFilterBox = function () {
			if (settings.enableAutoFilter == "true") {
				var spanUniqueId = settings.byJson.spanUniqueId;
				var id = getPostID("postID");
				var tid = getPostID("postTitleTextID");
				if ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid + ":hidden").length > 0 && controlHolded == false) {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid + ":hidden").show().val("");
					triggerBypassingHandler(id, "blur", wrapperBlurHandler);
					getElement(tid).focus()
				}
			}
		};
		var hideFilterBox = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var tid = getPostID("postTitleTextID");
			if ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid + ":visible").length > 0) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + tid + ":visible").hide();
				getElement(tid).blur()
			}
		};
		var on_keydown = function (evt) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var tid = getPostID("postTitleTextID");
			var childid = getPostID("postChildID");
			switch (evt.keyCode) {
			case DOWN_ARROW:
			case RIGHT_ARROW:
				evt.preventDefault();
				evt.stopPropagation();
				next();
				break;
			case UP_ARROW:
			case LEFT_ARROW:
				evt.preventDefault();
				evt.stopPropagation();
				previous();
				break;
			case ESCAPE:
			case ENTER:
				evt.preventDefault();
				evt.stopPropagation();
				close();
				var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).length;
				forcedTrigger = (oldSelected.length != selected || selected == 0) ? true : false;
				fireAfterItemClicked();
				unbind_on_events();
				lastTarget = null;
				break;
			case SHIFT:
				shiftHolded = true;
				break;
			case CONTROL:
				controlHolded = true;
				break;
			default:
				if (evt.keyCode >= ALPHABETS_START && isList === false) {
					showFilterBox()
				}
				break
			}
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("keydown")
		};
		var on_keyup = function (evt) {
			switch (evt.keyCode) {
			case SHIFT:
				shiftHolded = false;
				break;
			case CONTROL:
				controlHolded = false;
				break
			}
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("keyup")
		};
		var on_dblclick = function (evt) {
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("dblclick")
		};
		var on_mousemove = function (evt) {
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("mousemove")
		};
		var on_mouseover = function (evt) {
			if (isDisabled === true) {
				return false
			}
			evt.preventDefault();
			fireEventIfExist("mouseover")
		};
		var on_mouseout = function (evt) {
			if (isDisabled === true) {
				return false
			}
			evt.preventDefault();
			fireEventIfExist("mouseout")
		};
		var on_mousedown = function (evt) {
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("mousedown")
		};
		var on_mouseup = function (evt) {
			if (isDisabled === true) {
				return false
			}
			fireEventIfExist("mouseup")
		};
		var option_has_handler = function (opt, name) {
			var evt = {
				byElement: false,
				byJQuery: false,
				hasEvent: false
			};
			if ($(opt).prop("on" + name) != undefined) {
				evt.hasEvent = true;
				evt.byElement = true
			}
			var evs = $(opt).data("events");
			if (evs && evs[name]) {
				evt.hasEvent = true;
				evt.byJQuery = true
			}
			return evt
		};
		var fireOptionEventIfExist = function (li, evt_n) {
			if (settings.disabledOptionEvents == false) {
				var opt = getElement(element).options[getIndex(li)];
				if (option_has_handler(opt, evt_n).hasEvent === true) {
					if (option_has_handler(opt, evt_n).byElement === true) {
						opt["on" + evt_n]()
					}
					if (option_has_handler(opt, evt_n).byJQuery === true) {
						switch (evt_n) {
						case "keydown":
						case "keyup":
							break;
						default:
							$(opt).trigger(evt_n);
							break
						}
					}
					return false
				}
			}
		};
		var fireEventIfExist = function (evt_n) {
			if (typeof settings.on[evt_n] == "function") {
				settings.on[evt_n].apply(this, arguments)
			}
			if (has_handler(evt_n).hasEvent === true) {
				if (has_handler(evt_n).byElement === true) {
					getElement(element)["on" + evt_n]()
				} else {
					if (has_handler(evt_n).byJQuery === true) {
						switch (evt_n) {
						case "keydown":
						case "keyup":
							break;
						default:
							$("#" + element).triggerHandler(evt_n);
							break
						}
					}
				}
				return false
			}
		};
		var scrollToIfNeeded = function (opt) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			opt = (opt !== undefined) ? opt : $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
			if (opt.length > 0) {
				var pos = parseInt(($(opt).position().top));
				var ch = parseInt($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).height());
				if (pos > ch) {
					var top = pos + $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).scrollTop() - (ch / 2);
					$("#" + childid).animate({
						scrollTop: top
					}, 500)
				}
			}
		};
		var next = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			var items = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css_i.li);
			var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css.selected);
			selected = (selected.length == 0) ? items[0] : selected;
			var index = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css_i.li).index(selected);
			if ((index < items.length - 1)) {
				index = getNext(index);
				if (index < items.length) {
					if (!shiftHolded || !isList || !isMultiple) {
						$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " ." + css.selected).removeClass(css.selected)
					}
					$(items[index]).addClass(css.selected);
					updateTitleUI(index);
					if (isList == true) {
						fireAfterItemClicked()
					}
					scrollToIfNeeded($(items[index]))
				}
				if (!isList) {
					adjustOpen()
				}
			}
			function getNext(ind) {
				ind = ind + 1;
				if (ind > items.length) {
					return ind
				}
				if ($(items[ind]).hasClass(css.enabled) === true) {
					return ind
				}
				return ind = getNext(ind)
			}
		};
		var previous = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var childid = getPostID("postChildID");
			var selected = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css.selected);
			var items = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css_i.li);
			var index = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:visible." + css_i.li).index(selected[0]);
			if (index >= 0) {
				index = getPrev(index);
				if (index >= 0) {
					if (!shiftHolded || !isList || !isMultiple) {
						$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " ." + css.selected).removeClass(css.selected)
					}
					$(items[index]).addClass(css.selected);
					updateTitleUI(index);
					if (isList == true) {
						fireAfterItemClicked()
					}
					if (parseInt(($(items[index]).position().top + $(items[index]).height())) <= 0) {
						var _childObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid);
						var top = (_childObj.scrollTop() - _childObj.height()) - $(items[index]).height();
						_childObj.animate({
							scrollTop: top
						}, 500)
					}
				}
				if (!isList) {
					adjustOpen()
				}
			}
			function getPrev(ind) {
				ind = ind - 1;
				if (ind < 0) {
					return ind
				}
				if ($(items[ind]).hasClass(css.enabled) === true) {
					return ind
				}
				return ind = getPrev(ind)
			}
		};
		var adjustOpen = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var id = getPostID("postID");
			var childid = getPostID("postChildID");
			var _idObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id);
			var _childIdObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid);
			var pos = _idObj.offset();
			var mH = _idObj.height();
			var wH = $(window).height();
			var st = $(window).scrollTop();
			var cH = _childIdObj.height();
			var top = _idObj.height();
			var direction = settings.openDirection.toLowerCase();
			if (((wH + st) < Math.floor(cH + mH + pos.top) || direction == "alwaysup") && direction != "alwaysdown") {
				top = cH;
				_childIdObj.css({
					top: "-" + top + "px",
					display: "block",
					zIndex: settings.zIndex
				});
				if (settings.roundedCorner == "true") {
					_idObj.removeClass("borderRadius borderRadiusTp").addClass("borderRadiusBtm")
				}
				var top = $("#" + childid).offset().top;
				if (top < -10) {
					_childIdObj.css({
						top: (parseInt(_childIdObj.css("top")) - top + 20 + st) + "px",
						zIndex: settings.zIndex
					});
					if (settings.roundedCorner == "true") {
						_idObj.removeClass("borderRadiusBtm borderRadiusTp").addClass("borderRadius")
					}
				}
			} else {
				_childIdObj.css({
					top: top + "px",
					zIndex: settings.zIndex
				});
				if (settings.roundedCorner == "true") {
					_idObj.removeClass("borderRadius borderRadiusBtm").addClass("borderRadiusTp")
				}
			}
			if (isIE) {
				if (msieversion() <= 7) {
					$("div.ddcommon").css("zIndex", settings.zIndex - 10);
					_idObj.css("zIndex", settings.zIndex + 5)
				}
			}
		};
		var open = function (e) {
			$(".ddChild").hide();
			if (isDisabled === true) {
				return false
			}
			var id = getPostID("postID");
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (!isOpen) {
				isOpen = true;
				if (msBeautify.oldDiv != "") {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + msBeautify.oldDiv).css({
						display: "none"
					})
				}
				msBeautify.oldDiv = childid;
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li:hidden").show();
				adjustOpen();
				var animStyle = settings.animStyle;
				if (animStyle == "" || animStyle == "none") {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).css({
						display: "block"
					});
					scrollToIfNeeded();
					if (typeof settings.on.open == "function") {
						var d = getDataAndUI();
						settings.on.open(d.data, d.ui)
					}
				} else {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid)[animStyle]("fast", function () {
						scrollToIfNeeded();
						if (typeof settings.on.open == "function") {
							var d = getDataAndUI();
							settings.on.open(d.data, d.ui)
						}
					})
				}
				bind_on_events()
			} else {
				if (settings.event !== "mouseover") {
					close()
				}
			}
		};
		var close = function (e) {
			isOpen = false;
			var id = getPostID("postID");
			var childid = getPostID("postChildID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (isList === false || settings.enableCheckbox === true) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).css({
					display: "none"
				});
				if (settings.roundedCorner == "true") {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).removeClass("borderRadiusTp borderRadiusBtm").addClass("borderRadius")
				}
			}
			unbind_on_events();
			if (typeof settings.on.close == "function") {
				var d = getDataAndUI();
				settings.on.close(d.data, d.ui)
			}
			hideFilterBox();
			childHeight(childHeight());
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid).css({
				zIndex: 1
			});
			updateTitleUI(getElement(element).selectedIndex)
		};
		var mergeAllProp = function () {
			try {
				orginial = $.extend(true, {}, getElement(element));
				for (var i in orginial) {
					if (typeof orginial[i] != "function") {
						$this[i] = orginial[i]
					}
				}
			} catch (e) {}
			$this.selectedText = (getElement(element).selectedIndex >= 0) ? getElement(element).options[getElement(element).selectedIndex].text : "";
			$this.version = msBeautify.version.msDropdown;
			$this.author = msBeautify.author
		};
		var getDataAndUIByOption = function (opt) {
			if (opt != null && typeof opt != "undefined") {
				var childid = getPostID("postChildID");
				var data = parseOption(opt);
				var spanUniqueId = settings.byJson.spanUniqueId;
				var ui = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li + ":eq(" + (opt.index) + ")");
				return {
					data: data,
					ui: ui,
					option: opt,
					index: opt.index
				}
			}
			return null
		};
		var getDataAndUI = function () {
			var childid = getPostID("postChildID");
			var ele = getElement(element);
			var data,
			ui,
			option,
			index;
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (ele.selectedIndex == -1) {
				data = null;
				ui = null;
				option = null;
				index = -1
			} else {
				ui = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected);
				if (ui.length > 1) {
					var d = [],
					op = [],
					ind = [];
					for (var i = 0; i < ui.length; i++) {
						var pd = getIndex(ui[i]);
						d.push(pd);
						op.push(ele.options[pd])
					}
					data = d;
					option = op;
					index = d
				} else {
					option = ele.options[ele.selectedIndex];
					data = parseOption(option);
					index = ele.selectedIndex
				}
			}
			return {
				data: data,
				ui: ui,
				index: index,
				option: option
			}
		};
		var updateTitleUI = function (index, byvalue) {
			var titleid = getPostID("postTitleID");
			var value = {};
			if (index == -1) {
				value.text = "&nbsp;";
				value.className = "";
				value.description = "";
				value.image = ""
			} else {
				if (typeof index != "undefined") {
					var opt = getElement(element).options[index];
					value = parseOption(opt)
				} else {
					value = byvalue
				}
			}
			var spanUniqueId = settings.byJson.spanUniqueId;
			var _titleIdObj = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + titleid);
			_titleIdObj.find("." + css.label).html(value.text);
			getElement(titleid).className = css.ddTitleText + " " + value.className;
			if (value.description != "") {
				_titleIdObj.find("." + css.description).html(value.description).show()
			} else {
				_titleIdObj.find("." + css.description).html("").hide()
			}
			var img = _titleIdObj.find("img");
			if (img.length > 0) {
				$(img).remove()
			}
			if (value.image != "" && settings.showIcon) {
				var uniqueSpanObj = $("span[spanUniqueId=" + spanUniqueId + "]");
				var _sImg = uniqueSpanObj.find("#" + element + "_child").find("li").eq(value.index).find("img");
				img = new Image();
				$(img).on("load", function () {
					var r = img.width / img.height;
					if (!isNaN(r) && r != 0) {
						img.width = _sImg.height() * r;
						if (img.width > uniqueSpanObj.width() - 35) {
							img.width = uniqueSpanObj.width() - 35
						}
					}
					img.height = _sImg.height();
					var id = getPostID("postID");
					var _spanHeight = _sImg.height();
					if (_spanHeight == 0) {
						_spanHeight = 17
					}
					uniqueSpanObj.find("#" + id).height(_spanHeight);
					uniqueSpanObj.find("#" + id).find("div.borderRadiusTp").height(_spanHeight)
				});
				img.src = value.image;
				_titleIdObj.prepend(img);
				if (value.imagecss != "") {
					img.className = value.imagecss + " "
				}
				if (value.description == "") {
					img.className = img.className + css_i.fnone
				}
			}
		};
		var setImageHeight = function (img) {
			var scaleBaseHeight = true;
			if (settings.imageHeight) {
				$(img).on("load", function () {
					var h = img.height;
					var w = img.width;
					if (h == 0 || w == 0) {
						return
					}
					var r = w / h;
					var width = settings.imageHeight * r;
					var height = settings.imageHeight;
					if (maxImgWidth > 0 && (width > maxImgWidth)) {
						scaleBaseHeight = false;
						width = maxImgWidth
					}
					img.height = height;
					img.width = width
				});
				var h = img.height;
				var w = img.width;
				if (h == 0 || w == 0) {
					return
				}
				var r = w / h;
				img.height = settings.imageHeight;
				img.width = settings.imageHeight * r
			}
			if (scaleBaseHeight && (settings.realImageHeight > img.height)) {
				img.height = settings.realImageHeight
			}
		};
		var updateProp = function (p, v) {
			$this[p] = v
		};
		var updateUI = function (a, opt, i) {
			var childid = getPostID("postChildID");
			var wasSelected = false;
			var spanUniqueId = settings.byJson.spanUniqueId;
			switch (a) {
			case "add":
				var li = createChild(opt || getElement(element).options[i]);
				var index;
				if (arguments.length == 3) {
					index = i
				} else {
					index = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).length - 1
				}
				if (index < 0 || !index) {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " ul").append(li)
				} else {
					var at = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li)[index];
					$(at).before(li)
				}
				removeChildEvents();
				applyChildEvents();
				if (settings.on.add != null) {
					settings.on.add.apply(this, arguments)
				}
				break;
			case "remove":
				wasSelected = $($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li)[i]).hasClass(css.selected);
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li + ":eq(" + i + ")").remove();
				var items = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.enabled);
				if (wasSelected == true) {
					if (items.length > 0) {
						$(items[0]).addClass(css.selected);
						var ind = $("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).index(items[0]);
						setValue(ind)
					}
				}
				if (items.length == 0) {
					setValue(-1)
				}
				if ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).length < settings.visibleRows && !isList) {
					childHeight(-1)
				}
				if (settings.on.remove != null) {
					settings.on.remove.apply(this, arguments)
				}
				break
			}
		};
		this.act = function () {
			var action = arguments[0];
			Array.prototype.shift.call(arguments);
			switch (action) {
			case "add":
				$this.add.apply(this, arguments);
				break;
			case "remove":
				$this.remove.apply(this, arguments);
				break;
			default:
				try {
					getElement(element)[action].apply(getElement(element), arguments)
				} catch (e) {}
				break
			}
		};
		this.add = function () {
			var text,
			value,
			title,
			image,
			description;
			var obj = arguments[0];
			if (typeof obj == "string") {
				text = obj;
				value = text;
				opt = new Option(text, value)
			} else {
				text = obj.text || "";
				value = obj.value || text;
				title = obj.title || "";
				image = obj.image || "";
				description = obj.description || "";
				opt = new Option(text, value);
				$(opt).data("description", description);
				$(opt).data("image", image);
				$(opt).data("title", title)
			}
			arguments[0] = opt;
			getElement(element).add.apply(getElement(element), arguments);
			updateProp("children", getElement(element)["children"]);
			updateProp("length", getElement(element).length);
			updateUI("add", opt, arguments[1])
		};
		this.remove = function (i) {
			getElement(element).remove(i);
			updateProp("children", getElement(element)["children"]);
			updateProp("length", getElement(element).length);
			updateUI("remove", undefined, i)
		};
		this.set = function (prop, val) {
			if (typeof prop == "undefined" || typeof val == "undefined") {
				return false
			}
			prop = prop.toString();
			try {
				updateProp(prop, val)
			} catch (e) {}
			var spanUniqueId = settings.byJson.spanUniqueId;
			switch (prop) {
			case "size":
				getElement(element)[prop] = val;
				if (val == 0) {
					getElement(element).multiple = false
				}
				isList = (getElement(element).size > 1 || getElement(element).multiple == true) ? true : false;
				fixedForList();
				break;
			case "multiple":
				getElement(element)[prop] = val;
				isList = (getElement(element).size > 1 || getElement(element).multiple == true) ? true : false;
				isMultiple = getElement(element).multiple;
				fixedForList();
				updateProp(prop, val);
				break;
			case "disabled":
				getElement(element)[prop] = val;
				isDisabled = val;
				fixedForDisabled();
				break;
			case "selectedIndex":
			case "value":
				if (prop == "selectedIndex" && isArray(val) === true) {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element + " option").prop("selected", false);
					selectMutipleOptions(val, true);
					selectUI_LI(val)
				} else {
					getElement(element)[prop] = val;
					selectUI_LI(getElement(element).selectedIndex);
					setValue(getElement(element).selectedIndex)
				}
				break;
			case "length":
				var childid = getPostID("postChildID");
				if (val < getElement(element).length) {
					getElement(element)[prop] = val;
					if (val == 0) {
						$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li).remove();
						setValue(-1)
					} else {
						$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css_i.li + ":gt(" + (val - 1) + ")").remove();
						if ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.selected).length == 0) {
							$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + childid + " li." + css.enabled + ":eq(0)").addClass(css.selected)
						}
					}
					updateProp(prop, val);
					updateProp("children", getElement(element)["children"])
				}
				break;
			case "id":
				break;
			default:
				try {
					getElement(element)[prop] = val;
					updateProp(prop, val)
				} catch (e) {}
				break
			}
		};
		this.get = function (prop) {
			return $this[prop] || getElement(element)[prop]
		};
		this.visible = function (val) {
			var id = getPostID("postID");
			var spanUniqueId = settings.byJson.spanUniqueId;
			if (val === true) {
				$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).show()
			} else {
				if (val === false) {
					$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).hide()
				} else {
					return ($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).css("display") == "none") ? false : true
				}
			}
		};
		this.debug = function (v) {
			msBeautify.debug(v)
		};
		this.close = function () {
			close()
		};
		this.open = function () {
			open()
		};
		this.showRows = function (r) {
			if (typeof r == "undefined" || r == 0) {
				return false
			}
			settings.visibleRows = r;
			childHeight(childHeight())
		};
		this.visibleRows = this.showRows;
		this.on = function (type, fn) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).on(type, fn)
		};
		this.off = function (type, fn) {
			var spanUniqueId = settings.byJson.spanUniqueId;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).off(type, fn)
		};
		this.addMyEvent = this.on;
		this.getData = function () {
			return getDataAndUI()
		};
		this.namedItem = function () {
			var opt = getElement(element).namedItem.apply(getElement(element), arguments);
			return getDataAndUIByOption(opt)
		};
		this.item = function () {
			var opt = getElement(element).item.apply(getElement(element), arguments);
			return getDataAndUIByOption(opt)
		};
		this.setIndexByValue = function (val) {
			this.set("value", val)
		};
		this.destroy = function () {
			var spanUniqueId = settings.byJson.spanUniqueId;
			var hidid = getPostID("postElementHolder");
			var id = getPostID("postID");
			$("#" + id + ", #" + id + " *").off();
			getElement(element).tabIndex = getElement(id).tabIndex;
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + id).remove();
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).parent().replaceWith($("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element));
			$("span[spanUniqueId=" + spanUniqueId + "]").find("#" + element).data("dd", null)
		};
		this.refresh = function () {
			setValue(getElement(element).selectedIndex)
		};
		init()
	}
	$.fn.extend({
		msDropDown: function (settings) {
			return this.each(function () {
				if (!$(this).data("dd")) {
					var mydropdown = new dd(this, settings);
					$(this).data("dd", mydropdown)
				}
			})
		}
	});
	$.fn.msDropdown = $.fn.msDropDown
})(jQuery);
(function (A) {
	function B(C) {
		var D = C;
		this.getValue = function () {
			return D.get("value")
		};
		this.getImage = function () {
			return D.get("uiData").data.image
		};
		this.getText = function () {
			return D.get("uiData").data.text
		}
	}
	A.fn.imageDropdown = function (D) {
		if (this.msDropDown) {
			var E = A.extend({}, D);
			var C = this.msDropDown({
					byJson: {
						data: E.data,
						id: E.id,
						name: E.name,
						width: E.width,
						change: E.change,
						inCondition: E.inCondition,
						inCalculate: E.inCalculate,
						unique: E.unique,
						validate: E.validate,
						spanUniqueId: E.spanUniqueId,
						className: A(this).attr("class")
					},
					rowHeight: E.rowHeight,
					imageHeight: E.height
				}).data("dd");
			if (E.value) {
				C.set("value", E.value)
			}
			return new B(C)
		}
	}
})(jQuery);