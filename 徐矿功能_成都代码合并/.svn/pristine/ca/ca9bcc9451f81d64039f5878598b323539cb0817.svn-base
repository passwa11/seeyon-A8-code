/*!
 * jQuery JavaScript Library v1.8.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
 */
(function (window, undefined) {
	var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,
	navigator = window.navigator,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// Save a reference to some core methods
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,

	// Define a local copy of jQuery
	jQuery = function (selector, context) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init(selector, context, rootjQuery);
	},

	// Used for matching numbers
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

	// Used for detecting and trimming whitespace
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function (all, letter) {
		return (letter + "").toUpperCase();
	},

	// The ready event handler and self cleanup method
	DOMContentLoaded = function () {
		if (document.addEventListener) {
			document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
			jQuery.ready();
		} else if (document.readyState === "complete") {
			// we're here because readyState === "complete" in oldIE
			// which is good enough for us to call the dom ready!
			document.detachEvent("onreadystatechange", DOMContentLoaded);
			jQuery.ready();
		}
	},

	// [[Class]] -> type pairs
	class2type = {};

	jQuery.fn = jQuery.prototype = {
		constructor: jQuery,
		init: function (selector, context, rootjQuery) {
			var match,
			elem,
			ret,
			doc;

			// Handle $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Handle $(DOMElement)
			if (selector.nodeType) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;
			}

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];

				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;
						doc = (context && context.nodeType ? context.ownerDocument || context : document);

						// scripts is true for back-compat
						selector = jQuery.parseHTML(match[1], doc, true);
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							this.attr.call(selector, context, true);
						}

						return jQuery.merge(this, selector);

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById(match[2]);

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if (elem && elem.parentNode) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if (elem.id !== match[2]) {
								return rootjQuery.find(selector);
							}

							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
					return (context || rootjQuery).find(selector);

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor(context).find(selector);
				}

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if (jQuery.isFunction(selector)) {
				return rootjQuery.ready(selector);
			}

			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray(selector, this);
		},

		// Start with an empty selector
		selector: "",

		// The current version of jQuery being used
		jquery: "1.8.3",

		// The default length of a jQuery object is 0
		length: 0,

		// The number of elements contained in the matched element set
		size: function () {
			return this.length;
		},

		toArray: function () {
			return core_slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function (num) {
			return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			(num < 0 ? this[this.length + num] : this[num]);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function (elems, name, selector) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			ret.context = this.context;

			if (name === "find") {
				ret.selector = this.selector + (this.selector ? " " : "") + selector;
			} else if (name) {
				ret.selector = this.selector + "." + name + "(" + selector + ")";
			}

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function (callback, args) {
			return jQuery.each(this, callback, args);
		},

		ready: function (fn) {
			// Add the callback
			jQuery.ready.promise().done(fn);

			return this;
		},

		eq: function (i) {
			i = +i;
			return i === -1 ?
			this.slice(i) :
			this.slice(i, i + 1);
		},

		first: function () {
			return this.eq(0);
		},

		last: function () {
			return this.eq(-1);
		},

		slice: function () {
			return this.pushStack(core_slice.apply(this, arguments),
				"slice", core_slice.call(arguments).join(","));
		},

		map: function (callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
		},

		end: function () {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: core_push,
		sort: [].sort,
		splice: [].splice
	};

	// Give the init function the jQuery prototype for later instantiation
	jQuery.fn.init.prototype = jQuery.fn;

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		name,
		src,
		copy,
		copyIsArray,
		clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if (length === i) {
			target = this;
			--i;
		}

		for (; i < length; i++) {
			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		noConflict: function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		},

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function (hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function (wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if (!document.body) {
				return setTimeout(jQuery.ready, 1);
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.trigger) {
				jQuery(document).trigger("ready").off("ready");
			}
		},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function (obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray || function (obj) {
			return jQuery.type(obj) === "array";
		},

		isWindow: function (obj) {
			return obj != null && obj == obj.window;
		},

		isNumeric: function (obj) {
			return !isNaN(parseFloat(obj)) && isFinite(obj);
		},

		type: function (obj) {
			return obj == null ? //OA-30826 修复IE9下String未定义错误 String( obj )
			"null" :
			class2type[core_toString.call(obj)] || "object";
		},

		isPlainObject: function (obj) {
			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			try {
				// Not own constructor property must be Object
				if (obj.constructor &&
					!core_hasOwn.call(obj, "constructor") &&
					!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false;
				}
			} catch (e) {
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.

			var key;
			for (key in obj) {}

			return key === undefined || core_hasOwn.call(obj, key);
		},

		isEmptyObject: function (obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		error: function (msg) {
			throw new Error(msg);
		},

		// data: string of html
		// context (optional): If specified, the fragment will be created in this context, defaults to document
		// scripts (optional): If true, will include scripts passed in the html string
		parseHTML: function (data, context, scripts) {
			var parsed;
			if (!data || typeof data !== "string") {
				return null;
			}
			if (typeof context === "boolean") {
				scripts = context;
				context = 0;
			}
			context = context || document;

			// Single tag
			if ((parsed = rsingleTag.exec(data))) {
				return [context.createElement(parsed[1])];
			}

			parsed = jQuery.buildFragment([data], context, scripts ? null : []);
			return jQuery.merge([],
				(parsed.cacheable ? jQuery.clone(parsed.fragment) : parsed.fragment).childNodes);
		},

		parseJSON: function (data) {
			if (!data || typeof data !== "string") {
				return null;
			}

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim(data);

			// Attempt to parse using the native JSON parser first
			if (window.JSON && window.JSON.parse) {
				return window.JSON.parse(data);
			}

			// Make sure the incoming data is actual JSON
			// Logic borrowed from http://json.org/json2.js
			if (rvalidchars.test(data.replace(rvalidescape, "@")
					.replace(rvalidtokens, "]")
					.replace(rvalidbraces, ""))) {

				return (new Function("return " + data))();

			}
			jQuery.error("Invalid JSON: " + data);
		},

		// Cross-browser xml parsing
		parseXML: function (data) {
			var xml,
			tmp;
			if (!data || typeof data !== "string") {
				return null;
			}
			try {
				if (window.DOMParser) { // Standard
					tmp = new DOMParser();
					xml = tmp.parseFromString(data, "text/xml");
				} else { // IE
					xml = new ActiveXObject("Microsoft.XMLDOM");
					xml.async = "false";
					xml.loadXML(data);
				}
			} catch (e) {
				xml = undefined;
			}
			if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		},

		noop: function () {},

		// Evaluates a script in a global context
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function (data) {
			if (data && core_rnotwhite.test(data)) {
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				(window.execScript || function (data) {
					window["eval"].call(window, data);
				})(data);
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function (elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function (obj, callback, args) {
			var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction(obj);

			if (args) {
				if (isObj) {
					for (name in obj) {
						if (callback.apply(obj[name], args) === false) {
							break;
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.apply(obj[i++], args) === false) {
							break;
						}
					}
				}

				// A special, fast, case for the most common use of each
			} else {
				if (isObj) {
					for (name in obj) {
						if (callback.call(obj[name], name, obj[name]) === false) {
							break;
						}
					}
				} else {
					for (; i < length; ) {
						if (callback.call(obj[i], i, obj[i++]) === false) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Use native String.trim function wherever possible
		trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function (text) {
			return text == null ?
			"" :
			core_trim.call(text);
		}
		 :

		// Otherwise use our own trimming functionality
		function (text) {
			return text == null ?
			"" :
			(text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function (arr, results) {
			var type,
			ret = results || [];

			if (arr != null) {
				// The window, strings (and functions) also have 'length'
				// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
				type = jQuery.type(arr);

				if (arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(arr)) {
					core_push.call(ret, arr);
				} else {
					jQuery.merge(ret, arr);
				}
			}

			return ret;
		},

		inArray: function (elem, arr, i) {
			var len;

			if (arr) {
				if (core_indexOf) {
					return core_indexOf.call(arr, elem, i);
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

				for (; i < len; i++) {
					// Skip accessing in sparse arrays
					if (i in arr && arr[i] === elem) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function (first, second) {
			var l = second.length,
			i = first.length,
			j = 0;

			if (typeof l === "number") {
				for (; j < l; j++) {
					first[i++] = second[j];
				}

			} else {
				while (second[j] !== undefined) {
					first[i++] = second[j++];
				}
			}

			first.length = i;

			return first;
		},

		grep: function (elems, callback, inv) {
			var retVal,
			ret = [],
			i = 0,
			length = elems.length;
			inv = !!inv;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				retVal = !!callback(elems[i], i);
				if (inv !== retVal) {
					ret.push(elems[i]);
				}
			}

			return ret;
		},

		// arg is for internal usage only
		map: function (elems, callback, arg) {
			var value,
			key,
			ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ((length > 0 && elems[0] && elems[length - 1]) || length === 0 || jQuery.isArray(elems));

			// Go through the array, translating each of the items to their
			if (isArray) {
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret[ret.length] = value;
					}
				}

				// Go through every key on the object,
			} else {
				for (key in elems) {
					value = callback(elems[key], key, arg);

					if (value != null) {
						ret[ret.length] = value;
					}
				}
			}

			// Flatten any nested arrays
			return ret.concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function (fn, context) {
			var tmp,
			args,
			proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = core_slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context, args.concat(core_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		access: function (elems, fn, key, value, chainable, emptyGet, pass) {
			var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

			// Sets many values
			if (key && typeof key === "object") {
				for (i in key) {
					jQuery.access(elems, fn, i, key[i], 1, emptyGet, value);
				}
				chainable = 1;

				// Sets one value
			} else if (value !== undefined) {
				// Optionally, function values get executed if exec is true
				exec = pass === undefined && jQuery.isFunction(value);

				if (bulk) {
					// Bulk operations only iterate when executing function values
					if (exec) {
						exec = fn;
						fn = function (elem, key, value) {
							return exec.call(jQuery(elem), value);
						};

						// Otherwise they run against the entire set
					} else {
						fn.call(elems, value);
						fn = null;
					}
				}

				if (fn) {
					for (; i < length; i++) {
						fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
					}
				}

				chainable = 1;
			}

			return chainable ?
			elems :

			// Gets
			bulk ?
			fn.call(elems) :
			length ? fn(elems[0], key) : emptyGet;
		},

		now: function () {
			return (new Date()).getTime();
		}
	});

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if (document.readyState === "complete") {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout(jQuery.ready, 1);

				// Standards-based browsers support DOMContentLoaded
			} else if (document.addEventListener) {
				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", jQuery.ready, false);

				// If IE event model is used
			} else {
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent("onreadystatechange", DOMContentLoaded);

				// A fallback to window.onload, that will always work
				window.attachEvent("onload", jQuery.ready);

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch (e) {}

				if (top && top.doScroll) {
					(function doScrollCheck() {
						if (!jQuery.isReady) {

							try {
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll("left");
							} catch (e) {
								return setTimeout(doScrollCheck, 50);
							}

							// and execute any waiting functions
							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise(obj);
	};

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	// All jQuery objects should point back to these
	rootjQuery = jQuery(document);
	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions(options) {
		var object = optionsCache[options] = {};
		jQuery.each(options.split(core_rspace), function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			(optionsCache[options] || createOptions(options)) :
			jQuery.extend({}, options);

		var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function (data) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for (; list && firingIndex < firingLength; firingIndex++) {
				if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if (list) {
				if (stack) {
					if (stack.length) {
						fire(stack.shift());
					}
				} else if (memory) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function () {
				if (list) {
					// First, we save the current length
					var start = list.length;
					(function add(args) {
						jQuery.each(args, function (_, arg) {
							var type = jQuery.type(arg);
							if (type === "function") {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && type !== "string") {
								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);
					// Do we need to add the callbacks to the
					// current firing batch?
					if (firing) {
						firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
					} else if (memory) {
						firingStart = start;
						fire(memory);
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function () {
				if (list) {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);
							// Handle firing indexes
							if (firing) {
								if (index <= firingLength) {
									firingLength--;
								}
								if (index <= firingIndex) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function (fn) {
				return jQuery.inArray(fn, list) > -1;
			},
			// Remove all callbacks from the list
			empty: function () {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function () {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function () {
				return !list;
			},
			// Lock the list in its current state
			lock: function () {
				stack = undefined;
				if (!memory) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function () {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function (context, args) {
				args = args || [];
				args = [context, args.slice ? args.slice() : args];
				if (list && (!fired || stack)) {
					if (firing) {
						stack.push(args);
					} else {
						fire(args);
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function () {
				self.fireWith(this, arguments);
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function () {
				return !!fired;
			}
		};

		return self;
	};
	jQuery.extend({

		Deferred: function (func) {
			var tuples = [
				// action, add listener, listener list, final state
				["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
				["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
				["notify", "progress", jQuery.Callbacks("memory")]
			],
			state = "pending",
			promise = {
				state: function () {
					return state;
				},
				always: function () {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function (/* fnDone, fnFail, fnProgress */) {
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var action = tuple[0],
							fn = fns[i];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[tuple[1]](jQuery.isFunction(fn) ?
								function () {
								var returned = fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise()
									.done(newDefer.resolve)
									.fail(newDefer.reject)
									.progress(newDefer.notify);
								} else {
									newDefer[action + "With"](this === deferred ? newDefer : this, [returned]);
								}
							}
								 :
								newDefer[action]);
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function (obj) {
					return obj != null ? jQuery.extend(obj, promise) : promise;
				}
			},
			deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {
						// state = [ resolved | rejected ]
						state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ] = list.fire
				deferred[tuple[0]] = list.fire;
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function (subordinate /* , ..., subordinateN */) {
			var i = 0,
			resolveValues = core_slice.call(arguments),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function (i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (!(--remaining)) {
						deferred.resolveWith(contexts, values);
					}
				};
			},

			progressValues,
			progressContexts,
			resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise()
						.done(updateFunc(i, resolveContexts, resolveValues))
						.fail(deferred.reject)
						.progress(updateFunc(i, progressContexts, progressValues));
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});
	jQuery.support = (function () {

		var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");

		// Setup
		div.setAttribute("className", "t");
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// Support tests won't run in some limited or non-browser environments
		all = div.getElementsByTagName("*");
		a = div.getElementsByTagName("a")[0];
		if (!all || !a || !all.length) {
			return {};
		}

		// First batch of tests
		select = document.createElement("select");
		opt = select.appendChild(document.createElement("option"));
		input = div.getElementsByTagName("input")[0];

		a.style.cssText = "top:1px;float:left;opacity:.5";
		support = {
			// IE strips leading whitespace when .innerHTML is used
			leadingWhitespace: (div.firstChild.nodeType === 3),

			// Make sure that tbody elements aren't automatically inserted
			// IE will insert them into empty tables
			tbody: !div.getElementsByTagName("tbody").length,

			// Make sure that link elements get serialized correctly by innerHTML
			// This requires a wrapper element in IE
			htmlSerialize: !!div.getElementsByTagName("link").length,

			// Get the style information from getAttribute
			// (IE uses .cssText instead)
			style: /top/.test(a.getAttribute("style")),

			// Make sure that URLs aren't manipulated
			// (IE normalizes it by default)
			hrefNormalized: (a.getAttribute("href") === "/a"),

			// Make sure that element opacity exists
			// (IE uses filter instead)
			// Use a regex to work around a WebKit issue. See #5145
			opacity: /^0.5/.test(a.style.opacity),

			// Verify style float existence
			// (IE uses styleFloat instead of cssFloat)
			cssFloat: !!a.style.cssFloat,

			// Make sure that if no value is specified for a checkbox
			// that it defaults to "on".
			// (WebKit defaults to "" instead)
			checkOn: (input.value === "on"),

			// Make sure that a selected-by-default option has a working selected property.
			// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
			optSelected: opt.selected,

			// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
			getSetAttribute: div.className !== "t",

			// Tests for enctype support on a form (#6743)
			enctype: !!document.createElement("form").enctype,

			// Makes sure cloning an html5 element does not cause problems
			// Where outerHTML is undefined, this still works
			html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",

			// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
			boxModel: (document.compatMode === "CSS1Compat"),

			// Will be defined later
			submitBubbles: true,
			changeBubbles: true,
			focusinBubbles: false,
			deleteExpando: true,
			noCloneEvent: true,
			inlineBlockNeedsLayout: false,
			shrinkWrapBlocks: false,
			reliableMarginRight: true,
			boxSizingReliable: true,
			pixelPosition: false
		};

		// Make sure checked status is properly cloned
		input.checked = true;
		support.noCloneChecked = input.cloneNode(true).checked;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Test to see if it's possible to delete an expando from an element
		// Fails in Internet Explorer
		try {
			delete div.test;
		} catch (e) {
			support.deleteExpando = false;
		}

		if (!div.addEventListener && div.attachEvent && div.fireEvent) {
			div.attachEvent("onclick", clickFn = function () {
				// Cloning a node shouldn't copy over any
				// bound event handlers (IE does this)
				support.noCloneEvent = false;
			});
			div.cloneNode(true).fireEvent("onclick");
			div.detachEvent("onclick", clickFn);
		}

		// Check if a radio maintains its value
		// after being appended to the DOM
		input = document.createElement("input");
		input.value = "t";
		input.setAttribute("type", "radio");
		support.radioValue = input.value === "t";

		input.setAttribute("checked", "checked");

		// #11217 - WebKit loses check when the name is after the checked attribute
		input.setAttribute("name", "t");

		div.appendChild(input);
		fragment = document.createDocumentFragment();
		fragment.appendChild(div.lastChild);

		// WebKit doesn't clone checked state correctly in fragments
		support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		support.appendChecked = input.checked;

		fragment.removeChild(input);
		fragment.appendChild(div);

		// Technique from Juriy Zaytsev
		// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
		// We only care about the case where non-standard event systems
		// are used, namely in IE. Short-circuiting here helps us to
		// avoid an eval call (in setAttribute) which can cause CSP
		// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
		if (div.attachEvent) {
			for (i in {
				submit: true,
				change: true,
				focusin: true
			}) {
				eventName = "on" + i;
				isSupported = (eventName in div);
				if (!isSupported) {
					div.setAttribute(eventName, "return;");
					isSupported = (typeof div[eventName] === "function");
				}
				support[i + "Bubbles"] = isSupported;
			}
		}

		// Run tests that need a body at doc ready
		jQuery(function () {
			var container,
			div,
			tds,
			marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];

			if (!body) {
				// Return for frameset docs that don't have a body
				return;
			}

			container = document.createElement("div");
			container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
			body.insertBefore(container, body.firstChild);

			// Construct the test element
			div = document.createElement("div");
			container.appendChild(div);

			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			// (only IE 8 fails this test)
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName("td");
			tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
			isSupported = (tds[0].offsetHeight === 0);

			tds[0].style.display = "";
			tds[1].style.display = "none";

			// Check if empty table cells still have offsetWidth/Height
			// (IE <= 8 fail this test)
			support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);

			// Check box-sizing and margin behavior
			div.innerHTML = "";
			div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
			support.boxSizing = (div.offsetWidth === 4);
			support.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== 1);

			// NOTE: To any future maintainer, we've window.getComputedStyle
			// because jsdom on node.js will break without it.
			if (window.getComputedStyle) {
				support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
				support.boxSizingReliable = (window.getComputedStyle(div, null) || {
					width: "4px"
				}).width === "4px";

				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. For more
				// info see bug #3333
				// Fails in WebKit before Feb 2011 nightlies
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				marginDiv = document.createElement("div");
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				div.appendChild(marginDiv);
				support.reliableMarginRight =
					!parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
			}

			if (typeof div.style.zoom !== "undefined") {
				// Check if natively block-level elements act like inline-block
				// elements when setting their display to 'inline' and giving
				// them layout
				// (IE < 8 does this)
				div.innerHTML = "";
				div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
				support.inlineBlockNeedsLayout = (div.offsetWidth === 3);

				// Check if elements with layout shrink-wrap their children
				// (IE 6 does this)
				div.style.display = "block";
				div.style.overflow = "visible";
				div.innerHTML = "<div></div>";
				div.firstChild.style.width = "5px";
				support.shrinkWrapBlocks = (div.offsetWidth !== 3);

				container.style.zoom = 1;
			}

			// Null elements to avoid leaks in IE
			body.removeChild(container);
			container = div = tds = marginDiv = null;
		});

		// Null elements to avoid leaks in IE
		fragment.removeChild(div);
		all = a = select = opt = input = fragment = div = null;

		return support;
	})();
	var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

	jQuery.extend({
		cache: {},

		deletedIds: [],

		// Remove at next major release (1.9/2.0)
		uuid: 0,

		// Unique for each copy of jQuery on the page
		// Non-digits removed to match rinlinejQuery
		expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),

		// The following elements throw uncatchable exceptions if you
		// attempt to add expando properties to them.
		noData: {
			"embed": true,
			// Ban all objects except for Flash (which handle expandos)
			"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
			"applet": true
		},

		hasData: function (elem) {
			elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
			return !!elem && !isEmptyDataObject(elem);
		},

		data: function (elem, name, data, pvt /* Internal Use Only */) {
			if (!jQuery.acceptData(elem)) {
				return;
			}

			var thisCache,
			ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

			// Avoid doing any more work than we need to when trying to get data on an
			// object that has no data at all
			if ((!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined) {
				return;
			}

			if (!id) {
				// Only DOM nodes need a new unique ID for each element since their data
				// ends up in the global cache
				if (isNode) {
					elem[internalKey] = id = jQuery.deletedIds.pop() || jQuery.guid++;
				} else {
					id = internalKey;
				}
			}

			if (!cache[id]) {
				cache[id] = {};

				// Avoids exposing jQuery metadata on plain JS objects when the object
				// is serialized using JSON.stringify
				if (!isNode) {
					cache[id].toJSON = jQuery.noop;
				}
			}

			// An object can be passed to jQuery.data instead of a key/value pair; this gets
			// shallow copied over onto the existing cache
			if (typeof name === "object" || typeof name === "function") {
				if (pvt) {
					cache[id] = jQuery.extend(cache[id], name);
				} else {
					cache[id].data = jQuery.extend(cache[id].data, name);
				}
			}

			thisCache = cache[id];

			// jQuery data() is stored in a separate object inside the object's internal data
			// cache in order to avoid key collisions between internal data and user-defined
			// data.
			if (!pvt) {
				if (!thisCache.data) {
					thisCache.data = {};
				}

				thisCache = thisCache.data;
			}

			if (data !== undefined) {
				thisCache[jQuery.camelCase(name)] = data;
			}

			// Check for both converted-to-camel and non-converted data property names
			// If a data property was specified
			if (getByName) {

				// First Try to find as-is property data
				ret = thisCache[name];

				// Test for null|undefined property data
				if (ret == null) {

					// Try to find the camelCased property
					ret = thisCache[jQuery.camelCase(name)];
				}
			} else {
				ret = thisCache;
			}

			return ret;
		},

		removeData: function (elem, name, pvt /* Internal Use Only */) {
			if (!jQuery.acceptData(elem)) {
				return;
			}

			var thisCache,
			i,
			l,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[jQuery.expando] : jQuery.expando;

			// If there is already no cache entry for this object, there is no
			// purpose in continuing
			if (!cache[id]) {
				return;
			}

			if (name) {

				thisCache = pvt ? cache[id] : cache[id].data;

				if (thisCache) {

					// Support array or space separated string names for data keys
					if (!jQuery.isArray(name)) {

						// try the string as a key before any manipulation
						if (name in thisCache) {
							name = [name];
						} else {

							// split the camel cased version by spaces unless a key with the spaces exists
							name = jQuery.camelCase(name);
							if (name in thisCache) {
								name = [name];
							} else {
								name = name.split(" ");
							}
						}
					}

					for (i = 0, l = name.length; i < l; i++) {
						delete thisCache[name[i]];
					}

					// If there is no data left in the cache, we want to continue
					// and let the cache object itself get destroyed
					if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
						return;
					}
				}
			}

			// See jQuery.data for more information
			if (!pvt) {
				delete cache[id].data;

				// Don't destroy the parent cache unless the internal data object
				// had been the only thing left in it
				if (!isEmptyDataObject(cache[id])) {
					return;
				}
			}

			// Destroy the cache
			if (isNode) {
				jQuery.cleanData([elem], true);

				// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
			} else if (jQuery.support.deleteExpando || cache != cache.window) {
				delete cache[id];

				// When all else fails, null
			} else {
				cache[id] = null;
			}
		},

		// For internal use only.
		_data: function (elem, name, data) {
			return jQuery.data(elem, name, data, true);
		},

		// A method for determining if a DOM node can handle the data expando
		acceptData: function (elem) {
			var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];

			// nodes accept data unless otherwise specified; rejection can be conditional
			return !noData || noData !== true && elem.getAttribute("classid") === noData;
		}
	});

	jQuery.fn.extend({
		data: function (key, value) {
			var parts,
			part,
			attr,
			name,
			l,
			elem = this[0],
			i = 0,
			data = null;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = jQuery.data(elem);

					if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
						attr = elem.attributes;
						for (l = attr.length; i < l; i++) {
							name = attr[i].name;

							if (!name.indexOf("data-")) {
								name = jQuery.camelCase(name.substring(5));

								dataAttr(elem, name, data[name]);
							}
						}
						jQuery._data(elem, "parsedAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if (typeof key === "object") {
				return this.each(function () {
					jQuery.data(this, key);
				});
			}

			parts = key.split(".", 2);
			parts[1] = parts[1] ? "." + parts[1] : "";
			part = parts[1] + "!";

			return jQuery.access(this, function (value) {

				if (value === undefined) {
					data = this.triggerHandler("getData" + part, [parts[0]]);

					// Try to fetch any internally stored data first
					if (data === undefined && elem) {
						data = jQuery.data(elem, key);
						data = dataAttr(elem, key, data);
					}

					return data === undefined && parts[1] ?
					this.data(parts[0]) :
					data;
				}

				parts[1] = value;
				this.each(function () {
					var self = jQuery(this);

					self.triggerHandler("setData" + part, parts);
					jQuery.data(this, key, value);
					self.triggerHandler("changeData" + part, parts);
				});
			}, null, value, arguments.length > 1, null, false);
		},

		removeData: function (key) {
			return this.each(function () {
				jQuery.removeData(this, key);
			});
		}
	});

	function dataAttr(elem, key, data) {
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {

			var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test(data) ? jQuery.parseJSON(data) :
						data;
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data(elem, key, data);

			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject(obj) {
		var name;
		for (name in obj) {

			// if the public data object is empty, the private is still empty
			if (name === "data" && jQuery.isEmptyObject(obj[name])) {
				continue;
			}
			if (name !== "toJSON") {
				return false;
			}
		}

		return true;
	}
	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = jQuery._data(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = jQuery._data(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function (elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks(elem, type),
			next = function () {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return jQuery._data(elem, key) || jQuery._data(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					jQuery.removeData(elem, type + "queue", true);
					jQuery.removeData(elem, key, true);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ?
			this :
			this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		// Based off of the plugin by Clint Helfers, with permission.
		// http://blindsignals.com/index.php/2009/07/jquery-delay/
		delay: function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = setTimeout(next, time);
				hooks.stop = function () {
					clearTimeout(timeout);
				};
			});
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", []);
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function (type, obj) {
			var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function () {
				if (!(--count)) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
			while (i--) {
				tmp = jQuery._data(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var nodeHook,
	boolHook,
	fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;

	jQuery.fn.extend({
		attr: function (name, value) {
			return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		},

		prop: function (name, value) {
			return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function (name) {
			name = jQuery.propFix[name] || name;
			return this.each(function () {
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[name] = undefined;
					delete this[name];
				} catch (e) {}
			});
		},

		addClass: function (value) {
			var classNames,
			i,
			l,
			elem,
			setClass,
			c,
			cl;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, this.className));
				});
			}

			if (value && typeof value === "string") {
				classNames = value.split(core_rspace);

				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];

					if (elem.nodeType === 1) {
						if (!elem.className && classNames.length === 1) {
							elem.className = value;

						} else {
							setClass = " " + elem.className + " ";

							for (c = 0, cl = classNames.length; c < cl; c++) {
								if (setClass.indexOf(" " + classNames[c] + " ") < 0) {
									setClass += classNames[c] + " ";
								}
							}
							elem.className = jQuery.trim(setClass);
						}
					}
				}
			}

			return this;
		},

		removeClass: function (value) {
			var removes,
			className,
			elem,
			c,
			cl,
			i,
			l;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, this.className));
				});
			}
			if ((value && typeof value === "string") || value === undefined) {
				removes = (value || "").split(core_rspace);

				for (i = 0, l = this.length; i < l; i++) {
					elem = this[i];
					if (elem.nodeType === 1 && elem.className) {

						className = (" " + elem.className + " ").replace(rclass, " ");

						// loop over each item in the removal list
						for (c = 0, cl = removes.length; c < cl; c++) {
							// Remove until there is nothing to remove,
							while (className.indexOf(" " + removes[c] + " ") >= 0) {
								className = className.replace(" " + removes[c] + " ", " ");
							}
						}
						elem.className = value ? jQuery.trim(className) : "";
					}
				}
			}

			return this;
		},

		toggleClass: function (value, stateVal) {
			var type = typeof value,
			isBool = typeof stateVal === "boolean";

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
				});
			}

			return this.each(function () {
				if (type === "string") {
					// toggle individual class names
					var className,
					i = 0,
					self = jQuery(this),
					state = stateVal,
					classNames = value.split(core_rspace);
					while ((className = classNames[i++])) {
						// check each className given, space separated list
						state = isBool ? state : !self.hasClass(className);
						self[state ? "addClass" : "removeClass"](className);
					}

				} else if (type === "undefined" || type === "boolean") {
					if (this.className) {
						// store className if set
						jQuery._data(this, "__className__", this.className);
					}

					// toggle whole className
					this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
				}
			});
		},

		hasClass: function (selector) {
			var className = " " + selector + " ",
			i = 0,
			l = this.length;
			for (; i < l; i++) {
				if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
					return true;
				}
			}

			return false;
		},

		val: function (value) {
			var hooks,
			ret,
			isFunction,
			elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val,
				self = jQuery(this);

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, self.val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {
					// attributes.value is undefined in Blackberry 4.7 but
					// uses .value. See #6932
					var val = elem.attributes.value;
					return !val || val.specified ? elem.value : elem.text;
				}
			},
			select: {
				get: function (elem) {
					var value,
					option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// oldIE doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&
							// Don't return options that are disabled or in a disabled optgroup
							(jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function (elem, value) {
					var values = jQuery.makeArray(value);

					jQuery(elem).find("option").each(function () {
						this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
					});

					if (!values.length) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		},

		// Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
		attrFn: {},

		attr: function (elem, name, value, pass) {
			var ret,
			hooks,
			notxml,
			nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (pass && jQuery.isFunction(jQuery.fn[name])) {
				return jQuery(elem)[name](value);
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (notxml) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
			}

			if (value !== undefined) {

				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;

				} else if (hooks && "set" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;

				} else {
					elem.setAttribute(name, value + "");
					return value;
				}

			} else if (hooks && "get" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
				return ret;

			} else {

				ret = elem.getAttribute(name);

				// Non-existent attributes return null, we normalize to undefined
				return ret === null ?
				undefined :
				ret;
			}
		},

		removeAttr: function (elem, value) {
			var propName,
			attrNames,
			name,
			isBool,
			i = 0;

			if (value && elem.nodeType === 1) {

				attrNames = value.split(core_rspace);

				for (; i < attrNames.length; i++) {
					name = attrNames[i];

					if (name) {
						propName = jQuery.propFix[name] || name;
						isBool = rboolean.test(name);

						// See #9699 for explanation of this approach (setting first, then removal)
						// Do not do this for boolean attributes (see #10870)
						if (!isBool) {
							jQuery.attr(elem, name, "");
						}
						elem.removeAttribute(getSetAttribute ? name : propName);

						// Set corresponding property to false for boolean attributes
						if (isBool && propName in elem) {
							elem[propName] = false;
						}
					}
				}
			}
		},

		attrHooks: {
			type: {
				set: function (elem, value) {
					// We can't allow the type property to be changed (since it causes problems in IE)
					if (rtype.test(elem.nodeName) && elem.parentNode) {
						jQuery.error("type property can't be changed");
					} else if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to it's default in case type is set after value
						// This is for element creation
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			},
			// Use the value property for back compat
			// Use the nodeHook for button elements in IE6/7 (#1954)
			value: {
				get: function (elem, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.get(elem, name);
					}
					return name in elem ?
					elem.value :
					null;
				},
				set: function (elem, value, name) {
					if (nodeHook && jQuery.nodeName(elem, "button")) {
						return nodeHook.set(elem, value, name);
					}
					// Does not return so that setAttribute is also used
					elem.value = value;
				}
			}
		},

		propFix: {
			tabindex: "tabIndex",
			readonly: "readOnly",
			"for": "htmlFor",
			"class": "className",
			maxlength: "maxLength",
			cellspacing: "cellSpacing",
			cellpadding: "cellPadding",
			rowspan: "rowSpan",
			colspan: "colSpan",
			usemap: "useMap",
			frameborder: "frameBorder",
			contenteditable: "contentEditable"
		},

		prop: function (elem, name, value) {
			var ret,
			hooks,
			notxml,
			nType = elem.nodeType;

			// don't get/set properties on text, comment and attribute nodes
			if (!elem || nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

			if (notxml) {
				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;

				} else {
					return (elem[name] = value);
				}

			} else {
				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;

				} else {
					return elem[name];
				}
			}
		},

		propHooks: {
			tabIndex: {
				get: function (elem) {
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					var attributeNode = elem.getAttributeNode("tabindex");

					return attributeNode && attributeNode.specified ?
					parseInt(attributeNode.value, 10) :
					rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
					0 :
					undefined;
				}
			}
		}
	});

	// Hook for boolean attributes
	boolHook = {
		get: function (elem, name) {
			// Align boolean attributes with corresponding properties
			// Fall back to attribute presence where some booleans are not supported
			var attrNode,
			property = jQuery.prop(elem, name);
			return property === true || typeof property !== "boolean" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
		},
		set: function (elem, value, name) {
			var propName;
			if (value === false) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				// value is true since we know at this point it's type boolean and not false
				// Set boolean attributes to the same name and set the DOM property
				propName = jQuery.propFix[name] || name;
				if (propName in elem) {
					// Only set the IDL specifically if it already exists on the element
					elem[propName] = true;
				}

				elem.setAttribute(name, name.toLowerCase());
			}
			return name;
		}
	};

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if (!getSetAttribute) {

		fixSpecified = {
			name: true,
			id: true,
			coords: true
		};

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = jQuery.valHooks.button = {
			get: function (elem, name) {
				var ret;
				ret = elem.getAttributeNode(name);
				return ret && (fixSpecified[name] ? ret.value !== "" : ret.specified) ?
				ret.value :
				undefined;
			},
			set: function (elem, value, name) {
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode(name);
				if (!ret) {
					ret = document.createAttribute(name);
					elem.setAttributeNode(ret);
				}
				return (ret.value = value + "");
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each(["width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
					set: function (elem, value) {
						if (value === "") {
							elem.setAttribute(name, "auto");
							return value;
						}
					}
				});
		});

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			get: nodeHook.get,
			set: function (elem, value, name) {
				if (value === "") {
					value = "false";
				}
				nodeHook.set(elem, value, name);
			}
		};
	}

	// Some attributes require a special call on IE
	if (!jQuery.support.hrefNormalized) {
		jQuery.each(["href", "src", "width", "height"], function (i, name) {
			jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
					get: function (elem) {
						var ret = elem.getAttribute(name, 2);
						return ret === null ? undefined : ret;
					}
				});
		});
	}

	if (!jQuery.support.style) {
		jQuery.attrHooks.style = {
			get: function (elem) {
				// Return undefined in the case of empty string
				// Normalize to lowercase since IE uppercases css property names
				return elem.style.cssText.toLowerCase() || undefined;
			},
			set: function (elem, value) {
				return (elem.style.cssText = value + "");
			}
		};
	}

	// Safari mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if (!jQuery.support.optSelected) {
		jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
				get: function (elem) {
					var parent = elem.parentNode;

					if (parent) {
						parent.selectedIndex;

						// Make sure that it also works with optgroups, see #5701
						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
					return null;
				}
			});
	}

	// IE6/7 call enctype encoding
	if (!jQuery.support.enctype) {
		jQuery.propFix.enctype = "encoding";
	}

	// Radios and checkboxes getter/setter
	if (!jQuery.support.checkOn) {
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				get: function (elem) {
					// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
					return elem.getAttribute("value") === null ? "on" : elem.value;
				}
			};
		});
	}
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
				set: function (elem, value) {
					if (jQuery.isArray(value)) {
						return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
					}
				}
			});
	});
	var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function (events) {
		return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
	};

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		add: function (elem, types, handler, data, selector) {

			var elemData,
			eventHandle,
			events,
			t,
			tns,
			type,
			namespaces,
			handleObj,
			handleObjIn,
			handlers,
			special;

			// Don't attach events to noData or text/comment nodes (allow plain objects tho)
			if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			events = elemData.events;
			if (!events) {
				elemData.events = events = {};
			}
			eventHandle = elemData.handle;
			if (!eventHandle) {
				elemData.handle = eventHandle = function (e) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
					undefined;
				};
				// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			// jQuery(...).bind("mouseover mouseout", fn);
			types = jQuery.trim(hoverHack(types)).split(" ");
			for (t = 0; t < types.length; t++) {

				tns = rtypenamespace.exec(types[t]) || [];
				type = tns[1];
				namespaces = (tns[2] || "").split(".").sort();

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
						type: type,
						origType: tns[1],
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

				// Init the event handler queue if we're the first
				handlers = events[type];
				if (!handlers) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
						// Bind the global event handler to the element
						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle, false);

						} else if (elem.attachEvent) {
							elem.attachEvent("on" + type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		global: {},

		// Detach an event or set of events from an element
		remove: function (elem, types, handler, selector, mappedTypes) {

			var t,
			tns,
			type,
			origType,
			namespaces,
			origCount,
			j,
			events,
			special,
			eventType,
			handleObj,
			elemData = jQuery.hasData(elem) && jQuery._data(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = jQuery.trim(hoverHack(types || "")).split(" ");
			for (t = 0; t < types.length; t++) {
				tns = rtypenamespace.exec(types[t]) || [];
				type = origType = tns[1];
				namespaces = tns[2];

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				eventType = events[type] || [];
				origCount = eventType.length;
				namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Remove matching events
				for (j = 0; j < eventType.length; j++) {
					handleObj = eventType[j];

					if ((mappedTypes || origType === handleObj.origType) &&
						(!handler || handler.guid === handleObj.guid) &&
						(!namespaces || namespaces.test(handleObj.namespace)) &&
						(!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						eventType.splice(j--, 1);

						if (handleObj.selector) {
							eventType.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (eventType.length === 0 && origCount !== eventType.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery.removeData(elem, "events", true);
			}
		},

		// Events that are safe to short-circuit if no handlers are attached.
		// Native DOM events should not be added, they may have inline handlers.
		customEvent: {
			"getData": true,
			"setData": true,
			"changeData": true
		},

		trigger: function (event, data, elem, onlyHandlers) {
			// Don't do events on text and comment nodes
			if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
				return;
			}

			// Event object or event type
			var cache,
			exclusive,
			i,
			cur,
			old,
			ontype,
			special,
			handle,
			eventPath,
			bubbleType,
			type = event.type || event,
			namespaces = [];

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf("!") >= 0) {
				// Exclusive events trigger only for the exact event (no namespaces)
				type = type.slice(0, -1);
				exclusive = true;
			}

			if (type.indexOf(".") >= 0) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}

			if ((!elem || jQuery.event.customEvent[type]) && !jQuery.event.global[type]) {
				// No jQuery handlers for this event type, and it can't have inline handlers
				return;
			}

			// Caller can pass in an Event, Object, or just an event type string
			event = typeof event === "object" ?
				// jQuery.Event object
				event[jQuery.expando] ? event :
				// Object literal
				new jQuery.Event(type, event) :
				// Just the event type (string)
				new jQuery.Event(type);

			event.type = type;
			event.isTrigger = true;
			event.exclusive = exclusive;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
			ontype = type.indexOf(":") < 0 ? "on" + type : "";

			// Handle a global trigger
			if (!elem) {

				// TODO: Stop taunting the data cache; remove global events and always attach to document
				cache = jQuery.cache;
				for (i in cache) {
					if (cache[i].events && cache[i].events[type]) {
						jQuery.event.trigger(event, data, cache[i].handle.elem, true);
					}
				}
				return;
			}

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data != null ? jQuery.makeArray(data) : [];
			data.unshift(event);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			eventPath = [[elem, special.bindType || type]];
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
				for (old = elem; cur; cur = cur.parentNode) {
					eventPath.push([cur, bubbleType]);
					old = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (old === (elem.ownerDocument || document)) {
					eventPath.push([old.defaultView || old.parentWindow || window, bubbleType]);
				}
			}

			// Fire handlers on the event path
			for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {

				cur = eventPath[i][0];
				event.type = eventPath[i][1];

				handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}
				// Note that this is a bare JS function and not a jQuery handler
				handle = ontype && cur[ontype];
				if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
					event.preventDefault();
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) &&
					!(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					// IE<9 dies on focus/blur to hidden element (#1486)
					if (ontype && elem[type] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						old = elem[ontype];

						if (old) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (old) {
							elem[ontype] = old;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function (event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event || window.event);

			var i,
			j,
			cur,
			ret,
			selMatch,
			matched,
			matches,
			handleObj,
			sel,
			related,
			handlers = ((jQuery._data(this, "events") || {})[event.type] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call(arguments),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[event.type] || {},
			handlerQueue = [];

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers that should run if there are delegated events
			// Avoid non-left-click bubbling in Firefox (#3861)
			if (delegateCount && !(event.button && event.type === "click")) {

				for (cur = event.target; cur != this; cur = cur.parentNode || this) {

					// Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.disabled !== true || event.type !== "click") {
						selMatch = {};
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];
							sel = handleObj.selector;

							if (selMatch[sel] === undefined) {
								selMatch[sel] = handleObj.needsContext ?
									jQuery(sel, this).index(cur) >= 0 :
									jQuery.find(sel, this, null, [cur]).length;
							}
							if (selMatch[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({
								elem: cur,
								matches: matches
							});
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (handlers.length > delegateCount) {
				handlerQueue.push({
					elem: this,
					matches: handlers.slice(delegateCount)
				});
			}

			// Run delegates first; they may want to stop propagation beneath us
			for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
				matched = handlerQueue[i];
				event.currentTarget = matched.elem;

				for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
					handleObj = matched.matches[j];

					// Triggered event must either 1) be non-exclusive and have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if (run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {

						event.data = handleObj.data;
						event.handleObj = handleObj;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler)
						.apply(matched.elem, args);

						if (ret !== undefined) {
							event.result = ret;
							if (ret === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
		props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function (event, original) {
				var eventDoc,
				doc,
				body,
				button = original.button,
				fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add relatedTarget, if necessary
				if (!event.relatedTarget && fromElement) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
				}

				return event;
			}
		},

		fix: function (event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i,
			prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[event.type] || {},
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = jQuery.Event(originalEvent);

			for (i = copy.length; i; ) {
				prop = copy[--i];
				event[prop] = originalEvent[prop];
			}

			// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
			if (!event.target) {
				event.target = originalEvent.srcElement || document;
			}

			// Target should not be a text node (#504, Safari)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},

			focus: {
				delegateType: "focusin"
			},
			blur: {
				delegateType: "focusout"
			},

			beforeunload: {
				setup: function (data, namespaces, eventHandle) {
					// We only want to do this special case on windows
					if (jQuery.isWindow(this)) {
						this.onbeforeunload = eventHandle;
					}
				},

				teardown: function (namespaces, eventHandle) {
					if (this.onbeforeunload === eventHandle) {
						this.onbeforeunload = null;
					}
				}
			}
		},

		simulate: function (type, elem, event, bubble) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
					new jQuery.Event(),
					event, {
					type: type,
					isSimulated: true,
					originalEvent: {}
				});
			if (bubble) {
				jQuery.event.trigger(e, null, elem);
			} else {
				jQuery.event.dispatch.call(elem, e);
			}
			if (e.isDefaultPrevented()) {
				event.preventDefault();
			}
		}
	};

	// Some plugins are using, but it's undocumented/deprecated and will be removed.
	// The 1.7 special event interface should provide all the hooks needed now.
	jQuery.event.handle = jQuery.event.dispatch;

	jQuery.removeEvent = document.removeEventListener ?
	function (elem, type, handle) {
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle, false);
		}
	}
	 :
	function (elem, type, handle) {
		var name = "on" + type;

		if (elem.detachEvent) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if (typeof elem[name] === "undefined") {
				elem[name] = null;
			}

			elem.detachEvent(name, handle);
		}
	};

	jQuery.Event = function (src, props) {
		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false ||
				src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	function returnFalse() {
		return false;
	}
	function returnTrue() {
		return true;
	}

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		preventDefault: function () {
			this.isDefaultPrevented = returnTrue;

			var e = this.originalEvent;
			if (!e) {
				return;
			}

			// if preventDefault exists run it on the original event
			if (e.preventDefault) {
				e.preventDefault();

				// otherwise set the returnValue property of the original event to false (IE)
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function () {
			this.isPropagationStopped = returnTrue;

			var e = this.originalEvent;
			if (!e) {
				return;
			}
			// if stopPropagation exists run it on the original event
			if (e.stopPropagation) {
				e.stopPropagation();
			}
			// otherwise set the cancelBubble property of the original event to true (IE)
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function () {
			this.isImmediatePropagationStopped = returnTrue;
			this.stopPropagation();
		},
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function (event) {
				var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || (related !== target && !jQuery.contains(target, related))) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// IE submit delegation
	if (!jQuery.support.submitBubbles) {

		jQuery.event.special.submit = {
			setup: function () {
				// Only need this for delegated form submit events
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add(this, "click._submit keypress._submit", function (e) {
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
					form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
					if (form && !jQuery._data(form, "_submit_attached")) {
						jQuery.event.add(form, "submit._submit", function (event) {
							event._submit_bubble = true;
						});
						jQuery._data(form, "_submit_attached", true);
					}
				});
				// return undefined since we don't need an event listener
			},

			postDispatch: function (event) {
				// If form was submitted by the user, bubble the event up the tree
				if (event._submit_bubble) {
					delete event._submit_bubble;
					if (this.parentNode && !event.isTrigger) {
						jQuery.event.simulate("submit", this.parentNode, event, true);
					}
				}
			},

			teardown: function () {
				// Only need this for delegated form submit events
				if (jQuery.nodeName(this, "form")) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove(this, "._submit");
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if (!jQuery.support.changeBubbles) {

		jQuery.event.special.change = {

			setup: function () {

				if (rformElems.test(this.nodeName)) {
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if (this.type === "checkbox" || this.type === "radio") {
						jQuery.event.add(this, "propertychange._change", function (event) {
							if (event.originalEvent.propertyName === "checked") {
								this._just_changed = true;
							}
						});
						jQuery.event.add(this, "click._change", function (event) {
							if (this._just_changed && !event.isTrigger) {
								this._just_changed = false;
							}
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate("change", this, event, true);
						});
					}
					return false;
				}
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add(this, "beforeactivate._change", function (e) {
					var elem = e.target;

					if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "_change_attached")) {
						jQuery.event.add(elem, "change._change", function (event) {
							if (this.parentNode && !event.isSimulated && !event.isTrigger) {
								jQuery.event.simulate("change", this.parentNode, event, true);
							}
						});
						jQuery._data(elem, "_change_attached", true);
					}
				});
			},

			handle: function (event) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
					return event.handleObj.handler.apply(this, arguments);
				}
			},

			teardown: function () {
				jQuery.event.remove(this, "._change");

				return !rformElems.test(this.nodeName);
			}
		};
	}

	// Create "bubbling" focus and blur events
	if (!jQuery.support.focusinBubbles) {
		jQuery.each({
			focus: "focusin",
			blur: "focusout"
		}, function (orig, fix) {

			// Attach a single capturing handler while someone wants focusin/focusout
			var attaches = 0,
			handler = function (event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
			};

			jQuery.event.special[fix] = {
				setup: function () {
					if (attaches++ === 0) {
						document.addEventListener(orig, handler, true);
					}
				},
				teardown: function () {
					if (--attaches === 0) {
						document.removeEventListener(orig, handler, true);
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function (types, selector, data, fn, /*INTERNAL*/ one) {
			var origFn,
			type;

			// Types can be a map of types/handlers
			if (typeof types === "object") {
				// ( types-Object, selector, data )
				if (typeof selector !== "string") { // && selector != null
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					this.on(type, selector, data, types[type], one);
				}
				return this;
			}

			if (data == null && fn == null) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return this;
			}

			if (one === 1) {
				origFn = fn;
				fn = function (event) {
					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return this.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		},
		one: function (types, selector, data, fn) {
			return this.on(types, selector, data, fn, 1);
		},
		off: function (types, selector, fn) {
			var handleObj,
			type;
			if (types && types.preventDefault && types.handleObj) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler);
				return this;
			}
			if (typeof types === "object") {
				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		},

		bind: function (types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn);
		},

		live: function (types, data, fn) {
			jQuery(this.context).on(types, this.selector, data, fn);
			return this;
		},
		die: function (types, fn) {
			jQuery(this.context).off(types, this.selector || "**", fn);
			return this;
		},

		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function (selector, types, fn) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		},

		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function (type, data) {
			if (this[0]) {
				return jQuery.event.trigger(type, data, this[0], true);
			}
		},

		toggle: function (fn) {
			// Save reference to arguments for access in closure
			var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function (event) {
				// Figure out which function to execute
				var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
				jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[lastToggle].apply(this, arguments) || false;
			};

			// link all the functions, so any of them can unbind this click handler
			toggler.guid = guid;
			while (i < args.length) {
				args[i++].guid = guid;
			}

			return this.click(toggler);
		},

		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
			"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
			"change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			if (fn == null) {
				fn = data;
				data = null;
			}

			return arguments.length > 0 ?
			this.on(name, null, data, fn) :
			this.trigger(name);
		};

		if (rkeyEvent.test(name)) {
			jQuery.event.fixHooks[name] = jQuery.event.keyHooks;
		}

		if (rmouseEvent.test(name)) {
			jQuery.event.fixHooks[name] = jQuery.event.mouseHooks;
		}
	});
	/*!
	 * Sizzle CSS Selector Engine
	 * Copyright 2012 jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://sizzlejs.com/
	 */
	(function (window, undefined) {

		var cachedruns,
		assertGetIdNotName,
		Expr,
		getText,
		isXML,
		contains,
		compile,
		sortOrder,
		hasDuplicate,
		outermostContext,

		baseHasDuplicate = true,
		strundefined = "undefined",

		expando = ("sizcache" + Math.random()).replace(".", ""),

		Token = String,
		document = window.document,
		docElem = document.documentElement,
		dirruns = 0,
		done = 0,
		pop = [].pop,
		push = [].push,
		slice = [].slice,
		// Use a stripped-down indexOf if a native one is unavailable
		indexOf = [].indexOf || function (elem) {
			var i = 0,
			len = this.length;
			for (; i < len; i++) {
				if (this[i] === elem) {
					return i;
				}
			}
			return -1;
		},

		// Augment a function for special use by Sizzle
		markFunction = function (fn, value) {
			fn[expando] = value == null || value;
			return fn;
		},

		createCache = function () {
			var cache = {},
			keys = [];

			return markFunction(function (key, value) {
				// Only keep the most recent entries
				if (keys.push(key) > Expr.cacheLength) {
					delete cache[keys.shift()];
				}

				// Retrieve with (key + " ") to avoid collision with native Object.prototype properties (see Issue #157)
				return (cache[key + " "] = value);
			}, cache);
		},

		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),

		// Regex

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace("w", "w#"),

		// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
		operators = "([*^$|!~]?=)",
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
			"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

		// Prefer arguments not in parens/brackets,
		//   then attribute selectors and non-pseudos (denoted by :),
		//   then anything else
		// These preferences are here to reduce the number of selectors
		//   needing tokenize in the PSEUDO preFilter
		pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

		// For matchExpr.POS and matchExpr.needsContext
		pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

		rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"),
		rpseudo = new RegExp(pseudos),

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

		rnot = /^:not/,
		rsibling = /[\x20\t\r\n\f]*[+~]/,
		rendsWithNot = /:not\($/,

		rheader = /h\d/i,
		rinputs = /input|select|textarea|button/i,

		rbackslash = /\\(?!\\)/g,

		matchExpr = {
			"ID": new RegExp("^#(" + characterEncoding + ")"),
			"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
			"NAME": new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
			"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"POS": new RegExp(pos, "i"),
			"CHILD": new RegExp("^:(only|nth|first|last)-child(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			// For use in libraries implementing .is()
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|" + pos, "i")
		},

		// Support

		// Used for testing something on an element
		assert = function (fn) {
			var div = document.createElement("div");

			try {
				return fn(div);
			} catch (e) {
				return false;
			}
			finally {
				// release memory in IE
				div = null;
			}
		},

		// Check if getElementsByTagName("*") returns only elements
		assertTagNameNoComments = assert(function (div) {
				div.appendChild(document.createComment(""));
				return !div.getElementsByTagName("*").length;
			}),

		// Check if getAttribute returns normalized href attributes
		assertHrefNotNormalized = assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
				div.firstChild.getAttribute("href") === "#";
			}),

		// Check if attributes should be retrieved by attribute nodes
		assertAttributes = assert(function (div) {
				div.innerHTML = "<select></select>";
				var type = typeof div.lastChild.getAttribute("multiple");
				// IE8 returns a string for some attributes even when not present
				return type !== "boolean" && type !== "string";
			}),

		// Check if getElementsByClassName can be trusted
		assertUsableClassName = assert(function (div) {
				// Opera can't find a second classname (in 9.6)
				div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
				if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
					return false;
				}

				// Safari 3.2 caches class attributes and doesn't catch changes
				div.lastChild.className = "e";
				return div.getElementsByClassName("e").length === 2;
			}),

		// Check if getElementById returns elements by name
		// Check if getElementsByName privileges form controls or returns elements by ID
		assertUsableName = assert(function (div) {
				// Inject content
				div.id = expando + 0;
				div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
				docElem.insertBefore(div, docElem.firstChild);

				// Test
				var pass = document.getElementsByName &&
					// buggy browsers will return fewer than the correct 2
					document.getElementsByName(expando).length === 2 +
					// buggy browsers will return more than the correct 0
					document.getElementsByName(expando + 0).length;
				assertGetIdNotName = !document.getElementById(expando);

				// Cleanup
				docElem.removeChild(div);

				return pass;
			});

		// If slice is not available, provide a backup
		try {
			slice.call(docElem.childNodes, 0)[0].nodeType;
		} catch (e) {
			slice = function (i) {
				var elem,
				results = [];
				for (; (elem = this[i]); i++) {
					results.push(elem);
				}
				return results;
			};
		}

		function Sizzle(selector, context, results, seed) {
			results = results || [];
			context = context || document;
			var match,
			elem,
			xml,
			m,
			nodeType = context.nodeType;

			if (!selector || typeof selector !== "string") {
				return results;
			}

			if (nodeType !== 1 && nodeType !== 9) {
				return [];
			}

			xml = isXML(context);

			if (!xml && !seed) {
				if ((match = rquickExpr.exec(selector))) {
					// Speed-up: Sizzle("#ID")
					if ((m = match[1])) {
						if (nodeType === 9) {
							elem = context.getElementById(m);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							if (elem && elem.parentNode) {
								// Handle the case where IE, Opera, and Webkit return items
								// by name instead of ID
								if (elem.id === m) {
									results.push(elem);
									return results;
								}
							} else {
								return results;
							}
						} else {
							// Context is not a document
							if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
								contains(context, elem) && elem.id === m) {
								results.push(elem);
								return results;
							}
						}

						// Speed-up: Sizzle("TAG")
					} else if (match[2]) {
						push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
						return results;

						// Speed-up: Sizzle(".CLASS")
					} else if ((m = match[3]) && assertUsableClassName && context.getElementsByClassName) {
						push.apply(results, slice.call(context.getElementsByClassName(m), 0));
						return results;
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed, xml);
		}

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			return Sizzle(expr, null, null, [elem]).length > 0;
		};

		// Returns a function to use in pseudos for input types
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		// Returns a function to use in pseudos for buttons
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		// Returns a function to use in pseudos for positionals
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					matchIndexes = fn([], seed.length, argument),
					i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[(j = matchIndexes[i])]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
		 * Utility function for retrieving the text value of an array of DOM nodes
		 * @param {Array|Element} elem
		 */
		getText = Sizzle.getText = function (elem) {
			var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

			if (nodeType) {
				if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (see #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes
			} else {

				// If no nodeType, this is expected to be an array
				for (; (node = elem[i]); i++) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			}
			return ret;
		};

		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		// Element contains another
		contains = Sizzle.contains = docElem.contains ?
		function (a, b) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
			return a === bup || !!(bup && bup.nodeType === 1 && adown.contains && adown.contains(bup));
		}
		 :
		docElem.compareDocumentPosition ?
		function (a, b) {
			return b && !!(a.compareDocumentPosition(b) & 16);
		}
		 :
		function (a, b) {
			while ((b = b.parentNode)) {
				if (b === a) {
					return true;
				}
			}
			return false;
		};

		Sizzle.attr = function (elem, name) {
			var val,
			xml = isXML(elem);

			if (!xml) {
				name = name.toLowerCase();
			}
			if ((val = Expr.attrHandle[name])) {
				return val(elem);
			}
			if (xml || assertAttributes) {
				return elem.getAttribute(name);
			}
			val = elem.getAttributeNode(name);
			return val ?
			typeof elem[name] === "boolean" ?
			elem[name] ? name : null :
			val.specified ? val.value : null :
			null;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			// IE6/7 return a modified href
			attrHandle: assertHrefNotNormalized ? {}
			 : {
				"href": function (elem) {
					return elem.getAttribute("href", 2);
				},
				"type": function (elem) {
					return elem.getAttribute("type");
				}
			},

			find: {
				"ID": assertGetIdNotName ?
				function (id, context, xml) {
					if (typeof context.getElementById !== strundefined && !xml) {
						var m = context.getElementById(id);
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						return m && m.parentNode ? [m] : [];
					}
				}
				 :
				function (id, context, xml) {
					if (typeof context.getElementById !== strundefined && !xml) {
						var m = context.getElementById(id);

						return m ?
						m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
						[];
					}
				},

				"TAG": assertTagNameNoComments ?
				function (tag, context) {
					if (typeof context.getElementsByTagName !== strundefined) {
						return context.getElementsByTagName(tag);
					}
				}
				 :
				function (tag, context) {
					var results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						var elem,
						tmp = [],
						i = 0;

						for (; (elem = results[i]); i++) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				},

				"NAME": assertUsableName && function (tag, context) {
					if (typeof context.getElementsByName !== strundefined) {
						return context.getElementsByName(name);
					}
				},

				"CLASS": assertUsableClassName && function (className, context, xml) {
					if (typeof context.getElementsByClassName !== strundefined && !xml) {
						return context.getElementsByClassName(className);
					}
				}
			},

			relative: {
				">": {
					dir: "parentNode",
					first: true
				},
				" ": {
					dir: "parentNode"
				},
				"+": {
					dir: "previousSibling",
					first: true
				},
				"~": {
					dir: "previousSibling"
				}
			},

			preFilter: {
				"ATTR": function (match) {
					match[1] = match[1].replace(rbackslash, "");

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[4] || match[5] || "").replace(rbackslash, "");

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function (match) {
					/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					3 xn-component of xn+y argument ([+-]?\d*n|)
					4 sign of xn-component
					5 x of xn-component
					6 sign of y-component
					7 y of y-component
					 */
					match[1] = match[1].toLowerCase();

					if (match[1] === "nth") {
						// nth-child requires argument
						if (!match[2]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[3] =  + (match[3] ? match[4] + (match[5] || 1) : 2 * (match[2] === "even" || match[2] === "odd"));
						match[4] =  + ((match[6] + match[7]) || match[2] === "odd");

						// other types prohibit arguments
					} else if (match[2]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function (match) {
					var unquoted,
					excess;
					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					if (match[3]) {
						match[2] = match[3];
					} else if ((unquoted = match[4])) {
						// Only check arguments that contain a pseudo
						if (rpseudo.test(unquoted) &&
							// Get excess from tokenize (recursively)
							(excess = tokenize(unquoted, true)) &&
							// advance to the next closing parenthesis
							(excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

							// excess is a negative index
							unquoted = unquoted.slice(0, excess);
							match[0] = match[0].slice(0, excess);
						}
						match[2] = unquoted;
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {
				"ID": assertGetIdNotName ?
				function (id) {
					id = id.replace(rbackslash, "");
					return function (elem) {
						return elem.getAttribute("id") === id;
					};
				}
				 :
				function (id) {
					id = id.replace(rbackslash, "");
					return function (elem) {
						var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
						return node && node.value === id;
					};
				},

				"TAG": function (nodeName) {
					if (nodeName === "*") {
						return function () {
							return true;
						};
					}
					nodeName = nodeName.replace(rbackslash, "").toLowerCase();

					return function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function (className) {
					var pattern = classCache[expando][className + " "];

					return pattern ||
					(pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
					classCache(className, function (elem) {
						return pattern.test(elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "");
					});
				},

				"ATTR": function (name, operator, check) {
					return function (elem, context) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf(check) === 0 :
						operator === "*=" ? check && result.indexOf(check) > -1 :
						operator === "$=" ? check && result.substr(result.length - check.length) === check :
						operator === "~=" ? (" " + result + " ").indexOf(check) > -1 :
						operator === "|=" ? result === check || result.substr(0, check.length + 1) === check + "-" :
						false;
					};
				},

				"CHILD": function (type, argument, first, last) {

					if (type === "nth") {
						return function (elem) {
							var node,
							diff,
							parent = elem.parentNode;

							if (first === 1 && last === 0) {
								return true;
							}

							if (parent) {
								diff = 0;
								for (node = parent.firstChild; node; node = node.nextSibling) {
									if (node.nodeType === 1) {
										diff++;
										if (elem === node) {
											break;
										}
									}
								}
							}

							// Incorporate the offset (or cast to NaN), then check against cycle size
							diff -= last;
							return diff === first || (diff % first === 0 && diff / first >= 0);
						};
					}

					return function (elem) {
						var node = elem;

						switch (type) {
						case "only":
						case "first":
							while ((node = node.previousSibling)) {
								if (node.nodeType === 1) {
									return false;
								}
							}

							if (type === "first") {
								return true;
							}

							node = elem;

							/* falls through */
						case "last":
							while ((node = node.nextSibling)) {
								if (node.nodeType === 1) {
									return false;
								}
							}

							return true;
						}
					};
				},

				"PSEUDO": function (pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
						Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
						markFunction(function (seed, matches) {
							var idx,
							matched = fn(seed, argument),
							i = matched.length;
							while (i--) {
								idx = indexOf.call(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) :
						function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					results = [],
					matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ?
					markFunction(function (seed, matches, context, xml) {
						var elem,
						unmatched = matcher(seed, null, xml, []),
						i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if ((elem = unmatched[i])) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				"enabled": function (elem) {
					return elem.disabled === false;
				},

				"disabled": function (elem) {
					return elem.disabled === true;
				},

				"checked": function (elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
				},

				"selected": function (elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				"parent": function (elem) {
					return !Expr.pseudos["empty"](elem);
				},

				"empty": function (elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
					//   not comment, processing instructions, or others
					// Thanks to Diego Perini for the nodeName shortcut
					//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
					var nodeType;
					elem = elem.firstChild;
					while (elem) {
						if (elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4) {
							return false;
						}
						elem = elem.nextSibling;
					}
					return true;
				},

				"header": function (elem) {
					return rheader.test(elem.nodeName);
				},

				"text": function (elem) {
					var type,
					attr;
					// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
					// use getAttribute instead to test this case
					return elem.nodeName.toLowerCase() === "input" &&
					(type = elem.type) === "text" &&
					((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type);
				},

				// Input types
				"radio": createInputPseudo("radio"),
				"checkbox": createInputPseudo("checkbox"),
				"file": createInputPseudo("file"),
				"password": createInputPseudo("password"),
				"image": createInputPseudo("image"),

				"submit": createButtonPseudo("submit"),
				"reset": createButtonPseudo("reset"),

				"button": function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"input": function (elem) {
					return rinputs.test(elem.nodeName);
				},

				"focus": function (elem) {
					var doc = elem.ownerDocument;
					return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				"active": function (elem) {
					return elem === elem.ownerDocument.activeElement;
				},

				// Positional types
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					for (var i = 0; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					for (var i = 1; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					for (var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					for (var i = argument < 0 ? argument + length : argument; ++i < length; ) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		function siblingCheck(a, b, ret) {
			if (a === b) {
				return ret;
			}

			var cur = a.nextSibling;
			while (cur) {
				if (cur === b) {
					return -1;
				}

				cur = cur.nextSibling;
			}

			return 1;
		}

		sortOrder = docElem.compareDocumentPosition ?
		function (a, b) {
			if (a === b) {
				hasDuplicate = true;
				return 0;
			}

			return (!a.compareDocumentPosition || !b.compareDocumentPosition ?
				a.compareDocumentPosition :
				a.compareDocumentPosition(b) & 4) ? -1 : 1;
		}
		 :
		function (a, b) {
			// The nodes are identical, we can exit early
			if (a === b) {
				hasDuplicate = true;
				return 0;

				// Fallback to using sourceIndex (in IE) if it's available on both nodes
			} else if (a.sourceIndex && b.sourceIndex) {
				return a.sourceIndex - b.sourceIndex;
			}

			var al,
			bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

			// If the nodes are siblings (or identical) we can do a quick check
			if (aup === bup) {
				return siblingCheck(a, b);

				// If no parents were found then the nodes are disconnected
			} else if (!aup) {
				return -1;

			} else if (!bup) {
				return 1;
			}

			// Otherwise they're somewhere else in the tree so we need
			// to build up a full list of the parentNodes for comparison
			while (cur) {
				ap.unshift(cur);
				cur = cur.parentNode;
			}

			cur = bup;
			while (cur) {
				bp.unshift(cur);
				cur = cur.parentNode;
			}

			al = ap.length;
			bl = bp.length;

			// Start walking down the tree looking for a discrepancy
			for (var i = 0; i < al && i < bl; i++) {
				if (ap[i] !== bp[i]) {
					return siblingCheck(ap[i], bp[i]);
				}
			}

			// We ended someplace up the tree so do a sibling check
			return i === al ?
			siblingCheck(a, bp[i], -1) :
			siblingCheck(ap[i], b, 1);
		};

		// Always assume the presence of duplicates if sort doesn't
		// pass them to our comparison function (as in Google Chrome).
		[0, 0].sort(sortOrder);
		baseHasDuplicate = !hasDuplicate;

		// Document sorting and removing duplicates
		Sizzle.uniqueSort = function (results) {
			var elem,
			duplicates = [],
			i = 1,
			j = 0;

			hasDuplicate = baseHasDuplicate;
			results.sort(sortOrder);

			if (hasDuplicate) {
				for (; (elem = results[i]); i++) {
					if (elem === results[i - 1]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			return results;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		function tokenize(selector, parseOnly) {
			var matched,
			match,
			tokens,
			type,
			soFar,
			groups,
			preFilters,
			cached = tokenCache[expando][selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;
			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if ((match = rcombinators.exec(soFar))) {
					tokens.push(matched = new Token(match.shift()));
					soFar = soFar.slice(matched.length);

					// Cast descendant combinators to space
					matched.type = match[0].replace(rtrim, " ");
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
							(match = preFilters[type](match)))) {

						tokens.push(matched = new Token(match.shift()));
						soFar = soFar.slice(matched.length);
						matched.type = type;
						matched.matches = match;
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ?
			soFar.length :
			soFar ?
			Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			checkNonElements = base && combinator.dir === "parentNode",
			doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while ((elem = elem[dir])) {
					if (checkNonElements || elem.nodeType === 1) {
						return matcher(elem, context, xml);
					}
				}
			}
			 :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if (!xml) {
					var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
					while ((elem = elem[dir])) {
						if (checkNonElements || elem.nodeType === 1) {
							if ((cache = elem[expando]) === cachedkey) {
								return elem.sizset;
							} else if (typeof cache === "string" && cache.indexOf(dirkey) === 0) {
								if (elem.sizset) {
									return elem;
								}
							} else {
								elem[expando] = cachedkey;
								if (matcher(elem, context, xml)) {
									elem.sizset = true;
									return elem;
								}
								elem.sizset = false;
							}
						}
					}
				} else {
					while ((elem = elem[dir])) {
						if (checkNonElements || elem.nodeType === 1) {
							if (matcher(elem, context, xml)) {
								return elem;
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ?
			function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			}
			 :
			matchers[0];
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

			for (; i < len; i++) {
				if ((elem = unmatched[i])) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				i,
				elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ?
					condense(elems, preMap, preFilter, context, xml) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
					matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if ((elem = temp[i])) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i])) {
									// Restore matcherIn since elem is not yet a final match
									temp.push((matcherIn[i] = elem));
								}
							}
							postFinder(null, (matcherOut = []), temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) &&
								(temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(
							matcherOut === results ?
							matcherOut.splice(preexisting, matcherOut.length) :
							matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			matcher,
			j,
			len = tokens.length,
			leadingRelative = Expr.relative[tokens[0].type],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
			matchAnyContext = addCombinator(function (elem) {
					return indexOf.call(checkContext, elem) > -1;
				}, implicitRelative, true),
			matchers = [function (elem, context, xml) {
					return (!leadingRelative && (xml || context !== outermostContext)) || (
						(checkContext = context).nodeType ?
						matchContext(elem, context, xml) :
						matchAnyContext(elem, context, xml));
				}
			];

			for (; i < len; i++) {
				if ((matcher = Expr.relative[tokens[i].type])) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(
							i > 1 && elementMatcher(matchers),
							i > 1 && tokens.slice(0, i - 1).join("").replace(rtrim, "$1"),
							matcher,
							i < j && matcherFromTokens(tokens.slice(i, j)),
							j < len && matcherFromTokens((tokens = tokens.slice(j))),
							j < len && tokens.join(""));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function (seed, context, xml, results, expandContext) {
				var elem,
				j,
				matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context),
				// Nested matchers should use non-integer dirruns
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

				if (outermost) {
					outermostContext = context !== document && context;
					cachedruns = superMatcher.el;
				}

				// Add elements passing elementMatchers directly to results
				for (; (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						for (j = 0; (matcher = elementMatchers[j]); j++) {
							if (matcher(elem, context, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
							cachedruns = ++superMatcher.el;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if ((elem = !matcher && elem)) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if (bySet && i !== matchedCount) {
					for (j = 0; (matcher = setMatchers[j]); j++) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 &&
						(matchedCount + setMatchers.length) > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			superMatcher.el = 0;
			return bySet ?
			markFunction(superMatcher) :
			superMatcher;
		}

		compile = Sizzle.compile = function (selector, group /* Internal Use Only */) {
			var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[expando][selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!group) {
					group = tokenize(selector);
				}
				i = group.length;
				while (i--) {
					cached = matcherFromTokens(group[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
			}
			return cached;
		};

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function select(selector, context, results, seed, xml) {
			var i,
			tokens,
			token,
			type,
			find,
			match = tokenize(selector),
			j = match.length;

			if (!seed) {
				// Try to minimize operations if there is only one group
				if (match.length === 1) {

					// Take a shortcut and set the context if the root selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
						context.nodeType === 9 && !xml &&
						Expr.relative[tokens[1].type]) {

						context = Expr.find["ID"](token.matches[0].replace(rbackslash, ""), context, xml)[0];
						if (!context) {
							return results;
						}

						selector = selector.slice(tokens.shift().length);
					}

					// Fetch a seed set for right-to-left matching
					for (i = matchExpr["POS"].test(selector) ? -1 : tokens.length - 1; i >= 0; i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[(type = token.type)]) {
							break;
						}
						if ((find = Expr.find[type])) {
							// Search, expanding context for leading sibling combinators
							if ((seed = find(
											token.matches[0].replace(rbackslash, ""),
											rsibling.test(tokens[0].type) && context.parentNode || context,
											xml))) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && tokens.join("");
								if (!selector) {
									push.apply(results, slice.call(seed, 0));
									return results;
								}

								break;
							}
						}
					}
				}
			}

			// Compile and execute a filtering function
			// Provide `match` to avoid retokenization if we modified the selector above
			compile(selector, match)(
				seed,
				context,
				xml,
				results,
				rsibling.test(selector));
			return results;
		}

		if (document.querySelectorAll) {
			(function () {
				var disconnectedMatch,
				oldSelect = select,
				rescape = /'|\\/g,
				rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

				// qSa(:focus) reports false when true (Chrome 21), no need to also add to buggyMatches since matches checks buggyQSA
				// A support test would require too much code (would include document ready)
				rbuggyQSA = [":focus"],

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				// A support test would require too much code (would include document ready)
				// just skip matchesSelector for :active
				rbuggyMatches = [":active"],
				matches = docElem.matchesSelector ||
					docElem.mozMatchesSelector ||
					docElem.webkitMatchesSelector ||
					docElem.oMatchesSelector ||
					docElem.msMatchesSelector;

				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explictly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					div.innerHTML = "<select><option selected=''></option></select>";

					// IE8 - Some boolean attributes are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here (do not put tests after this one)
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}
				});

				assert(function (div) {

					// Opera 10-12/IE9 - ^= $= *= and empty values
					// Should not select anything
					div.innerHTML = "<p test=''></p>";
					if (div.querySelectorAll("[test^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here (do not put tests after this one)
					div.innerHTML = "<input type='hidden'/>";
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}
				});

				// rbuggyQSA always contains :focus, so no need for a length check
				rbuggyQSA = /* rbuggyQSA.length && */ new RegExp(rbuggyQSA.join("|"));

				select = function (selector, context, results, seed, xml) {
					// Only use querySelectorAll when not filtering,
					// when this is not xml,
					// and when no QSA bugs apply
					if (!seed && !xml && !rbuggyQSA.test(selector)) {
						var groups,
						i,
						old = true,
						nid = expando,
						newContext = context,
						newSelector = context.nodeType === 9 && selector;

						// qSA works strangely on Element-rooted queries
						// We can work around this by specifying an extra ID on the root
						// and working up from there (Thanks to Andrew Dupont for the technique)
						// IE 8 doesn't work on object elements
						if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
							groups = tokenize(selector);

							if ((old = context.getAttribute("id"))) {
								nid = old.replace(rescape, "\\$&");
							} else {
								context.setAttribute("id", nid);
							}
							nid = "[id='" + nid + "'] ";

							i = groups.length;
							while (i--) {
								groups[i] = nid + groups[i].join("");
							}
							newContext = rsibling.test(selector) && context.parentNode || context;
							newSelector = groups.join(",");
						}

						if (newSelector) {
							try {
								push.apply(results, slice.call(newContext.querySelectorAll(
											newSelector), 0));
								return results;
							} catch (qsaError) {}
							finally {
								if (!old) {
									context.removeAttribute("id");
								}
							}
						}
					}

					return oldSelect(selector, context, results, seed, xml);
				};

				if (matches) {
					assert(function (div) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						disconnectedMatch = matches.call(div, "div");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						try {
							matches.call(div, "[test!='']:sizzle");
							rbuggyMatches.push("!=", pseudos);
						} catch (e) {}
					});

					// rbuggyMatches always contains :active and :focus, so no need for a length check
					rbuggyMatches = /* rbuggyMatches.length && */ new RegExp(rbuggyMatches.join("|"));

					Sizzle.matchesSelector = function (elem, expr) {
						// Make sure that attribute selectors are quoted
						expr = expr.replace(rattributeQuotes, "='$1']");

						// rbuggyMatches always contains :active, so no need for an existence check
						if (!isXML(elem) && !rbuggyMatches.test(expr) && !rbuggyQSA.test(expr)) {
							try {
								var ret = matches.call(elem, expr);

								// IE 9's matchesSelector returns false on disconnected nodes
								if (ret || disconnectedMatch ||
									// As well, disconnected nodes are said to be in a document
									// fragment in IE 9
									elem.document && elem.document.nodeType !== 11) {
									return ret;
								}
							} catch (e) {}
						}

						return Sizzle(expr, null, null, [elem]).length > 0;
					};
				}
			})();
		}

		// Deprecated
		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Back-compat
		function setFilters() {}
		Expr.filters = setFilters.prototype = Expr.pseudos;
		Expr.setFilters = new setFilters();

		// Override sizzle attribute retrieval
		Sizzle.attr = jQuery.attr;
		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;

	})(window);
	var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		find: function (selector) {
			var i,
			l,
			length,
			n,
			r,
			ret,
			self = this;

			if (typeof selector !== "string") {
				return jQuery(selector).filter(function () {
					for (i = 0, l = self.length; i < l; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				});
			}

			ret = this.pushStack("", "find", selector);

			for (i = 0, l = this.length; i < l; i++) {
				length = ret.length;
				jQuery.find(selector, this[i], ret);

				if (i > 0) {
					// Make sure that the results are unique
					for (n = length; n < ret.length; n++) {
						for (r = 0; r < length; r++) {
							if (ret[r] === ret[n]) {
								ret.splice(n--, 1);
								break;
							}
						}
					}
				}
			}

			return ret;
		},

		has: function (target) {
			var i,
			targets = jQuery(target, this),
			len = targets.length;

			return this.filter(function () {
				for (i = 0; i < len; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		not: function (selector) {
			return this.pushStack(winnow(this, selector, false), "not", selector);
		},

		filter: function (selector) {
			return this.pushStack(winnow(this, selector, true), "filter", selector);
		},

		is: function (selector) {
			return !!selector && (
				typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test(selector) ?
				jQuery(selector, this.context).index(this[0]) >= 0 :
				jQuery.filter(selector, this).length > 0 :
				this.filter(selector).length > 0);
		},

		closest: function (selectors, context) {
			var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
				jQuery(selectors, context || this.context) :
				0;

			for (; i < l; i++) {
				cur = this[i];
				while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
					if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
						ret.push(cur);
						break;
					}
					cur = cur.parentNode;
				}
			}

			ret = ret.length > 1 ? jQuery.unique(ret) : ret;

			return this.pushStack(ret, "closest", selectors);
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function (elem) {

			// No argument, return index in parent
			if (!elem) {
				return (this[0] && this[0].parentNode) ? this.prevAll().length : -1;
			}

			// index in selector
			if (typeof elem === "string") {
				return jQuery.inArray(this[0], jQuery(elem));
			}

			// Locate the position of the desired element
			return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this);
		},

		add: function (selector, context) {
			var set = typeof selector === "string" ?
				jQuery(selector, context) :
				jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),
			all = jQuery.merge(this.get(), set);

			return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ?
				all :
				jQuery.unique(all));
		},

		addBack: function (selector) {
			return this.add(selector == null ?
				this.prevObject : this.prevObject.filter(selector));
		}
	});

	jQuery.fn.andSelf = jQuery.fn.addBack;

	// A painfully simple check to see if an element is disconnected
	// from a document (should be improved, where feasible).
	function isDisconnected(node) {
		return !node || !node.parentNode || node.parentNode.nodeType === 11;
	}

	function sibling(cur, dir) {
		do {
			cur = cur[dir];
		} while (cur && cur.nodeType !== 1);

		return cur;
	}

	jQuery.each({
		parent: function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function (elem) {
			return jQuery.dir(elem, "parentNode");
		},
		parentsUntil: function (elem, i, until) {
			return jQuery.dir(elem, "parentNode", until);
		},
		next: function (elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function (elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function (elem) {
			return jQuery.dir(elem, "nextSibling");
		},
		prevAll: function (elem) {
			return jQuery.dir(elem, "previousSibling");
		},
		nextUntil: function (elem, i, until) {
			return jQuery.dir(elem, "nextSibling", until);
		},
		prevUntil: function (elem, i, until) {
			return jQuery.dir(elem, "previousSibling", until);
		},
		siblings: function (elem) {
			return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
		},
		children: function (elem) {
			return jQuery.sibling(elem.firstChild);
		},
		contents: function (elem) {
			return jQuery.nodeName(elem, "iframe") ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var ret = jQuery.map(this, fn, until);

			if (!runtil.test(name)) {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				ret = jQuery.filter(selector, ret);
			}

			ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;

			if (this.length > 1 && rparentsprev.test(name)) {
				ret = ret.reverse();
			}

			return this.pushStack(ret, name, core_slice.call(arguments).join(","));
		};
	});

	jQuery.extend({
		filter: function (expr, elems, not) {
			if (not) {
				expr = ":not(" + expr + ")";
			}

			return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] :
			jQuery.find.matches(expr, elems);
		},

		dir: function (elem, dir, until) {
			var matched = [],
			cur = elem[dir];
			while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
				if (cur.nodeType === 1) {
					matched.push(cur);
				}
				cur = cur[dir];
			}
			return matched;
		},

		sibling: function (n, elem) {
			var r = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					r.push(n);
				}
			}

			return r;
		}
	});

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, keep) {

		// Can't pass null or undefined to indexOf in Firefox 4
		// Set to 0 to skip string check
		qualifier = qualifier || 0;

		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				var retVal = !!qualifier.call(elem, i, elem);
				return retVal === keep;
			});

		} else if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem, i) {
				return (elem === qualifier) === keep;
			});

		} else if (typeof qualifier === "string") {
			var filtered = jQuery.grep(elements, function (elem) {
					return elem.nodeType === 1;
				});

			if (isSimple.test(qualifier)) {
				return jQuery.filter(qualifier, filtered, !keep);
			} else {
				qualifier = jQuery.filter(qualifier, filtered);
			}
		}

		return jQuery.grep(elements, function (elem, i) {
			return (jQuery.inArray(elem, qualifier) >= 0) === keep;
		});
	}
	function createSafeFragment(document) {
		var list = nodeNames.split("|"),
		safeFrag = document.createDocumentFragment();

		if (safeFrag.createElement) {
			while (list.length) {
				safeFrag.createElement(
					list.pop());
			}
		}
		return safeFrag;
	}

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
	wrapMap = {
		option: [1, "<select multiple='multiple'>", "</select>"],
		legend: [1, "<fieldset>", "</fieldset>"],
		thead: [1, "<table>", "</table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
		col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
		area: [1, "<map>", "</map>"],
		_default: [0, "", ""]
	},
	safeFragment = createSafeFragment(document),
	fragmentDiv = safeFragment.appendChild(document.createElement("div"));

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	if (!jQuery.support.htmlSerialize) {
		wrapMap._default = [1, "X<div>", "</div>"];
	}

	jQuery.fn.extend({
		text: function (value) {
			return jQuery.access(this, function (value) {
				return value === undefined ?
				jQuery.text(this) :
				this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
			}, null, value, arguments.length);
		},

		wrapAll: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {
				// The elements to wrap the target around
				var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;
					while (elem.firstChild && elem.firstChild.nodeType === 1) {
						elem = elem.firstChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);

				} else {
					self.append(html);
				}
			});
		},

		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function () {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		},

		append: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.appendChild(elem);
				}
			});
		},

		prepend: function () {
			return this.domManip(arguments, true, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11) {
					this.insertBefore(elem, this.firstChild);
				}
			});
		},

		before: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this);
				});
			}

			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(set, this), "before", this.selector);
			}
		},

		after: function () {
			if (!isDisconnected(this[0])) {
				return this.domManip(arguments, false, function (elem) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				});
			}

			if (arguments.length) {
				var set = jQuery.clean(arguments);
				return this.pushStack(jQuery.merge(this, set), "after", this.selector);
			}
		},

		// keepData is for internal use only--do not document
		remove: function (selector, keepData) {
			var elem,
			i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (!selector || jQuery.filter(selector, [elem]).length) {
					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(elem.getElementsByTagName("*"));
						jQuery.cleanData([elem]);
					}

					if (elem.parentNode) {
						elem.parentNode.removeChild(elem);
					}
				}
			}

			return this;
		},

		empty: function () {
			var elem,
			i = 0;

			for (; (elem = this[i]) != null; i++) {
				// Remove element nodes and prevent memory leaks
				if (elem.nodeType === 1) {
					jQuery.cleanData(elem.getElementsByTagName("*"));
				}

				// Remove any remaining nodes
				while (elem.firstChild) {
					elem.removeChild(elem.firstChild);
				}
			}

			return this;
		},

		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function (value) {
			return jQuery.access(this, function (value) {
				var elem = this[0] || {},
				i = 0,
				l = this.length;

				if (value === undefined) {
					return elem.nodeType === 1 ?
					elem.innerHTML.replace(rinlinejQuery, "") :
					undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) &&
					(jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
					(jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
					!wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = value.replace(rxhtmlTag, "<$1></$2>");

					try {
						for (; i < l; i++) {
							// Remove element nodes and prevent memory leaks
							elem = this[i] || {};
							if (elem.nodeType === 1) {
								jQuery.cleanData(elem.getElementsByTagName("*"));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function (value) {
			if (!isDisconnected(this[0])) {
				// Make sure that the elements are removed from the DOM before they are inserted
				// this can help fix replacing a parent with child elements
				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						var self = jQuery(this),
						old = self.html();
						self.replaceWith(value.call(this, i, old));
					});
				}

				if (typeof value !== "string") {
					value = jQuery(value).detach();
				}

				return this.each(function () {
					var next = this.nextSibling,
					parent = this.parentNode;

					jQuery(this).remove();

					if (next) {
						jQuery(next).before(value);
					} else {
						jQuery(parent).append(value);
					}
				});
			}

			return this.length ?
			this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) :
			this;
		},

		detach: function (selector) {
			return this.remove(selector, true);
		},

		domManip: function (args, table, callback) {

			// Flatten any nested arrays
			args = [].concat.apply([], args);

			var results,
			first,
			fragment,
			iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;

			// We can't cloneNode fragments that contain checked, in WebKit
			if (!jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test(value)) {
				return this.each(function () {
					jQuery(this).domManip(args, table, callback);
				});
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					var self = jQuery(this);
					args[0] = value.call(this, i, table ? self.html() : undefined);
					self.domManip(args, table, callback);
				});
			}

			if (this[0]) {
				results = jQuery.buildFragment(args, this, scripts);
				fragment = results.fragment;
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				if (first) {
					table = table && jQuery.nodeName(first, "tr");

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					// Fragments from the fragment cache must always be cloned and never used in place.
					for (iNoClone = results.cacheable || l - 1; i < l; i++) {
						callback.call(
							table && jQuery.nodeName(this[i], "table") ?
							findOrAppend(this[i], "tbody") :
							this[i],
							i === iNoClone ?
							fragment :
							jQuery.clone(fragment, true, true));
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;

				if (scripts.length) {
					jQuery.each(scripts, function (i, elem) {
						if (elem.src) {
							if (jQuery.ajax) {
								jQuery.ajax({
									url: elem.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									beforeSend: CsrfGuard.beforeAjaxSend,
									"throws": true
								});
							} else {
								jQuery.error("no ajax");
							}
						} else {
							jQuery.globalEval((elem.text || elem.textContent || elem.innerHTML || "").replace(rcleanScript, ""));
						}

						if (elem.parentNode) {
							elem.parentNode.removeChild(elem);
						}
					});
				}
			}

			return this;
		}
	});

	function findOrAppend(elem, tag) {
		return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
	}

	function cloneCopyEvent(src, dest) {

		if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
			return;
		}

		var type,
		i,
		l,
		oldData = jQuery._data(src),
		curData = jQuery._data(dest, oldData),
		events = oldData.events;

		if (events) {
			delete curData.handle;
			curData.events = {};

			for (type in events) {
				for (i = 0, l = events[type].length; i < l; i++) {
					jQuery.event.add(dest, type, events[type][i]);
				}
			}
		}

		// make the cloned public data object a copy from the original
		if (curData.data) {
			curData.data = jQuery.extend({}, curData.data);
		}
	}

	function cloneFixAttributes(src, dest) {
		var nodeName;

		// We do not need to do anything for non-Elements
		if (dest.nodeType !== 1) {
			return;
		}

		//2015年末微软更新了补丁后，IE11中下述代码报错，增加try catch以解决此bug
		try {
			// clearAttributes removes the attributes, which we don't want,
			// but also removes the attachEvent events, which we *do* want
			if (dest.clearAttributes) {
				dest.clearAttributes();
			}

			// mergeAttributes, in contrast, only merges back on the
			// original attributes, not the events
			if (dest.mergeAttributes) {
				dest.mergeAttributes(src);
			}
		} catch (err) {}

		nodeName = dest.nodeName.toLowerCase();

		if (nodeName === "object") {
			// IE6-10 improperly clones children of object elements using classid.
			// IE10 throws NoModificationAllowedError if parent is null, #12132.
			if (dest.parentNode) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
				dest.innerHTML = src.innerHTML;
			}

		} else if (nodeName === "input" && rcheckableType.test(src.type)) {
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if (dest.value !== src.value) {
				dest.value = src.value;
			}

			// IE6-8 fails to return the selected option to the default selected
			// state when cloning options
		} else if (nodeName === "option") {
			dest.selected = src.defaultSelected;

			// IE6-8 fails to set the defaultValue to the correct value when
			// cloning other types of input fields
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;

			// IE blanks contents when cloning scripts
		} else if (nodeName === "script" && dest.text !== src.text) {
			dest.text = src.text;
		}

		// Event data gets referenced instead of copied if the expando
		// gets copied too
		dest.removeAttribute(jQuery.expando);
	}

	jQuery.buildFragment = function (args, context, scripts) {
		var fragment,
		cacheable,
		cachehit,
		first = args[0];

		// Set context from what may come in as undefined or a jQuery collection or a node
		// Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
		// also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
		context = context || document;
		context = !context.nodeType && context[0] || context;
		context = context.ownerDocument || context;

		// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
		// Cloning options loses the selected state, so don't cache them
		// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
		// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
		// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
		if (args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
			first.charAt(0) === "<" && !rnocache.test(first) &&
			(jQuery.support.checkClone || !rchecked.test(first)) &&
			(jQuery.support.html5Clone || !rnoshimcache.test(first))) {

			// Mark cacheable and look for a hit
			cacheable = true;
			fragment = jQuery.fragments[first];
			cachehit = fragment !== undefined;
		}

		if (!fragment) {
			fragment = context.createDocumentFragment();
			jQuery.clean(args, context, fragment, scripts);

			// Update the cache, but only store false
			// unless this is a second parsing of the same content
			if (cacheable) {
				jQuery.fragments[first] = cachehit && fragment;
			}
		}

		return {
			fragment: fragment,
			cacheable: cacheable
		};
	};

	jQuery.fragments = {};

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			i = 0,
			ret = [],
			insert = jQuery(selector),
			l = insert.length,
			parent = this.length === 1 && this[0].parentNode;

			if ((parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1) {
				insert[original](this[0]);
				return this;
			} else {
				for (; i < l; i++) {
					elems = (i > 0 ? this.clone(true) : this).get();
					jQuery(insert[i])[original](elems);
					ret = ret.concat(elems);
				}

				return this.pushStack(ret, name, insert.selector);
			}
		};
	});

	function getAll(elem) {
		if (typeof elem.getElementsByTagName !== "undefined") {
			return elem.getElementsByTagName("*");

		} else if (typeof elem.querySelectorAll !== "undefined") {
			return elem.querySelectorAll("*");

		} else {
			return [];
		}
	}

	// Used in clean, fixes the defaultChecked property
	function fixDefaultChecked(elem) {
		if (rcheckableType.test(elem.type)) {
			elem.defaultChecked = elem.checked;
		}
	}

	jQuery.extend({
		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var srcElements,
			destElements,
			i,
			clone;

			if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
				clone = elem.cloneNode(true);

				// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
			}

			if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
				// IE copies events bound via attachEvent when using cloneNode.
				// Calling detachEvent on the clone will also remove the events
				// from the original. In order to get around this, we use some
				// proprietary methods to clear the events. Thanks to MooTools
				// guys for this hotness.

				cloneFixAttributes(elem, clone);

				// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
				srcElements = getAll(elem);
				destElements = getAll(clone);

				// Weird iteration because IE will replace the length property
				// with an element if you are cloning the body and one of the
				// elements on the page has a name or id of "length"
				for (i = 0; srcElements[i]; ++i) {
					// Ensure that the destination node is not null; Fixes #9587
					if (destElements[i]) {
						cloneFixAttributes(srcElements[i], destElements[i]);
					}
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				cloneCopyEvent(elem, clone);

				if (deepDataAndEvents) {
					srcElements = getAll(elem);
					destElements = getAll(clone);

					for (i = 0; srcElements[i]; ++i) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				}
			}

			srcElements = destElements = null;

			// Return the cloned set
			return clone;
		},

		clean: function (elems, context, fragment, scripts) {
			var i,
			j,
			elem,
			tag,
			wrap,
			depth,
			div,
			hasBody,
			tbody,
			len,
			handleScript,
			jsTags,
			safe = context === document && safeFragment,
			ret = [];

			// Ensure that context is a document
			if (!context || typeof context.createDocumentFragment === "undefined") {
				context = document;
			}

			// Use the already-created safe fragment if context permits
			for (i = 0; (elem = elems[i]) != null; i++) {
				if (typeof elem === "number") {
					elem += "";
				}

				if (!elem) {
					continue;
				}

				// Convert html string into DOM nodes
				if (typeof elem === "string") {
					if (!rhtml.test(elem)) {
						elem = context.createTextNode(elem);
					} else {
						// Ensure a safe container in which to render the html
						safe = safe || createSafeFragment(context);
						div = context.createElement("div");
						safe.appendChild(div);

						// Fix "XHTML"-style tags in all browsers
						elem = elem.replace(rxhtmlTag, "<$1></$2>");

						// Go to html and back, then peel off extra wrappers
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						depth = wrap[0];
						div.innerHTML = wrap[1] + elem + wrap[2];

						// Move to the right depth
						while (depth--) {
							div = div.lastChild;
						}

						// Remove IE's autoinserted <tbody> from table fragments
						if (!jQuery.support.tbody) {

							// String was a <table>, *may* have spurious <tbody>
							hasBody = rtbody.test(elem);
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
								div.childNodes :
								[];

							for (j = tbody.length - 1; j >= 0; --j) {
								if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
									tbody[j].parentNode.removeChild(tbody[j]);
								}
							}
						}

						// IE completely kills leading whitespace when innerHTML is used
						if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
							div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
						}

						elem = div.childNodes;

						// Take out of fragment container (we need a fresh div each time)
						div.parentNode.removeChild(div);
					}
				}

				if (elem.nodeType) {
					ret.push(elem);
				} else {
					jQuery.merge(ret, elem);
				}
			}

			// Fix #11356: Clear elements from safeFragment
			if (div) {
				elem = div = safe = null;
			}

			// Reset defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			if (!jQuery.support.appendChecked) {
				for (i = 0; (elem = ret[i]) != null; i++) {
					if (jQuery.nodeName(elem, "input")) {
						fixDefaultChecked(elem);
					} else if (typeof elem.getElementsByTagName !== "undefined") {
						jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
					}
				}
			}

			// Append elements to a provided document fragment
			if (fragment) {
				// Special handling of each script element
				handleScript = function (elem) {
					// Check if we consider it executable
					if (!elem.type || rscriptType.test(elem.type)) {
						// Detach the script and store it in the scripts array (if provided) or the fragment
						// Return truthy to indicate that it has been handled
						return scripts ?
						scripts.push(elem.parentNode ? elem.parentNode.removeChild(elem) : elem) :
						fragment.appendChild(elem);
					}
				};

				for (i = 0; (elem = ret[i]) != null; i++) {
					// Check if we're done after handling an executable script
					if (!(jQuery.nodeName(elem, "script") && handleScript(elem))) {
						// Append to fragment and handle embedded scripts
						fragment.appendChild(elem);
						if (typeof elem.getElementsByTagName !== "undefined") {
							// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
							jsTags = jQuery.grep(jQuery.merge([], elem.getElementsByTagName("script")), handleScript);

							// Splice the scripts into ret after their former ancestor and advance our index beyond them
							ret.splice.apply(ret, [i + 1, 0].concat(jsTags));
							i += jsTags.length;
						}
					}
				}
			}

			return ret;
		},

		cleanData: function (elems, /* internal */ acceptData) {
			var data,
			id,
			elem,
			type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

			for (; (elem = elems[i]) != null; i++) {

				if (acceptData || jQuery.acceptData(elem)) {

					id = elem[internalKey];
					data = id && cache[id];

					if (data) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if (cache[id]) {

							delete cache[id];

							// IE does not allow us to delete expando properties from nodes,
							// nor does it have a removeAttribute function on Document nodes;
							// we must handle all of these cases
							if (deleteExpando) {
								delete elem[internalKey];

							} else if (elem.removeAttribute) {
								elem.removeAttribute(internalKey);

							} else {
								elem[internalKey] = null;
							}

							jQuery.deletedIds.push(id);
						}
					}
				}
			}
		}
	});
	// Limit scope pollution from any deprecated API
	(function () {

		var matched,
		browser;

		// Use of jQuery.browser is frowned upon.
		// More details: http://api.jquery.com/jQuery.browser
		// jQuery.uaMatch maintained for back-compat
		jQuery.uaMatch = function (ua) {
			ua = ua.toLowerCase();
			var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
				/(webkit)[ \/]([\w.]+)/.exec(ua) ||
				/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
				/(msie) ([\w.]+)/.exec(ua) ||
				/(trident)[ \/](?:.*? rv:([\w.]+)|)/.exec(ua) ||
				ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
				[];
			if (match[1] == "trident") {
				match[1] = "msie"
			}
			return {
				browser: match[1] || "",
				version: match[2] || "0"
			};
		};

		matched = jQuery.uaMatch(navigator.userAgent);
		browser = {};

		if (matched.browser) {
			browser[matched.browser] = true;
			browser.version = matched.version;
		}

		// Chrome is Webkit, but Webkit is also Safari.
		if (browser.chrome) {
			browser.webkit = true;
		} else if (browser.webkit) {
			browser.safari = true;
		}

		jQuery.browser = browser;

		jQuery.sub = function () {
			function jQuerySub(selector, context) {
				return new jQuerySub.fn.init(selector, context);
			}
			jQuery.extend(true, jQuerySub, this);
			jQuerySub.superclass = this;
			jQuerySub.fn = jQuerySub.prototype = this();
			jQuerySub.fn.constructor = jQuerySub;
			jQuerySub.sub = this.sub;
			jQuerySub.fn.init = function init(selector, context) {
				if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
					context = jQuerySub(context);
				}

				return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
			};
			jQuerySub.fn.init.prototype = jQuerySub.fn;
			var rootjQuerySub = jQuerySub(document);
			return jQuerySub;
		};

	})();
	var curCSS,
	iframe,
	iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
	rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
	rrelNum = new RegExp("^([-+])=(" + core_pnum + ")", "i"),
	elemdisplay = {
		BODY: "block"
	},

	cssShow = {
		position: "absolute",
		visibility: "hidden",
		display: "block"
	},
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = ["Top", "Right", "Bottom", "Left"],
	cssPrefixes = ["Webkit", "O", "Moz", "ms"],

	eventsToggle = jQuery.fn.toggle;

	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(style, name) {

		// shortcut for names that are not vendor prefixed
		if (name in style) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;
		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in style) {
				return name;
			}
		}

		return origName;
	}

	function isHidden(elem, el) {
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	}

	function showHide(elements, show) {
		var elem,
		display,
		values = [],
		index = 0,
		length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			values[index] = jQuery._data(elem, "olddisplay");
			if (show) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && elem.style.display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
				}
			} else {
				display = curCSS(elem, "display");

				if (!values[index] && display !== "none") {
					jQuery._data(elem, "olddisplay", display);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		css: function (name, value) {
			return jQuery.access(this, function (elem, name, value) {
				return value !== undefined ?
				jQuery.style(elem, name, value) :
				jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function () {
			return showHide(this, true);
		},
		hide: function () {
			return showHide(this);
		},
		toggle: function (state, fn2) {
			var bool = typeof state === "boolean";

			if (jQuery.isFunction(state) && jQuery.isFunction(fn2)) {
				return eventsToggle.apply(this, arguments);
			}

			return this.each(function () {
				if (bool ? state : isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {
						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;

					}
				}
			}
		},

		// Exclude the following css properties to add px
		cssNumber: {
			"fillOpacity": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function (elem, name, value, extra) {
			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			type,
			hooks,
			origName = jQuery.camelCase(name),
			style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value;

				// convert relative number strings (+= or -=) to relative numbers. #7345
				if (type === "string" && (ret = rrelNum.exec(value))) {
					value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that NaN and null values aren't set. See: #7116
				if (value == null || type === "number" && isNaN(value)) {
					return;
				}

				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if (type === "number" && !jQuery.cssNumber[origName]) {
					value += "px";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
					// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
					// Fixes bug #5509
					try {
						style[name] = value;
					} catch (e) {}
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function (elem, name, numeric, extra) {
			var val,
			num,
			hooks,
			origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name);
			}

			//convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if (numeric || extra !== undefined) {
				num = parseFloat(val);
				return numeric || jQuery.isNumeric(num) ? num || 0 : val;
			}
			return val;
		},

		// A method for quickly swapping in/out CSS properties to get correct calculations
		swap: function (elem, options, callback) {
			var ret,
			name,
			old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.call(elem);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		}
	});

	// NOTE: To any future maintainer, we've window.getComputedStyle
	// because jsdom on node.js will break without it.
	if (window.getComputedStyle) {
		curCSS = function (elem, name) {
			var ret,
			width,
			minWidth,
			maxWidth,
			computed = window.getComputedStyle(elem, null),
			style = elem.style;

			if (computed) {

				// getPropertyValue is only needed for .css('filter') in IE9, see #12537
				ret = computed.getPropertyValue(name) || computed[name];

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
				if (rnumnonpx.test(ret) && rmargin.test(name)) {
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret;
		};
	} else if (document.documentElement.currentStyle) {
		curCSS = function (elem, name) {
			var left,
			rsLeft,
			ret = elem.currentStyle && elem.currentStyle[name],
			style = elem.style;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if (ret == null && style && style[name]) {
				ret = style[name];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are proportional to the parent element instead
			// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
			if (rnumnonpx.test(ret) && !rposition.test(name)) {

				// Remember the original values
				left = style.left;
				rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

				// Put in the new values to get a computed value out
				if (rsLeft) {
					elem.runtimeStyle.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if (rsLeft) {
					elem.runtimeStyle.left = rsLeft;
				}
			}

			return ret === "" ? "auto" : ret;
		};
	}

	function setPositiveNumber(elem, value, subtract) {
		var matches = rnumsplit.exec(value);
		return matches ?
		Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
		value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox) {
		var i = extra === (isBorderBox ? "border" : "content") ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

		val = 0;

		for (; i < 4; i += 2) {
			// both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				// we use jQuery.css instead of curCSS here
				// because of the reliableMarginRight CSS hook!
				val += jQuery.css(elem, extra + cssExpand[i], true);
			}

			// From this point on we use curCSS for maximum performance (relevant in animations)
			if (isBorderBox) {
				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;
				}

				// at this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += parseFloat(curCSS(elem, "padding" + cssExpand[i])) || 0;

				// at this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += parseFloat(curCSS(elem, "border" + cssExpand[i] + "Width")) || 0;
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box";

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return (val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || (isBorderBox ? "border" : "content"),
				valueIsBorderBox)) + "px";
	}

	// Try to determine the default display value of an element
	function css_defaultDisplay(nodeName) {
		if (elemdisplay[nodeName]) {
			return elemdisplay[nodeName];
		}

		var elem = jQuery("<" + nodeName + ">").appendTo(document.body),
		display = elem.css("display");
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if (display === "none" || display === "") {
			// Use the already-created iframe if possible
			iframe = document.body.appendChild(
					iframe || jQuery.extend(document.createElement("iframe"), {
						frameBorder: 0,
						width: 0,
						height: 0
					}));

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if (!iframeDoc || !iframe.createElement) {
				iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
				iframeDoc.write("<!doctype html><html><body>");
				iframeDoc.close();
			}

			elem = iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));

			display = curCSS(elem, "display");
			document.body.removeChild(iframe);
		}

		// Store the correct default display
		elemdisplay[nodeName] = display;

		return display;
	}

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					if (elem.offsetWidth === 0 && rdisplayswap.test(curCSS(elem, "display"))) {
						return jQuery.swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						});
					} else {
						return getWidthOrHeight(elem, name, extra);
					}
				}
			},

			set: function (elem, value, extra) {
				return setPositiveNumber(elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.support.boxSizing && jQuery.css(elem, "boxSizing") === "border-box") : 0);
			}
		};
	});

	if (!jQuery.support.opacity) {
		jQuery.cssHooks.opacity = {
			get: function (elem, computed) {
				// IE uses filters for opacity
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
				(0.01 * parseFloat(RegExp.$1)) + "" :
				computed ? "1" : "";
			},

			set: function (elem, value) {
				var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
				if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "" &&
					style.removeAttribute) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute("filter");

					// if there there is no filter style applied in a css rule, we are done
					if (currentStyle && !currentStyle.filter) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test(filter) ?
					filter.replace(ralpha, opacity) :
					filter + " " + opacity;
			}
		};
	}

	// These hooks cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	jQuery(function () {
		if (!jQuery.support.reliableMarginRight) {
			jQuery.cssHooks.marginRight = {
				get: function (elem, computed) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap(elem, {
						"display": "inline-block"
					}, function () {
						if (computed) {
							return curCSS(elem, "marginRight");
						}
					});
				}
			};
		}

		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// getComputedStyle returns percent when specified for top/left/bottom/right
		// rather than make the css module depend on the offset module, we just check for it here
		if (!jQuery.support.pixelPosition && jQuery.fn.position) {
			jQuery.each(["top", "left"], function (i, prop) {
				jQuery.cssHooks[prop] = {
					get: function (elem, computed) {
						if (computed) {
							var ret = curCSS(elem, prop);
							// if curCSS returns percentage, fallback to offset
							return rnumnonpx.test(ret) ? jQuery(elem).position()[prop] + "px" : ret;
						}
					}
				};
			});
		}

	});

	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.hidden = function (elem) {
			return (elem.offsetWidth === 0 && elem.offsetHeight === 0) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS(elem, "display")) === "none");
		};

		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem);
		};
	}

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function (value) {
				var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value],
				expanded = {};

				for (i = 0; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] =
						parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});
	var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;

	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function () {
			return this.map(function () {
				return this.elements ? jQuery.makeArray(this.elements) : this;
			})
			.filter(function () {
				return this.name && !this.disabled &&
				(this.checked || rselectTextarea.test(this.nodeName) ||
					rinput.test(this.type));
			})
			.map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ?
				null :
				jQuery.isArray(val) ?
				jQuery.map(val, function (val, i) {
					return {
						name: elem.name,
						value: val.replace(rCRLF, "\r\n")
					};
				}) : {
					name: elem.name,
					value: val.replace(rCRLF, "\r\n")
				};
			}).get();
		}
	});

	//Serialize an array of form elements or a set of
	//key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		s = [],
		add = function (key, value) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {
			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {
					// Treat each array item as a scalar.
					add(prefix, v);

				} else {
					// If array item is non-scalar (array or object), encode its
					// numeric index to resolve deserialization ambiguity issues.
					// Note that rack (as of 1.0.0) can't currently deserialize
					// nested arrays properly, and attempting to do so may cause
					// a server error. Possible fixes are to modify rack's
					// deserialization algorithm or to provide an option or flag
					// to force array serialization to be shallow.
					buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
				}
			});

		} else if (!traditional && jQuery.type(obj) === "object") {
			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}

		} else {
			// Serialize scalar item.
			add(prefix, obj);
		}
	}
	var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch (e) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement("a");
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	// Segment location into parts
	ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			list,
			placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split(core_rspace),
			i = 0,
			length = dataTypes.length;

			if (jQuery.isFunction(func)) {
				// For each dataType in the dataTypeExpression
				for (; i < length; i++) {
					dataType = dataTypes[i];
					// We control if we're asked to add before
					// any existing element
					placeBefore = /^\+/.test(dataType);
					if (placeBefore) {
						dataType = dataType.substr(1) || "*";
					}
					list = structure[dataType] = structure[dataType] || [];
					// then we add to the structure accordingly
					list[placeBefore ? "unshift" : "push"](func);
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */) {

		dataType = dataType || options.dataTypes[0];
		inspected = inspected || {};

		inspected[dataType] = true;

		var selection,
		list = structure[dataType],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = (structure === prefilters);

		for (; i < length && (executeOnly || !selection); i++) {
			selection = list[i](options, originalOptions, jqXHR);
			// If we got redirected to another dataType
			// we try there if executing only and not done already
			if (typeof selection === "string") {
				if (!executeOnly || inspected[selection]) {
					selection = undefined;
				} else {
					options.dataTypes.unshift(selection);
					selection = inspectPrefiltersOrTransports(
							structure, options, originalOptions, jqXHR, selection, inspected);
				}
			}
		}
		// If we're only executing or nothing was selected
		// we try the catchall dataType if not done already
		if ((executeOnly || !selection) && !inspected["*"]) {
			selection = inspectPrefiltersOrTransports(
					structure, options, originalOptions, jqXHR, "*", inspected);
		}
		// unnecessary when only executing (prefilters)
		// but it'll be ignored by the caller in that case
		return selection;
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}
	}

	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		// Don't do a request if no elements are being requested
		if (!this.length) {
			return this;
		}

		var selector,
		type,
		response,
		self = this,
		off = url.indexOf(" ");

		if (off >= 0) {
			selector = url.slice(off, url.length);
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && typeof params === "object") {
			type = "POST";
		}

		// Request the remote document
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params,
			complete: function (jqXHR, status) {
				if (callback) {
					self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
				}
			}
		}).done(function (responseText) {

			// Save response for use in complete callback
			response = arguments;

			// See if a selector was specified
			self.html(selector ?

				// Create a dummy div to hold the results
				jQuery("<div>")

				// inject the contents of the document in, removing the scripts
				// to avoid any 'Permission Denied' errors in IE
				.append(responseText.replace(rscript, ""))

				// Locate the specified elements
				.find(selector) :

				// If not, just inject the full result
				responseText);

		});

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
		jQuery.fn[o] = function (f) {
			return this.on(o, f);
		};
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {
			// shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				type: method,
				url: url,
				data: data,
				success: callback,
				dataType: type
			});
		};
	});

	jQuery.extend({

		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		},

		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function (target, settings) {
			if (settings) {
				// Building a settings object
				ajaxExtend(target, jQuery.ajaxSettings);
			} else {
				// Extending ajaxSettings
				settings = target;
				target = jQuery.ajaxSettings;
			}
			ajaxExtend(target, settings);
			return target;
		},

		ajaxSettings: {
			url: ajaxLocation,
			isLocal: rlocalProtocol.test(ajaxLocParts[1]),
			global: true,
			type: "GET",
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			processData: true,
			async: true,
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			 */

			accepts: {
				xml: "application/xml, text/xml",
				html: "text/html",
				text: "text/plain",
				json: "application/json, text/javascript",
				"*": allTypes
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText"
			},

			// List of data converters
			// 1) key format is "source_type destination_type" (a single space in-between)
			// 2) the catchall symbol "*" can be used for source_type
			converters: {

				// Convert anything to text
				"* text": window.String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				context: true,
				url: true
			}
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function (url, options) {

			// If url is an object, simulate pre-1.5 signature
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var // ifModified key
			ifModifiedKey,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup({}, options),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				(callbackContext.nodeType || callbackContext instanceof jQuery) ?
				jQuery(callbackContext) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function (name, value) {
					if (!state) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function () {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function (key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while ((match = rheaders.exec(responseHeadersString))) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function (type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function (statusText) {
					statusText = statusText || strAbort;
					if (transport) {
						transport.abort(statusText);
					}
					done(0, statusText);
					return this;
				}
			};

			// Callback for when everything is done
			// It is defined here because jslint complains if it is declared
			// at the end of the function (which would be more logical and readable)
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				success,
				error,
				response,
				modified,
				statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// If successful, handle type chaining
				if (status >= 200 && status < 300 || status === 304) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {

						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[ifModifiedKey] = modified;
						}
						modified = jqXHR.getResponseHeader("Etag");
						if (modified) {
							jQuery.etag[ifModifiedKey] = modified;
						}
					}

					// If not modified
					if (status === 304) {

						statusText = "notmodified";
						isSuccess = true;

						// If we have data
					} else {

						isSuccess = ajaxConvert(s, response);
						statusText = isSuccess.state;
						success = isSuccess.data;
						error = isSuccess.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if (!statusText || status) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(statusCode);
				statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"),
						[jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
					// Handle the global AJAX counter
					if (!(--jQuery.active)) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			// Attach deferreds
			deferred.promise(jqXHR);
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
			jqXHR.complete = completeDeferred.add;

			// Status-dependent callbacks
			jqXHR.statusCode = function (map) {
				if (map) {
					var tmp;
					if (state < 2) {
						for (tmp in map) {
							statusCode[tmp] = [statusCode[tmp], map[tmp]];
						}
					} else {
						tmp = map[jqXHR.status];
						jqXHR.always(tmp);
					}
				}
				return this;
			};

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// We also use the url parameter if available
			s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(core_rspace);

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if (s.crossDomain == null) {
				parts = rurl.exec(s.url.toLowerCase());
				s.crossDomain = !!(parts &&
					(parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
						(parts[3] || (parts[1] === "http:" ? 80 : 443)) !=
						(ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			fireGlobals = s.global;

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Get ifModifiedKey before adding the anti-cache parameter
				ifModifiedKey = s.url;

				// Add anti-cache in url if needed
				if (s.cache === false) {

					var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace(rts, "$1_=" + ts);

					// if nothing was replaced, add timestamp to the end
					s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				ifModifiedKey = ifModifiedKey || s.url;
				if (jQuery.lastModified[ifModifiedKey]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[ifModifiedKey]);
				}
				if (jQuery.etag[ifModifiedKey]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[ifModifiedKey]);
				}
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
				s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
				s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
				// Abort if not done already and return
				return jqXHR.abort();

			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in {
				success: 1,
				error: 1,
				complete: 1
			}) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;
				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}
				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {
					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);
						// Simply rethrow otherwise
					} else {
						if (getCtpTop() && typeof(getCtpTop().LogoutFlag) != "undefined" && !getCtpTop().LogoutFlag) {
							if (e == "Logout") {
								getCtpTop().LogoutFlag = true;
								getCtpTop().showLogoutMsg("您已退出系统，请重新登录!");
								return;
							} else {
								throw e;
							}
						}
					}
				}
			}

			return jqXHR;
		},

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {}

	});
	/* Handles responses to an ajax request:
	 * - sets all responseXXX fields accordingly
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		type,
		finalDataType,
		firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

		// Fill responseXXX fields
		for (type in responseFields) {
			if (type in responses) {
				jqXHR[responseFields[type]] = responses[type];
			}
		}

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("content-type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0]in responses) {
			finalDataType = dataTypes[0];
		} else {
			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	// Chain conversions given the request and the original response
	function ajaxConvert(s, response) {

		var conv,
		conv2,
		current,
		tmp,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[0],
		converters = {},
		i = 0;

		// Apply the dataFilter if provided
		if (s.dataFilter) {
			response = s.dataFilter(response, s.dataType);
		}

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		// Convert to each sequential dataType, tolerating list modification
		for (; (current = dataTypes[++i]); ) {

			// There's only work to do if current dataType is non-auto
			if (current !== "*") {

				// Convert response if prev dataType is non-auto and differs from current
				if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] ||
									converters["* " + tmp[0]];
								if (conv) {
									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.splice(i--, 0, current);
									}

									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s["throws"]) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}

				// Update prev for next iteration
				prev = current;
			}
		}

		return {
			state: "success",
			data: response
		};
	}
	var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&|$)|\?\?/,
	nonce = jQuery.now();

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		overwritten,
		responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback && rjsonp.test(url),
		replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
			!(s.contentType || "").indexOf("application/x-www-form-urlencoded") &&
			rjsonp.test(data);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (s.dataTypes[0] === "jsonp" || replaceInUrl || replaceInData) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
				s.jsonpCallback() :
				s.jsonpCallback;
			overwritten = window[callbackName];

			// Insert callback into url or form data
			if (replaceInUrl) {
				s.url = url.replace(rjsonp, "$1" + callbackName);
			} else if (replaceInData) {
				s.data = data.replace(rjsonp, "$1" + callbackName);
			} else if (hasCallback) {
				s.url += (rquestion.test(url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {
				// Restore preexisting value
				window[callbackName] = overwritten;

				// Save back as free
				if (s[callbackName]) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});
	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /javascript|ecmascript/
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and global
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
			s.global = false;
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {

			var script,
			head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;

			return {

				send: function (_, callback) {

					script = document.createElement("script");

					script.async = "async";

					if (s.scriptCharset) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function (_, isAbort) {

						if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if (head && script.parentNode) {
								head.removeChild(script);
							}

							// Dereference the script
							script = undefined;

							// Callback if not abort
							if (!isAbort) {
								callback(200, "success");
							}
						}
					};
					// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
					// This arises when a base node is used (#2709 and #4378).
					head.insertBefore(script, head.firstChild);
				},

				abort: function () {
					if (script) {
						script.onload(0, 1);
					}
				}
			};
		}
	});
	var xhrCallbacks,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function () {
		// Abort all pending requests
		for (var key in xhrCallbacks) {
			xhrCallbacks[key](0, 1);
		}
	}
	 : false,
	xhrId = 0;

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP");
		} catch (e) {}
	}

	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject ?
		/* Microsoft failed to properly
		 * implement the XMLHttpRequest in IE7 (can't request local files),
		 * so we use the ActiveXObject when it is available
		 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
		 * we need a fallback.
		 */
	function () {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	}
	 :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

	// Determine support properties
	(function (xhr) {
		jQuery.extend(jQuery.support, {
			ajax: !!xhr,
			cors: !!xhr && ("withCredentials" in xhr)
		});
	})(jQuery.ajaxSettings.xhr());

	// Create transport if the browser can provide an xhr
	if (jQuery.support.ajax) {

		jQuery.ajaxTransport(function (s) {
			// Cross domain only allowed if supported through XMLHttpRequest
			if (!s.crossDomain || jQuery.support.cors) {

				var callback;

				return {
					send: function (headers, complete) {

						// Get a new xhr
						var handle,
						i,
						xhr = s.xhr();

						// Open the socket
						// Passing null username, generates a login popup on Opera (#2865)
						if (s.username) {
							xhr.open(s.type, s.url, s.async, s.username, s.password);
						} else {
							xhr.open(s.type, s.url, s.async);
						}

						// Apply custom fields if provided
						if (s.xhrFields) {
							for (i in s.xhrFields) {
								xhr[i] = s.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (s.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(s.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!s.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Need an extra try/catch for cross domain requests in Firefox 3
						try {
							for (i in headers) {
								xhr.setRequestHeader(i, headers[i]);
							}
						} catch (_) {}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send((s.hasContent && s.data) || null);

						// Listener
						callback = function (_, isAbort) {

							var status,
							statusText,
							responseHeaders,
							responses,
							xml;

							// Firefox throws exceptions when accessing properties
							// of an xhr when a network error occurred
							// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
							try {

								// Was never called and is aborted or complete
								if (callback && (isAbort || xhr.readyState === 4)) {

									// Only called once
									callback = undefined;

									// Do not keep as active anymore
									if (handle) {
										xhr.onreadystatechange = jQuery.noop;
										if (xhrOnUnloadAbort) {
											delete xhrCallbacks[handle];
										}
									}

									// If it's an abort
									if (isAbort) {
										// Abort it manually if needed
										if (xhr.readyState !== 4) {
											xhr.abort();
										}
									} else {
										status = xhr.status;
										responseHeaders = xhr.getAllResponseHeaders();
										responses = {};
										xml = xhr.responseXML;

										// Construct response list
										if (xml && xml.documentElement /* #4958 */) {
											responses.xml = xml;
										}

										// When requesting binary data, IE6-9 will throw an exception
										// on any attempt to access responseText (#11426)
										try {
											responses.text = xhr.responseText;
										} catch (e) {}

										// Firefox throws an exception when accessing
										// statusText for faulty cross-domain requests
										try {
											statusText = xhr.statusText;
										} catch (e) {
											// We normalize with Webkit giving an empty statusText
											statusText = "";
										}

										// Filter status for non standard behaviors

										// If the request is local and we have data: assume a success
										// (success with no data won't get notified, that's the best we
										// can do given current implementations)
										if (!status && s.isLocal && !s.crossDomain) {
											status = responses.text ? 200 : 404;
											// IE - #1450: sometimes returns 1223 when it should be 204
										} else if (status === 1223) {
											status = 204;
										}
									}
								}
							} catch (firefoxAccessException) {
								if (!isAbort) {
									complete(-1, firefoxAccessException);
								}
							}

							// Call complete if needed
							if (responses) {
								complete(status, statusText, responses, responseHeaders);
							}
						};

						if (!s.async) {
							// if we're in sync mode we fire the callback
							callback();
						} else if (xhr.readyState === 4) {
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							setTimeout(callback, 0);
						} else {
							handle = ++xhrId;
							if (xhrOnUnloadAbort) {
								// Create the active xhrs callbacks list if needed
								// and attach the unload handler
								if (!xhrCallbacks) {
									xhrCallbacks = {};
									jQuery(window).unload(xhrOnUnloadAbort);
								}
								// Add to list of active xhrs callbacks
								xhrCallbacks[handle] = callback;
							}
							xhr.onreadystatechange = callback;
						}
					},

					abort: function () {
						if (callback) {
							callback(0, 1);
						}
					}
				};
			}
		});
	}
	var fxNow,
	timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp("^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
	rrun = /queueHooks$/,
	animationPrefilters = [defaultPrefilter],
	tweeners = {
		"*": [function (prop, value) {
				var end,
				unit,
				tween = this.createTween(prop, value),
				parts = rfxnum.exec(value),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

				if (parts) {
					end = +parts[2];
					unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");

					// We need to compute starting value
					if (unit !== "px" && start) {
						// Iteratively approximate from a nonzero starting point
						// Prefer the current property, because this process will be trivial if it uses the same units
						// Fallback to end or a simple constant
						start = jQuery.css(tween.elem, prop, true) || end || 1;

						do {
							// If previous iteration zeroed out, double until we get *something*
							// Use a string for doubling factor so we don't accidentally see scale as unchanged below
							scale = scale || ".5";

							// Adjust and apply
							start = start / scale;
							jQuery.style(tween.elem, prop, start + unit);

							// Update scale, tolerating zero or NaN from tween.cur()
							// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
						} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
					}

					tween.unit = unit;
					tween.start = start;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
				}
				return tween;
			}
		]
	};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function () {
			fxNow = undefined;
		}, 0);
		return (fxNow = jQuery.now());
	}

	function createTweens(animation, props) {
		jQuery.each(props, function (prop, value) {
			var collection = (tweeners[prop] || []).concat(tweeners["*"]),
			index = 0,
			length = collection.length;
			for (; index < length; index++) {
				if (collection[index].call(animation, prop, value)) {

					// we're done with this property
					return;
				}
			}
		});
	}

	function Animation(elem, properties, options) {
		var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always(function () {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
		tick = function () {
			var currentTime = fxNow || createFxNow(),
			remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
			// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
			temp = remaining / animation.duration || 0,
			percent = 1 - temp,
			index = 0,
			length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {}
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function (prop, end, easing) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end,
							animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function (gotoEnd) {
					var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;

					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// resolve when we played the last frame
					// otherwise, reject
					if (gotoEnd) {
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
		props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = animationPrefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				return result;
			}
		}

		createTweens(animation, props);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(
			jQuery.extend(tick, {
				anim: animation,
				queue: animation.opts.queue,
				elem: elem
			}));

		// attach callbacks from options
		return animation.progress(animation.opts.progress)
		.done(animation.opts.done, animation.opts.complete)
		.fail(animation.opts.fail)
		.always(animation.opts.always);
	}

	function propFilter(props, specialEasing) {
		var index,
		name,
		easing,
		value,
		hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	jQuery.Animation = jQuery.extend(Animation, {

			tweener: function (props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.split(" ");
				}

				var prop,
				index = 0,
				length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					tweeners[prop] = tweeners[prop] || [];
					tweeners[prop].unshift(callback);
				}
			},

			prefilter: function (callback, prepend) {
				if (prepend) {
					animationPrefilters.unshift(callback);
				} else {
					animationPrefilters.push(callback);
				}
			}
		});

	function defaultPrefilter(elem, props, opts) {
		var index,
		prop,
		value,
		length,
		dataShow,
		toggle,
		tween,
		hooks,
		oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden(elem);

		// handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			if (jQuery.css(elem, "display") === "inline" &&
				jQuery.css(elem, "float") === "none") {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
					style.display = "inline-block";

				} else {
					style.zoom = 1;
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			if (!jQuery.support.shrinkWrapBlocks) {
				anim.done(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}
		}

		// show/hide pass
		for (index in props) {
			value = props[index];
			if (rfxtypes.exec(value)) {
				delete props[index];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {
					continue;
				}
				handled.push(index);
			}
		}

		length = handled.length;
		if (length) {
			dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
			if ("hidden" in dataShow) {
				hidden = dataShow.hidden;
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;
				jQuery.removeData(elem, "fxshow", true);
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (index = 0; index < length; index++) {
				prop = handled[index];
				tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
				orig[prop] = dataShow[prop] || jQuery.style(elem, prop);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
		}
	}

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ?
			hooks.get(this) :
			Tween.propHooks._default.get(this);
		},
		run: function (percent) {
			var eased,
			hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](
						percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;

				if (tween.elem[tween.prop] != null &&
					(!tween.elem.style || tween.elem.style[tween.prop] == null)) {
					return tween.elem[tween.prop];
				}

				// passing any value as a 4th parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css(tween.elem, tween.prop, false, "");
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function (tween) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Remove in 2.0 - this supports IE8's panic based approach
	// to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ||
			// special check for .toggle( handler, handler, ... )
			(!i && jQuery.isFunction(speed) && jQuery.isFunction(easing)) ?
			cssFn.apply(this, arguments) :
			this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {

			// show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show()

			// animate to the value specified
			.end().animate({
				opacity: to
			}, speed, easing, callback);
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			optall = jQuery.speed(speed, easing, callback),
			doAnimation = function () {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations resolve immediately
				if (empty) {
					anim.stop(true);
				}
			};

			return empty || optall.queue === false ?
			this.each(doAnimation) :
			this.queue(optall.queue, doAnimation);
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--; ) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		}
	});

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		attrs = {
			height: type
		},
		i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: {
			opacity: "show"
		},
		fadeOut: {
			opacity: "hide"
		},
		fadeToggle: {
			opacity: "toggle"
		}
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing ||
			jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.easing = {
		linear: function (p) {
			return p;
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		}
	};

	jQuery.timers = [];
	jQuery.fx = Tween.prototype.init;
	jQuery.fx.tick = function () {
		var timer,
		timers = jQuery.timers,
		i = 0;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];
			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		if (timer() && jQuery.timers.push(timer) && !timerId) {
			timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.stop = function () {
		clearInterval(timerId);
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};

	if (jQuery.expr && jQuery.expr.filters) {
		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};
	}
	var rroot = /^(?:body|html)$/i;

	jQuery.fn.offset = function (options) {
		if (arguments.length) {
			return options === undefined ?
			this :
			this.each(function (i) {
				jQuery.offset.setOffset(this, options, i);
			});
		}

		var docElem,
		body,
		win,
		clientTop,
		clientLeft,
		scrollTop,
		scrollLeft,
		box = {
			top: 0,
			left: 0
		},
		elem = this[0],
		doc = elem && elem.ownerDocument;

		if (!doc) {
			return;
		}

		if ((body = doc.body) === elem) {
			return jQuery.offset.bodyOffset(elem);
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if (!jQuery.contains(docElem, elem)) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if (typeof elem.getBoundingClientRect !== "undefined") {
			box = elem.getBoundingClientRect();
		}
		win = getWindow(doc);
		clientTop = docElem.clientTop || body.clientTop || 0;
		clientLeft = docElem.clientLeft || body.clientLeft || 0;
		scrollTop = win.pageYOffset || docElem.scrollTop;
		scrollLeft = win.pageXOffset || docElem.scrollLeft;
		return {
			top: box.top + scrollTop - clientTop,
			left: box.left + scrollLeft - clientLeft
		};
	};

	jQuery.offset = {

		bodyOffset: function (body) {
			var top = body.offsetTop,
			left = body.offsetLeft;

			if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
				top += parseFloat(jQuery.css(body, "marginTop")) || 0;
				left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
			}

			return {
				top: top,
				left: left
			};
		},

		setOffset: function (elem, options, i) {
			var position = jQuery.css(elem, "position");

			// set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			var curElem = jQuery(elem),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css(elem, "top"),
			curCSSLeft = jQuery.css(elem, "left"),
			calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {},
			curPosition = {},
			curTop,
			curLeft;

			// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {
				options = options.call(elem, i, curOffset);
			}

			if (options.top != null) {
				props.top = (options.top - curOffset.top) + curTop;
			}
			if (options.left != null) {
				props.left = (options.left - curOffset.left) + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({

		position: function () {
			if (!this[0]) {
				return;
			}

			var elem = this[0],

			// Get *real* offsetParent
			offsetParent = this.offsetParent(),

			// Get correct offsets
			offset = this.offset(),
			parentOffset = rroot.test(offsetParent[0].nodeName) ? {
				top: 0,
				left: 0
			}
			 : offsetParent.offset();

			// Subtract element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
			offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;

			// Add offsetParent borders
			parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
			parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;

			// Subtract the two offsets
			return {
				top: offset.top - parentOffset.top,
				left: offset.left - parentOffset.left
			};
		},

		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent || document.body;
				while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || document.body;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({
		scrollLeft: "pageXOffset",
		scrollTop: "pageYOffset"
	}, function (method, prop) {
		var top = /Y/.test(prop);

		jQuery.fn[method] = function (val) {
			return jQuery.access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? (prop in win) ? win[prop] :
					win.document.documentElement[method] :
					elem[method];
				}

				if (win) {
					win.scrollTo(
						!top ? val : jQuery(win).scrollLeft(),
						top ? val : jQuery(win).scrollTop());

				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length, null);
		};
	});

	function getWindow(elem) {
		return jQuery.isWindow(elem) ?
		elem :
		elem.nodeType === 9 ?
		elem.defaultView || elem.parentWindow :
		false;
	}
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({
		Height: "height",
		Width: "width"
	}, function (name, type) {
		jQuery.each({
			padding: "inner" + name,
			content: type,
			"": "outer" + name
		}, function (defaultExtra, funcName) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return jQuery.access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
						return Math.max(
							elem.body["scroll" + name], doc["scroll" + name],
							elem.body["offset" + name], doc["offset" + name],
							doc["client" + name]);
					}

					return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, value, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});
	// Expose jQuery to the global object
	window.jQuery = window.$ = jQuery;

	// Expose jQuery as an AMD module, but only for AMD loaders that
	// understand the issues with loading multiple versions of jQuery
	// in a page that all might call define(). The loader will indicate
	// they have special allowances for multiple jQuery versions by
	// specifying define.amd.jQuery = true. Register as a named module,
	// since jQuery can be concatenated with other files that may use define,
	// but not use a proper concatenation script that understands anonymous
	// AMD modules. A named AMD is safest and most robust way to register.
	// Lowercase jquery is used because AMD module names are derived from
	// file names, and jQuery is normally delivered in a lowercase file name.
	// Do this after creating the global so that if an AMD module wants to call
	// noConflict to hide this version of jQuery, it will work.
	if (typeof define === "function" && define.amd && define.amd.jQuery) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

})(window);
var Class = function (properties) {
	var klass = function () {
		if (this.initialize && arguments[0] != 'noinit')
			return this.initialize.apply(this, arguments);
		else
			return this;
	};
	for (var property in this)
		klass[property] = this[property];
	klass.prototype = properties;
	return klass;
};

Class.empty = function () {};

Class.prototype = {
	extend: function (properties) {
		var pr0t0typ3 = new this('noinit');

		var parentize = function (previous, current) {
			if (!previous.apply || !current.apply)
				return false;
			return function () {
				this.parent = previous;
				return current.apply(this, arguments);
			};
		};

		for (var property in properties) {
			var previous = pr0t0typ3[property];
			var current = properties[property];
			if (previous && previous != current)
				current = parentize(previous, current) || current;
			pr0t0typ3[property] = current;
		}
		return new Class(pr0t0typ3);
	},

	implement: function (properties) {
		for (var property in properties)
			this.prototype[property] = properties[property];
	}

};

Object.extend = function () {
	var args = arguments;
	args = (args[1]) ? [args[0], args[1]] : [this, args[0]];
	for (var property in args[1])
		args[0][property] = args[1][property];
	return args[0];
};

Object.Native = function () {
	for (var i = 0; i < arguments.length; i++)
		arguments[i].extend = Class.prototype.implement;
};

new Object.Native(Function, Array, String, Number, Class);
var CallerResponder = new Class({
		debug: false,
		context: new Object(),
		error: function (C, B, D) {
			if (C.status == 500) {
				var A = C.responseText
			}
			if (this.debug) {
				alert("ajax error: " + C.responseText);
				alert(D)
			}
		},
		complete: function (B, A) {
			if (this.debug) {
				alert("ajax complete")
			}
		},
		beforeSend: function (A) {
			if (this.debug) {
				alert("ajax beforeSend:" + A)
			}
		}
	});
var ajaxCallFunc = function (C, A) {
	var B = typeof(this.m) === "undefined" ? this.jsonGateway : "/seeyon/ajax.do?method=ajaxAction&managerName=" + this.m;
	return ajaxCallFuncInner(B, A, C)
};
function ajaxCallFuncInner(url, bsMethod, args) {
	function isArray(o) {
		return typeof(o) === "object" && (o.constructor === Array)
	}
	function toJSON(o) {
		if (typeof(JSON) !== "undefined") {
			if (JSON.stringify(document.createElement("input").value) === '"null"') {
				return JSON.stringify(o, function (k, v) {
					return v === "" ? "" : v
				})
			} else {
				return JSON.stringify(o)
			}
		} else {
			var m = {
				"\b": "\\b",
				"\t": "\\t",
				"\n": "\\n",
				"\f": "\\f",
				"\r": "\\r",
				'"': '\\"',
				"\\": "\\\\"
			},
			s = {
				array: function (x) {
					var a = ["["],
					b,
					f,
					i,
					l = x.length,
					v;
					for (var i = 0; i < l; i += 1) {
						v = x[i];
						if (v === undefined) {
							v = null
						}
						f = s[typeof v];
						if (f) {
							v = f(v);
							if (typeof v == "string") {
								if (b) {
									a[a.length] = ","
								}
								a[a.length] = v;
								b = true
							}
						}
					}
					a[a.length] = "]";
					return a.join("")
				},
				date: function (x) {
					return s.string(x.dateFormat("Y-m-d"))
				},
				"boolean": function (x) {
					return String(x)
				},
				"null": function (x) {
					return "null"
				},
				number: function (x) {
					return isFinite(x) ? String(x) : "null"
				},
				object: function (x) {
					if (!(typeof(x) === "object")) {
						return "null"
					}
					if (x) {
						if (isArray(x)) {
							return s.array(x)
						} else {
							if (x instanceof Date) {
								return s.date(x)
							}
						}
						var a = ["{"],
						b,
						f,
						i,
						v;
						for (var i in x) {
							v = x[i];
							f = s[typeof v];
							if (f) {
								v = f(v);
								if (typeof v == "string") {
									if (b) {
										a[a.length] = ","
									}
									a.push(s.string(i), ":", v);
									b = true
								}
							}
						}
						a[a.length] = "}";
						return a.join("")
					}
					return "null"
				},
				string: function (x) {
					if (/["\\\x00-\x1f]/.test(x)) {
						x = x.replace(/([\x00-\x1f\\"])/g, function (a, b) {
								var c = m[b];
								if (c) {
									return c
								}
								c = b.charCodeAt();
								return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
							})
					}
					return '"' + x + '"'
				},
				"function": function (x) {
					return x.toString().match(/function\s+([^\s\(]+)/)[1]
				}
			};
			var f;
			if (isNaN(o)) {
				f = s[typeof o]
			} else {
				f = (isArray(o)) ? s.array : s.number
			}
			if (f) {
				return f(o)
			}
		}
	}
	function parseJSON(json) {
		if ((navigator.userAgent.appName == "Microsoft Internet Explorer" || navigator.userAgent.indexOf("Trident") != -1) && navigator.userAgent.indexOf("MSIE 8") != -1) {
			return eval("(" + json + ")")
		}
		if ($ != null) {
			return $.parseJSON(json)
		}
	}
	function extend() {
		var target = arguments[0],
		a = 1;
		if (arguments.length == 1) {
			target = this;
			a = 0
		}
		var prop;
		while (prop = arguments[a++]) {
			for (var i in prop) {
				target[i] = prop[i]
			}
		}
		return target
	}
	function param(a) {
		var s = [];
		if (a.constructor == Array) {
			for (var index = 0; index < a.length; index++) {
				var element = a[index];
				s.push(encodeURIComponent(element.name) + "=" + encodeURIComponent(element.value))
			}
		} else {
			for (var j in a) {
				if (a[j] && a[j].constructor == Array) {
					for (var index = 0; index < a[j].length; index++) {
						var element = a[j][index];
						s.push(encodeURIComponent(j) + "=" + encodeURIComponent(element.value))
					}
				} else {
					s.push(encodeURIComponent(j) + "=" + encodeURIComponent(a[j]))
				}
			}
		}
		return s.join("&")
	}
	function ajax(settings) {
		var xhr = new XMLHttpRequest();
		if (settings.async) {
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {
					if (xhr.status == 200) {
						settings.success && settings.success(parseJSON(xhr.responseText))
					} else {
						settings.error && settings.error(xhr)
					}
					settings.complete && settings.complete(xhr, xhr.status)
				}
			}
		}
		xhr.open("POST", settings.url, settings.async);
		xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
		xhr.setRequestHeader("RequestType", "AJAX");
		CsrfGuard.beforeAjaxSend(xhr);
		xhr.send(param(settings.data));
		if (!settings.async) {
			if (xhr.readyState == 4) {
				if (xhr.status == 200) {
					settings.success && settings.success(parseJSON(xhr.responseText))
				} else {
					if (xhr.getResponseHeader("ErrorCode") == "40401") {
						if ($.ctx.CurrentUser != null) {
							var notTheSameOneMsg = $.i18n("loginUserState.notTheSameOne", "Guest", $.ctx.CurrentUser.name);
							alert(notTheSameOneMsg)
						} else {
							if (top.vPortal != null && top.vPortal.CurrentUser != null) {
								var notTheSameOneMsg = $.i18n("loginUserState.notTheSameOne", "Guest", top.vPortal.CurrentUser.name);
								alert(notTheSameOneMsg)
							}
						}
					} else {
						settings.error && settings.error(xhr)
					}
				}
				settings.complete && settings.complete(xhr, xhr.status)
			}
		}
	}
	var setting = null;
	if (args.length >= 1) {
		var tmpArg_2 = args[args.length - 1];
		if (tmpArg_2 != null && typeof(tmpArg_2.success) === "function") {
			setting = tmpArg_2;
			Array.prototype.splice.apply(args, [args.length - 1, 1])
		}
	}
	var newArgs = new Array();
	for (var i = 0; i < args.length; i++) {
		newArgs[i] = args[i];
		if (typeof($) !== "undefined" && typeof($_isInVInValid) !== "undefined" && $._isInVInValid(newArgs[i])) {
			return null
		}
	}
	var data = new Object();
	data.managerMethod = bsMethod;
	data.arguments = toJSON(newArgs);
	var _async = true;
	var result = null;
	if (setting && setting.success) {
		_async = true;
		setting = extend(new CallerResponder(), setting)
	} else {
		_async = false;
		setting = new CallerResponder();
		setting.success = function (jsonObj) {
			if (typeof jsonObj === "string") {
				if (jsonObj == "__LOGOUT") {
					throw "Logout"
				}
				try {
					result = parseJSON(jsonObj);
					if (typeof result === "number") {
						result = jsonObj
					}
				} catch (e) {
					result = jsonObj
				}
			} else {
				result = jsonObj
			}
		}
	}
	ajax({
		url: url + "&rnd=" + parseInt(Math.random() * 100000),
		data: data,
		dataType: "json",
		async: _async,
		success: setting.success,
		error: setting.error,
		complete: setting.complete
	});
	return result
}
var RemoteJsonService = new Class({
		jsonGateway: "/json/",
		async: true,
		ajaxCall: ajaxCallFunc,
		c: ajaxCallFunc
	});
var RJS = RemoteJsonService;
function callBackendMethod(C, A) {
	var B = "/seeyon/ajax.do?method=ajaxAction&managerName=" + C;
	return ajaxCallFuncInner(B, A, Array.prototype.slice.call(arguments, 2))
};
(function ($) {
	var m = {
		"\b": "\\b",
		"\t": "\\t",
		"\n": "\\n",
		"\f": "\\f",
		"\r": "\\r",
		'"': '\\"',
		"\\": "\\\\"
	},
	s = {
		array: function (x) {
			var a = ["["],
			b,
			f,
			i,
			l = x.length,
			v;
			for (var i = 0; i < l; i += 1) {
				v = x[i];
				if (v === undefined) {
					v = null
				}
				f = s[typeof v];
				if (f) {
					v = f(v);
					if (typeof v == "string") {
						if (b) {
							a[a.length] = ","
						}
						a[a.length] = v;
						b = true
					}
				}
			}
			a[a.length] = "]";
			return a.join("")
		},
		date: function (x) {
			return s.string(x.dateFormat("Y-m-d"))
		},
		"boolean": function (x) {
			return String(x)
		},
		"null": function (x) {
			return "null"
		},
		number: function (x) {
			return isFinite(x) ? String(x) : "null"
		},
		object: function (x) {
			if (!(typeof(x) === "object")) {
				return "null"
			}
			if (x) {
				if ($.isArray(x)) {
					return s.array(x)
				} else {
					if (x instanceof Date) {
						return s.date(x)
					}
				}
				var a = ["{"],
				b,
				f,
				i,
				v;
				for (var i in x) {
					v = x[i];
					f = s[typeof v];
					if (f) {
						v = f(v);
						if (typeof v == "string") {
							if (b) {
								a[a.length] = ","
							}
							a.push(s.string(i), ":", v);
							b = true
						}
					}
				}
				a[a.length] = "}";
				return a.join("")
			}
			return "null"
		},
		string: function (x) {
			if (/["\\\x00-\x1f]/.test(x)) {
				x = x.replace(/([\x00-\x1f\\"])/g, function (a, b) {
						var c = m[b];
						if (c) {
							return c
						}
						c = b.charCodeAt();
						return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
					})
			}
			return '"' + x + '"'
		},
		"function": function (x) {
			return x.toString().match(/function\s+([^\s\(]+)/)[1]
		}
	};
	jQuery.toJSON = function (v) {
		var f;
		if (isNaN(v)) {
			f = s[typeof v]
		} else {
			f = ($.isArray(v)) ? s.array : s.number
		}
		if (f) {
			return f(v)
		}
	};
	jQuery.parseJSON = function (v, safe) {
		if (safe === undefined) {
			safe = jQuery.parseJSON.safe
		}
		if (safe && !/^("(\\.|[^"\\\n\r])*?"|[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t])+?$/.test(v)) {
			return undefined
		}
		return eval("(" + v + ")")
	};
	jQuery.parseJSON.safe = false
})(jQuery);
(function (A) {
	A.fn.jsonSubmit = function (L) {
		var J = "_js_frm" + new Date().getTime();
		var F = {
			isMask: true,
			validate: true,
			ajax: false,
			async: false
		};
		L = A.extend(F, L);
		if (L.isMask) {
			showMask && showMask()
		}
		var K = this.formobj(L);
		if (L.paramObj) {
			if (A.isArray(K)) {
				K = {}
			}
			for (var B in L.paramObj) {
				K[B] = L.paramObj[B]
			}
		}
		var G = L.action || this.attr("action");
		if (G == null || A.trim(G) == "") {
			alert("you don't set action attribute!");
			hideMask && hideMask();
			return
		}
		if (L.validate && A._isInValid(K)) {
			hideMask && hideMask();
			if (typeof L.collbackError == "function") {
				L.collbackError()
			}
			return
		}
		if (L.beforeSubmit && L.beforeSubmit(K, this, L) === false) {
			hideMask && hideMask();
			return
		}
		var E = A.toJSON(K);
		if (L.ajax == true) {
			A.ajax({
				async: L.async,
				type: "post",
				url: G,
				data: {
					_json_params: E
				},
				beforeSend: CsrfGuard.beforeAjaxSend,
				error: function (N) {
					if (N.getResponseHeader("ErrorCode") == 40401) {
						if (A.ctx.CurrentUser != null) {
							var M = A.i18n("loginUserState.notTheSameOne", "Guest", A.ctx.CurrentUser.name);
							alert(M)
						} else {
							if (top.vPortal != null && top.vPortal.CurrentUser != null) {
								var M = A.i18n("loginUserState.notTheSameOne", "Guest", top.vPortal.CurrentUser.name);
								alert(M)
							}
						}
					} else {
						alert("error\uff0cform submit fail ! url:" + G);
						if (typeof L.collbackError == "function") {
							L.collbackError()
						}
					}
				},
				success: function (M) {
					if (typeof L.callback == "function") {
						L.callback(M)
					}
				}
			})
		} else {
			var D = window;
			if (L.targetWindow) {
				D = L.targetWindow
			}
			var H = A('<form method="post" action="' + G + '"><input type="hidden" name="CSRFTOKEN" value="' + CsrfGuard.getToken() + '"/><input type="hidden" id="_json_params" name="_json_params" value=""/></form>', D.document);
			A(D.document.body).append(H);
			D = null;
			if (typeof L.callback == "function") {
				var C = A('<iframe id="' + J + '" name="' + J + '" style="display:none;"></iframe>', H[0].ownerDocument);
				A("body", H[0].ownerDocument).append(C);
				C.load(function () {
					var M = A(this).contents().find("body").html();
					if (M) {
						M = M.replace(/<\s*\/?\s*(embed|pre)[^<>]*>/g, "")
					} else {
						M = ""
					}
					L.callback(M);
					try {
						A(this).remove()
					} catch (N) {}
				});
				C = null;
				H.attr("target", J)
			} else {
				if (L.target) {
					H.attr("target", L.target)
				}
			}
			H.find("#_json_params").val(E);
			if (L.debug && _isDevelop) {
				alert("JSON data format:\n" + E)
			}
			A.confirmClose(false);
			H.submit();
			H.remove();
			H = null
		}
		try {
			if (L.isMask) {
				hideMask && hideMask()
			}
		} catch (I) {}
	};
	A.fn.formobj = function (M) {
		if (this[0] == null) {
			return {}
		}
		var F = {
			needSubmitFilter: null,
			gridFilter: null,
			validate: true,
			errorIcon: true,
			errorAlert: false,
			errorBg: false,
			includeDisabled: true
		};
		M = A.extend(F, M);
		var N = M.domains;
		if (N && N.length > 0) {
			var G = {};
			if (A("#attachmentArea").length > 0) {
				var K = A("<div></div>");
				K.attr("id", "attachmentInputs");
				K.attr("style", "display:none;");
				K.attr("isGrid", "true");
				this.append(K);
				saveAttachment();
				N.push("attachmentInputs")
			}
			for (var J = 0; J < N.length; J++) {
				var B = N[J],
				L = B == this.attr("id") ? this : A("#" + B, this),
				E;
				var I = A("." + B),
				D = I.length;
				if (D > 0 && M.matchClass) {
					E = [];
					var C = [];
					for (var H = 0; H < N.length; H++) {
						if (H != J) {
							C.push(N[H])
						}
					}
					I.each(function (Q) {
						L = A(this);
						var R = A.jsonDomain(L, M);
						if (A._isInValid(R) && !A._isInValid(E)) {
							A._invalidObj(E)
						}
						E.push(R);
						for (var O = 0; O < C.length; O++) {
							var P = A.jsonDomain(A("#" + C[O], L), M);
							if (A._isInValid(P) && !A._isInValid(E)) {
								A._invalidObj(E)
							}
							R[C[O]] = P
						}
					});
					if (M.isGrid) {
						G = E
					} else {
						if (E.length == 1) {
							G = E[0]
						}
					}
					break
				} else {
					E = A.jsonDomain(L, M);
					G[B] = E;
					if (A._isInValid(E) && !A._isInValid(G)) {
						A._invalidObj(G)
					}
				}
			}
			return G
		} else {
			return A.jsonDomain(this, M)
		}
	};
	A.jsonDomain = function (J, P) {
		P = P || {};
		var N = [],
		H = null,
		L = P.gridFilter,
		D = J.attr("isGrid") ? J.attr("isGrid") : false,
		E = true,
		F,
		K = [],
		C = P.domains,
		M = P.includeDisabled;
		var I = P.needSubmitFilter;
		if (C) {
			for (var G = 0; G < C.length; G++) {
				var O = C[G];
				if (J[0] && O != J[0].id && A("#" + O, J).length > 0) {
					K.push(O)
				}
			}
		}
		A("table,input,textarea,select", J).add(J).filter(function (X) {
			if (!this.id && !this.name) {
				return false
			}
			if (I && !I(this)) {
				return false
			}
			for (var T = 0; T < K.length; T++) {
				var Y = K[T];
				if (A(this).parents("#" + Y).length > 0) {
					return false
				}
			}
			var Q = this,
			Z = Q.tagName.toLowerCase(),
			R = Q.id ? Q.id : Q.name;
			if (Z && R && (M || !Q.disabled) && !Q.ignore) {
				switch (Z) {
				case "table":
					if (Q.grid && Q.p.datas) {
						var S = Q.p.datas.rows;
						A(S).each(function (a) {
							if (L && !L(S[a], A("tbody tr", A(Q)).get(a))) {
								return
							}
							N.push(S[a])
						});
						D = true
					}
					break;
				case "input":
					var W = Q.type;
					if (W == "button" || W == "reset" || W == "submit" || W == "image" || R == "_json_params") {
						break
					}
				case "textarea":
					if (Z == "textarea") {
						var V = A(Q).attr("comp");
						if (V && A.parseJSON("{" + V + "}").type == "editor") {
							A(Q).val(A(Q).getEditorContent());
							break
						}
						if (V && A.parseJSON("{" + V + "}").type == "aceEditor") {
							var U = ace.editor(A(Q).attr("id") + "Ace");
							A(Q).val(U.getValue());
							break
						}
					}
				case "select":
					if (H && R in H) {
						if (Q.type != "radio") {
							H = {};
							N.push(H)
						}
					}
					var Y = A.ctpFieldValue(Q, true, M);
					if (!H) {
						H = new Object();
						N.push(H)
					}
					if (!H[R]) {
						H[R] = Y
					}
				}
			}
			return false
		});
		if (P.validate) {
			E = A(J).validate({
					errorIcon: P.errorIcon,
					errorAlert: P.errorAlert,
					errorBg: P.errorBg
				})
		}
		if (N.length == 1 && !D) {
			F = N[0]
		} else {
			if (L) {
				var B = [];
				for (var G = 0; G < N.length; G++) {
					if (!L(N[G])) {
						continue
					}
					B.push(N[G])
				}
				N = B
			}
			F = N
		}
		if (!E) {
			A._invalidObj(F)
		}
		return F
	};
	A.ctpFieldValue = function (C, H, L) {
		var D = C.id ? C.id : C.dataIndex ? C.dataIndex : C.name,
		N = C.type,
		O = C.tagName.toLowerCase();
		if (typeof H == "undefined") {
			H = true
		}
		if (H && (!D || (!L && C.disabled) || N == "reset" || N == "button" || (N == "checkbox" || N == "radio") && !C.checked || (N == "submit" || N == "image") && C.form && C.form.clk != C || O == "select" && C.selectedIndex == -1)) {
			if (parseInt(A(C).attr("returnunchecked")) != 1) {
				return null
			}
			if (parseInt(A(C).attr("returnunchecked")) == 1 && (N == "radio") && !C.checked) {
				return ""
			}
		}
		if (O == "select") {
			var I = C.selectedIndex;
			if (I < 0) {
				return null
			}
			var K = [],
			B = C.options;
			var F = (N == "select-one");
			var J = (F ? I + 1 : B.length);
			for (var E = (F ? I : 0); E < J; E++) {
				var G = B[E];
				if (G.selected) {
					var M = G.value;
					if (F) {
						return M
					}
					K.push(M)
				}
			}
			return K
		}
		return C.value
	}
})(jQuery);
$.ctx = {};
var isFormSubmit = true;
$.extend(Function.prototype, {
	defer: function (delay) {
		var timer,
		callback = this,
		fn = function () {
			var that = this,
			args = arguments;
			window.clearTimeout(timer);
			timer = window.setTimeout(function () {
					callback.apply(that, args);
				}, delay);
		};
		fn();
		return 0;
	}
});
$.extendParam = function (tpl, para) {
	for (var v in para) {
		if (!(para[v]instanceof Array)) {
			tpl[v] = para[v];
		}
	}
	return tpl;
};

var isPDFReaderInited = false;
/**
 * @deprecated 这个方法在iframe中，部分IE有性能问题，浏览器会卡死， 不建议使用
 */
function isPDFReaderEnabled() {
	try {
		if (isPDFReaderInited == false) {
			isPDFReaderInited = true;
			new ActiveXObject("iWebPDF.PDFReader");
		}
	} catch (e) {
		return false;
	}
	return true;
}

$.ctx.isOfficeEnabled = function (officeType) {
	var mt = officeType,
	f = true;
	if (!$.browser.msie) {
		return true;
	}
	var cacheKey = 'ctx.isOfficeEnabled.' + officeType;
	var storage = window.sessionStorage;
	if (typeof storage !== 'undefined' && window.sessionStorage !== null) {
		var cachedItem = storage.getItem(cacheKey)
			if (cachedItem != undefined) {
				return cachedItem;
			}
	}
	try {
		if (!$.ctx._mainbodyOcxObj && (mt == ".doc" || mt == ".xls" || mt == ".wps" || mt == ".et" || (mt > 40 && mt < 45))) {
			if (v3x.isMSIE && (navigator.cpuClass.indexOf("x86") != -1 ? false : true)) {
				$.ctx._mainbodyOcxObj = new ActiveXObject("Kinggrid.iWebOffice_x64");
			} else {
				$.ctx._mainbodyOcxObj = new ActiveXObject("Kinggrid.iWebOffice");
			}
		}
		if (mt == ".doc" || mt == 41)
			f = $.ctx._mainbodyOcxObj.WebApplication(".doc");
		//if(!f){//安装了wps也能编辑doc文件
		//   f = $.ctx._mainbodyOcxObj.WebApplication(".wps");
		//}
		else if (mt == ".xls" || mt == 42)
			f = $.ctx._mainbodyOcxObj.WebApplication(".xls");
		//if(!f){//安装了wps也能编辑xls文件
		//	f = $.ctx._mainbodyOcxObj.WebApplication(".et");
		//}
		else if (mt == ".wps" || mt == 43)
			f = $.ctx._mainbodyOcxObj.WebApplication(".wps");
		else if (mt == ".et" || mt == 44)
			f = $.ctx._mainbodyOcxObj.WebApplication(".et");
		else if (mt == ".pdf" || mt == 45) {
			//f = isPDFReaderEnabled();
			//PDF 直接设置成可用，  因为ie下面有性能问题，导致浏览器崩溃，暂时这样处理
			f = true;
		}
	} catch (e) {
		f = false;
	}
	if (typeof storage !== 'undefined' && window.sessionStorage !== null) {
		storage.setItem(cacheKey, f);
	}
	return f;
};
$.ctx._hasPrivJudge = function (pc, isPlugin) {
	var flag = false,
	pcs;
	if (pc && (isPlugin ? $.ctx.plugins : $.ctx.resources)) {
		if (pc.indexOf("&") != -1) {
			flag = true;
			pcs = pc.split("&");
			for (var i = 0; i < pcs.length; i++) {
				if (isPlugin ? !$.ctx.plugins.contains(pcs[i].trim()) : !$.ctx.resources.contains(pcs[i].trim())) {
					flag = false;
					break;
				}
			}
		} else if (pc.indexOf("|") != -1) {
			pcs = pc.split("|");
			for (var i = 0; i < pcs.length; i++) {
				if (isPlugin ? $.ctx.plugins.contains(pcs[i].trim()) : $.ctx.resources.contains(pcs[i].trim())) {
					flag = true;
					break;
				}
			}
		} else
			flag = isPlugin ? $.ctx.plugins.contains(pc.trim()) : $.ctx.resources.contains(pc.trim());
	}
	return flag;
};
$.ctx.hasPlugin = function (pi) {
	return $.ctx._hasPrivJudge(pi, true);
};
$.ctx.hasResource = function (rc) {
	return $.ctx._hasPrivJudge(rc, false);
};
$.privCheck = function (rc, pi, passCallback, failCallback) {
	if (!passCallback)
		passCallback = function () {};
	if (!failCallback)
		failCallback = function () {};
	if (_isDevelop) {
		passCallback();
	} else {
		if (pi && $.ctx.hasPlugin(pi)) {
			if (rc && $.ctx.hasResource(rc))
				passCallback();
			else if (!rc)
				passCallback();
			else
				failCallback();
		} else if (!pi && rc) {
			if ($.ctx.hasResource(rc))
				passCallback();
			else
				failCallback();
		} else if (!pi && !rc)
			passCallback();
		else
			failCallback();
	}
};
var _safriDoubleKeyIgnoreKeys = [32, 192, 186, 187, 188, 189, 190, 191, 219, 220, 221, 222, 13];
$.handleModalDialogInputKeyEvent = function () {
	var ua = navigator.vendor,
	pf = navigator.platform;
	if (ua && ua.indexOf('Apple') != -1 && pf && pf.indexOf('Win') != -1) {
		var ime = false;
		$(":input").keyup(function (evt) {
			handleSafriDoubleKey(this, evt);
		}).keydown(function (evt) {
			if (evt.keyCode == 229)
				ime = true;
			else
				ime = false;
		});
		function handleSafriDoubleKey(obj, evt) {
			if (ime)
				return;
			var kc = evt.keyCode;
			if (((kc < 48 || kc > 111) && !_safriDoubleKeyIgnoreKeys.contains(kc)) || evt.ctrlKey || evt.altKey) {
				return;
			}
			if (kc == 13 && obj.type !== 'textarea')
				return;
			var st = obj.selectionStart,
			vl = obj.value,
			v;
			if (st > 0) {
				v = vl.substring(0, st - 1);
				if (st < vl.length) {
					v += vl.substring(st);
				}
			}
			obj.value = v;
			obj.setSelectionRange(st - 1, st - 1);
		}
	}
};
// disable mouse context menu
// document.oncontextmenu=new Function("event.returnValue=false;");
$()
.ready(
	function () {
	if ($.ctx && $.ctx.disableAutoInit) {
		return;
	}
	$(".comp").each(function (i) {
		$(this).compThis();
	});
	if ($.codeoption)
		$.codeoption();
	if ($.autofillform)
		$.autofillform({
			fillmaps: $.ctx.fillmaps
		});
	if ($.codetext)
		$.codetext();
	$(".resCode").each(function (i) {
		var t = $(this),
		rc = t.attr("resCode"),
		pi = t.attr("pluginId");
		$.privCheck(rc, pi, function () {
			t.show();
		}, function () {
			t.hide();
		});
	});
	CallerResponder.prototype = {
		error: function (request, settings, e) {
			try {
				var eo = $.parseJSON(request.responseText);
				if (!eo.details) {
					// $.messageBox({
					// title : 'Message',
					// msg : eo.message
					// });
					$.alert({
						'msg': eo.message,
						'close_fn': function () {
							try {
								if (getCtpTop() && getCtpTop().endProc)
									getCtpTop().endProc();
							} catch (e) {}
						},
						'ok_fn': function () {
							try {
								if (getCtpTop() && getCtpTop().endProc)
									getCtpTop().endProc();
							} catch (e) {}
						}
					});
				} else {
					$("body")
					.append(
						'<div id="errorDiv" style="display: none" width="600"><div id="errMsg"></div><br><textarea id="errDetails" rows="15" style="width: 500; font-size: 10pt" readonly="readonly"></textarea></div>');
					$("#errMsg").text(
						'Error message(' + eo.code + '):' + eo.message);
					$("#errDetails").text(eo.details);
					var dialog = $.dialog({
							title: 'Error!',
							htmlId: 'errorDiv',
							width: 520,
							height: 300,
							targetWindow: getCtpTop(),
							buttons: [{
									text: "Close",
									handler: function () {
										$("#errorDiv").remove();
										var el = dialog.getObjectById('errorDiv');
										if (el)
											el.remove();
										dialog.close();
										hideMask();
									}
								}
							]
						});
				}
			} catch (ee) {}
		}
	};
	(function () {
		try {
			if (_isModalDialog) {
				$.handleModalDialogInputKeyEvent();
				// fix session invalid problem caused by modal dialog block
				var hangup_interval = setInterval(function () {
						$.ajax({
							url: _ctxPath + "/main.do?method=hangup&t=" + Math.random() * 100000000,
							async: true
						});
					}, 30000);
			}
		} catch (e) {}
		// change the default action of reset button
		$("input:reset").each(
			function () {
			$("input:text,select,input:checkbox,input:password",
				$(this).parents("form")).each(function () {
				if (this.type == 'checkbox') {
					$(this).attr("coriginValue", this.checked);
				}
				$(this).attr("originValue", $(this).val());
			});
			var t = $(this);
			var c = $("<input type='button' />");
			c.attr("id", t.attr("id"));
			c.attr("className", t.attr("className") + " button_3");
			c.attr("style", t.attr("style"));
			c.attr("name", t.attr("name"));
			c.onmuseover = this["onmuseover"];
			c.val(t.val());
			t.after(c);
			t.remove();
			c.click(function () {
				$("input:text,select,input:checkbox,input:password",
					$(this).parents("form")).each(
					function () {
					if ($(this).attr("originValue"))
						$(this).val($(this).attr("originValue"));
					else
						$(this).val("");
					if (this.tagName.toUpperCase() == 'SELECT') {
						for (var i = 0; i < this.options.length; i++) {
							if (this.options[i].value == $(this).attr(
									"originValue")) {
								this.options[i].selected = true;
							}
						}
					}
					if (this.type == 'checkbox') {
						if ($(this).attr("coriginValue") != 'true') {
							this.checked = false;
						} else {
							this.checked = true;
						}
					}
				});
			});

		});

		function parseDate(str) {
			if (typeof str == 'string' && str.length > 10) {
				return str.substring(0, 10);
			}
			return str;
		}
		/*
		 * $("#savebtn").attr("alt", "\u5feb\u6377\u952e:(alt+s)");
		 * $("#returnbtn").attr("alt", "\u5feb\u6377\u952e:(alt+c)");
		 * $("#resetbtn").attr("alt", "\u5feb\u6377\u952e:(alt+r)");
		 * $("#findbtn").attr("alt", "\u5feb\u6377\u952e:(alt+w)");
		 * $("#calbtn").attr("alt", "\u5feb\u6377\u952e:(alt+z)");
		 * $("#addbtn").attr("alt", "\u5feb\u6377\u952e:(alt+x)");
		 * $("#deletebtn").attr("alt", "\u5feb\u6377\u952e:(alt+q)");
		 * $("#printbtn").attr("alt", "\u5feb\u6377\u952e:(alt+p)");
		 * $("#readicbtn").attr("alt", "\u5feb\u6377\u952e:(alt+b)");
		 * $("#choosebtn").attr("alt", "\u5feb\u6377\u952e:(alt+g)");
		 */
		if (document.all) {
			$("a[href='javascript:void(0)']").click(function (e) {
				e.preventDefault();
			});
		}

	}).defer(0, this);
	/*
	 * $.hotkeys.add(keyObj.savebtn, function() { $('#savebtn').click();
	 * }); $.hotkeys.add(keyObj.returnbtn, function() {
	 * $('#returnbtn').click(); }); $.hotkeys.add(keyObj.resetbtn,
	 * function() { $('#resetbtn').click(); });
	 * $.hotkeys.add(keyObj.findbtn, function() { $('#findbtn').click();
	 * }); $.hotkeys.add(keyObj.calbtn, function() { $('#calbtn').click();
	 * }); $.hotkeys.add(keyObj.addbtn, function() { $('#addbtn').click();
	 * }); $.hotkeys.add(keyObj.deletebtn, function() {
	 * $('#deletebtn').click(); }); $.hotkeys.add(keyObj.printbtn,
	 * function() { $('#printbtn').click(); });
	 * $.hotkeys.add(keyObj.readicbtn, function() {
	 * $('#readicbtn').click(); }); $.hotkeys.add(keyObj.choosebtn,
	 * function() { $('#choosebtn').click(); });
	 */
});
Date.prototype.isBefore = function (odate) {
	var t1 = parseInt(this.format('Ymd')),
	t2 = parseInt(odate.format('Ymd'));
	return t1 > t2 ? -1 : (t1 < t2 ? 1 : 0);
};
Date.prototype.before = function (interval, odate) {
	if (!interval || !odate)
		return 0;
	var before = 0,
	d,
	positive = true,
	bdate = this,
	adate = odate;
	if (this.isBefore(odate) == -1) {
		positive = false;
		bdate = odate;
		adate = this;
	}
	d = bdate.clone();
	switch (interval.toLowerCase()) {
	case Date.MONTH:
		while (true) {
			if (d.getYear() == adate.getYear() && d.getMonth() == adate.getMonth()) {
				break;
			} else {
				before++;
				d = d.add(Date.MONTH, 1);
			}
		}
		break;
	case Date.YEAR:
		while (true) {
			if (d.getYear() == adate.getYear()) {
				break;
			} else {
				before++;
				d = d.add(Date.YEAR, 1);
			}
		}
		break;
	}
	if (!positive)
		before *= -1;
	return before;
};
Date.prototype.roundBefore = function (interval, odate) {
	var before,
	bDate = this,
	aDate = odate,
	positive = true;
	if (this.isBefore(odate) == -1) {
		positive = false;
		bdate = odate;
		adate = this;
	}

	before = bDate.before(interval, aDate);

	var bDay = bDate.getDate(),
	aDay = aDate.getDate();
	switch (interval.toLowerCase()) {
	case Date.MONTH:
		if (aDay < bDay) {
			before--;
		}
		break;
	case Date.YEAR:
		var bMonth = bDate.getMonth(),
		aMonth = aDate.getMonth();
		if (aMonth < bMonth) {
			before--;
		} else if (aMonth == bMonth) {
			if (aDay < bDay) {
				before--;
			}
		}
		break;
	}

	if (!positive)
		before *= -1;
	return before;
};
function isBefore(bDateStr, aDateStr) {
	var bDate = Date.parseDate(bDateStr, 'Y-m-d');
	var aDate = Date.parseDate(aDateStr, 'Y-m-d');
	return bDate.isBefore(aDate);
}
function before(interval, bDateStr, aDateStr) {
	var bDate = Date.parseDate(bDateStr, 'Y-m-d');
	var aDate = Date.parseDate(aDateStr, 'Y-m-d');
	return bDate.before(interval, aDate);
}
function roundBefore(interval, bDateStr, aDateStr) {
	var bDate = Date.parseDate(bDateStr, 'Y-m-d');
	var aDate = Date.parseDate(aDateStr, 'Y-m-d');
	return bDate.roundBefore(interval, aDate);
}
/*
 * var keyObj = new Object(); keyObj.savebtn = "alt+s"; keyObj.returnbtn =
 * "alt+c"; keyObj.resetbtn = "alt+r"; keyObj.findbtn = "alt+w"; keyObj.calbtn =
 * "alt+z"; keyObj.addbtn = "alt+x"; keyObj.deletebtn = "alt+q"; keyObj.printbtn =
 * "alt+p"; keyObj.readicbtn = "alt+b"; keyObj.choosebtn = "alt+g";
 */
(function ($) {
	$.fn.switchClone = function (da, hc) {
		var t = this;
		if (!t.attr("_isclone")) {
			var tc = t.attrObj("tmpclone");
			if (!tc) {
				tc = t.clone();
				if (hc) {
					hc(t[0].tagName.toLowerCase(), tc);
				}
				tc.attr("_isclone", 1);
				t.attrObj("tmpclone", tc);
				t.after(tc);
			}
			if (t.attr("_hide") == 1) {
				if (!da) {
					t.show();
					t.attr("_hide", 0);
					tc.hide();
				}
			} else {
				if (da) {
					t.hide();
					t.attr("_hide", 1);
					tc.show();
				}
			}
		}
	};
	$.fn.disable = function () {
		this.each(function (i) {
			$(this).find(':input,a.common_button').add(this).each(function () {
				var id = this.id,
				t = $(this),
				c = t.attrObj("_rel");
				/*
				 * if (keyObj[id]) $.hotkeys.remove(keyObj[id]);
				 */
				switch (this.tagName.toLowerCase()) {
				case 'textarea':
				case 'select':
					var dd = t.attrObj("_dropdown");
					if (dd) {
						dd.disabled = "true";
					}
				case 'input':
					t.attr("disabled", "yes");
					t.attr("_da", true);
					if (t.attr("type") == "button") {
						t.addClass('common_button_disable');
					}
					if (c) {
						c.switchClone(true, function (tn, sc) {
							if (tn == 'a')
								sc.addClass("common_button_disable");
							else
								sc.attr("disabled", "yes");
						});
					}
					break;
				case 'a':
					if (!t.attr("_isrel")) {
						t.switchClone(true, function (tn, sc) {
							sc.removeAttr('onclick');
							sc.addClass("common_button_disable");
						});
						t.attr("_da", true);
					}
					break;
				}
			});
		});
	};
	$.fn.enable = function () {
		this.each(function (i) {
			$(this).find(':input,a.common_button').add(this).each(function () {
				var id = this.id,
				t = $(this),
				c = t.attrObj("_rel");
				if (t.attr("_da")) {
					/*
					 * if (keyObj[id]) $.hotkeys.add(keyObj[id], function() { t.click();
					 * });
					 */
					switch (this.tagName.toLowerCase()) {
					case 'textarea':
					case 'select':
						var dd = t.attrObj("_dropdown");
						if (dd) {
							dd.disabled = null;
						}
					case 'input':
						t.removeAttr("disabled");
						t.attr("_da", false);
						if (t.attr("type") == "button") {
							t.removeClass('common_button_disable');
						}
						if (c) {
							c.switchClone(false);
						}
						break;
					case 'a':
						if (!t.attr("_isrel")) {
							t.switchClone(false);
							t.attr("_da", false);
						}
						break;
					}
				}
			});
		});
	};
	var attrObjs = [];
	$.fn.attrObj = function (name, value) {
		var obj;
		for (var i = 0; i < attrObjs.length; i++) {
			if (attrObjs[i].o == this[0]) {
				obj = attrObjs[i];
				break;
			}
		}
		if (!obj) {
			obj = new Object();
			obj.o = this[0];
			obj.v = new Object();
			attrObjs.push(obj);
		}
		if (value) {
			obj.v[name] = value;
		} else {
			return obj.v[name];
		}
	};
	$.fn.removeAttrObj = function (name) {
		for (var i = 0; i < attrObjs.length; i++) {
			if (attrObjs[i].o == this[0]) {
				var obj = attrObjs[i];
				obj.v[name] = null;
				break;
			}
		}
	};
	$.confirmClose = function () {
		var mute = arguments.length > 0;
		var ua = navigator.userAgent;
		var isMSIE = (navigator.appName == "Microsoft Internet Explorer") || ua.indexOf('Trident') != -1;
		if (isMSIE) {
			document.body.onbeforeunload = function () {
				// submit时屏蔽提示
				if (removeCtpWindow)
					removeCtpWindow(null, 2);
				if (!mute && isFormSubmit) {
					window.event.returnValue = "";
				}
			};
		} else {
			if (navigator.userAgent.indexOf('Firefox') != -1) {
				window.onbeforeunload = function (e) {
					// submit时屏蔽提示
					if (removeCtpWindow)
						removeCtpWindow(null, 2);
					if (!mute && isFormSubmit) {
						return "";
					}
				}
			} else if (navigator.userAgent.indexOf('Safari') != -1) {
				window.addEventListener("beforeunload", function (event) {
					// submit时屏蔽提示
					if (removeCtpWindow)
						removeCtpWindow(null, 2);
					if (!mute && isFormSubmit) {
						event && (event.returnValue = "");
						return "";
					}
				}, false);
			} else {
				window.addEventListener("beforeunload", function () {
					// submit时屏蔽提示
					if (removeCtpWindow)
						removeCtpWindow(null, 2);
					if (!mute && isFormSubmit) {
						return "";
					}
				}, false);
			}
		}
	};
	$.i18n = function (key) {
		function sleep(milliseconds) {
			var start = new Date().getTime();
			for (var i = 0; i < 1e7; i++) {
				if ((new Date().getTime() - start) > milliseconds) {
					break;
				}
			}
		}
		try {
			var msg = '';
			if (window.localStorage) {
				msg = window.localStorage.getItem('i18n_' + key);
				if (msg == null) {
					var data = window.localStorage.getItem("i18n_DATA");
					if (data == null) {
						$.ajax({
							url: "/seeyon/i18n_init_" + _locale + ".js",
							async: false,
							beforeSend: CsrfGuard.beforeAjaxSend,
							dataType: "script"
						});
					}
					var k = '|_' + key + ',';
					var firstIndex = data.indexOf(k);
					if (firstIndex > -1) {
						var lastIndex = data.indexOf("_|", firstIndex);
						msg = data.substring(firstIndex + k.length, lastIndex);
						localStorage.setItem('i18n_' + key, msg);
					}
					data = null;
				}
			} else {
				if (!CTPLang) {
					$.ajax({
						url: "/seeyon/i18n_" + _locale + ".js",
						async: false,
						beforeSend: CsrfGuard.beforeAjaxSend,
						dataType: "script"
					});
				}
				var lang = CTPLang[_locale];
				if (!lang)
					return key;
				var msg = lang[key + _editionI18nSuffix.toUpperCase()];
				if (!msg) {
					msg = lang[key + _editionI18nSuffix.toLowerCase()];
				}
				if (!msg) {
					msg = lang[key];
				}
			}
			if (msg && arguments.length > 1) {
				var messageRegEx_0 = /\{0\}/g;
				var messageRegEx_1 = /\{1\}/g;
				var messageRegEx_2 = /\{2\}/g;
				var messageRegEx_3 = /\{3\}/g;
				var messageRegEx_4 = /\{4\}/g;
				var messageRegEx_5 = /\{5\}/g;
				var messageRegEx_6 = /\{6\}/g;
				var messageRegEx_7 = /\{7\}/g;
				var messageRegEx_8 = /\{8\}/g;
				var messageRegEx_9 = /\{9\}/g;
				var messageRegEx_10 = /\{10\}/g;
				var messageRegEx_11 = /\{11\}/g;
				var messageRegEx_12 = /\{12\}/g;
				var messageRegEx_13 = /\{13\}/g;
				var messageRegEx_14 = /\{14\}/g;
				var messageRegEx_15 = /\{15\}/g;
				for (var i = 0; i < arguments.length - 1; i++) {
					var regEx = eval("messageRegEx_" + i);
					var repMe = "" + arguments[i + 1];
					if (repMe.indexOf("$_") != -1) {
						repMe = repMe.replace("$_", "$$_");
					}
					msg = msg.replace(regEx, repMe);
				}
			}

			return msg;
		} catch (e) {}

		return "";
	}
})(jQuery);

var ctpCodeManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath
		 + "/ajax.do?method=ajaxAction&managerName=ctpCodeManager",
		selectCode: function () {
			return this.ajaxCall(arguments, "selectCode");
		}
	});

var ctpUserPreferenceManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath
		 + "/ajax.do?method=ajaxAction&managerName=ctpUserPreferenceManager",
		saveGridPreference: function () {
			return this.ajaxCall(arguments, "saveGridPreference");
		}
	});

// 用于AJAX方式载入页面等使用
var AjaxDataLoader = {
	load: function (url, data, callback) {
		jQuery.ajax({
			type: "POST",
			beforeSend: CsrfGuard.beforeAjaxSend,
			url: url,
			cache: false,
			data: data,
			async: true,
			success: function (dataStr) {
				if ($.isFunction(callback)) {
					callback(dataStr);
				}
			}
		});
	}
}

Array.prototype.contains = function (element) {
	for (var i = 0; i < this.length; i++) {
		if (this[i] == element) {
			return true;
		}
	}
	return false;
}

String.prototype.format = function () {
	var args = arguments;

	return this.replace(/\{(\d+)\}/g, function () {
		return args[arguments[1]];
	});
}
function showMask() {
	// 开始遮罩
	try {
		if (getCtpTop() && getCtpTop().startProc)
			getCtpTop().startProc();
	} catch (e) {}
}
function hideMask() {
	// 取消遮罩
	try {
		if (getCtpTop() && getCtpTop().endProc)
			getCtpTop().endProc();
	} catch (e) {}
}
function getCtpTop() {
	try {
		var A8TopWindow = getCtpParentWindow(window);
		if (A8TopWindow) {
			return A8TopWindow;
		} else {
			return top;
		}
	} catch (e) {
		return top;
	}
}
function getCtpParentWindow(win) {
	var currentWin = win;
	for (var i = 0; i < 20; i++) {
		if (typeof currentWin.isCtpTop != 'undefined' && currentWin.isCtpTop) {
			return currentWin;
		} else {
			//当window.top没有isCtpTop标记的时候,优化下，避免取20次的问题 【新开窗口基本上都是这种场景】
			if (currentWin == window.top)
				break;
			currentWin = currentWin.parent;
		}
	}
}
function getCtpTopFromOpener(win) {
	var currentWin = win.getCtpTop();
	for (var i = 0; i < 10; i++) {
		if (typeof currentWin.isCtpTop != 'undefined' && currentWin.isCtpTop) {
			return currentWin;
		} else {
			try {

				if (currentWin.opener.getCtpTop) {
					currentWin = currentWin.opener.getCtpTop();
				} else {
					//老框架页面没有这个getCtpTop方法
					currentWin = currentWin.opener.top;
				}
			} catch (e) {
				return currentWin;
			}
		}
	}
}
function closeOpenMultyWindow(_id, _flag) {
	if (_id == undefined) {
		_id = window.location + "";
		var _ss = _id.indexOf('/seeyon/');
		if (_ss != -1) {
			_id = _id.substring(_ss)
		}
	}
	var _wmp = getCtpTop()._windowsMap;
	if (_wmp) {
		var exitWin = _wmp.get(_id);
		if (exitWin) {
			if (_flag != undefined && exitWin.isFormSubmit) {
				exitWin.isFormSubmit = _flag;
			}
			exitWin.close();
		}
		_wmp.remove(_id);
	}
}

function addAnotherKey(_key, _newkey, type, keyword, _window) {
	if (_key && _newkey) {
		var _top = getCtpTop();
		if (type == 2) {
			if (getCtpTop().opener) {
				_top = getCtpTop().opener;
			}
		}
		var _wmp = _top._windowsMap;
		if (_wmp) {
			var exitWin = _wmp.get(_key);
			if (exitWin) {
				if (_wmp.containsKey(_newkey)) {
					_wmp.remove(_newkey);
				}
				_wmp.putRef(_newkey, exitWin);
			} else {
				if (keyword) {
					if (_wmp.keys().size() == 0) {
						_wmp.putRef(_newkey, _window);
					} else {
						var _lll = _wmp.keys().size();
						var _windowsMapTemp;
						for (var p = 0; p < _lll; p++) {
							var _kkk = _wmp.keys().get(p);
							if (_kkk.indexOf(keyword)) {
								_windowsMapTemp = _wmp.get(_kkk);
								break;
							}
						}
						if (_wmp.containsKey(_newkey)) {
							_wmp.remove(_newkey);
						}
						_wmp.putRef(_newkey, _windowsMapTemp);
					}
				}
			}
		}
	}
}
function getMultyWindowId(idName, url) {
	if (url == undefined || idName == undefined) {
		return;
	}
	var idStr;
	var _idIndex = url.indexOf(idName);
	var _idEndIndex = url.indexOf("&", _idIndex);
	if (_idEndIndex == -1) {
		idStr = url.substring(_idIndex + idName.length + 1);
	} else {
		idStr = url.substring(_idIndex + idName.length + 1, _idEndIndex);
	}
	return idStr;
}
function removeCtpWindow(id, type) {
	//ie9下页签切换报错。
	try {
		var _top = getCtpTop();
		if (id == null || id == undefined) {
			id = _top.location + "";
			var _ss = id.indexOf('/seeyon/');
			if (_ss != -1) {
				id = id.substring(_ss)
			}
		}
		if (type == 2) {
			if (getCtpTop().isCtpTop)
				return;
			if (getCtpTop().opener) {
				_top = getCtpTop().opener;
			}
		}
		var _wmp = _top._windowsMap;
		if (_wmp) {

			_wmp.remove(id);
		}
	} catch (e) {}

}
/**
 *
var args = new Array();

args['file']   = 'about.htm';
args['width']  = 480;
args['height'] = 380;

v3x.openWindow(args});

openCtpWindow({
id:
url:
})
 */
function openCtpWindow(args) {
	var html,
	width,
	height,
	x,
	y,
	resizable,
	scrollbars,
	url,
	dialog_type;
	this.windowArgs = args;
	width = args['width'] || parseInt(screen.width) - 20;
	height = args['height'] || parseInt(screen.height) - 80;

	this.settings = {
		dialog_type: "open",
		resizable: "yes",
		scrollbars: "yes"
	};
	html = args['html'];
	url = args['url'];
	if (url.indexOf('seeyon') == 0) {
		url = _ctxPath + url;
	}
	url += CsrfGuard.getUrlSurffix(url);
	dialog_type = args["dialogType"] || this.settings["dialog_type"];
	resizable = args['resizable'] || this.settings["resizable"];
	scrollbars = args['scrollbars'] || this.settings["scrollbars"];
	var rv = null;
	var modal = (resizable == "yes") ? "no" : "yes";
	var _id = args["id"];
	if (_id == undefined) {
		_id = url;
	}
	var _wmp = getCtpTop()._windowsMap;
	if (_wmp) {
		try {
			var _wmpKeys = _wmp.keys();
		} catch (e) { //兼容处理，为了解决bug：OA-80754公司协同：连续打开2个新闻、2个公告，页签不关闭，这时，首页待办栏目中的标题点不动，栏目空间都可以刷新。
			getCtpTop()._windowsMap = new Properties();
			_wmp = getCtpTop()._windowsMap;
		}
		for (var p = 0; p < _wmp.keys().size(); p++) {
			var _kkk = _wmp.keys().get(p);
			try {
				var _fff = _wmp.get(_kkk);
				var _dd = _fff.document;
				if (_dd) {
					var _p = parseInt(_dd.body.clientHeight);
					if (_p == 0) {
						if ($.browser.msie) {
							// chrome 此处必崩溃
							_dd.write('');
						}
						_fff.close();
						_fff = null;
						_wmp.remove(_kkk);
						p--;
					}
				} else {
					_fff = null;
					_wmp.remove(_kkk);
					p--;
				}
			} catch (e) {
				_fff = null;
				_wmp.remove(_kkk);
				p--;
			}
		}
		if (_wmp.size() == 10) {
			alert($.i18n("window.max.length.js"));
			return;
		}
		var exitWin = _wmp.get(_id);
		//alert(exitWin)
		if (exitWin) {
			try {
				var exitWinUrl = exitWin.location.href;
				var tempExitUrl = '';
				var e_idx = exitWinUrl.indexOf('/seeyon/');
				if (e_idx != -1) {
					tempExitUrl = exitWinUrl.substring(e_idx);
				}
				if (tempExitUrl == url) { //增加对相同url的逻辑判断,如果相同则提示已经打开
					var _dd = exitWin.document;
					if (args["window"]) {
						args["window"].alert($.i18n("window.already.exit.js"));
					} else {
						alert($.i18n("window.already.exit.js"));
					}
					exitWin.focus();
					return;
				}
			} catch (e) {
				exitWin = null;
				_wmp.remove(_id);
			}

		}
	} else {
		getCtpTop()._windowsMap = new Properties();
		_wmp = getCtpTop()._windowsMap;
	}

	height -= 25;
	var win;
	if (url.indexOf("linkConnectForMenu") != -1 || url.indexOf("linkSystemController") != -1) {
		win = window.open(url, "", "top=0,left=0,scrollbars=yes,dialog=yes,minimizable=yes,modal=open,width=" + width + ",height=" + height + ",resizable=yes");
	} else {
		win = window.open(url, "ctpPopup" + new Date().getTime(), "top=0,left=0,scrollbars=yes,dialog=yes,minimizable=yes,modal=open,width=" + width + ",height=" + height + ",resizable=yes");
	}
	if (win == null) {
		return;
	}
	win.focus();

	if (_wmp) {
		_wmp.putRef(_id, win);
	}
	return win;

}
function removeAllDialog() {
	try {
		getCtpTop().$('.mask').remove();
		var _dialog_box = getCtpTop().$('.dialog_box');
		if (_dialog_box.size() > 0) {
			var _iframes = getCtpTop().$('.dialog_box .dialog_main_content iframe');
			if (_iframes.size() > 0) {
				for (var k = 0; k < _iframes.size(); k++) {
					_iframes[k].contentWindow.document.write('');
					_iframes[k].contentWindow.close();
				}
				_iframes.remove();
			}
			_dialog_box.remove();
		}
		getCtpTop().$('.shield').remove();
		getCtpTop().$('.mxt-window').remove();
	} catch (e) {}
}
var CsrfGuard = {
	getToken: function () {
		var token = typeof(CSRFTOKEN) === 'undefined' ? getCtpTop().CSRFTOKEN : CSRFTOKEN;
		return typeof(token) === 'undefined' || token === 'null' ? '' : token;
	},
	isEnabled: function () {
		return this.getToken() !== '';
	},
	getUrlSurffix: function (url) {
		if (typeof(url) !== 'undefined' && url.indexOf('CSRFTOKEN=') > 0) {
			return '';
		}
		function getPrefix(url) {
			var prefix = '&';
			if (typeof(url) !== 'undefined') {
				if (url.indexOf('?') < 0) {
					prefix = '?';
				}
			}
			return prefix;
		}
		return !this.isEnabled() ? '' : getPrefix(url) + 'CSRFTOKEN=' + this.getToken();
	},
	beforeAjaxSend: function (request) {
		var token_value = CsrfGuard.getToken();
		if (token_value !== '') {
			request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			request.setRequestHeader('CSRFTOKEN', token_value);
		}
	}
};
var messageRegEx_0 = /\{0\}/g;
var messageRegEx_1 = /\{1\}/g;
var messageRegEx_2 = /\{2\}/g;
var messageRegEx_3 = /\{3\}/g;
var messageRegEx_4 = /\{4\}/g;
var messageRegEx_5 = /\{5\}/g;
var messageRegEx_6 = /\{6\}/g;
var messageRegEx_7 = /\{7\}/g;
var messageRegEx_8 = /\{8\}/g;
var messageRegEx_9 = /\{9\}/g;
var messageRegEx_10 = /\{10\}/g;
var messageRegEx_11 = /\{11\}/g;
var messageRegEx_12 = /\{12\}/g;
var messageRegEx_13 = /\{13\}/g;
var messageRegEx_14 = /\{14\}/g;
var messageRegEx_15 = /\{15\}/g;
var portalOfA8IframeStr = "top.frames['frame_A8']";
var thisWindowZindex = 600;
var getMaxZindex = function (A) {
	if (typeof(A) != "undefined") {
		A = Number(A);
		if (isNaN(Number(A))) {
			$.alert("\u8bf7\u68c0\u67e5\u4f20\u5165\u7684z-index\u503c\uff01")
		}
	}
	if (typeof(A) == "undefined" || A == 1) {
		thisWindowZindex = thisWindowZindex + 1;
		return thisWindowZindex
	} else {
		thisWindowZindex = thisWindowZindex + A;
		return (thisWindowZindex - A + 1)
	}
};
if (!window.ActiveXObject) {
	if (typeof(HTMLElement) != "undefined") {
		HTMLElement.prototype.__defineSetter__("outerHTML", function (A) {
			var B = this.ownerDocument.createRange();
			B.setStartBefore(this);
			var D = B.createContextualFragment(A);
			this.parentNode.replaceChild(D, this);
			return A
		});
		HTMLElement.prototype.__defineGetter__("outerHTML", function () {
			var A = this.attributes,
			D = "<" + this.tagName,
			B = 0;
			for (; B < A.length; B++) {
				if (A[B].specified) {
					D += " " + A[B].name + '="' + A[B].value + '"'
				}
			}
			if (!this.canHaveChildren) {
				return D + " />"
			}
			return D + ">" + this.innerHTML + "</" + this.tagName + ">"
		});
		HTMLElement.prototype.__defineGetter__("canHaveChildren", function () {
			return !/^(area|base|basefont|col|frame|hr|img|br|input|isindex|link|meta|param)$/.test(this.tagName.toLowerCase())
		})
	}
}
if (!window.ActiveXObject) {
	if (!!document.getBoxObjectFor || window.mozInnerScreenX != null) {
		HTMLElement.prototype.__defineSetter__("innerText", function (B) {
			var A = document.createTextNode(B);
			this.innerHTML = "";
			this.appendChild(A);
			return A
		});
		HTMLElement.prototype.__defineGetter__("innerText", function () {
			var A = this.ownerDocument.createRange();
			A.selectNodeContents(this);
			return A.toString()
		})
	}
	if (!!document.getBoxObjectFor || window.mozInnerScreenX != null) {
		HTMLElement.prototype.__defineSetter__("outerText", function (B) {
			var A = document.createTextNode(B);
			this.parentNode.replaceChild(A, this);
			return A
		});
		HTMLElement.prototype.__defineGetter__("outerText", function () {
			var A = this.ownerDocument.createRange();
			A.selectNodeContents(this);
			return A.toString()
		})
	}
}
String.prototype.getBytesLength = function () {
	var A = this.match(/[^\x00-\xff]/ig);
	return this.length + (A == null ? 0 : A.length)
};
String.prototype.getLimitLength = function (D, G) {
	if (!D || D < 0) {
		return this
	}
	var A = this.getBytesLength();
	if (A <= D) {
		return this
	}
	G = G == null ? ".." : G;
	D = D - G.length;
	var B = 0;
	var E = "";
	for (var F = 0; F < this.length; F++) {
		if (this.charCodeAt(F) > 255) {
			B += 2
		} else {
			B++
		}
		E += this.charAt(F);
		if (B >= D) {
			return E + G
		}
	}
	return this
};
String.prototype.escapeHTML = function (B, A) {
	try {
		return escapeStringToHTML(this, B, A)
	} catch (D) {}
	return this
};
String.prototype.escapeUrl = function (A) {
	try {
		return escapeStringToHTML(this.replace(/\n/g, ""), A)
	} catch (B) {}
	return this
};
String.prototype.escapeJavascript = function () {
	return escapeStringToJavascript(this)
};
String.prototype.escapeSpace = function () {
	return this.replace(/ /g, "&nbsp;")
};
String.prototype.escapeSameWidthSpace = function () {
	return this.replace(/ /g, "&nbsp;&nbsp;")
};
String.prototype.escapeXML = function () {
	return this.replace(/\&/g, "&amp;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\"/g, "&quot;")
};
String.prototype.escapeQuot = function () {
	return this.replace(/\'/g, "&#039;").replace(/"/g, "&#034;")
};
String.prototype.startsWith = function (A) {
	return this.indexOf(A) == 0
};
String.prototype.endsWith = function (A) {
	var B = this.indexOf(A);
	return B > -1 && B == this.length - A.length
};
String.prototype.trim = function () {
	var D = this.toCharArray();
	var A = 0;
	var E = D.length;
	for (var B = 0; B < D.length; B++) {
		var F = D[B];
		if (F == " ") {
			A++
		} else {
			break
		}
	}
	if (A == this.length) {
		return ""
	}
	for (var B = D.length; B > 0; B--) {
		var F = D[B - 1];
		if (F == " ") {
			E--
		} else {
			break
		}
	}
	return this.substring(A, E)
};
String.prototype.toCharArray = function () {
	var B = [];
	for (var A = 0; A < this.length; A++) {
		B[A] = this.charAt(A)
	}
	return B
};
Array.prototype.indexOf = function (A) {
	for (var B = 0; B < this.length; B++) {
		if (this[B] == A) {
			return B
		}
	}
	return -1
};
var log = {
	rootLogger: "info",
	debugLevel: {
		debug: true,
		info: true,
		warn: true,
		error: true
	},
	infoLevel: {
		debug: false,
		info: true,
		warn: true,
		error: true
	},
	warnLevel: {
		debug: false,
		info: false,
		warn: true,
		error: true
	},
	errorLevel: {
		debug: false,
		info: false,
		warn: false,
		error: true
	},
	debug: function (A) {
		if (this.isDebugEnabled()) {
			alert("Debug : " + A)
		}
	},
	info: function (A) {
		if (this.isInfoEnabled()) {
			alert("Info : " + A)
		}
	},
	warn: function (A) {
		if (this.isWarnEnabled()) {
			alert("Warn : " + A)
		}
	},
	error: function (B, A) {
		if (this.isErrorEnabled()) {
			alert("Error : " + B + "\n\n" + A.message)
		}
	},
	isDebugEnabled: function () {
		return eval("this." + this.rootLogger + "Level.debug")
	},
	isInfoEnabled: function () {
		return eval("this." + this.rootLogger + "Level.info")
	},
	isWarnEnabled: function () {
		return eval("this." + this.rootLogger + "Level.warn")
	},
	isErrorEnabled: function () {
		return eval("this." + this.rootLogger + "Level.error")
	}
};
var UUID_seqence = 0;
function getUUID() {
	var A = new Date().getTime() + "" + (UUID_seqence++);
	if (UUID_seqence >= 100000) {
		UUID_seqence = 0
	}
	return A
}
var EmptyArrayList = new ArrayList();
function ArrayList() {
	this.instance = new Array()
}
ArrayList.prototype.size = function () {
	return this.instance.length
};
ArrayList.prototype.add = function (A) {
	this.instance[this.instance.length] = A
};
ArrayList.prototype.addSingle = function (A) {
	if (!this.contains(A)) {
		this.instance[this.instance.length] = A
	}
};
ArrayList.prototype.addAt = function (A, B) {
	if (A >= this.size() || A < 0 || this.isEmpty()) {
		this.add(B);
		return
	}
	this.instance.splice(A, 0, B)
};
ArrayList.prototype.addAll = function (A) {
	if (!A || A.length < 1) {
		return
	}
	this.instance = this.instance.concat(A)
};
ArrayList.prototype.addList = function (A) {
	if (A && A instanceof ArrayList && !A.isEmpty()) {
		this.instance = this.instance.concat(A.instance)
	}
};
ArrayList.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
ArrayList.prototype.getLast = function () {
	if (this.size() < 1) {
		return null
	}
	return this.instance[this.size() - 1]
};
ArrayList.prototype.set = function (B, D) {
	if (B >= this.size()) {
		throw "IndexOutOfBoundException : Index " + B + ", Size " + this.size()
	}
	var A = this.instance[B];
	this.instance[B] = D;
	return A
};
ArrayList.prototype.removeElementAt = function (A) {
	if (A > this.size() || A < 0) {
		return
	}
	this.instance.splice(A, 1)
};
ArrayList.prototype.remove = function (B) {
	var A = this.indexOf(B);
	this.removeElementAt(A)
};
ArrayList.prototype.contains = function (A, B) {
	return this.indexOf(A, B) > -1
};
ArrayList.prototype.indexOf = function (D, E) {
	for (var A = 0; A < this.size(); A++) {
		var B = this.instance[A];
		if (B == D) {
			return A
		} else {
			if (E != null && B != null && D != null && B[E] == D[E]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.lastIndexOf = function (D, E) {
	for (var A = this.size() - 1; A >= 0; A--) {
		var B = this.instance[A];
		if (B == D) {
			return A
		} else {
			if (E != null && B != null && D != null && B[E] == D[E]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.subList = function (B, E) {
	if (B < 0) {
		B = 0
	}
	if (E > this.size()) {
		E = this.size()
	}
	var D = this.instance.slice(B, E);
	var A = new ArrayList();
	A.addAll(D);
	return A
};
ArrayList.prototype.toArray = function () {
	return this.instance
};
ArrayList.prototype.isEmpty = function () {
	return this.size() == 0
};
ArrayList.prototype.clear = function () {
	this.instance = new Array()
};
ArrayList.prototype.toString = function (A) {
	A = A || ", ";
	return this.instance.join(A)
};
function QuickSortArrayList(A, B) {
	QuickSortArray(A.toArray(), B)
}
function QuickSortArray(A, B) {
	if (B) {
		A.sort(function (E, D) {
			return E[B] < D[B] ? -1 : (E[B] == D[B] ? 0 : 1)
		})
	} else {
		A.sort()
	}
}
var EmptyProperties = new Properties();
function Properties(A) {
	this.instanceKeys = new ArrayList();
	this.instance = {};
	if (A) {
		this.instance = A;
		for (var B in A) {
			this.instanceKeys.add(B)
		}
	}
}
Properties.prototype.size = function () {
	return this.instanceKeys.size()
};
Properties.prototype.get = function (B, A) {
	if (B == null) {
		return null
	}
	var D = this.instance[B];
	if (D == null && A != null) {
		return A
	}
	return D
};
Properties.prototype.remove = function (A) {
	if (A == null) {
		return null
	}
	this.instanceKeys.remove(A);
	delete this.instance[A]
};
Properties.prototype.put = function (A, B) {
	if (A == null) {
		return null
	}
	if (this.instance[A] == null) {
		this.instanceKeys.add(A)
	}
	this.instance[A] = B
};
Properties.prototype.putRef = function (A, B) {
	if (A == null) {
		return null
	}
	this.instanceKeys.add(A);
	this.instance[A] = B
};
Properties.prototype.getMultilevel = function (E, B) {
	if (E == null) {
		return null
	}
	var D = E.split(".");
	function A(J, H, G) {
		try {
			if (J == null || (typeof J != "object")) {
				return null
			}
			var K = J.get(H[G]);
			if (G < H.length - 1) {
				K = A(K, H, G + 1)
			}
			return K
		} catch (I) {}
		return null
	}
	var F = A(this, D, 0);
	return F == null ? B : F
};
Properties.prototype.containsKey = function (A) {
	if (A == null) {
		return false
	}
	return this.instance[A] != null
};
Properties.prototype.keys = function () {
	return this.instanceKeys
};
Properties.prototype.values = function () {
	var E = new ArrayList();
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		if (A) {
			var D = this.instance[A];
			E.add(D)
		}
	}
	return E
};
Properties.prototype.isEmpty = function () {
	return this.instanceKeys.isEmpty()
};
Properties.prototype.clear = function () {
	this.instanceKeys.clear();
	this.instance = {}
};
Properties.prototype.swap = function (D, B) {
	if (!D || !B || D == B) {
		return
	}
	var F = -1;
	var E = -1;
	for (var A = 0; A < this.instanceKeys.instance.length; A++) {
		if (this.instanceKeys.instance[A] == D) {
			F = A
		} else {
			if (this.instanceKeys.instance[A] == B) {
				E = A
			}
		}
	}
	this.instanceKeys.instance[F] = B;
	this.instanceKeys.instance[E] = D
};
Properties.prototype.entrySet = function () {
	var A = [];
	for (var D = 0; D < this.instanceKeys.size(); D++) {
		var B = this.instanceKeys.get(D);
		var E = this.instance[B];
		if (!B) {
			continue
		}
		var F = new Object();
		F.key = B;
		F.value = E;
		A[A.length] = F
	}
	return A
};
Properties.prototype.toString = function () {
	var D = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		D += A + "=" + this.instance[A] + "\n"
	}
	return D
};
Properties.prototype.toStringTokenizer = function (F, E) {
	F = F == null ? ";" : F;
	E = E == null ? "=" : E;
	var G = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			G += F
		}
		G += A + E + D
	}
	return G
};
Properties.prototype.toQueryString = function () {
	if (this.size() < 1) {
		return ""
	}
	var E = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			E += "&"
		}
		if (typeof D == "object") {}
		else {
			E += A + "=" + encodeURIat(D)
		}
	}
	return E
};
function encodeURIat(A) {
	if ((typeof A) !== "string") {
		return ""
	}
	A = encodeURI(A);
	var B = /&|\/|\+|\?|\s|%|#|=/g;
	if (B.test(A)) {
		A = A.replace(/(\/)/g, "%2F");
		A = A.replace(/(&)/g, "%26");
		A = A.replace(/(\+)/g, "%2B");
		A = A.replace(/(\?)/g, "%3F");
		A = A.replace(/(#)/g, "%23");
		A = A.replace(/(=)/g, "%3D")
	}
	return A
}
Properties.prototype.toInputString = function () {
	if (this.size() < 1) {
		return ""
	}
	var E = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var D = this.instance[A];
		if (!A) {
			continue
		}
		if (typeof D == "object") {}
		else {
			E += "<input type='hidden' name=\"" + A + '" value="' + encodeURI(D) + ">"
		}
	}
	return E
};
function Set() {
	this.instance = new Array();
	this.key = {}
}
Set.prototype.add = function () {
	if (arguments == null || arguments.length < 1) {
		throw "arguments is null"
	}
	for (var B = 0; B < arguments.length; B++) {
		var A = arguments[B];
		if (!this.contains(A)) {
			this.instance[this.size()] = A;
			this.key[A] = "A8"
		}
	}
};
Set.prototype.size = function () {
	return this.instance.length
};
Set.prototype.contains = function (A) {
	return this.key[A] != null
};
Set.prototype.isEmpty = function () {
	return this.size() == 0
};
Set.prototype.clear = function () {
	this.instance = new Array();
	this.key = {}
};
Set.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
Set.prototype.toArray = function () {
	return this.instance
};
Set.prototype.toString = function () {
	return this.instance.join(", ")
};
function StringBuffer() {
	this._strings_ = new Array()
}
StringBuffer.prototype.append = function (A) {
	if (A) {
		if (A instanceof Array) {
			this._strings_ = this._strings_.concat(A)
		} else {
			this._strings_[this._strings_.length] = A
		}
	}
	return this
};
StringBuffer.prototype.reset = function (A) {
	this.clear();
	this.append(A)
};
StringBuffer.prototype.clear = function () {
	this._strings_ = new Array()
};
StringBuffer.prototype.isBlank = function () {
	return this._strings_.length == 0
};
StringBuffer.prototype.toString = function (A) {
	A = A == null ? "" : A;
	if (this._strings_.length == 0) {
		return ""
	}
	return this._strings_.join(A)
};
function V3X() {
	this.windowArgs = new Array();
	this.lastWindow = null;
	var A = navigator.userAgent;
	this.isMSIE = (navigator.appName == "Microsoft Internet Explorer") || A.indexOf("Trident") != -1;
	this.isMSIE5 = this.isMSIE && (A.indexOf("MSIE 5") != -1);
	this.isMSIE5_0 = this.isMSIE && (A.indexOf("MSIE 5.0") != -1);
	this.isMSIE6 = this.isMSIE && (A.indexOf("MSIE 6") != -1);
	this.isMSIE7 = this.isMSIE && (A.indexOf("MSIE 7") != -1);
	this.isMSIE8 = this.isMSIE && (A.indexOf("MSIE 8") != -1);
	this.isMSIE9 = this.isMSIE && (A.indexOf("MSIE 9") != -1);
	this.isMSIE10 = this.isMSIE && (A.indexOf("MSIE 10") != -1);
	this.isMSIE11 = this.isMSIE && (A.indexOf("rv:11") != -1);
	this.isGecko = A.indexOf("Gecko") != -1;
	this.isGecko18 = A.indexOf("Gecko") != -1 && A.indexOf("rv:1.8") != -1;
	this.isSafari = A.indexOf("Safari") != -1;
	this.isOpera = A.indexOf("Opera") != -1;
	this.isFirefox = A.indexOf("Firefox") != -1;
	this.isMac = A.indexOf("Mac") != -1;
	this.isNS7 = A.indexOf("Netscape/7") != -1;
	this.isNS71 = A.indexOf("Netscape/7.1") != -1;
	this.isIpad = A.indexOf("iPad") != -1;
	this.isChrome = A.indexOf("Chrome") != -1;
	this.currentBrowser = "";
	this.browserFlag = {
		openWindow: [true, true, false, false, false, false, false],
		sectionOpenDetail: [true, true, true, false, true, true, false],
		selectPeople: [true, true, true, false, true, true, false],
		htmlEditer: [true, true, true, false, true, true, false],
		hideMenu: [true, true, true, false, true, true, false],
		newFlash: [true, true, true, false, true, false, false],
		signature: [true, true, false, false, false, false, false],
		createProcess: [true, true, true, false, true, true, false],
		flash: [true, true, true, false, true, true, false],
		downLoad: [true, true, true, false, true, true, false],
		print: [true, true, true, false, true, true, false],
		exportExcel: [true, true, true, false, true, true, false],
		pageBreak: [true, true, true, false, true, true, false],
		menuPosition: [false, false, false, true, false, false, false],
		officeMenu: [true, true, true, false, true, false, false],
		selectPeopleShowType: [true, true, true, false, true, true, false],
		OpenDivWindow: [true, true, true, false, true, true, false],
		selectDivType: [true, true, true, false, true, true, false],
		onDbClick: [true, true, true, false, true, true, true],
		needModalWindow: [true, true, true, false, true, true, false],
		onlyIe: [true, true, false, false, false, false, false]
	};
	this.isOfficeSupport = function () {
		return this.getBrowserFlag("officeMenu") == true
	};
	this.dialogCounter = 0;
	this.defaultLanguage = "en";
	this.currentLanguage = "";
	this.baseURL = "";
	this.loadedFiles = new Array();
	this.workSpaceTop = 130;
	if (this.isMSIE8) {
		this.workSpaceTop = 140
	}
	if (!this.isMSIE7 && !this.isMSIE8) {
		this.workSpaceTop = 130
	}
	this.workSpaceLeft = 0;
	this.workSpaceWidth = screen.width - this.workSpaceLeft;
	this.workSpaceheight = screen.height - this.workSpaceTop - 20 - (this.isMSIE7 ? 35 : 0);
	if (this.isOpera) {
		this.isMSIE = true;
		this.isGecko = false;
		this.isSafari = false
	}
	this.settings = {
		dialog_type: "modal",
		resizable: "yes",
		scrollbars: "yes"
	}
}
V3X.prototype.init = function (A, B) {
	if (A) {
		this.baseURL = A
	}
	this.currentLanguage = B;
	this.loadLanguage("/common/js/i18n");
	this.getCurrentBrowser()
};
V3X.prototype.getCurrentBrowser = function () {
	if (this.isMSIE || this.isMSIE5 || this.isMSIE5_0 || this.isMSIE7 || this.isMSIE8) {
		this.currentBrowser = "MSIE"
	}
	if (this.isMSIE9) {
		this.currentBrowser = "MSIE9"
	}
	if (this.isFirefox) {
		this.currentBrowser = "FIREFOX"
	}
	if (this.isSafari) {
		this.currentBrowser = "SAFARI"
	}
	if (this.isChrome) {
		this.currentBrowser = "CHROME"
	}
	if (this.isIpad) {
		this.currentBrowser = "IPAD"
	}
	if (this.isOpera) {
		this.currentBrowser = "OPERA"
	}
};
V3X.prototype.getBrowserFlag = function (A) {
	if (A != null && A != "") {
		var B = 0;
		if (this.currentBrowser == "MSIE") {
			B = 0
		}
		if (this.currentBrowser == "MSIE9") {
			B = 1
		}
		if (this.currentBrowser == "FIREFOX") {
			B = 2
		}
		if (this.currentBrowser == "IPAD") {
			B = 3
		}
		if (this.currentBrowser == "CHROME") {
			B = 4
		}
		if (this.currentBrowser == "SAFARI") {
			B = 5
		}
		if (this.currentBrowser == "OPERA") {
			B = 6
		}
		return this.browserFlag[A][B]
	}
};
V3X.prototype.openDialog = function (A) {
	return new MxtWindow(A)
};
V3X.prototype.getEvent = function () {
	if (this.isMSIE) {
		return window.event
	}
	func = v3x.getEvent.caller;
	while (func != null) {
		var A = func.arguments[0];
		if (A) {
			if ((A.constructor == Event || A.constructor == MouseEvent) || (typeof(A) == "object" && A.preventDefault && A.stopPropagation)) {
				return A
			}
		}
		func = func.caller
	}
	return null
};
V3X.prototype.openWindow = function (B) {
	var L,
	O,
	N,
	K,
	J,
	H,
	S,
	F;
	this.windowArgs = B;
	L = B.html;
	if (B.FullScrean) {
		O = this.workSpaceWidth;
		N = this.workSpaceheight + this.workSpaceTop;
		O = O - 20;
		K = 0;
		J = 0
	} else {
		if (B.workSpace) {
			O = this.workSpaceWidth;
			N = this.workSpaceheight;
			O = O - 30;
			K = this.workSpaceLeft;
			J = this.workSpaceTop;
			J = J - 40
		} else {
			if (B.workSpaceRight) {
				O = this.workSpaceWidth - 155;
				N = this.workSpaceheight;
				if (this.isMSIE8) {
					N = this.workSpaceheight - 48
				}
				if (!this.isMSIE7 && !this.isMSIE8) {
					O = this.workSpaceWidth - 165;
					N = this.workSpaceheight - 35
				}
				K = 140;
				J = this.workSpaceTop
			} else {
				O = B.width || 320;
				N = B.height || 200;
				O = parseInt(O);
				N = parseInt(N);
				if (this.isMSIE) {
					if (this.isMSIE7 || this.isMSIE8) {
						N -= 6
					} else {
						N += 20
					}
				}
				K = B.left || parseInt(screen.width / 2) - (O / 2);
				J = B.top || parseInt(screen.height / 2) - (N / 2)
			}
		}
	}
	H = B.resizable || this.settings.resizable;
	S = B.scrollbars || this.settings.scrollbars;
	F = B.url;
	if (F.indexOf("CSRFTOKEN=") < 0) {
		F = F + CsrfGuard.getUrlSurffix(F)
	}
	if (L) {
		var E = window.open("", "v3xPopup" + new Date().getTime(), "top=" + J + ",left=" + K + ",scrollbars=" + S + ",dialog=yes,minimizable=" + H + ",modal=yes,width=" + O + ",height=" + N + ",resizable=" + H);
		if (E == null) {
			return
		}
		E.document.write(L);
		E.document.close();
		E.resizeTo(O, N);
		E.focus();
		return E
	} else {
		var A = B.dialogType || this.settings.dialog_type;
		if (A == "modal" && window.showModalDialog) {
			var G = "resizable:" + H + ";scroll:" + S + ";status:no;help:no;dialogWidth:" + O + "px;dialogHeight:" + N + "px;";
			if (B.workSpace || B.workSpaceRight || (B.left && B.top)) {
				G += "dialogTop:" + J + "px;dialogLeft:" + K + "px;"
			} else {
				var D = (parseInt(getA8Top().document.body.offsetWidth) - O) / 2;
				var M = (parseInt(getA8Top().document.body.offsetHeight) - N) / 2;
				if (D == null || M == null || D < 0 || M < 0) {
					D = 200;
					M = 200
				}
				G += this.isMSIE ? "center:yes;" : "dialogTop:" + M + "px;dialogLeft:" + D + "px;"
			}
			if (F.indexOf("?") != -1) {
				F += "&"
			} else {
				F += "?"
			}
			F += "_isModalDialog=true";
			var I = window.showModalDialog(F, window, G);
			var R = null;
			if (this.ModalDialogResultValue == undefined) {
				R = I
			} else {
				R = this.ModalDialogResultValue;
				this.ModalDialogResultValue = undefined
			}
			return R
		} else {
			var I = null;
			var Q = (H == "yes") ? "no" : "yes";
			if (this.isGecko && this.isMac) {
				Q = "no"
			}
			if (B.closePrevious != "no") {
				try {
					this.lastWindow.close()
				} catch (P) {}
			}
			if (window.dialogArguments && B.workSpace) {
				J -= 5;
				N -= 25
			}
			var E = window.open(F, "v3xPopup" + new Date().getTime(), "top=" + J + ",left=" + K + ",scrollbars=" + S + ",dialog=" + Q + ",minimizable=" + H + ",modal=" + Q + ",width=" + O + ",height=" + N + ",resizable=" + H);
			if (E == null) {
				return
			}
			if (B.closePrevious != "no") {
				this.lastWindow = E
			}
			if (this.isGecko && !this.isMSIE && !this.isFirefox) {
				if (E.document.defaultView.statusbar.visible) {
					E.resizeBy(0, this.isMac ? 10 : 24)
				}
			}
			E.focus();
			return E
		}
	}
};
V3X.prototype.setResultValue = function (A) {
	this.getParentWindow().v3x.ModalDialogResultValue = A
};
V3X.prototype.closeWindow = function (A) {
	A.close()
};
V3X.prototype.getParentWindow = function (A) {
	A = A || window;
	if (A.dialogArguments) {
		return A.dialogArguments
	} else {
		return A.opener || A
	}
};
V3X.prototype.loadLanguage = function (A) {
	this.loadScriptFile(this.baseURL + A + "/" + this.currentLanguage + ".js?V=3_50_2_29")
};
V3X.prototype.getMessage = function (key) {
	try {
		var msg = eval("" + key);
		if (msg && arguments.length > 1) {
			for (var i = 0; i < arguments.length - 1; i++) {
				var regEx = eval("messageRegEx_" + i);
				var repMe = "" + arguments[i + 1];
				if (repMe.indexOf("$_") != -1) {
					repMe = repMe.replace("$_", "$$_")
				}
				msg = msg.replace(regEx, repMe)
			}
		}
		return msg
	} catch (e) {
		try {
			var msg = "";
			if (window.localStorage) {
				msg = window.localStorage.getItem("i18n_" + key);
				if (msg == null) {
					var data = window.localStorage.getItem("i18n_DATA");
					if (data == null) {
						this.loadScriptFile(this.baseURL + "i18n_init_" + _locale + ".js")
					}
					var k = "|_" + key + ",";
					var firstIndex = data.indexOf(k);
					if (firstIndex > -1) {
						var lastIndex = data.indexOf("_|", firstIndex);
						msg = data.substring(firstIndex + k.length, lastIndex);
						localStorage.setItem("i18n_" + key, msg)
					}
					data = null
				}
			} else {
				if (!CTPLang) {
					this.loadScriptFile(this.baseURL + "i18n_" + _locale + ".js")
				}
				var lang = CTPLang[_locale];
				if (!lang) {
					return key
				}
				var msg = lang[key + _editionI18nSuffix.toUpperCase()];
				if (!msg) {
					msg = lang[key + _editionI18nSuffix.toLowerCase()]
				}
				if (!msg) {
					msg = lang[key]
				}
			}
			if (msg && arguments.length > 1) {
				for (var i = 0; i < arguments.length - 1; i++) {
					var regEx = eval("messageRegEx_" + i);
					var repMe = "" + arguments[i + 1];
					if (repMe.indexOf("$_") != -1) {
						repMe = repMe.replace("$_", "$$_")
					}
					msg = msg.replace(regEx, repMe)
				}
			}
			return msg
		} catch (e) {}
		return ""
	}
	return ""
};
V3X.prototype.loadScriptFile = function (A) {
	for (var B = 0; B < this.loadedFiles.length; B++) {
		if (this.loadedFiles[B] == A) {
			return
		}
	}
	document.write('<script language="javascript" type="text/javascript" charset="UTF-8" src="' + A + '"><\/script>');
	this.loadedFiles[this.loadedFiles.length] = A
};
V3X.prototype.getElementPosition = function (E) {
	var A = navigator.userAgent.toLowerCase();
	var B = (A.indexOf("opera") != -1);
	var F = (A.indexOf("msie") != -1 && !B);
	if (E.parentNode === null || E.style.display == "none") {
		return false
	}
	var L = null;
	var K = [];
	var I;
	if (E.getBoundingClientRect) {
		I = E.getBoundingClientRect();
		var D = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
		var G = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
		return {
			x: I.left + G,
			y: I.top + D
		}
	} else {
		if (document.getBoxObjectFor) {
			I = document.getBoxObjectFor(E);
			var J = (E.style.borderLeftWidth) ? parseInt(E.style.borderLeftWidth) : 0;
			var H = (E.style.borderTopWidth) ? parseInt(E.style.borderTopWidth) : 0;
			K = [I.x - J, I.y - H]
		} else {
			K = [E.offsetLeft, E.offsetTop];
			L = E.offsetParent;
			if (L != E) {
				while (L) {
					K[0] += L.offsetLeft;
					K[1] += L.offsetTop;
					L = L.offsetParent
				}
			}
			if (A.indexOf("opera") != -1 || (A.indexOf("safari") != -1 && E.style.position == "absolute")) {
				K[0] -= document.body.offsetLeft;
				K[1] -= document.body.offsetTop
			}
		}
	}
	if (E.parentNode) {
		L = E.parentNode
	} else {
		L = null
	}
	while (L && L.tagName != "BODY" && L.tagName != "HTML") {
		K[0] -= L.scrollLeft;
		K[1] -= L.scrollTop;
		if (L.parentNode) {
			L = L.parentNode
		} else {
			L = null
		}
	}
	return {
		x: K[0],
		y: K[1]
	}
};
function disableButton(D, A) {
	A = A || "100%";
	if (!D) {
		return false
	}
	var E = null;
	if (typeof D == "string") {
		E = document.getElementById(D)
	} else {
		E = D
	}
	if (!E) {
		return false
	}
	if (document.readyState != "complete") {
		if (typeof D == "string") {
			window.setTimeout("disableButton('" + D + "')", 2500)
		} else {
			window.setTimeout("disableButton(" + D + ")", 2500)
		}
		return
	}
	var B = E.cDisabled;
	B = (B != null);
	if (!B) {
		E.cDisabled = true;
		if (document.getElementsByTagName) {
			var F = "<span style='background: buttonshadow; filter: chroma(color=white) dropshadow(color=buttonhighlight, offx=1, offy=1); height: " + A + ";'>";
			F += "  <span style='filter: mask(color=white); height: " + A + "'>";
			F += E.innerHTML;
			F += "  </span>";
			F += "</span>";
			E.innerHTML = F
		} else {
			E.innerHTML = '<span style="background: buttonshadow; width: 100%; height: 100%; text-align: center;"><span style="filter:Mask(Color=buttonface) DropShadow(Color=buttonhighlight, OffX=1, OffY=1, Positive=0); height: 100%; width: 100%; text-align: center;">' + E.innerHTML + "</span></span>"
		}
		if (E.onclick != null) {
			E.cDisabled_onclick = E.onclick;
			E.onclick = null
		}
		if (E.onmouseover != null) {
			E.cDisabled_onmouseover = E.onmouseover;
			E.onmouseover = null
		}
		if (E.onmouseout != null) {
			E.cDisabled_onmouseout = E.onmouseout;
			E.onmouseout = null
		}
	}
}
function enableButton(B) {
	if (!B) {
		return false
	}
	var D = null;
	if (typeof B == "string") {
		D = document.getElementById(B)
	} else {
		D = B
	}
	if (!D) {
		return false
	}
	var A = D.cDisabled;
	A = (A != null);
	if (A) {
		D.cDisabled = null;
		D.innerHTML = D.children[0].children[0].innerHTML;
		if (D.cDisabled_onclick != null) {
			D.onclick = D.cDisabled_onclick;
			D.cDisabled_onclick = null
		}
		if (D.cDisabled_onmouseover != null) {
			D.onmouseover = D.cDisabled_onmouseover;
			D.cDisabled_onmouseover = null
		}
		if (D.cDisabled_onmouseout != null) {
			D.onmouseout = D.cDisabled_onmouseout;
			D.cDisabled_onmouseout = null
		}
	}
}
var attachmentConstants = {
	height: 22
};
function downloadAttachment(A, D, B) {}
function Attachment(D, G, Q, F, I, B, E, O, R, P, N, H, M, K, J, A, L) {
	this.id = D;
	this.reference = G;
	this.subReference = Q;
	this.category = F;
	this.type = I;
	this.filename = B;
	this.mimeType = E;
	this.createDate = O;
	this.size = R;
	this.fileUrl = P;
	this.description = N || "";
	this.needClone = H;
	this.extension = M;
	this.icon = K;
	this.isCanTransform = A == "enable" ? true : false;
	this.onlineView = J == null ? true : J;
	this.extReference = "";
	this.extSubReference = "";
	this.showArea = "";
	this.embedInput = "";
	this.hasSaved = false;
	this.v = L;
	this.canFavourite = true;
	this.isShowImg = false;
	this.fileUrl2 = P
}
var pw = new Object();
function loadInit() {
	var E = "ActiveXObject.Kinggrid.iWebOffice";
	var F = window.sessionStorage;
	if (F) {
		var A = F.getItem(E);
		if (A != undefined && (typeof JSON != "undefined")) {
			pw = JSON.parse(A)
		}
	}
	if (!pw.inited) {
		try {
			var D = "";
			if (navigator.cpuClass.indexOf("x86") != -1) {
				D = new ActiveXObject("Kinggrid.iWebOffice")
			} else {
				D = new ActiveXObject("Kinggrid.iWebOffice_x64")
			}
			pw.installDoc = D.WebApplication(".doc");
			pw.installXls = D.WebApplication(".xls");
			pw.installWps = D.WebApplication(".wps");
			pw.installEt = D.WebApplication(".et")
		} catch (B) {
			pw.installDoc = false;
			pw.installXls = false;
			pw.installWps = false;
			pw.installEt = false
		}
	}
	if (pw.installDoc) {
		attFileType.put("application/msword", "OfficeWord");
		attFileType.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document", "OfficeWord");
		attFileType.put(".doc", "OfficeWord");
		attFileType.put(".docx", "OfficeWord");
		attFileType.put("application/kswps", "OfficeWord");
		attFileType.put(".wps", "OfficeWord")
	}
	if (pw.installXls) {
		attFileType.put("application/vnd.ms-excel", "OfficeExcel");
		attFileType.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "OfficeExcel");
		attFileType.put(".xls", "OfficeExcel");
		attFileType.put(".xlsx", "OfficeExcel");
		attFileType.put("application/kset", "OfficeExcel");
		attFileType.put(".et", "OfficeExcel")
	}
	if (pw.installWps) {
		attFileType.put("application/kswps", "OfficeWord");
		attFileType.put(".wps", "OfficeWord");
		attFileType.put("application/msword", "OfficeWord");
		attFileType.put("application/vnd.openxmlformats-officedocument.wordprocessingml.document", "OfficeWord");
		attFileType.put(".doc", "OfficeWord");
		attFileType.put(".docx", "OfficeWord")
	}
	if (pw.installEt) {
		attFileType.put("application/kset", "OfficeExcel");
		attFileType.put(".et", "OfficeExcel");
		attFileType.put("application/vnd.ms-excel", "OfficeExcel");
		attFileType.put("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "OfficeExcel");
		attFileType.put(".xls", "OfficeExcel");
		attFileType.put(".xlsx", "OfficeExcel")
	}
	pw.inited = true;
	if (typeof F !== "undefined" && (typeof JSON != "undefined")) {
		F.setItem(E, JSON.stringify(pw))
	}
}
function getMimeType(E, D) {
	var B = D.toLocaleLowerCase();
	var A = B.lastIndexOf(".");
	if (A != -1) {
		B = B.substring(A)
	}
	if (attFileType) {
		if (attFileType.get(E)) {
			return attFileType.get(E)
		}
		if (attFileType.get(B)) {
			return attFileType.get(B)
		}
	}
	return null
}
Attachment.prototype.show = function (D, B, A) {
	document.write(this.toString(D, B, A))
};
var allowTransType = ["doc", "docx", "xls", "xlsx", "ppt", "pptx", "rtf", "eio"];
Attachment.prototype.allowTrans = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var A = this.filename.toLowerCase();
	for (var B = 0; B < allowTransType.length; B++) {
		if (A.endsWith("." + allowTransType[B])) {
			return true
		}
	}
	return false
};
var imgType = ["jpg", "gif", "jpeg", "png", "bmp"];
Attachment.prototype.isImg = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var B = this.filename.toLowerCase();
	var A = B.lastIndexOf(".");
	A = B.substring(A + 1);
	for (var D = 0; D < imgType.length; D++) {
		if (A == imgType[D]) {
			return true
		}
	}
	return false
};
function initAttachmentImageShow() {
	var A = $(".attachmentImageShow");
	if (A.length > 0 && A.length == A.attr("imgLength")) {
		return
	}
	function B() {
		function G(P) {
			if (P.type != 0 && P.type != 3) {
				return false
			}
			var O = P.filename.toLowerCase();
			var N = O.lastIndexOf(".");
			N = O.substring(N + 1);
			for (var Q = 0; Q < imgType.length; Q++) {
				if (N == imgType[Q]) {
					return true
				}
			}
			return false
		}
		var H = new Array();
		var D = {};
		$(".comp").each(function () {
			var R = $(this);
			if (R.attrObj("_comp")) {
				R = R.attrObj("_comp")
			}
			var N = R.attr("comp"),
			Q,
			S;
			if (N) {
				Q = $.parseJSON("{" + N + "}");
				S = Q.type
			}
			if ("fileupload" === S) {
				var T = Q.attsdata ? Q.attsdata : R.attr("attsdata") ? $.parseJSON(R.attr("attsdata")) : null;
				if (T && T instanceof Array) {
					var O;
					for (var P = 0; P < T.length; P++) {
						O = T[P];
						if (O.type == 2) {
							continue
						}
						if (G(O)) {
							D[O.fileUrl] = {
								dataId: O.fileUrl,
								src: _ctxPath + "/fileUpload.do?method=showRTE&type=image&fileId=" + O.fileUrl + "&createdate=" + O.createdate.substring(0, 10) + "&filename=" + encodeURIComponent(O.filename)
							}
						}
					}
				}
			}
		});
		var M;
		var L = ["officeFrameDiv", "zwIframe", "mainbodyFrame", "officeDivInner"];
		for (var I = 0; I < L.length; I++) {
			var E = L[I];
			var J = document.getElementById(E);
			if (J) {
				M = J;
				break
			}
		}
		A.each(function () {
			var N = D[this.id];
			if (N !== undefined) {
				H.push(N)
			}
		}).attr("imgLength", H.length);
		if (H.length > 0) {
			var K = "";
			A.each(function (N, O) {
				var P = O.getAttribute("touchid");
				if (typeof P != "undefined" && P != null) {
					K = P;
					return
				}
			});
			if (K == "") {
				var F = new Date().getTime();
				K = H[0].dataId + F
			}
			A.attr("touchid", K);
			A.touch({
				id: K,
				datas: H,
				targetWindow: getCtpTop(),
				onShow: function () {
					if (M) {
						M.style.visibility = "hidden"
					}
					if (hideOfficeObj) {
						hideOfficeObj()
					}
				},
				onHide: function () {
					if (M) {
						M.style.visibility = "visible"
					}
					if (showOfficeObj) {
						showOfficeObj()
					}
				}
			})
		}
	}
	B()
}
var pdfType = ["pdf"];
Attachment.prototype.isPdf = function () {
	if (this.type != 0 && this.type != 3) {
		return false
	}
	var A = this.filename.toLowerCase();
	for (var B = 0; B < pdfType.length; B++) {
		if (A.endsWith("." + pdfType[B])) {
			return true
		}
	}
	return false
};
Attachment.prototype.canEditOnline = function () {
	if (this.type != 0) {
		return false
	}
	var A = getMimeType(this.mimeType, this.filename);
	if (A) {
		return true
	}
	return false
};
Attachment.prototype.toString = function (V, B, H, X) {
	var S = _ctxPath;
	loadInit();
	var Z = "";
	var R = null;
	if (this.type != 2) {
		R = $("#attachmentArea" + this.showArea).prev()
	} else {
		R = $("#attachment2Area" + this.showArea).prev()
	}
	var f = "left";
	var T = ";height: " + attachmentConstants.height + "px; ";
	var b = "noWrap";
	var M = "";
	if (R && R.attr("comp") != undefined) {
		var J = $.parseJSON("{" + R.attr("comp") + "}");
		T = ((J.displayMode == undefined) ? T : ";");
		b = ((J.displayMode == undefined) ? b : "");
		if (!v3x.isMSIE8) {
			M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
		} else {
			if (J.type != "fileupload") {
				M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
			} else {
				if (J.canDeleteOriginalAtts == true) {
					M = ((J.displayMode == undefined) ? M : "word-wrap:break-word; word-break:break-all;")
				}
			}
		}
	}
	this.filename = this.filename.replace(/&nbsp;/g, " ");
	var N = "";
	if (B) {
		N = "attachmentShowDelete"
	}
	if ($("#attachmentArea" + this.showArea).width() == 0) {
		var I = "auto"
	} else {
		var I = $("#attachmentArea" + this.showArea).width() + "px"
	}
	Z += "<div id='attachmentDiv_" + this.fileUrl2 + "' class='attachment_block " + N + "' style='position:relative;font-size:12px; max-width:" + I + "; float:" + f + T + " line-height:22px;*line-height:22px;background:#e6eef7;padding:2px 10px;border-radius:3px; overflow:hidden; " + M + "' " + b + ' onmouseenter="onAttachmentMouseEnter(this)" onmouseleave="onAttachmentMouseLeave(this)">';
    
	//客开：徐矿集团【是否添加单选框】 chenqiang 2019年3月28日 start
	debugger;
	try{
		var index = this.filename.lastIndexOf(".");
		var index = this.filename.lastIndexOf(".");
		var title = this.filename.substring(0,index);
    	if(xkjtAttachmentHasRadio=="true" && canClick=="true"){
    	
    		Z += "<label for="+this.fileUrl+" class='margin_r_10 hand' style='position:absolute;left:0px'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' fileName='"+this.filename+"'></label>";
		}else if(xkjtAttachmentHasRadio=="true" && canClick=="false"){
			if(this.fileUrl==mainAttachmentId){
				Z += "<label for="+this.fileUrl+" class='margin_r_10 hand' style='position:absolute;left:0px'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' disabled='true' checked='checked' fileName='"+this.filename+"'></label>";
			}else{
				Z += "<label for="+this.fileUrl+" class='margin_r_10 hand' style='position:absolute;left:0px'><input class='xkjtRadio' onclick='getXkjtTitleAttachmentTitle(this)' type='radio' value='0' id="+this.fileUrl+" name='option' disabled='true' fileName='"+this.filename+"'></label>";
			}
		}
	}catch(e){
	}
    
	//客开：徐矿集团【是否添加单选框】 chenqiang 2019年3月28日 end
	var D = "";
	if (this.type != 1 && !this.isShowImg) {
		D += '&nbsp;<span style="word-wrap:break-word; word-break:break-all;" class="ico16 ' + this.icon.substring(0, this.icon.indexOf(".")) + '_16 margin_r_5"></span>'
	}
	var U = "";
	var P = "";
	if (this.isShowImg) {
		Z += "<img style=\"CURSOR: pointer\" onclick=\"openCtpWindow({'url':$(this).attr('src') + '&showType=small'})\" src=\"" + S + "/fileUpload.do?method=showRTE&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + '&type=image">'
	} else {
		if (V && (this.type == 0 || this.type == 3 || this.type == 5)) {
			if (this.type == 3) {
				U += "<a onclick='downloadAttachment(\"" + this.fileUrl2 + '","' + this.createDate.substring(0, 10) + '","' + escapeStringToHTML(this.filename) + '")\' title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' class='like-a'>"
			} else {
				U += '<a href="' + S + "/file" + (this.v ? "Download" : "Upload") + ".do?method=download&fileId=" + this.fileUrl2 + (this.v ? ("&v=" + this.v) : "") + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + CsrfGuard.getUrlSurffix() + '" title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;'>"
			}
		}
	}
	if (H && this.category != 2) {
		Z += "<a onclick=\"editOfficeOnline('" + this.id + '\')" title="' + escapeStringToHTML(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' class='like-a'>";
		V = true
	}
	if ((this.type == 2 || this.type == 4) && this.description && (H != false)) {
		var Y = "";
		var G = "";
		if (this.type == 4) {
			try {
				if (parent.parent.openerSummaryId && parent.parent.openerSummaryId != this.reference) {
					G = "&openerSummaryId=" + parent.parent.openerSummaryId
				} else {
					if (noFlowRecordId) {
						G = "&noFlowRecordId=" + noFlowRecordId
					}
				}
			} catch (d) {}
		}
		if (this.mimeType == "collaboration") {
			Y = "openDetailURL('" + S + "/collaboration/collaboration.do?method=summary&openFrom=glwd&type=&affairId=" + this.description + "&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "')"
		}
		if (this.mimeType == "edoc") {
			Y = "openDetailURL('" + S + "/edocController.do?method=detailIFrame&from=Done&openFrom=glwd&affairId=" + this.description + "&isQuote=true&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "')"
		} else {
			if (this.mimeType == "km") {
				Y = "openDetailURL('" + S + "/doc.do?method=docOpenIframeOnlyId&openFrom=glwd&docResId=" + this.description + "&baseObjectId=" + this.reference + "&baseApp=" + this.category + G + CsrfGuard.getUrlSurffix() + "')"
			} else {
				if (this.mimeType == "meeting") {
					Y = "openDetailURL('" + S + "/mtMeeting.do?method=myDetailFrame&id=" + this.description + "&isQuote=true&baseObjectId=" + this.reference + "&baseApp=" + this.category + CsrfGuard.getUrlSurffix() + "&state=10')"
				} else {
					if (this.mimeType == "info") {
						Y = "openDetailURL('" + S + "/info/infoDetail.do?method=summary&baseObjectId=" + this.reference + "&refAffairId=" + this.description + CsrfGuard.getUrlSurffix() + "')"
					}
				}
			}
		}
		U += '<a class="hand" onclick="' + Y + '" title="' + escapeStringToHTML(this.filename) + "\" style='cursor: hand;font-size:12px;'>";
		V = true
	}
	if (this.type != 1 && this.category != 2) {
		var c = 15;
		if (!this.isShowImg) {
			if (this.filename.length > c) {
				P += this.filename.substring(0, c).escapeHTML() + ".."
			} else {
				P += this.filename.escapeHTML()
			}
		}
	} else {
		if (!this.isShowImg) {
			P += this.filename
		}
	}
	if (this.size && this.type == 0) {
		if (!this.isShowImg) {
			var K = "";
			if (this.size >= 1048576) {
				K = (parseInt(this.size / 1048576) + 1) + "MB"
			} else {
				K = (parseInt(this.size / 1024) + 1) + "KB"
			}
			P += "(" + K + ")"
		}
	}
	if (!this.isShowImg && this.embedInput != null && this.embedInput.indexOf("field") >= 0) {
		P = "<span id='" + this.embedInput + "_txt' style='line-height:normal'>" + P + "</span>"
	}
	var a = "";
	var F = "";
	var Q = "";
	var L = ' onmouseenter="onAttachmentButtonMouseenter(this)"  onmouseleave="onAttachmentButtonMouseleave(this)" ';
	if (V && !this.isShowImg) {
		F = '<td align="center"' + L + ">" + U + '<span class="ico24 download_24"> </span></a></td>'
	}
	if (typeof($.ctx) !== "undefined") {
		var O = $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("baseOfficeTrans") || $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("yongzhongOfficeTrans")
	}
	if (typeof(vPortal) !== "undefined") {
		var O = vPortal && vPortal.plugins.contains("baseOfficeTrans") || vPortal && vPortal.plugins && vPortal.plugins.contains("yongzhongOfficeTrans")
	}
	var O = ($ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("baseOfficeTrans") || $ && $.ctx && $.ctx.plugins && $.ctx.plugins.contains("yongzhongOfficeTrans"));
	if (O && V && this.isCanTransform && this.allowTrans() && this.hasSaved) {
		a += "<td align='center'" + L + '><a href="' + S + "/officeTrans.do?method=view&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + "\" target='downloadFileFrame' style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
	} else {
		if (this.hasSaved && this.isImg()) {
			a += "<td align='center'><a id =" + this.fileUrl2 + " onmouseenter='initAttachmentImageShow();' class ='attachmentImageShow' style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
		} else {
			if (this.hasSaved && this.isPdf()) {
				a += "<td align='center'><a onclick=preViewDialog(\"" + S + "/fileDownload.do?method=doDownload4Office&type=Pdf&isOpenFile=true&fileId=" + this.fileUrl2 + "&createDate=" + this.createDate.substring(0, 10) + "&filename=" + encodeURIComponent(this.filename) + "&v=" + this.v + "\")   style='font-size:12px;color:#757575;' title='" + $.i18n("officeTrans.view.label") + "'><span class='ico24 preview_24'></span></a></td>"
			}
		}
	}
	if (typeof($.ctx) !== "undefined") {
		var A = $.ctx.plugins.contains("doc")
	}
	if (typeof(vPortal) !== "undefined") {
		var A = vPortal && vPortal.plugins.contains("doc")
	}
	if (A && seeyonProductId > 0 && this.hasSaved && this.canFavourite && this.type != 2 && !this.isShowImg) {
		var W = 'style="display: none;"',
		E = "";
		if (this.hasFavorite) {
			E = W;
			W = ""
		}
		Q += '<td align="center"' + L + '><span id="favoriteSpan' + this.fileUrl2 + '" class="ico24 unstore_24" ' + E + ' title="' + $.i18n("doc.jsp.knowledge.collection") + '" onclick="favorite(\'' + this.category + "', '" + this.fileUrl2 + "',false,4)\" > </span>";
		Q += '<span id="cancelFavorite' + this.fileUrl2 + '" class="ico24 stored_24" ' + W + ' title="' + $.i18n("doc.jsp.cancel.collection.js") + '" onclick="cancelFavorite(\'' + this.category + "', '" + this.fileUrl2 + "',false,4)\" > </span></td>"
	}

	if (!B && !this.isShowImg && !H && this.type != 2) {
		Z += '<div class="attachment_operate">';
		Z += '<table class="attachment_operate_btn"  title="' + escapeStringToHTML(this.filename) + '"  border="0" cellpadding="0" cellspacing="0">';
		Z += "<tr>";
		Z += Q;
		Z += F;
		Z += a;
		Z += "</tr>";
		Z += "</table>";
		Z += '<table class="attachment_operate_btn_bg" border="0" cellpadding="0" cellspacing="0">';
		Z += "<tr>";
		if (Q.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		if (F.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		if (a.length > 0) {
			Z += '<td align="center"><div>&nbsp;</div></td>'
		}
		Z += "</tr>";
		Z += "</table>";
		Z += '<div class="attachment_operate_bg">&nbsp;</div>';
		Z += "</div>"
	}
	if (this.type != 1 && !this.isShowImg) {
		Z += D
	}
	if (B) {
		Z += U
	} else {
		if (this.type == 2) {
			Z += U
		}
	}
	Z += P;
	if (B) {
		Z += '</a><span class="ico16 affix_del_16" title="' + $.i18n("common.button.delete.label") + '" onclick="deleteAttachment(\'' + this.fileUrl2 + "')\" ></span>"
	} else {
		Z += "</a>"
	}
	if ((B && this.canEditOnline() && this.id != undefined) && this.category == 2) {
		Z += '<iframe id=\'officeEditorIframe\' name=\'officeEditorIframe\' frameborder="0" height="0" width="0" scrolling="no" marginheight="0" marginwidth="0"></iframe>';
		Z += '<span id="editOnline_' + this.id + '" > <a class="hand" title = "' + $.i18n("common.toolbar.edit.label") + '" onclick="editOfficeOnline4Form(\'' + this.id + "','" + this.fileUrl + "','" + this.filename + "','" + this.mimeType + "','" + this.category + "','" + this.createDate + '\')"><span class="ico16 editor_16"></span></a></span>'
	}
	Z += "&nbsp;</div>";
	return Z
};
var isAttachmentFavoriteStateInited = false;
function initAttachmentFavoriteState() {
	if (isAttachmentFavoriteStateInited) {
		return
	}
	var A = [];
	$(".attachment_block").each(function () {
		var B = this.id.split("_");
		if (B.length == 2) {
			A.push(B[1])
		}
	});
	callBackendMethod("knowledgeFavoriteManager", "hasFavoriteByIds", A, {
		success: function (B) {
			if (B != null) {
				for (var D = 0; D < A.length; D++) {
					if (B[D]) {
						$("#cancelFavorite" + A[D]).show();
						$("#favoriteSpan" + A[D]).hide()
					}
				}
			}
		},
		error: function (B) {
			if (console && console.log) {
				console.log("Ajax Failed: knowledgeFavoriteManager--->hasFavoriteByIds")
			}
		}
	});
	isAttachmentFavoriteStateInited = true
}
function onAttachmentMouseEnter(B) {
	initAttachmentFavoriteState();
	var E = $(B);
	if (navigator.userAgent.indexOf("Firefox") > -1 && E.attr("isSetWidth") != "yes") {
		E.width(parseFloat(E.width()) + 1).attr("isSetWidth", "yes");
		var A = E.css("white-space");
		if (A != null) {
			E.css("white-space", A)
		}
	}
	
	var D = E.find(".attachment_operate_btn td").size();
	E.find("td").width(E.width() / D);
	E.find(".attachment_operate").show();
	E.find(".attachment_operate_bg").css("filter", "alpha(opacity = 30)")
}
function onAttachmentMouseLeave(A) {
	$(A).find(".attachment_operate").hide()
}
function onAttachmentButtonMouseenter(A) {
	var B = $(A);
	B.parent().closest(".attachment_block").find(".attachment_operate_btn_bg div").eq(B.index()).show()
}
function onAttachmentButtonMouseleave(A) {
	var B = $(A);
	B.parent().closest(".attachment_block").find(".attachment_operate_btn_bg div").hide()
}
function editOfficeOnline4Form(I, A, B, H, G, F) {
	getCtpTop().needShowContent = true;
	var E = getMimeType(H, B);
	B = encodeURIComponent(B);
	var D = _ctxServer + "/genericController.do?ViewPage=ctp/common/fileUpload/officeEdit&id=" + I + "&content=" + A + "&bodyType=" + E + "&createDate=" + F + "&category=" + G + "&filename=" + B;
	officeEditorIframe.location.href = D
}
function deleteAtt4Form(B) {
	var A = B.getAttribute ? B.getAttribute("fileUrl") : B.fileUrl;
	var D = B.getAttribute ? B.getAttribute("fileName") : B.fileName;
	deleteAttachmentForForm(A, D)
}
function openDetailURL(A) {
	var B = v3x.openWindow({
			url: A,
			dialogType: "open",
			workSpace: "yes"
		})
}
Attachment.prototype.toInput = function () {
	var A = "";
	A += "<input type='hidden' name='attachment_id' value='" + this.id + "'>";
	A += "<input type='hidden' name='attachment_reference' value='" + this.reference + "'>";
	A += "<input type='hidden' name='attachment_subReference' value='" + this.subReference + "'>";
	A += "<input type='hidden' name='attachment_category' value='" + this.category + "'>";
	A += "<input type='hidden' name='attachment_type' value='" + this.type + "'>";
	A += "<input type='hidden' name='attachment_filename' value='" + escapeStringToHTML(this.filename) + "'>";
	A += "<input type='hidden' name='attachment_mimeType' value='" + this.mimeType + "'>";
	A += "<input type='hidden' name='attachment_createDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='attachment_size' value='" + this.size + "'>";
	A += "<input type='hidden' name='attachment_fileUrl' value='" + this.fileUrl + "'>";
	A += "<input type='hidden' name='attachment_description' value='" + this.description + "'>";
	A += "<input type='hidden' name='attachment_needClone' value='" + this.needClone + "'>";
	A += "<input type='hidden' name='attachment_extReference' value='" + this.extReference + "'>";
	A += "<input type='hidden' name='attachment_extSubReference' value='" + this.extSubReference + "'>";
	return A
};
Attachment.prototype.toContentInput = function () {
	var A = "";
	A += "<input type='hidden' name='content_attachment_id' value='" + this.id + "'>";
	A += "<input type='hidden' name='content_attachment_reference' value='" + this.reference + "'>";
	A += "<input type='hidden' name='content_attachment_subReference' value='" + this.subReference + "'>";
	A += "<input type='hidden' name='content_attachment_category' value='" + this.category + "'>";
	A += "<input type='hidden' name='content_attachment_type' value='" + this.type + "'>";
	A += "<input type='hidden' name='content_attachment_filename' value='" + escapeStringToHTML(this.filename) + "'>";
	A += "<input type='hidden' name='content_attachment_mimeType' value='" + this.mimeType + "'>";
	A += "<input type='hidden' name='content_attachment_createDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='content_attachment_size' value='" + this.size + "'>";
	A += "<input type='hidden' name='content_attachment_fileUrl' value='" + this.fileUrl + "'>";
	A += "<input type='hidden' name='content_attachment_description' value='" + this.description + "'>";
	A += "<input type='hidden' name='content_attachment_needClone' value='" + this.needClone + "'>";
	return A
};
Attachment.prototype.toJson = function () {
	return '{id:"' + this.id + '", reference:"' + this.reference + '", subReference:"' + this.subReference + '", category:"' + this.category + '", type:"' + this.type + '", filename:"' + escapeStringToHTML(this.filename) + '", mimeType:"' + this.mimeType + '", createDate:"' + this.createDate + '", size:"' + this.size + '", fileUrl:"' + this.fileUrl + '", description:"' + this.description + '", needClone:"' + this.needClone + '",extension:"' + this.extension + '",icon:"' + this.icon + '",extReference:"' + this.extReference + '",extSubReference:"' + this.extSubReference + '"}'
};
function showAttachment(L, K, B, A, E) {
	try {
		if (!theToShowAttachments) {
			return
		}
		var D = 0;
		var J = "";
		for (var F = 0; F < theToShowAttachments.size(); F++) {
			var I = theToShowAttachments.get(F);
			if (I.subReference == L && I.type == K) {
				J += I.toString(true, false);
				D++
			}
		}
		if (!E) {
			document.write(J);
			document.close()
		} else {
			var N = document.getElementById(E);
			N.innerHTML = J
		}
		if (D > 0) {
			if (B) {
				var M = document.getElementById(B);
				if (M) {
					M.style.display = ""
				}
			}
			if (A) {
				var G = document.getElementById(A);
				if (G) {
					G.innerHTML = "" + D
				}
			}
		} else {
			if (B) {
				var M = document.getElementById(B);
				if (M) {
					M.style.display = "none"
				}
			}
		}
		if (A) {
			var G = document.getElementById(A);
			if (G) {
				G.innerHTML = "" + D
			}
		}
	} catch (H) {}
}
function exportAttachment(D) {
	if (D.getAttribute("expand")) {
		return
	}
	var B = D.className;
	D.className = "div-float";
	var A = D.scrollHeight;
	if (A >= (attachmentConstants.height * 2)) {
		D.className = "attachment-all-80"
	} else {
		D.className = B
	}
	D.setAttribute("expand", "yes")
}
var fileUploadAttachments = new Properties();
var fileUploadAttachment = null;
var fileUploadQuantity = 5;
var attachObject = "";
var atttachTr = "";
var attachDelete;
var attachCount = true;
var theHasDeleteAtt = new Properties();
var attFileType = new Properties();
function isUploadAttachment() {
	return !fileUploadAttachments.isEmpty()
}
function resetAttachment(E, B, D, A) {
	attachObject = E;
	atttachTr = B;
	attachDelete = D;
	attachCount = A;
	fileUploadAttachment = new Properties()
}
function clearUploadAttachments() {
	attachObject = "";
	atttachTr = "";
	attachDelete = null;
	attachCount = true;
	fileUploadAttachment.clear();
	fileUploadAttachment = null
}
function saveAttachment(B, F) {
	var G = null;
	if (fileUploadAttachment != null) {
		G = fileUploadAttachment.values()
	} else {
		G = fileUploadAttachments.values()
	}
	var E = B || document.getElementById("attachmentInputs") || document.getElementById("attachmentEditInputs");
	var A = "";
	for (var D = 0; D < G.size(); D++) {
		A += G.get(D).toInput()
	}
	if (E) {
		E.innerHTML = A;
		if (!F || F != "false") {
			if (attActionLog && !fileUploadAttachments.isEmpty()) {
				E.innerHTML += "<input type='hidden' name='isEditAttachment' value='1'/>"
			}
		}
	} else {
		alert("Warn: Save attachments unsuccessful");
		return false
	}
	return true
}
function saveAttachmentPart(F) {
	var H = null;
	if (fileUploadAttachment != null) {
		H = fileUploadAttachment.values()
	} else {
		H = fileUploadAttachments.values()
	}
	if (F) {
		var E = $("#" + F);
		var D = $.parseJSON("{" + E.attr("comp") + "}");
		var G = D.attachmentTrId;
		var A = "";
		for (var B = 0; B < H.size(); B++) {
			if (G == H.get(B).showArea) {
				A += H.get(B).toInput()
			}
		}
		E.append($(A))
	} else {
		alert("ERROR: \u4f20\u5165\u53c2\u6570\u9519\u8bef\uff01");
		return false
	}
	return true
}
function saveContentAttachment(B) {
	var F = null;
	if (fileUploadAttachment != null) {
		F = fileUploadAttachment.values()
	} else {
		F = fileUploadAttachments.values()
	}
	var A = "";
	for (var D = 0; D < F.size(); D++) {
		A += F.get(D).toContentInput()
	}
	var E = B || parent.detailRightFrame.document.getElementById("contentAttachmentInputs");
	if (E) {
		E.innerHTML = A;
		E.innerHTML += "<input type='hidden' name='isContentAttchmentChanged' value='1'>"
	} else {
		alert("Warn: Save attachments unsuccessful");
		return false
	}
	return true
}
function getAttachmentsToMap() {
	var D = fileUploadAttachments.values();
	if (!D || D.isEmpty()) {
		return true
	}
	var A = "";
	for (var B = 0; B < D.size(); B++) {
		A += D.get(B).toMap()
	}
	if (A != null) {
		return A
	}
}
Attachment.prototype.toMap = function () {
	var A = "#attachment_id=" + this.id + ";";
	A += "attachment_reference" + this.reference + ";";
	A += "attachment_subReference=" + this.subReference + ";";
	A += "attachment_category=" + this.category + ";";
	A += "attachment_type=" + this.type + ";";
	A += "attachment_filename=" + escapeStringToHTML(this.filename) + ";";
	A += "attachment_mimeType=" + this.mimeType + ";";
	A += "attachment_createDate=" + this.createDate + ";";
	A += "attachment_size=" + this.size + ";";
	A += "attachment_fileUrl=" + this.fileUrl + ";";
	A += "attachment_description=" + this.description + ";";
	A += "attachment_needClone=" + this.needClone + ";";
	return A
};
function cloneAllAttachments() {
	var B = fileUploadAttachments.values();
	for (var A = 0; A < B.size(); A++) {
		B.get(A).needClone = true
	}
}
function deleteAttachment(fileUrl, showAlert) {
	var file = fileUploadAttachments.get(fileUrl);
	if (file == null) {
		return
	}
	if (showAlert != false) {
		if (file.type == 2) {
			if (!confirm($.i18n("assdoc.isdeletesomeone.mesg").format(file.filename))) {
				return 1
			}
		} else {
			if (!confirm($.i18n("common.isdeletesomeone.label").format(file.filename))) {
				return 1
			}
		}
	}
	fileUploadAttachments.remove(fileUrl);
	document.getElementById("attachmentDiv_" + fileUrl).parentNode.removeChild(document.getElementById("attachmentDiv_" + fileUrl));
	showAttachmentNumber(file.type, file);
	var num = getFileAttachmentNumber(file.type, file.showArea);
	if (num < 1) {
		if (!(typeof(_updateAttachmentState) != "undefined" && _updateAttachmentState)) {
			showAtachmentTR(file.type, "none", file.showArea)
		}
	}
	var attachmentInputsObj = document.getElementById("attachmentInputs");
	var canUpdateAttachmentFromSended = document.getElementById("canUpdateAttachmentFromSended");
	if (canUpdateAttachmentFromSended && canUpdateAttachmentFromSended.value == "submit") {
		updateAttachment("del", attachmentInputsObj)
	}
	if (typeof(removeChanged) != "undefined") {
		removeChanged = true
	}
	try {
		quoteDocumentFrame.window.deselectItem(fileUrl)
	} catch (e) {}
	try {
		var attdiv = "attachment2Area";
		if (file.showArea != null) {
			attdiv += file.showArea
		}
		eval($("#" + attdiv).attr("callMethod"))()
	} catch (e) {}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
	try {
		var attdiv = "attachmentArea";
		if (file.showArea != null) {
			attdiv += file.showArea
		}
		eval($("#" + attdiv).attr("delCallMethod"))(fileUrl)
	} catch (e) {}
}
function deleteAttachmentForImage(A, D) {
	deleteAttachment(A, D);
	var B = document.getElementById("imageId");
	if (B) {
		B.value = ""
	}
}
function dymcCreateFileUpload(L, S, T, J, D, G, P, R, N, O, F, B, E, M) {
	var A = _ctxPath + "/fileUpload.do?type=" + ((R == null) ? "" : ("&firstSave=" + R)) + "&applicationCategory=" + S + "&extensions=" + ((T == null) ? "" : T) + ((J == null) ? "" : ("&quantity=" + J)) + ((D == null) ? "" : ("&isEncrypt=" + D)) + ((P == null) ? "" : ("&attachmentTrId=" + P)) + ((G == null) ? "" : ("&callMethod=" + G)) + ((E == null) ? "" : ("&maxSize=" + E)) + ((B == null) ? "" : ("&takeOver=" + B));
	var I = false;
	try {
		var K = new ActiveXObject("UFIDA_Upload.A8Upload.2");
		K.SetLimitFileSize(1024);
		I = true
	} catch (Q) {
		I = false
	}
	A += ((!I) ? "" : ("&isA8geniusAdded=" + I));
	var H = "<div id='attachmentArea" + ((P == null) ? "" : P) + "' style=\"overflow: auto;\" requrl='" + A + "'></div>";
	if ($("#downloadFileFrame").length == 0) {
		H = H + '<div style="display:none;"><iframe name="downloadFileFrame" id="downloadFileFrame" frameborder="0" width="0" height="0"></iframe></div>'
	}
	$("#" + L).replaceWith(H);
	parseAttData(O, P, true, N, F, M)
}
function parseAttData(I, H, G, B, E, F) {
	if (I != null && I != "") {
		I = $.parseJSON(I)
	}
	if (I && I instanceof Array) {
		var A;
		for (var D = 0; D < I.length; D++) {
			A = I[D];
			if (G) {
				if (A.type == 2) {
					continue
				}
			} else {
				if (A.type != 2) {
					continue
				}
			}
			if (F == null) {
				F = true
			}
			if (H) {
				addAttachmentPoi(A.type, A.filename, A.mimeType, A.createdate ? A.createdate.toString() : null, A.size, A.fileUrl, B, E, A.description, A.extension, A.icon, H, A.reference, A.category, false, null, "", true, A.officeTransformEnable, A.v, F)
			} else {
				addAttachment(A.type, A.filename, A.mimeType, A.createdate ? A.createdate.toString() : null, A.size, A.fileUrl, B, E, A.description, A.extension, A.icon, A.reference, A.category, false, null, true, A.officeTransformEnable, A.v, F)
			}
		}
	}
}
function dymcCreateAssdoc(E, H, A, G, F, D) {
	var B = '<div id="attachment2Area' + (H ? H : "") + '" poi="' + (H ? H : "") + '" requestUrl="' + _ctxPath + "/ctp/common/associateddoc/assdocFrame.do?isBind=" + (A ? A : "") + "&referenceId=" + (F ? F : "") + "&applicationCategory=" + (D ? D : "") + "&poi=" + (H ? H : "") + '" style="overflow: auto;"></div>';
	$("#" + E).replaceWith(B);
	parseAttData(G, H, false)
}
function insertAttachment(D, B) {
	var A = $("#attachmentArea").attr("requrl");
	if (D != null && D != "") {
		A += "&targetAction=" + D
	}
	if (B) {
		A += "&importExplain=" + B
	}
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("fileupload.page.title"),
			transParams: {
				parentWin: window
			},
			url: A + CsrfGuard.getUrlSurffix(A),
			width: 400,
			height: 250
		})
}
function preViewDialog(A) {
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("officeTrans.view.label"),
			transParams: {
				parentWin: window
			},
			url: A,
			width: 1280,
			height: 800
		})
}
function insertAttachmentPoi(D) {
	var B = "attachmentArea" + D;
	var A = $("#" + B).attr("requrl");
	getCtpTop().addattachDialog = null;
	getCtpTop().addattachDialog = getCtpTop().$.dialog({
			title: $.i18n("fileupload.page.title"),
			transParams: {
				parentWin: window
			},
			url: A + CsrfGuard.getUrlSurffix(A),
			width: 400,
			height: 250
		})
}
function quoteDocument(E) {
	if (v3x.getBrowserFlag("OpenDivWindow") == true) {
		var D = "attachment2Area";
		if (E != undefined) {
			D += E
		}
		var A = $("#" + D).attr("requestUrl");
		try {
			hideOfficeObj()
		} catch (B) {}
		getCtpTop().addassDialog = null;
		getCtpTop().addassDialog = getCtpTop().$.dialog({
				title: $.i18n("common.mydocument.label"),
				transParams: {
					parentWin: window,
					divid: E
				},
				url: A + CsrfGuard.getUrlSurffix(A),
				width: 1000,
				height: 800
			})
	}
}
function quoteDocumentCallback(atts, divid) {
	var attdiv = "attachment2Area";
	if (divid != undefined) {
		attdiv += divid
	}
	if (atts) {
		deleteAllAttachment(2, $("#" + attdiv).attr("poi"));
		for (var i = 0; i < atts.length; i++) {
			var att = atts[i];
			if ($("#" + attdiv).attr("poi") == att.showArea) {
				addAttachmentPoi(att.type, att.filename, att.mimeType, att.createDate, att.size, att.fileUrl, true, false, att.description, null, att.mimeType + ".gif", $("#" + attdiv).attr("poi"), att.reference, att.category, null, null, $("#" + attdiv).attr("embedInput"))
			}
		}
		if ($("#" + attdiv).attr("callMethod")) {
			try {
				eval($("#" + attdiv).attr("callMethod"))()
			} catch (e) {}
		}
	}
	if (typeof(setCssOverFlow) == "function") {
		setCssOverFlow()
	}
}
function favorite(A, F, E, D, B) {
	getA8Top().dialog = $.dialog({
			id: "docFavoriteDialog",
			url: _ctxPath + "/doc/knowledgeController.do?method=toFavorite&sourceId=" + F + "&appName=" + A + "&hasAtts=" + E + "&favoriteType=" + D + "&t=" + getUUID(),
			isClear: false,
			targetWindow: getA8Top(),
			width: 300,
			height: 95,
			closeParam: {
				show: true,
				handler: function () {
					try {
						hideMask()
					} catch (G) {}
					getA8Top().dialog.getReturnValue()
				}
			},
			title: $.i18n("doc.collect")
		});
	favoriteTip(true, F, B)
}
function cancelFavorite(A, G, F, E, D) {
	if (typeof(D) === "undefined") {
		D = ""
	}
	var B = $("#cancelFavorite" + String(G) + String(D));
	B.attr("disabled", "disabled");
	B.jsonSubmit({
		action: _ctxPath + "/doc/knowledgeController.do?method=favoriteCancel",
		paramObj: {
			docId: -1,
			sourceId: G
		},
		callback: function (H) {
			favoriteTip(false, G, D)
		}
	})
}
function favoriteTip(E, F, A, D, B) {
	if (typeof(F) === "undefined") {
		F = ""
	}
	if (typeof(A) !== "undefined") {
		F = String(F) + String(A)
	}
	if (!D) {
		D = $.i18n("doc.cancel.collect.success.js")
	}
	if (typeof(B) === "undefined") {
		B = -30
	}
	if (E) {
		$("#favoriteSpan" + F).hide();
		$("#cancelFavorite" + F).show()
	} else {
		new MxtTip({
			targetId: "cancelFavorite" + F,
			content: D,
			offsetTop: B,
			targetWindow: getA8Top(),
			beforeShowCallBack: function () {
				$("#favoriteSpan" + F).show();
				$("#cancelFavorite" + F).hide();
				$("#cancelFavorite" + F).removeAttr("disabled")
			}
		})
	}
	return
}
function addAttachment(E, S, G, F, O, N, U, D, T, I, V, H, R, A, Q, K, B, M, L, P) {
	U = U == null ? true : U;
	D = D == null ? false : D;
	T = T == null ? "" : T;
	if (attachDelete != null) {
		U = attachDelete
	}
	if (!H) {
		H = ""
	}
	if (!R) {
		R = ""
	}
	if (N == null) {
		N = S
	}
	var J = new Attachment("", H, "", R, E, S, G, F, O, N, T, D, I, V, A, B, M);
	J.hasSaved = K;
	J.hasFavorite = P;
	if (L != null) {
		J.canFavourite = L
	}
	if (fileUploadAttachment != null) {
		if (fileUploadAttachment.containsKey(N)) {
			return
		}
		fileUploadAttachment.put(N, J)
	} else {
		if (fileUploadAttachments.containsKey(N)) {
			return
		}
		fileUploadAttachments.put(N, J)
	}
	showAtachmentObject(J, U, Q);
	showAtachmentTR(E, "", "");
	if (attachCount) {
		showAttachmentNumber(E, J)
	}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
}
function addAttachmentPoi(E, W, G, F, Q, O, Y, D, X, J, Z, P, I, V, A, U, T, L, B, N, M, H, S, R) {
	Y = Y == null ? true : Y;
	D = D == null ? false : D;
	X = X == null ? "" : X;
	if (attachDelete != null) {
		Y = attachDelete
	}
	if (O == null) {
		if (X != null && X != "") {
			O = X
		} else {
			O = W
		}
	}
	var K = new Attachment(S, I, P, V, E, W, G, F, Q, O, X, D, J, Z, false, B, N);
	K.showArea = P;
	K.embedInput = T;
	K.hasSaved = L;
	K.hasFavorite = R;
	if (M != null) {
		K.canFavourite = M
	}
	if (H != null) {
		K.isShowImg = H
	}
	if (fileUploadAttachment != null) {
		if (fileUploadAttachment.containsKey(O)) {
			return
		}
		fileUploadAttachment.put(O, K)
	} else {
		if (fileUploadAttachments.containsKey(O)) {
			O += P
		}
		fileUploadAttachments.put(O, K)
	}
	showAtachmentObject(K, Y, null);
	var a = K;
	if ($("#" + a.embedInput).size() > 0) {
		$("#attachmentArea" + a.showArea).prev().children("#" + a.embedInput).attr("value", P);
		$("#attachment2Area" + a.showArea).prev().children("#" + a.embedInput).attr("value", P)
	}
	showAtachmentTR(E, "", P);
	if (attachCount) {
		showAttachmentNumber(E, K)
	}
	if (typeof(addScrollForDocument) == "function") {
		addScrollForDocument()
	}
}
function AttActionLog(A, E, B, D) {
	this.reference = A;
	this.subReference = E;
	this.logs = B;
	this.editAtt = D
}
AttActionLog.prototype.toInput = function () {
	var A = "";
	if (this.logs && !this.logs.isEmpty()) {
		A += "<input type='hidden' name='reference' value='" + this.reference + "'>";
		A += "<input type='hidden' name='subReference' value='" + this.subReference + "'>";
		A += "<input type='hidden' name='isEditAttachment' value='1'/>";
		A += "<input type='hidden' name='editAttachmentSize' value='" + this.editAtt.size() + "'/>";
		for (var B = 0; B < this.logs.size(); B++) {
			A += this.logs.get(B).toInput()
		}
		for (var B = 0; B < this.editAtt.size(); B++) {
			A += this.editAtt.get(B).toInput()
		}
	}
	return A
};
function ActionLog(D, A, B) {
	this.action = D;
	this.createDate = A;
	this.des = B
}
ActionLog.prototype.toInput = function () {
	var A = "";
	A += "<input type='hidden' name='logAction' value='" + this.action + "'>";
	A += "<input type='hidden' name='logCreateDate' value='" + this.createDate + "'>";
	A += "<input type='hidden' name='logDesc' value='" + this.des + "'>";
	return A
};
function copyActionLog(B) {
	var A = new ActionLog(B.action, B.createDate, B.des);
	return A
}
function copyAttachment(B) {
	var A = new Attachment(B.id, B.reference, B.subReference, B.category, B.type, B.filename, B.mimeType, B.createDate, B.size, B.fileUrl, B.description, B.needClone, B.extension, B.icon);
	A.onlineView = B.onlineView;
	A.extReference = B.extReference;
	A.v = B.v;
	A.extSubReference = B.extSubReference;
	return A
}
var attActionLog = null;
function editAttachments(G, D, K, A) {
	if (attActionLog == null) {
		attActionLog = new AttActionLog(D, K, null, G)
	}
	D = D || "";
	K = K || "";
	var L = v3x.openWindow({
			url: getA8Top().v3x.baseURL + "/genericController.do?ViewPage=apps/collaboration/fileUpload/attEdit&category=" + A + "&reference=" + D + "&subReference=" + K + "&_isModalDialog=true",
			width: 550,
			height: 430,
			resizable: "yes"
		});
	if (L) {
		var B = new ArrayList();
		var F = L[0].instance;
		for (var E = 0; E < F.length; E++) {
			var I = copyAttachment(F[E]);
			I.onlineView = false;
			B.add(I)
		}
		var J = new ArrayList();
		F = L[1].instance;
		if (F.length == 0) {
			return false
		}
		for (var E = 0; E < F.length; E++) {
			var I = copyActionLog(F[E]);
			J.add(I)
		}
		var H = saveEditAttachments(J, B);
		if (!H) {
			return null
		}
		return attActionLog.editAtt
	}
	return null
}
function saveEditAttachments(B, A) {
	if (!attActionLog || B.size() == 0) {
		return false
	}
	if (attActionLog.logs) {
		attActionLog.logs.addList(B)
	} else {
		attActionLog.logs = B
	}
	attActionLog.editAtt = A;
	return true
}
function getAttachment(B, G, F) {
	var A = new ArrayList();
	for (var E = 0; E < theToShowAttachments.size(); E++) {
		var D = theToShowAttachments.get(E);
		if (((B && D.reference == B) || !B) && ((G && D.subReference == G) || !G) && ((F && D.type == F) || !F)) {
			A.add(D)
		}
	}
	return A
}
function updateAttachmentMemory(D, A, H, F) {
	var G = getAttachment(A, H, F);
	for (var E = 0; E < G.size(); E++) {
		var B = G.get(E);
		theToShowAttachments.remove(B)
	}
	for (var E = 0; E < D.size(); E++) {
		theToShowAttachments.add(D.get(E))
	}
}
function updateAttachment(A, B) {
	saveContentAttachment(B);
	updateAttachmentOnly(A)
}
function updateAttachmentOnly(A) {
	$("#attchmentForm").ajaxSubmit({
		url: genericURL + "?method=updateAttachment&edocSummaryId=" + edocSummaryId + "&affairId=" + affairId,
		type: "POST",
		success: function (B) {}
	})
}
function deleteAllAttachment(B, H) {
	var E = fileUploadAttachments.keys();
	for (var D = 0; D < E.size(); D++) {
		var A = fileUploadAttachments.get(E.get(D));
		if (A.type == B) {
			if (H != undefined && H != A.showArea) {
				continue
			}
			fileUploadAttachments.remove(E.get(D));
			D -= 1
		}
	}
	var I = "attachmentArea";
	if (B != 0) {
		I = "attachment" + B + "Area"
	}
	if (H != undefined) {
		I = I + H
	}
	var G = document.getElementById(I);
	if (G) {
		G.style.display = "";
		G.innerHTML = ""
	}
	var I = "attachmentTR";
	if (B != 0) {
		I = "attachment" + B + "TR"
	}
	if (H != undefined) {
		I = I + H
	}
	var F = document.getElementById(I);
	if (F) {
		F.style.display = "none"
	}
}
function showUpdateAttachment(K) {
	if (_updateAttachmentState) {
		return
	}
	var M = document.getElementById("attachmentTr");
	if (M) {
		M.style.display = ""
	}
	var H = document.getElementById("normalText");
	if (H) {
		H.style.display = "none"
	}
	var E = document.getElementById("uploadAttachmentTR");
	if (E) {
		E.style.display = ""
	}
	if (!theToShowAttachments) {
		return
	}
	var F = document.getElementById("attachmentArea");
	var A = document.getElementById("attachment2Area");
	var D = _ctxPath;
	for (var G = 0; G < theToShowAttachments.size(); G++) {
		var J = theToShowAttachments.get(G);
		if (J.type == 0 && J.type == K) {
			var I = document.getElementById("attachmentDiv_" + J.fileUrl);
			if (I) {
				var L = I.getElementsByTagName("a");
				if (L) {
					var B = '<span class="ico16 affix_del_16" onclick="deleteAttachment(\'' + J.fileUrl + "')\" ></span>";
					L[0].insertAdjacentHTML("afterEnd", B)
				}
			}
		} else {
			if (J.type == 2 && J.type == K) {
				var I = document.getElementById("attachmentDiv_" + J.fileUrl);
				if (I) {
					var L = I.getElementsByTagName("a");
					if (L) {
						var B = '<span class="ico16 affix_del_16" onclick="deleteAttachment(\'' + J.filename + "')\" ></span>";
						L[0].insertAdjacentHTML("afterEnd", B)
					}
				}
			}
		}
	}
	_updateAttachmentState = true
}
function showAtachmentObject(E, A, B) {
	if (!E) {
		return
	}
	var G = "attachmentArea";
	if (E.type != 0) {
		G = "attachment" + E.type + "Area"
	}
	if (E.showArea != "") {
		G = G + E.showArea
	}
	if (attachObject) {
		G = attachObject
	}
	var D = document.getElementById(G);
	var F = $("div[id='" + G + "']");
	if (F.length > 1) {
		F[F.length - 1].style.display = "";
		F[F.length - 1].innerHTML += E.toString(true, A, undefined, B)
	} else {
		if (D) {
			D.style.display = "";
			D.innerHTML += E.toString(true, A, undefined, B);
			if ($.browser.msie && (parseInt($.browser.version, 10) < 9) && $(D).parent(".edit_class").length > 0) {
				setTimeout(function () {
					$(D).css("display", "inline-block")
				}, 300)
			}
		}
		$(".attachment_operate td>a").each(function () {
			$(this).css({
				display: "inline-block",
				width: "100%",
				height: "100%"
			})
		})
	}
}
function showAtachmentTR(B, A, E) {
	var F = "attachmentTR";
	if (B != 0) {
		F = "attachment" + B + "TR"
	}
	if (atttachTr) {
		F = atttachTr
	}
	if (E != "") {
		F += E
	}
	var D = document.getElementById(F);
	if (D) {
		A = A || "";
		D.style.display = A
	}
}
function showAttachmentNumber(B, A) {
	var F = "attachmentNumberDiv";
	if (B != 0) {
		F = "attachment" + B + "NumberDiv"
	}
	if (A.showArea != "") {
		F = F + A.showArea
	}
	var D = document.getElementById(F);
	if (D) {
		try {
			D.innerText = getFileAttachmentNumber(B, A.showArea)
		} catch (E) {}
	}
}
function getFileAttachmentNumber(D, A) {
	var F = 0;
	var E = fileUploadAttachments.values();
	if (!E) {
		return F
	}
	for (var B = 0; B < E.size(); B++) {
		if (E.get(B).type == D && E.get(B).showArea == A) {
			F++
		}
	}
	return F
}
function getFileAttachmentName(D) {
	var F = fileUploadAttachments.values();
	if (!F) {
		return ""
	}
	var E = "";
	for (var B = 0; B < F.size(); B++) {
		var A = F.get(B);
		if (A.type == D) {
			E += "<div id='attachmentDiv_" + A.fileUrl + "' style='float: left;px; line-height: 14px;' noWrap>";
			E += "<img src='" + v3x.baseURL + "/common/images/attachmentICON/" + A.icon + "' border='0' height='16' width='16'                                                    align='absmiddle' style='margin-right: 3px;'/>";
			E += escapeStringToHTML(A.filename);
			E += "&nbsp;</div>"
		}
	}
	return E
}
function getSenderAttachmentName(A, E) {
	var G = parent.theToShowAttachments;
	if (!G) {
		return ""
	}
	var F = "";
	for (var D = 0; D < G.size(); D++) {
		var B = G.get(D);
		if (B.type == E && B.subReference == A) {
			F += "<div id='attachmentDiv_" + B.fileUrl + "' style='float: left;height: " + attachmentConstants.height + "px; line-height: 14px;' noWrap>";
			F += "<img src='" + v3x.baseURL + "/common/images/attachmentICON/" + B.icon + "' border='0' height='16' width='16'                                                    align='absmiddle' style='margin-right: 3px;'/>";
			F += B.filename;
			F += "&nbsp;</div>"
		}
	}
	return F
}
function Element(E, H, D, B, G, A, F) {
	this.type = E;
	this.id = H;
	this.name = D;
	this.typeName = B;
	this.accountId = G || "";
	this.accountShortname = A || "";
	this.description = F;
	this.externalType = "0";
	this.entity = null;
	this.isEnabled = true;
	this.excludeChildDepartment = false
}
Element.prototype.copy = function (A) {
	this.type = A.type;
	this.id = A.id;
	this.name = A.name;
	this.typeName = A.typeName;
	this.accountId = A.accountId;
	this.accountShortname = A.accountShortname;
	this.description = A.description;
	this.externalType = A.externalType;
	this.isEnabled = A.isEnabled;
	this.excludeChildDepartment = A.excludeChildDepartment
};
Element.prototype.toString = function () {
	return this.type + "\t" + this.id + "\t" + this.name + "\t" + this.typeName + "\t" + this.accountId + "\t" + this.accountShortname
};
function getNamesString(F, B) {
	if (!F) {
		return ""
	}
	var E = v3x.getMessage("V3XLang.common_separator_label") || B;
	var H = [];
	for (var D = 0; D < F.length; D++) {
		var G = F[D];
		var A = null;
		if (G.accountShortname) {
			A = G.name + "(" + G.accountShortname + ")"
		} else {
			A = G.name
		}
		H[H.length] = A
	}
	return H.join(E)
}
function getFullNamesString(A) {
	if (!A) {
		return ""
	}
	var B = v3x.getMessage("V3XLang.common_separator_label");
	var N = [];
	var L = "";
	for (var G = 0; G < A.length; G++) {
		if (A[G].type == "Department") {
			L += A[G].id + ","
		}
	}
	if (L != "") {
		L = L.substring(0, L.length - 1);
		var E = document.getElementById("orgAccountId");
		var J = new XMLHttpRequestCaller(this, "ajaxOrgManager", "getParentDepartmentFullName", false);
		J.addParameter(1, "String", L);
		J.addParameter(2, "long", E.value);
		var F = J.serviceRequest();
		if (F != null) {
			N = F.split(",")
		}
	}
	var D = 0;
	var K = [];
	for (var G = 0; G < A.length; G++) {
		var H = A[G];
		var M = null;
		if (H.type == "Department") {
			M = N[D];
			D++
		} else {
			if (H.accountShortname) {
				var I = document.getElementById("appName");
				if (I && I.value == "4") {
					if (H.type == "Account" || (E && E.value == H.accountId)) {
						M = H.name
					} else {
						M = H.accountShortname + H.name
					}
				} else {
					M = H.name + "(" + H.accountShortname + ")"
				}
			} else {
				M = H.name
			}
		}
		K[K.length] = M
	}
	return K.join(B)
}
function getIdsString(D, F) {
	if (!D) {
		return ""
	}
	if (F == null) {
		F = true
	}
	var E = [];
	for (var B = 0; B < D.length; B++) {
		var A = null;
		if (F) {
			A = D[B].type + "|" + D[B].id
		} else {
			A = D[B].id
		}
		E[E.length] = A + (D[B].excludeChildDepartment ? "|1" : "")
	}
	return E.join(",")
}
function parseElements(G) {
	if (!G || G == "null") {
		return null
	}
	var E = [];
	var A = G.split(",");
	for (var D = 0; D < A.length; D++) {
		if (!A[D]) {
			continue
		}
		var F = A[D].split("|");
		if (F.length > 3) {
			var B = new Element(F[0], F[1], F[2], null, F[3], null, "");
			if (F.length > 4) {
				B.isEnabled = (F[4] == "true")
			}
			E[E.length] = B
		}
	}
	return E
}
function parseElements4Exclude(H, E) {
	if (!H || H == "null") {
		return null
	}
	var F = [];
	var A = H.split(",");
	for (var D = 0; D < A.length; D++) {
		if (!A[D]) {
			continue
		}
		if (E) {
			F[F.length] = new Element(E, A[D])
		} else {
			var G = A[D].split("|");
			if (G.length == 2) {
				var B = new Element(G[0], G[1]);
				F[F.length] = B
			}
		}
	}
	return F
}
function getIdsInput(D, A, F) {
	if (!D) {
		return ""
	}
	if (F == null) {
		F = true
	}
	var E = "";
	for (var B = 0; B < D.length; B++) {
		if (F) {
			E += "<input type='hidden' name='" + A + "' value=\"" + D[B].type + "|" + D[B].id + '">'
		} else {
			E += "<input type='hidden' name='" + A + "' value=\"" + D[B].id + '">'
		}
	}
	return E
}
var AJAX_XMLHttpRequest_DEFAULT_METHOD = "POST";
var AJAX_XMLHttpRequest_DEFAULT_async = true;
var AJAX_RESPONSE_XML_TAG_BEAN = "B";
var AJAX_RESPONSE_XML_TAG_LIST = "L";
var AJAX_RESPONSE_XML_TAG_Value = "V";
var AJAX_RESPONSE_XML_TAG_Property = "P";
var AJAX_RESPONSE_XML_TAG_Name = "n";
function AjaxParameter() {
	this.instance = []
}
AjaxParameter.prototype.put = function (B, D, E) {
	var A = D.indexOf("[]") > -1;
	this.instance[this.instance.length] = {
		index: B,
		type: A ? D.substring(0, D.length - 2) : D,
		value: E,
		isArray: A
	}
};
AjaxParameter.prototype.toAjaxParameter = function (G, J, I, B) {
	I = I == null ? "false" : I;
	if (!G || !J) {
		return null
	}
	var H = "";
	H += "S=" + G;
	H += "&M=" + J;
	H += "&CL=" + I;
	H += "&RVT=" + B;
	if (this.instance != null && this.instance.length > 0) {
		for (var E = 0; E < this.instance.length; E++) {
			var D = this.instance[E];
			var F = "P_" + D.index + "_" + D.type;
			if (D.isArray) {
				if (D.value == null || D.value.length == 0) {
					H += "&" + F + "_A_N="
				} else {
					if (D.value instanceof Array) {
						for (var A = 0; A < D.value.length; A++) {
							H += "&" + F + "_A=" + encodeURIComponent(D.value[A])
						}
					}
				}
			} else {
				var K = D.value == null ? "" : D.value;
				H += "&" + F + "=" + encodeURIComponent(K)
			}
		}
	}
	return H
};
function XMLHttpRequestCaller(F, D, A, B, H, G, E) {
	if ((!D || !A) && !E) {
		alert("AJAX Service name or method, actionUrl is not null.");
		throw new Error(3, "AJAX Service name or method is not null.")
	}
	this.params = new AjaxParameter();
	this.serviceName = D;
	this.methodName = A;
	this.needCheckLogin = G == null ? "true" : G;
	this.returnValueType = "XML";
	this.method = H || AJAX_XMLHttpRequest_DEFAULT_METHOD;
	this.async = (B == null ? AJAX_XMLHttpRequest_DEFAULT_async : B);
	this._caller = F;
	this.actionUrl = E;
	this.filterLogoutMessage = true;
	this.closeConnection = false
}
XMLHttpRequestCaller.prototype.addParameter = function (A, B, D) {
	this.params.put(A, B, D)
};
XMLHttpRequestCaller.prototype.serviceRequest = function () {
	var A = null;
	var D = null;
	if (this.actionUrl) {
		A = getBaseURL() + this.actionUrl;
		D = this.sendData
	} else {
		var B = getBaseURL() + "/getAjaxDataServlet";
		var F = this.params.toAjaxParameter(this.serviceName, this.methodName, this.needCheckLogin, this.returnValueType);
		if (!F) {
			throw new Error(5, "\u6ca1\u6709\u4efb\u4f55\u53c2\u6570")
		}
		if (F.length < 500) {
			this.method = "GET"
		}
		if (this.method.toUpperCase() == "POST") {
			A = B;
			D = F
		} else {
			if (this.method.toUpperCase() == "GET") {
				A = B + "?" + F
			}
		}
	}
	var G = getHTTPObject();
	var H = (typeof this.invoke != "undefined") ? this : this._caller;
	var E = this.filterLogoutMessage;
	if (!G) {
		throw new Error(2, "\u5f53\u524d\u6d4f\u89c8\u5668\u4e0d\u652f\u6301XMLHttpRequest")
	}
	if (this.async) {
		G.onreadystatechange = function () {
			if (G.readyState == 4) {
				if (G.status == 200) {
					var I = getXMLHttpRequestData(G, E);
					H.invoke(I)
				} else {
					if (H && H.showAjaxError) {
						H.showAjaxError(G.status)
					} else {
						H.invoke(null)
					}
				}
			}
		}
	}
	G.open(this.method, A, this.async);
	G.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	G.setRequestHeader("RequestType", "AJAX");
	if (this.closeConnection) {
		G.setRequestHeader("Connection", "close")
	}
	G.send(D);
	if (!this.async) {
		if (G.readyState == 4) {
			if (G.status == 200) {
				return getXMLHttpRequestData(G, E)
			} else {}
		}
	}
};
function getXMLHttpRequestData(E, A) {
	var B = E.getResponseHeader("content-type");
	var F = B && B.indexOf("xml") >= 0;
	var D = F ? E.responseXML : E.responseText;
	if (F) {
		D = xmlHandle(D) || E.responseText
	}
	if (A == true && D != null && D.toString().indexOf("[LOGOUT]") == 0) {
		return null
	}
	return D
}
function xmlHandle(E) {
	if (!E) {
		return null
	}
	try {
		var A = E.documentElement;
		if (null != A) {
			var B = A.nodeName;
			if (B == AJAX_RESPONSE_XML_TAG_BEAN) {
				return beanXmlHandle(A)
			} else {
				if (B == AJAX_RESPONSE_XML_TAG_LIST) {
					return listXmlHandle(A)
				} else {
					if (B == AJAX_RESPONSE_XML_TAG_Value) {
						return A.firstChild.nodeValue
					}
				}
			}
		}
	} catch (D) {
		throw D.message
	}
	return null
}
function beanXmlHandle(F) {
	if (!F) {
		return null
	}
	var E = new Properties();
	E.type = "";
	var I = F.childNodes;
	if (I != null && I.length > 0) {
		for (var D = 0; D < I.length; D++) {
			var B = I[D].attributes.getNamedItem(AJAX_RESPONSE_XML_TAG_Name).nodeValue;
			var H = "";
			var A = I[D].firstChild;
			if (A != null) {
				if (A.childNodes != null && A.childNodes.length > 0) {
					var G = A.nodeName;
					if (G == AJAX_RESPONSE_XML_TAG_BEAN) {
						H = beanXmlHandle(A)
					} else {
						if (G == AJAX_RESPONSE_XML_TAG_LIST) {
							H = listXmlHandle(A)
						} else {
							if (G == AJAX_RESPONSE_XML_TAG_Value) {
								H = A.firstChild.nodeValue
							}
						}
					}
				} else {
					H = A.nodeValue
				}
			}
			E.putRef(B, (H))
		}
	}
	return E
}
function listXmlHandle(E) {
	var H = new Array();
	if (E != null) {
		var D = new Properties();
		var A = E.childNodes;
		if (A != null && A.length > 0) {
			for (var B = 0; B < A.length; B++) {
				var G = A[B].nodeName;
				var F = "";
				if (G == AJAX_RESPONSE_XML_TAG_BEAN) {
					F = beanXmlHandle(A[B])
				} else {
					if (G == AJAX_RESPONSE_XML_TAG_LIST) {
						F = listXmlHandle(A[B])
					} else {
						if (G == AJAX_RESPONSE_XML_TAG_Value) {
							F = A[B].firstChild.nodeValue
						}
					}
				}
				H[B] = F
			}
		}
	}
	return H
}
function getHTTPObject() {
	var xmlhttp;
	/*@cc_on
	@if (@_jscript_version >= 5)
	try {
	xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
	}
	catch (e) {
	try {
	xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}
	catch (E) {
	xmlhttp = false;
	}
	}
	@else
	xmlhttp = false;
	@end @*/
	if (!xmlhttp && typeof XMLHttpRequest != "undefined") {
		try {
			xmlhttp = new XMLHttpRequest()
		} catch (e) {
			xmlhttp = false
		}
	}
	return xmlhttp
}
function getBaseURL() {
	try {
		if (v3x) {
			return v3x.baseURL
		} else {
			if (parent.v3x) {
				return parent.v3x.baseURL
			} else {
				if (getA8Top().v3x) {
					return getA8Top().v3x.baseURL
				} else {
					if (getA8Top().conextPath) {
						return getA8Top().conextPath
					} else {
						return _ctxPath
					}
				}
			}
		}
	} catch (A) {}
	return "/seeyon"
}
function ajaxFormSubmit(A) {
	var D = new AjaxParameter();
	var F = getHTTPObject();
	var E = D.FormToAjaxParameter(A);
	F.open("post", A.action, false);
	F.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	F.send(E);
	if (F.readyState == 4) {
		if (F.status == 200) {
			var B = xmlHandle(F.responseXML);
			if (B == null) {
				B = F.responseText;
				if (B.search("<") > 0) {
					B = B.substr(B.search("<"));
					B = getXMLDoc(B);
					B = xmlHandle(B)
				} else {
					return B
				}
			}
			if (!B) {
				B = F.responseTEXT
			}
			return B
		} else {
			return false
		}
	}
	return false
}
function getXMLDoc(B) {
	var D = null;
	if (window.ActiveXObject || "ActiveXObject" in window) {
		D = new ActiveXObject("MSXML2.DOMDocument");
		D.async = false;
		if (B != null) {
			D.loadXML(B)
		}
	} else {
		if (document.implementation && document.implementation.createDocument) {
			D = document.implementation.createDocument("", "", null);
			var A = new DOMParser();
			D.async = false;
			if (B != null) {
				D = A.parseFromString(B, "text/xml")
			}
		}
	}
	return D
}
function getXSLDoc(M, K) {
	if (typeof(XSLTProcessor) != "undefined") {
		var H = new XSLTProcessor();
		H.importStylesheet(K);
		var E = H.transformToFragment(M, document);
		if (typeof(GetXmlStringFromXmlDoc) != "undefined") {
			return GetXmlStringFromXmlDoc(E)
		} else {
			var L = new XMLSerializer();
			var G = L.serializeToString(E);
			if (G.indexOf("<transformiix:result") > -1) {
				G = G.substring(G.indexOf(">") + 1, G.lastIndexOf("<"))
			}
			return G
		}
	}
	if (typeof(M.transformNode) != "undefined") {
		return M.transformNode(K)
	} else {
		var D = null;
		try {
			D = new ActiveXObject("Msxml2.XSLTemplate")
		} catch (J) {}
		try {
			if (D) {
				var B = D;
				var F = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
				F.loadXML(K.xml);
				B.stylesheet = F;
				var A = B.createProcessor();
				A.input = M;
				A.transform();
				return A.output
			}
		} catch (I) {
			alert("The type [XSLTProcessor] and the function [XmlDocument.transformNode] are not supported by this browser, can't transform XML document to HTML string!");
			return null
		}
	}
}
function getXmlString(A) {
	if (window.ActiveXObject) {
		return A.xml
	} else {
		var B = document.createElement("div");
		B.appendChild(A.cloneNode(true));
		return B.innerHTML
	}
}
AjaxParameter.prototype.FormToAjaxParameter = function (B) {
	var E = "";
	var H = new Properties();
	var F;
	var I,
	D;
	var G;
	var A;
	for (F = 0; F < B.elements.length; F++) {
		I = B.elements[F];
		A = I.getAttribute("canSubmit");
		if (I.disabled || (I.readOnly && A != "true")) {
			continue
		}
		if (I.type == "select-one" || I.type == "hidden" || I.type == "password" || I.type == "text" || I.type == "textarea") {
			H.put(I.name, I.value)
		} else {
			if (I.type == "select-multiple" || I.type == "checkbox" || I.type == "radio") {
				D = H.get(I.name);
				G = getFormInputValue(I);
				if (G != "") {
					if (D != null && D != "") {
						D += ","
					} else {
						D = G
					}
				}
				if (D == null) {
					D = ""
				}
				H.put(I.name, D)
			}
		}
		E = H.toQueryString()
	}
	return E
};
function getFormInputValue(A) {
	var D = "";
	var B;
	var E;
	if (A.type == "select-multiple") {
		for (B = 0; B < A.options.length; B++) {
			if (A.options[B].selected == true) {
				if (D != "") {
					D += ","
				}
				D += A.options[B].value
			}
		}
	} else {
		if (A.type == "checkbox" || A.type == "radio") {
			E = document.getElementsByName(A.name);
			for (B = 0; B < E.length; B++) {
				if (E[B].checked == true) {
					if (D != "") {
						D += ","
					}
					D += E[B].value
				}
			}
		}
	}
	return D
}
var dom = (document.getElementsByTagName) ? true : false;
var ie5 = (document.getElementsByTagName && document.all) ? true : false;
var arrowUp, arrowDown;
if (ie5 || dom) {
	initSortTable()
}
function initSortTable() {
	arrowUp = document.createDocumentFragment("SPAN");
	arrowUp.className = "arrowAsc";
	arrowUp.innerHTML = "&nbsp;&nbsp;";
	arrowDown = document.createDocumentFragment("SPAN");
	arrowDown.className = "arrowDesc";
	arrowDown.innerHTML = "&nbsp;&nbsp;"
}
function getNextSibByClass(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.className == A) {
			return B
		} else {
			return getNextSibByClass(B.nextSibling, A)
		}
	}
}
function getParentByClass(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.className == A) {
			return B
		} else {
			return getParentByClass(B.parentNode, A)
		}
	}
}
function sortTable(M, H, E, A, I) {
	var L;
	if (I) {
		var D = getParentByClass(M, "hDiv");
		var N = getNextSibByClass(D, "bDiv");
		L = N.childNodes[0].childNodes[0]
	} else {
		L = M.tBodies[0]
	}
	var G = L.rows;
	var K = new Array();
	var J = new Array();
	for (var F = 0; F < G.length; F++) {
		var B = G[F];
		if (B.id.indexOf("off") != -1) {
			J[J.length] = G[F]
		} else {
			K[K.length] = G[F]
		}
	}
	K.sort(compareByColumn(H, E, A));
	J.sort(compareByColumn(H, E, A));
	for (var F = 0; F < K.length; F++) {
		if (F % 2 == 0) {
			K[F].className = "erow"
		} else {
			K[F].className = ""
		}
		L.appendChild(K[F])
	}
	for (var F = 0; F < J.length; F++) {
		L.appendChild(J[F])
	}
}
function CaseInsensitiveString(A) {
	return String(A).toLocaleString()
}
function parseDate(A) {
	return Date.parse(A.replace(/\-/g, "/"))
}
function toNumber(A) {
	return Number(A.replace(/[^0-9\.]/g, ""))
}
function compareByColumn(G, A, F) {
	var E = G;
	var D = A;
	var B = String;
	if (F == "Number") {
		B = parseInt
	} else {
		if (F == "Date") {
			B = compareMyDate
		} else {
			if (F == "CaseInsensitiveString") {
				B = CaseInsensitiveString
			} else {
				if (F == "Size") {
					B = compareSize
				} else {
					if (F == "Percent") {
						B = comparePercent
					} else {
						if (F == "Month") {
							B = compareMonth
						} else {
							if (F == "Number") {
								B = compareNumber
							}
						}
					}
				}
			}
		}
	}
	return function (I, H) {
		if (B == String || B == CaseInsensitiveString) {
			var J = B(getInnerText(I.cells[E])).localeCompare(B(getInnerText(H.cells[E])));
			if (D) {
				return J * -1
			} else {
				return J
			}
		} else {
			if (B == compareMyDate) {
				var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
				if (D) {
					return J * -1
				} else {
					return J
				}
			} else {
				if (B == compareSize) {
					var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
					if (D) {
						return J * -1
					} else {
						return J
					}
				} else {
					if (B == comparePercent) {
						var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
						if (D) {
							return J * -1
						} else {
							return J
						}
					} else {
						if (B == compareMonth) {
							var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
							if (D) {
								return J * -1
							} else {
								return J
							}
						} else {
							if (B == compareNumber) {
								var J = B(getInnerText(I.cells[E]), getInnerText(H.cells[E]));
								if (D) {
									return J * -1
								} else {
									return J
								}
							} else {
								if (B(getInnerText(I.cells[E])) > B(getInnerText(H.cells[E]))) {
									return D ? -1 : +1
								}
								if (B(getInnerText(I.cells[E])) < B(getInnerText(H.cells[E]))) {
									return D ? +1 : -1
								}
								return 0
							}
						}
					}
				}
			}
		}
	}
}
function compareNumber(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = parseFloat(B);
	var D = parseFloat(A);
	if (E > D) {
		return 1
	} else {
		if (E < D) {
			return -1
		} else {
			return 0
		}
	}
}
function compareMonth(E, D) {
	if ((E == null || E == "  ") && (D != null && D != "  ")) {
		return -1
	}
	if ((D == null || D == "  ") && (E != null && E != "  ")) {
		return 1
	}
	if ((E == null || E == "  ") && (D == null || D == "  ")) {
		return 0
	}
	var B = E.split("-");
	var A = D.split("-");
	var I = B[0];
	var G = A[0];
	var H = parseInt(parseFloat(B[1]));
	var F = parseInt(parseFloat(A[1]));
	if (I > G) {
		return 1
	}
	if (I < G) {
		return -1
	}
	if (I == G) {
		if (H > F) {
			return 1
		} else {
			if (H < F) {
				return -1
			} else {
				return 0
			}
		}
	}
}
function compareSize(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = F(B);
	var D = F(A);
	if (E - D > 0) {
		return 1
	} else {
		if (E - D < 0) {
			return -1
		} else {
			return 0
		}
	}
	function F(G) {
		if (G.indexOf("MB") > -1) {
			return parseFloat(G) * 1000
		} else {
			if (G.indexOf("KB") > -1) {
				return parseFloat(G)
			}
		}
	}
}
function comparePercent(B, A) {
	if ((B == null || B == "  ") && (A != null && A != "  ")) {
		return -1
	}
	if ((A == null || A == "  ") && (B != null && B != "  ")) {
		return 1
	}
	if ((B == null || B == "  ") && (A == null || A == "  ")) {
		return 0
	}
	var E = F(B);
	var D = F(A);
	if (E - D > 0) {
		return 1
	} else {
		if (E - D < 0) {
			return -1
		} else {
			return 0
		}
	}
	function F(G) {
		if (G.indexOf("%") > -1) {
			return parseFloat(G) * 10000
		}
		return 0
	}
}
function compareMyDate(D, A) {
	if ((D == null || D == "  " || D == " ") && (A != null && A != "  " && A != " ")) {
		return -1
	}
	if ((A == null || A == "  " || A == " ") && (D != null && D != "  " && D != " ")) {
		return 1
	}
	if ((D == null || D == "  " || D == " ") && (A == null || A == "  " || A == " ")) {
		return 0
	}
	var E = initDate(D);
	var B = initDate(A);
	if (E - B > 0) {
		return 1
	} else {
		if (E - B < 0) {
			return -1
		} else {
			return 0
		}
	}
}
function initDate(G) {
	if (G.indexOf("/") > -1 && G.indexOf(":") > -1) {
		var A = parseFloat(G.substr(0, 2));
		var K = parseFloat(G.substr(3, 2));
		var I = parseFloat(G.substr(6, 2));
		var L = parseFloat(G.substr(9, 2));
		var N = parseFloat(G.substr(12, 2));
		var H = 0;
		return new Date(A, K, I, L, N, H)
	} else {
		if (G.indexOf("-") > -1 && G.indexOf(":") > -1) {
			G = G.trim();
			var B = G.split(" ");
			var J = B[0].split("-");
			var D = B[1].split(":");
			var M = parseInt(J[1]);
			if (J[1].length == 2 && J[1].substr(0, 1) == "0") {
				M = parseInt(J[1].substr(1, 1))
			}
			var F = parseInt(J[2]);
			if (J[2].length == 2 && J[2].substr(0, 1) == "0") {
				F = parseInt(J[2].substr(1, 1))
			}
			var L = parseInt(D[0]);
			if (D[0].length == 2 && D[0].substr(0, 1) == "0") {
				L = parseInt(D[0].substr(1, 1))
			}
			var E = parseInt(D[1]);
			if (D[1].length == 2 && D[1].substr(0, 1) == "0") {
				E = parseInt(D[1].substr(1, 1))
			}
			var H = 0;
			if (D.length == 3 && D[2].length > 0) {
				H = parseInt(D[2]);
				if (D[2].length == 2 && D[2].substr(0, 1) == "0") {
					H = parseInt(D[2].substr(1, 1))
				}
			}
			return new Date(parseInt(J[0]), M - 1, F, L, E, H)
		} else {
			if (G.indexOf("-") > -1 && G.indexOf(":") == -1) {
				var B = G.split("-");
				var M = parseInt(B[1]);
				if (B[1].length == 2 && B[1].substr(0, 1) == "0") {
					M = parseInt(B[1].substr(1, 1))
				}
				var F = parseInt(B[2]);
				if (B[2].length == 2 && B[2].substr(0, 1) == "0") {
					F = parseInt(B[2].substr(1, 1))
				}
				return new Date(parseInt(B[0]), M - 1, F, 0, 0, 0)
			} else {
				if (isChina(G)) {
					var A = G.substr(0, 4);
					var K = null;
					var I = null;
					if (isChina(G.substr(6, 1)) && isChina(G.substr(8, 1))) {
						K = G.substr(5, 1);
						I = G.substr(7, 1)
					} else {
						if (isChina(G.substr(6, 1)) && isChina(G.substr(9, 1))) {
							K = G.substr(5, 1);
							I = G.substr(7, 2)
						} else {
							if (isChina(G.substr(7, 1)) && isChina(G.substr(9, 1))) {
								K = G.substr(5, 2);
								I = G.substr(8, 1)
							} else {
								if (isChina(G.substr(7, 1)) && isChina(G.substr(10, 1))) {
									K = G.substr(5, 2);
									I = G.substr(8, 2)
								}
							}
						}
					}
					return new Date(parseInt(A), parseInt(K) - 1, parseInt(I), 0, 0, 0)
				}
			}
		}
	}
}
function isChina(B) {
	var A = /[\u4E00-\u9FA5]|[\uFE30-\uFFA0]/gi;
	if (!A.exec(B)) {
		return false
	} else {
		return true
	}
}
function sortColumn(G, A, F) {
	try {
		var D,
		E;
		if (ie5) {
			D = G.srcElement
		} else {
			if (dom) {
				D = G.target
			}
		}
		if (F) {
			E = getParent(D, "TH")
		} else {
			E = getParent(D, "TD")
		}
		var B = E.orderBy;
		if (E == null || B == null || B == "") {
			sortColumnCurrentPage(G, A, F)
		} else {
			sortColumnAll(E, B, F)
		}
	} catch (G) {}
}
function sortColumnAll(F, D, G) {
	if (!E) {
		var E = new Properties()
	}
	var B = E.get("orderByColumn");
	var A = E.get("orderByDESC");
	if (A == null) {
		A = "ASC"
	} else {
		if (D != B) {
			A = "ASC";
			E.put("page", 1)
		} else {
			A = A == "DESC" ? "ASC" : "DESC"
		}
	}
	E.put("orderByColumn", D);
	E.put("orderByDESC", A);
	getPageAction(F)
}
function sortColumnCurrentPage(J, E, L) {
	var I,
	D,
	N,
	L,
	G;
	if (ie5) {
		I = J.srcElement
	} else {
		if (dom) {
			I = J.target
		}
	}
	G = getParent(I, "TABLE");
	N = getParent(I, "THEAD");
	if (L) {
		D = getParent(I, "TH")
	} else {
		var K = getParent(I, "TFOOT");
		if (I.tagName == "TD" && K == null && N == null && E == true) {
			selectRow(I)
		}
		D = getParent(I, "TD")
	}
	if (D == null || D.getAttribute("type") == null || D.getAttribute("type") == "") {
		return
	}
	if (N == null) {
		return
	}
	if (!F) {
		var F = new Properties()
	}
	var P = F.get("orderByColumn");
	if (P) {
		var M = document.getElementById("OrderByColumn_" + P);
		if (M) {
			M.parentNode.removeChild(M)
		}
	}
	if (D != null) {
		var A = D.parentNode;
		var H;
		if (D._descending) {
			D._descending = false
		} else {
			D._descending = true
		}
		if (N.arrow != null) {
			if (L) {
				N.arrow.className = ""
			} else {
				if (N.arrow.parentNode == null) {
					N.arrow = null
				} else {
					if (N.arrow.parentNode != D) {
						N.arrow.parentNode._descending = null
					}
					N.arrow.parentNode.removeChild(N.arrow)
				}
			}
		}
		var B = D.firstChild;
		if (L) {
			if (D._descending) {
				B.className = "sdesc"
			} else {
				B.className = "sasc"
			}
			N.arrow = B
		} else {
			if (D._descending) {
				N.arrow = arrowDown.cloneNode(true)
			} else {
				N.arrow = arrowUp.cloneNode(true)
			}
			D.appendChild(N.arrow)
		}
		for (H = 0; H < A.cells.length; H++) {
			if (A.cells[H] == D) {
				break
			}
		}
		var O = getParent(D, "TABLE");
		sortTable(O, H, D._descending, D.getAttribute("type"), L)
	}
}
function getInnerText(B) {
	if (ie5) {
		return B.innerText
	}
	var D = "";
	for (var A = 0; A < B.childNodes.length; A++) {
		switch (B.childNodes.item(A).nodeType) {
		case 1:
			D += getInnerText(B.childNodes.item(A));
			break;
		case 3:
			D += B.childNodes.item(A).nodeValue;
			break
		}
	}
	return D
}
function getParent(B, A) {
	if (B == null) {
		return null
	} else {
		if (B.nodeType == 1 && B.tagName.toLowerCase() == A.toLowerCase()) {
			return B
		} else {
			return getParent(B.parentNode, A)
		}
	}
}
var currentSelectTr = null;
function clearSiblingStyle(A) {
	var E = A.parentNode.childNodes;
	if (E != null) {
		for (var B = 0; B < E.length; B++) {
			var D = E[B];
			redoStyle(D)
		}
	}
}
function redoStyle() {
	var I = currentSelectTr;
	if (!I) {
		return
	}
	var A = I.className;
	var B = I.className2;
	if (B != null && A != B) {
		I.className = B
	}
	var K = getCheckboxFromTr(I);
	if (K && K.disabled != true) {
		K.checked = false
	}
	var D = I.cells;
	for (var J = 0; J < D.length; J++) {
		var G = D.item(J);
		var L = G.className;
		var E = L.split(" ");
		var F = "";
		for (var H = 0; H < E.length; H++) {
			if (E[H] != "no-read") {
				F += E[H] + " "
			}
		}
		G.className = F
	}
}
function changeSelectedStyle(D) {
	if (D == null) {
		return
	}
	var A = D.className;
	var B = D.className2;
	if (B == null) {
		D.className2 = A;
		if (D.id.indexOf("off") != -1) {
			D.className = "tr-select-offline"
		} else {
			D.className = "sort-select"
		}
	} else {
		if (A == B) {
			if (D.id.indexOf("off") != -1) {
				D.className = "tr-select-offline"
			} else {
				D.className = "sort-select"
			}
		} else {
			D.className = B
		}
	}
}
function selectRow(A) {
	if (A.tagName == "INPUT") {
		unselectAll();
		return
	}
	var G = getParent(A, "TR");
	var B = getParent(G, "tbody");
	var F = v3x.getEvent();
	var E;
	if (ie5) {
		E = F.srcElement
	} else {
		if (dom) {
			E = F.target
		}
	}
	if (E.tagName == "INPUT") {
		return
	}
	if (G != null && B != null) {
		redoStyle();
		changeSelectedStyle(G);
		currentSelectTr = G;
		var D = getCheckboxFromTr(G);
		if (D != undefined && D != null) {
			noSelected(D.name);
			if (D.disabled != true) {
				D.checked = true
			}
			unselectAll()
		}
	}
}
function getCheckboxFromTr(E) {
	if (E == null || E.childNodes.length == 0) {
		return null
	} else {
		for (var D = 0; D < E.childNodes.length; D++) {
			var B = E.childNodes[D];
			if (B.type == "checkbox" || B.type == "radio") {
				return B
			} else {
				var A = getCheckboxFromTr(B);
				if (A != null) {
					return A
				}
			}
		}
	}
}
function selectAll(B, E) {
	var A = document.getElementsByName(E);
	if (A != null) {
		for (var D = 0; D < A.length; D++) {
			if (A[D].disabled == true) {
				continue
			}
			A[D].checked = B.checked
		}
	}
}
function noSelected(A) {
	var D = document.getElementsByName(A);
	if (D) {
		for (var B = 0; B < D.length; B++) {
			if (D[B].disabled == true) {
				continue
			}
			D[B].checked = false
		}
	}
}
function unselectAll() {
	var A = document.getElementById("allCheckbox");
	if (A && A.disabled != true) {
		if (A.checked) {
			A.click();
			A.checked = false
		}
	}
}
var canDoAction = true;
function getPageAction(E) {
	var M = pageFormMethod || "get";
	var A = getForm(E);
	var B = A.attributes.getNamedItem("ACTION");
	var D = B ? (B.nodeValue) : "" || "";
	var K = document.createElement("form");
	K.setAttribute("action", D);
	K.setAttribute("target", "_self");
	K.setAttribute("method", M);
	if (!canDoAction) {
		return
	}
	var L = pageQueryMap.keys();
	for (var F = 0; F < L.size(); F++) {
		var J = L.get(F);
		var H = pageQueryMap.get(J);
		if (!J || J == "pageSize") {
			continue
		}
		if (H instanceof Array) {
			for (var I = 0; I < H.length; I++) {
				var G = document.createElement("input");
				G.setAttribute("type", "hidden");
				G.setAttribute("name", J);
				G.value = H[I];
				K.appendChild(G)
			}
		} else {
			var G = document.createElement("input");
			G.setAttribute("type", "hidden");
			G.setAttribute("name", J);
			G.value = H;
			K.appendChild(G)
		}
	}
	var I = A.pageSize.value || 20;
	var G = document.createElement("input");
	G.setAttribute("type", "hidden");
	G.setAttribute("name", "pageSize");
	G.setAttribute("value", I);
	K.appendChild(G);
	if (!new RegExp("^-?[0-9]*$").test(I) || parseInt(I, 10) < 1) {}
	document.body.appendChild(K);
	K.submit();
	canDoAction = false
}
function enterSubmit(B, A) {
	if (v3x.getEvent().keyCode == 13) {
		if (A == "pageSize") {
			pagesizeChange(B)
		} else {
			if (A == "intpage") {
				pageChange(B)
			}
		}
	}
}
function getForm(A) {
	return document.getElementsByName("pageSize")[0].form
}
function pageGo(A) {
	getPageAction(A)
}
function first(A) {
	pageQueryMap.put("page", 1);
	getPageAction(A)
}
function pageChange(B) {
	if (!new RegExp("^-?[0-9]*$").test(B.value)) {
		return
	}
	var A = B.getAttribute("pageCount");
	if (B.value > parseInt(A, 10)) {
		B.value = A
	}
	pageQueryMap.put("page", B.value);
	getPageAction(B)
}
function last(B, A) {
	pageQueryMap.put("page", A);
	getPageAction(B)
}
function next(B) {
	var A = parseInt(pageQueryMap.get("page"));
	pageQueryMap.put("page", A + 1);
	getPageAction(B)
}
function pagesizeChange(B) {
	var A = B.value;
	if (!new RegExp("^-?[0-9]*$").test(A) || parseInt(A, 10) < 1) {
		return
	}
	pageQueryMap.put("pageSize", A);
	pageQueryMap.put("page", 1);
	getPageAction(B)
}
function prev(B) {
	var A = parseInt(pageQueryMap.get("page"));
	pageQueryMap.put("page", A - 1);
	getPageAction(B)
}
var formValidate = {
	unCharactor: "\"\\/|><:*?'&%$",
	integerDigits: "10",
	decimalDigits: "0"
};
V3X.prototype.checkFormAdvanceAttribute = "";
function checkForm(formObj) {
	var elements = formObj.elements;
	var clearValueElements = [];
	if (elements != null) {
		for (var i = 0; i < elements.length; i++) {
			var e = elements[i];
			var clearValue = e.getAttribute("clearValue");
			if (clearValue == "true") {
				clearValueElements[clearValueElements.length] = e;
				continue
			}
			V3X.checkFormAdvanceAttribute = e.getAttribute("advance");
			var validateAtt = e.getAttribute("validate");
			if (validateAtt != null && validateAtt != "" && validateAtt != "undefined") {
				var validateFuns = validateAtt.split(",");
				for (var f = 0; f < validateFuns.length; f++) {
					var fun = validateFuns[f];
					if (fun) {
						var result = eval(fun + "(e)");
						if (!result) {
							return false
						}
					}
				}
			}
		}
	}
	for (var j = 0; j < clearValueElements.length; j++) {
		clearDefaultValueWhenSubmit(clearValueElements[j])
	}
	return true
}
function testRegExp(B, A) {
	return new RegExp(A).test(B)
}
function clearDefaultValueWhenSubmit(D) {
	var A = getDefaultValue(D);
	var B = D.value;
	if (B == A) {
		D.value = ""
	}
}
function writeValidateInfo(element, message) {
	alert(message);
	var onAfterAlert = element.getAttribute("onAfterAlert");
	if (onAfterAlert) {
		try {
			eval(onAfterAlert)
		} catch (e) {}
	} else {
		try {
			element.focus();
			element.select()
		} catch (e) {}
	}
}
function notSpecChar(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (/^[^\|\\"'<>]*$/.test(D)) {
		return true
	} else {
		writeValidateInfo(B, $.i18n("formValidate_specialCharacter", A));
		return false
	}
}
function notSpecCharWithoutApos(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (/^[^\|\\\/"<>]*$/.test(D)) {
		return true
	} else {
		writeValidateInfo(B, $.i18n("formValidate_specialCharacter_withoutApos", A));
		return false
	}
}
function notNull(D) {
	var E = D.value;
	E = E.replace(/[\r\n]/g, "");
	var B = D.getAttribute("inputName");
	if (E == null || E == "" || E.trim() == "" || E == $.i18n("section.hasNoSet")) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	var A = D.getAttribute("maxSize");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A, E.length));
		return false
	}
	return true
}
function maxLength(D) {
	var E = D.value;
	if (!E) {
		return true
	}
	var B = D.getAttribute("inputName");
	var A = D.getAttribute("maxSize");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A, E.length));
		return false
	}
	return true
}
function minLength(D) {
	var E = D.value;
	if (!E) {
		return true
	}
	var B = D.getAttribute("inputName");
	var A = D.getAttribute("minLength");
	if (A && E.length < A) {
		writeValidateInfo(D, $.i18n("formValidate_minLength", B, A, E.length));
		return false
	}
	return true
}
function isNumber(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var H = B.getAttribute("integerDigits") || formValidate.integerDigits;
	var G = B.getAttribute("decimalDigits") || formValidate.decimalDigits;
	var D = B.getAttribute("integerMax");
	var F = B.getAttribute("integerMin");
	if (E == "0") {
		return true
	}
	if (!testRegExp(E, "^-?[0-9]{0," + H + "}\\.?[0-9]{0," + G + "}$")) {
		writeValidateInfo(B, $.i18n("formValidate_isNumber", A));
		return false
	}
	if (D && parseInt(E) > D) {
		writeValidateInfo(B, $.i18n("formValidate_too_max", A, D, E));
		return false
	}
	if (F && parseInt(E) < F) {
		writeValidateInfo(B, $.i18n("formValidate_too_min", A, F, E));
		return false
	}
	return true
}
function positive(B) {
	var E = B.value.trim();
	if (E != "") {
		var D = parseFloat(B.value.trim());
		var A = B.getAttribute("inputName");
		if (D <= 0) {
			writeValidateInfo(B, $.i18n("formValidate_positive", A));
			return false
		}
	}
	return true
}
function percent(B) {
	var E = B.value.trim();
	if (E != "") {
		var D = parseFloat(B.value.trim());
		var A = B.getAttribute("inputName");
		if (D < 0 || D > 100) {
			writeValidateInfo(B, $.i18n("formValidate_percent", A, E));
			return false
		}
	}
	return true
}
function notNum(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	var F = B.getAttribute("integerDigits") || formValidate.integerDigits;
	var E = B.getAttribute("decimalDigits") || formValidate.decimalDigits;
	if (D == "0") {
		return true
	}
	if (testRegExp(D, "^-?[0-9]{0," + F + "}\\.?[0-9]{0," + E + "}$")) {
		writeValidateInfo(B, $.i18n("formValidate_isNotNumber", A));
		return false
	}
	return true
}
function isEmail(B) {
	var D = B.value;
	if (!D) {
		return true
	}
	var A = B.getAttribute("inputName");
	if (D.indexOf("@") == -1 || D.indexOf(".") == -1) {
		writeValidateInfo(B, $.i18n("formValidate_isEmail", A));
		return false
	}
	return true
}
function notNullWithoutTrim(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	if (E == null || E == "") {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	var A = D.getAttribute("maxLength");
	if (A && E.length > A) {
		writeValidateInfo(D, $.i18n("formValidate_maxLength", B, A));
		return false
	}
	return true
}
function isInteger(E) {
	var F = E.value;
	var B = E.getAttribute("inputName");
	var A = E.getAttribute("max");
	var D = E.getAttribute("min");
	if (F != "0" && (isNaN(F) || F.indexOf("0") == 0 || !testRegExp(F, "^-?[0-9]*$"))) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger", B));
		return false
	}
	if (A != null && A != "" && parseInt(F) > parseInt(A)) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger_max", B, A));
		return false
	}
	if (D != null && D != "" && parseInt(F) < parseInt(D)) {
		writeValidateInfo(E, $.i18n("formValidate_isInteger_min", B, D));
		return false
	}
	return true
}
function isWord(E) {
	var G = E.value;
	var B = E.getAttribute("inputName");
	var F = E.getAttribute("character") || formValidate.unCharactor;
	var A = "";
	for (var D = 0; D < F.length; D++) {
		if (G.indexOf(F.charAt(D)) > -1) {
			A += F.charAt(D)
		}
	}
	if (A.length > 0) {
		writeValidateInfo(E, $.i18n("formValidate_isWord", B, A, F));
		return false
	}
	return true
}
function isSepcialWord(E) {
	var G = E.value;
	var B = E.getAttribute("inputName");
	var F = E.getAttribute("character") || "\\!@#$|%^&*?:<>/'";
	var A = "";
	for (var D = 0; D < F.length; D++) {
		if (G.indexOf(F.charAt(D)) > -1) {
			A += F.charAt(D)
		}
	}
	if (A.length > 0) {
		writeValidateInfo(E, $.i18n("formValidate_isWord", B, A, F));
		return false
	}
	return true
}
function isCriterionWord(B) {
	var D = B.value;
	var A = B.getAttribute("inputName");
	if (!testRegExp(D, "^[\\w-]+$")) {
		writeValidateInfo(B, $.i18n("formValidate_isCriterionWord", A));
		return false
	}
	return true
}
function isUrl(B) {
	var D = B.value;
	if (!D) {
		return true
	}
	var A = B.getAttribute("inputName");
	if (!testRegExp(D, "^http://{1}([\\w-]+.)+[\\w-]+")) {
		writeValidateInfo(B, $.i18n("formValidate_isUrl", A));
		return false
	}
	return true
}
function startsWith(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var D = B.getAttribute("prefix");
	if (E.indexOf(D) != 0) {
		writeValidateInfo(B, $.i18n("formValidate_startsWith", A, D));
		return false
	}
	return true
}
function isDeaultValue(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	var A = getDefaultValue(D);
	if (E == A) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	return true
}
function isDefaultValue(D) {
	var E = D.value;
	var B = D.getAttribute("inputName");
	var A = getDefaultValue(D);
	if (E == A) {
		writeValidateInfo(D, $.i18n("formValidate_notNull", B));
		return false
	}
	return true
}
var __addDataEventObject = null;
function whenstart(E, M, G, I, H, F, A, L) {
	H = H || "date";
	if (F == null) {
		F = true
	}
	__addDataEventObject = M;
	var J = v3x.getEvent();
	if (v3x.getBrowserFlag("openWindow") == false || typeof(window.showModalDialog) == "undefined") {
		var K = J.currentTarget;
		var B = new MxtWindow({
				id: "date_win",
				title: v3x.getMessage("V3XLang.calendar_page_title"),
				url: E + "/common/js/addDate/date.jsp?type=" + H + "&allowEmpty=" + F + "&showButton=false",
				height: L + 5 || 320,
				width: A + 5 || 320,
				relativeElement: M,
				targetWindow: getA8Top(),
				type: "window",
				isDrag: false,
				buttons: [{
						id: "btn1",
						text: "\u786e\u5b9a",
						handler: function () {
							var N = B.getReturnValue();
							if (N) {
								K.value = N
							}
							B.close()
						}
					}, {
						id: "btn2",
						text: "\u6e05\u7a7a",
						handler: function () {
							K.value = "";
							B.close()
						}
					}
				]
			})
	} else {
		var D = v3x.openWindow({
				url: E + "/common/js/addDate/date.jsp?type=" + H + "&allowEmpty=" + F + "&showButton=true",
				height: 230,
				width: 250,
				top: J.screenY + 20,
				left: J.screenX - 50
			});
		if (D == null) {
			D = ""
		}
		if (!M && D) {
			return D
		}
		return D
	}
}
Date.prototype.isDate = function (D, B) {
	var K,
	E;
	var I,
	A,
	F,
	H;
	var G;
	var J = new String(D);
	if (J.length < 8 || J.length > 10) {
		return false
	}
	E = "^([0-9]){4}(-|/)([0-9]){1,2}(-|/)([0-9]){1,2}$";
	K = new RegExp(E);
	if (J.search(K) == -1) {
		return false
	}
	I = J.charAt(4);
	G = J.split(I);
	if (G.length != 3) {
		return false
	}
	A = parseInt(G[0], 10);
	F = parseInt(G[1], 10);
	H = parseInt(G[2], 10);
	if (A < 1900 || A > 2500) {
		return false
	}
	if (F < 1 || F > 12) {
		return false
	}
	if (H < 1 || H > 31) {
		return false
	}
	switch (F) {
	case 4:
	case 6:
	case 9:
	case 11:
		if (H > 30) {
			return false
		}
		break;
	case 2:
		if ((A % 4 == 0 && A % 100 != 0) || A % 400 == 0) {
			if (H > 29) {
				return false
			}
		} else {
			if (H > 28) {
				return false
			}
		}
		break;
	default:
		break
	}
	if (B) {
		this.setDate(H);
		this.setMonth(F - 1);
		this.setYear(A)
	}
	return true
};
function parseDate(B) {
	var D = B.split("-");
	var F = parseInt(D[0], 10);
	var A = parseInt(D[1], 10) - 1;
	var E = parseInt(D[2], 10);
	return new Date(F, A, E)
}
Date.prototype.dateAdd = function (J, I) {
	var M;
	var H = J;
	var G,
	A,
	E;
	var D;
	var F = false;
	var K;
	var B;
	var L;
	if (this.isDate(J, true) == false) {
		return J
	}
	L = new String(J);
	K = L.charAt(4);
	B = L.split(K);
	G = parseInt(B[0], 10);
	A = parseInt(B[1], 10);
	E = parseInt(B[2], 10);
	while (I != 0) {
		if (I > 0) {
			E++
		} else {
			E--
		}
		if (E <= 0 || E > 31) {
			F = true;
			if (E <= 0) {
				E = 31
			} else {
				E = 1
			}
		} else {
			F = false
		}
		if (F) {
			if (I > 0) {
				A++
			} else {
				A--
			}
			if (A <= 0 || A > 12) {
				F = true;
				if (A <= 0) {
					A = 12
				} else {
					A = 1
				}
			} else {
				F = false
			}
		}
		if (F) {
			if (I > 0) {
				G++
			} else {
				G--
			}
		}
		H = G + "-" + A + "-" + E;
		if (this.isDate(H, false)) {
			if (I > 0) {
				I--
			} else {
				I++
			}
		}
	}
	return H
};
Date.prototype.getWeekStart = function (A) {
	this.isDate(A, true);
	var B = this.getDay();
	var D = B;
	if (D != 0) {
		D = -D
	}
	return formatDate(this.dateAdd(A, D))
};
Date.prototype.getWeekEnd = function (A) {
	this.isDate(A, true);
	var B = this.getDay();
	var D = 6 - B;
	return formatDate(this.dateAdd(A, D))
};
Date.prototype.getMonthStart = function (A) {
	this.isDate(A, true);
	A = this.getFullYear() + "-" + (this.getMonth() + 1) + "-1";
	return formatDate(A)
};
Date.prototype.getMonthEnd = function (D) {
	this.isDate(D, true);
	var A = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	var E = this.getFullYear();
	var F = this.getMonth() + 1;
	var B = A[this.getMonth()];
	if (E % 4 == 0 && F == 2) {
		B++
	}
	D = E + "-" + F + "-" + B;
	return formatDate(D)
};
Date.prototype.getSeasonStart = function (B) {
	var A = [1, 1, 1, 4, 4, 4, 7, 7, 7, 10, 10, 10];
	this.isDate(B, true);
	B = this.getFullYear() + "-" + A[this.getMonth()] + "-1";
	return formatDate(B)
};
Date.prototype.getSeasonEnd = function (D) {
	this.isDate(D, true);
	var B = [3, 3, 3, 6, 6, 6, 9, 9, 9, 12, 12, 12];
	var A = [31, 31, 31, 30, 30, 30, 30, 30, 30, 31, 31, 31];
	this.isDate(D, true);
	D = this.getFullYear() + "-" + B[this.getMonth()] + "-" + A[this.getMonth()];
	return formatDate(D)
};
Date.prototype.getWeekOfMonth = function () {
	var A = this.getDay();
	var B = this.getDate();
	return Math.ceil((B + 6 - A) / 7)
};
function formatDate(A) {
	var E = A.split("-");
	var D = parseInt(E[1], 10);
	var B = parseInt(E[2], 10);
	return E[0] + "-" + (D < 10 ? "0" + D : D) + "-" + (B < 10 ? "0" + B : B)
}
Date.prototype.format = function (D) {
	var A = this.getHours();
	var E = {
		"M+": this.getMonth() + 1,
		"d+": this.getDate(),
		"H+": A,
		"h+": (A > 12 ? A - 12 : A),
		"m+": this.getMinutes(),
		"s+": this.getSeconds(),
		"q+": Math.floor((this.getMonth() + 3) / 3),
		S: this.getMilliseconds()
	};
	if (/(y+)/.test(D)) {
		D = D.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length))
	}
	for (var B in E) {
		if (new RegExp("(" + B + ")").test(D)) {
			D = D.replace(RegExp.$1, RegExp.$1.length == 1 ? E[B] : ("00" + E[B]).substr(("" + E[B]).length))
		}
	}
	return D
};
function compareDate(B, A) {
	return Date.parse(B.replace(/\-/g, "/")) - Date.parse(A.replace(/\-/g, "/"))
}
var chinese = ["\u96f6", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d", "\u4e03", "\u516b", "\u4e5d"];
var len = ["\u5341"];
var ydm = ["\u5e74", "\u6708", "\u65e5"];
function num2chinese(D) {
	D = "" + D;
	slen = D.length;
	var A = "";
	for (var B = 0; B < slen; B++) {
		A += chinese[D.charAt(B)]
	}
	return A
}
function n2c(B) {
	B = "" + B;
	var A = "";
	if (B.length == 2) {
		if (B.charAt(0) == "1") {
			if (B.charAt(1) == "0") {
				return len[0]
			}
			return len[0] + chinese[B.charAt(1)]
		}
		if (B.charAt(1) == "0") {
			return chinese[B.charAt(0)] + len[0]
		}
		return chinese[B.charAt(0)] + len[0] + chinese[B.charAt(1)]
	}
	return num2chinese(B)
}
function date2chinese0(B) {
	var A = date2chinese(B);
	A = A.replace(/\u96f6/g, "\u3007");
	return A
}
function date2chinese1(B) {
	var D;
	var A = B.split("-");
	if (A.length != 3) {
		A = B.split("/")
	}
	if (A.length != 3) {
		return B
	}
	if (A[1].charAt(0) == "0") {
		A[1] = A[1].substr(1)
	}
	if (A[2].charAt(0) == "0") {
		A[2] = A[2].substr(1)
	}
	D = A[0] + "\u5e74" + A[1] + "\u6708" + A[2] + "\u65e5";
	return D
}
function date2chinese(D) {
	var F = /^(\d{2}|\d{4})(\/|-)(\d{1,2})(\2)(\d{1,2})$/;
	var E = D.match(F);
	var B = "";
	if (E == null) {
		return false
	}
	for (var A = 1; A < E.length; A = A + 2) {
		B += n2c(E[A] - 0) + ydm[(A - 1) / 2]
	}
	return B
}
function chanageBodyType(F, B) {
	var E = document.getElementById("bodyType");
	if (E && E.value == F) {
		return true
	}
	var A = document.getElementById("appName");
	if (A && A.value == "4" && F == "HTML") {
		var D = document.getElementById("content");
		if (D) {
			D.value = ""
		}
	}
	if (confirm(v3x.getMessage("V3XLang.common_confirmChangBodyType"))) {
		var G = document.getElementById("changePdf");
		if (G) {
			if (F == "OfficeWord" || F == "WpsWord") {
				G.style.display = ""
			} else {
				G.style.display = "none"
			}
		}
		var H = {};
		if (typeof(officeParams) != "undefined") {
			H = officeParams
		}
		H.needReadFile = false;
		if (F == "Pdf") {
			needReadFile = false
		}
		showEditor(F, true, H);
		return true
	}
	return false
}
function getA8Top() {
	try {
		var A = getA8ParentWindow(window);
		if (A) {
			return A
		} else {
			return top
		}
	} catch (B) {
		return top
	}
}
function getA8ParentWindow(D) {
	var A = D;
	for (var B = 0; B < 20; B++) {
		if (typeof A.isCtpTop != "undefined" && A.isCtpTop) {
			return A
		} else {
			if (A == window.top) {
				break
			}
			A = A.parent
		}
	}
}
function showEditor(D, B, H) {
	B = (B == null) ? true : false;
	if (D == "HTML") {
		removeOfficeDiv(B);
		oFCKeditor.ReplaceTextarea()
	} else {
		if (D == "OfficeWord") {
			oFCKeditor.remove();
			var A = getInstallOfficeStatus();
			if (A.installDoc) {
				H.fileType = "doc"
			} else {
				H.fileType = "wps"
			}
			H.fileType = "doc";
			initBaseOffice(H)
		} else {
			if (D == "OfficeExcel") {
				oFCKeditor.remove();
				H.fileType = "xls";
				initBaseOffice(H)
			} else {
				if (D == "WpsWord") {
					oFCKeditor.remove();
					H.fileType = "wps";
					initBaseOffice(H)
				} else {
					if (D == "WpsExcel") {
						oFCKeditor.remove();
						H.fileType = "et";
						initBaseOffice(H)
					} else {
						if (D == "Pdf") {
							oFCKeditor.remove();
							showPdfDiv("pdf")
						}
					}
				}
			}
		}
	}
	var E = document.getElementById("bodyType");
	if (E) {
		setContentTypeState(E.value, D);
		E.value = D
	}
	try {
		var F = document.getElementById("bulBottPre").value;
		if (F && F == "1") {
			if (D == "HTML") {
				myBar.enabled("preview")
			} else {
				myBar.disabled("preview")
			}
		}
	} catch (G) {}
}
function initContentTypeState() {
	try {
		bodyType = document.getElementById("bodyType").value;
		bodyTypeSelector.disabled("menu_bodytype_" + bodyType)
	} catch (A) {}
}
function setContentTypeState(A, B) {
	try {
		if (A == B) {
			bodyTypeSelector.disabled("menu_bodytype_" + B)
		} else {
			bodyTypeSelector.disabled("menu_bodytype_" + B);
			bodyTypeSelector.enabled("menu_bodytype_" + A)
		}
	} catch (D) {}
}
function getInstallOfficeStatus() {
	var B = {};
	try {
		var A = (navigator.appName == "Microsoft Internet Explorer") || ua.indexOf("Trident") != -1;
		if (A) {
			var E = "";
			if (navigator.cpuClass.indexOf("x86") != -1) {
				E = new ActiveXObject("Kinggrid.iWebOffice")
			} else {
				E = new ActiveXObject("Kinggrid.iWebOffice_x64")
			}
			B.installDoc = E.WebApplication(".doc");
			B.installWps = E.WebApplication(".wps")
		} else {
			B.installDoc = true;
			B.installWps = true
		}
	} catch (D) {
		B.installDoc = true;
		B.installWps = true
	}
	return B
}
function showNextCondition(A) {
	if (!A) {
		return
	}
	var B = A.options;
	for (var D = 0; D < B.length; D++) {
		var E = document.getElementById(B[D].value + "Div");
		if (E) {
			E.style.display = "none"
		}
	}
	if (!document.getElementById(A.value + "Div")) {
		return
	}
	document.getElementById(A.value + "Div").style.display = "block"
}
function showCondition(conditionValue, textfieldValue, textfield1Value) {
	if (!conditionValue) {
		return
	}
	var conditionObj = document.getElementById("condition");
	selectUtil(conditionObj, conditionValue);
	showNextCondition(conditionObj);
	var theDiv = document.getElementById(conditionValue + "Div");
	if (theDiv) {
		var nodes = theDiv.childNodes;
		if (nodes) {
			for (var j = 0; j < nodes.length; j++) {
				var node = nodes.item(j);
				if (node.tagName == "INPUT") {
					eval("node.value = " + node.name + "Value;")
				} else {
					if (node.tagName == "SELECT") {
						eval("selectUtil(node, " + node.name + "Value)")
					}
				}
			}
		}
	}
}
function selectUtil(E, B) {
	if (!E) {
		return false
	}
	var D = E.options;
	for (var A = D.length - 1; A >= 0; A--) {
		if (D[A].value == B) {
			E.selectedIndex = A;
			return true
		}
	}
	return false
}
function dateCheck() {
	var B = document.getElementById("startdate").value;
	var A = document.getElementById("enddate").value;
	if (compareDate(B, A) > 0) {
		window.alert($.i18n("calendar_endTime_startTime"));
		return false
	}
	doSearch()
}
var SearchEnter = {
	submitCount: 0
};
function doSearch() {
	var L = document.getElementsByName("searchForm")[0];
	var F = document.getElementById("createDateDiv");
	if (L) {
		if (SearchEnter.submitCount > 2) {
			return
		}
		var R = L.condition.options;
		for (var I = 0; I < R.length; I++) {
			if (L.condition.value == R[I].value) {
				var M = true;
				if ("createDate" == L.condition.value) {
					var G = document.getElementById(R[I].value + "Div");
					var D;
					if (G != null) {
						D = G.childNodes
					}
					var Q = new Array();
					if (D != null) {
						D = F.childNodes;
						for (var H = 0; H < D.length; H++) {
							var K = D[H];
							if (K.type == "text") {
								Q.push(K)
							}
						}
					}
					if ((Q.length > 0) && (Q.length < 3)) {
						var B = Q[0].value;
						var A = B.split("-");
						var O = new Date();
						O.setFullYear(A[0], A[1] - 1, A[2]);
						var P = Q[1].value;
						var J = P.split("-");
						var E = new Date();
						E.setFullYear(J[0], J[1] - 1, J[2]);
						if (E < O) {
							M = false
						}
					}
				}
				if (M) {
					continue
				} else {
					return
				}
			}
			var N = document.getElementById(R[I].value + "Div");
			if (N) {
				N.innerHTML = ""
			}
		}
		L.target = L.target || "_self";
		SearchEnter.submitCount++;
		L.submit()
	}
}
function doSearchEnter() {
	var A = v3x.getEvent();
	if (A.keyCode == 13) {
		doSearch()
	}
}
function listenerKeyESC() {
	var A = v3x.getEvent();
	if (A.keyCode == 27) {
		window.close()
	}
}
function validateCheckbox(B) {
	B = B || "id";
	var F = document.getElementsByName(B);
	if (!F) {
		return 0
	}
	var D = 0;
	var A = F.length;
	for (var E = 0; E < A; E++) {
		if (F[E].checked) {
			D++
		}
	}
	return D
}
function getCheckboxSingleValue(A) {
	var B = getCheckboxSingleObject(A);
	return B == null ? null : B.value
}
function getCheckboxSingleObject(B) {
	B = B || "id";
	var F = document.getElementsByName(B);
	if (!F) {
		return 0
	}
	var D = 0;
	var A = F.length;
	for (var E = 0; E < A; E++) {
		if (F[E].checked) {
			return F[E]
		}
	}
	return null
}
var currentOpinionId = "";
function hiddenReplyDiv() {
	var A = document.getElementById("replyDiv" + currentOpinionId);
	if (A) {
		A.innerHTML = "";
		A.style.display = "none"
	}
	fileUploadAttachments.clear()
}
function reply(T, U, G, P, E, O, K, D) {
	var Q = document.getElementById("replyDiv" + currentOpinionId);
	if (Q && Q.innerHTML != "") {
		return
	}
	hiddenReplyDiv();
	opinionId5 = T;
	var B = document.getElementById("uploadAttachmentSpan");
	if (B != null) {
		B.style.display = (G == true ? "" : "none")
	}
	var L = document.getElementById("myDocumentSpan");
	if (L) {
		L.style.display = (P == true ? "" : "none")
	}
	var J = document.getElementById("replyDiv" + T);
	if (J) {
		J.innerHTML = document.getElementById("replyCommentHTML").innerHTML;
		J.style.display = "";
		var M = document.getElementById("reply-table");
		if (M != null) {
			M.style.display = ""
		}
		var S = document.getElementsByName("repform")[0];
		S.isHidden.id = "isHidden";
		try {
			S.isSendMessage.id = "isSendMessage"
		} catch (R) {}
		if (E) {
			document.getElementById("isHiddenDiv").style.display = "none"
		}
		if (S.b11) {
			S.b11.focus()
		}
		S.content.focus();
		S.opinionId.value = T;
		if (U) {
			S.memberId.value = U
		}
		var H = document.getElementById("affairMemberId");
		var I = document.getElementById("sendMessagePeopleSpan");
		if (H) {
			if (O) {
				var N = document.getElementById("pushMessageMemberNames");
				if (N && currentUserId != U) {
					N.value = O
				}
				if (N && currentUserId == U) {
					S.isSendMessage.checked = false;
					I.style.display = "none"
				}
			}
			if (K) {
				var A = document.getElementById("pushMessageMemberIds");
				if (A) {
					A.value = K + "," + U
				}
				var F = document.getElementById("replyedAffairId");
				if (F) {
					F.value = K
				}
			}
		} else {
			if (S.isSendMessage) {
				S.isSendMessage.checked = false
			}
			if (I) {
				I.style.display = "none"
			}
		}
	}
	currentOpinionId = T
}
function checkReplyForm(A) {
	if (checkForm(A)) {
		return true
	}
	return false
}
function checkDefSubject(B, D) {
	var A = getDefaultValue(B);
	if (D && B.value == A) {
		B.value = ""
	} else {
		if (!B.value) {
			B.value = A
		}
	}
}
function getDefaultValue(B) {
	if (!B) {
		return null
	}
	var A = B.attributes.getNamedItem("defaultValue");
	if (!A) {
		A = B.attributes.getNamedItem("deaultValue")
	}
	if (A) {
		return A.nodeValue
	}
	return null
}
function Panel(D, B, A) {
	this.id = D;
	this.label = B;
	this.onclick = A || ""
}
Panel.prototype.toString = function () {
	return "<div id='button-L" + this.id + "' class=\"sign-button-L\"></div><div id='button" + this.id + "' onClick=\"changeLocation('" + this.id + "');" + this.onclick + '" class="sign-button-M">' + this.label + "</div><div id='button-R" + this.id + '\' class="sign-button-R"></div><div class="sign-button-line"></div>'
};
Panel.prototype.toMinString = function () {
	return '<div class="sign-min-label" onclick="changeLocation(\'' + this.id + "');" + this.onclick + '" title="' + this.label + '">' + this.label + '</div><div class="separatorDIV"></div>'
};
function showPanels(B) {
	if (B != false) {
		document.write('<div id="hiddenPrecessAreaDiv" onclick="hiddenPrecessArea()" title="' + v3x.getMessage("V3XLang.common_hiddenPrecessArea") + '"></div>')
	}
	for (var A = 0; A < panels.size(); A++) {
		document.write(panels.get(A).toString())
	}
	document.close()
}
function showMinPanels() {
	for (var A = 0; A < panels.size(); A++) {
		document.write(panels.get(A).toMinString())
	}
	document.close();
	setNoOrResize(true)
}
function setNoOrResize(B) {
	try {
		var A = parent.document.getElementById("detailRightFrame");
		if (A) {
			A.noResize = B
		} else {
			return
		}
	} catch (D) {}
}
function changeLocation(G) {
	for (var B = 0; B < panels.size(); B++) {
		var A = panels.get(B).id;
		if (A == G) {
			continue
		}
		document.getElementById("button-L" + A).className = "sign-button-L";
		document.getElementById("button" + A).className = "sign-button-M";
		document.getElementById("button-R" + A).className = "sign-button-R";
		var F = document.getElementById(A + "TR");
		if (F) {
			F.style.display = "none"
		}
	}
	var E = document.getElementById("button" + G);
	if (E) {
		document.getElementById("button-L" + G).className = "sign-button-L-sel";
		E.className = "sign-button-M-sel";
		document.getElementById("button-R" + G).className = "sign-button-R-sel"
	}
	var D = document.getElementById(G + "TR");
	if (D) {
		D.style.display = ""
	}
	setNoOrResize(false)
}
function showPrecessArea(B) {
	try {
		parent.detailMainFrame.contentIframe.SeeyonForm_HideArrow()
	} catch (E) {}
	B = B || "32%";
	try {
		parent.document.getElementById("zy").cols = "*," + B
	} catch (E) {}
	var D = document.getElementById("signAreaTable");
	if (D) {
		D.style.display = ""
	}
	var A = document.getElementById("signMinDiv");
	if (A) {
		A.style.display = "none";
		A.style.height = "0px"
	}
}
function hiddenPrecessArea() {
	try {
		parent.detailMainFrame.contentIframe.SeeyonForm_HideArrow()
	} catch (D) {}
	try {
		parent.document.getElementById("zy").cols = "*,45"
	} catch (D) {}
	var B = document.getElementById("signAreaTable");
	if (B) {
		B.style.display = "none"
	}
	var A = document.getElementById("signMinDiv");
	if (A) {
		A.style.display = "";
		A.style.height = "100%"
	}
	setNoOrResize(true)
}
function refreshIt() {
	location.reload(true)
}
function refreshWorkSpace() {
	var A = getA8Top().reFlesh()
}
function locationBack() {
	history.back()
}
function escapeStringToHTML(D, B, A) {
	if (!D) {
		return ""
	}
	D = D.replace(/&/g, "&amp;");
	D = D.replace(/</g, "&lt;");
	D = D.replace(/>/g, "&gt;");
	D = D.replace(/\r/g, "");
	if (typeof(A) == "undefined" || (A == true || A == "true")) {
		D = D.replace(/\n/g, "<br/>")
	}
	D = D.replace(/\'/g, "&#039;");
	D = D.replace(/"/g, "&#034;");
	if (typeof(B) != "undefined" && (B == true || B == "true")) {
		D = D.replace(/ /g, "&nbsp;")
	}
	return D
}
function escapeStringToJavascript(A) {
	if (!A) {
		return A
	}
	A = A.replace(/\\/g, "\\\\");
	A = A.replace(/\r/g, "");
	A = A.replace(/\n/g, "");
	A = A.replace(/\'/g, "\\'");
	A = A.replace(/"/g, '\\"');
	return A
}
function getParameter(D) {
	var F = document.location.search;
	if (F) {
		F = F.substring(1);
		var E = F.split("&");
		for (var B = 0; B < E.length; B++) {
			var A = E[B].split("=");
			if (D == A[0]) {
				return A[1]
			}
		}
	}
}
function setSelectValue(D, F) {
	var A = document.getElementById(D);
	if (!A) {
		return
	}
	var E = A.options;
	if (!E) {
		return
	}
	for (var B = 0; B < E.length; B++) {
		var G = E[B];
		if (G.value == F) {
			G.selected = true;
			break
		}
	}
}
var sxUpConstants = {
	status_0: "0,*",
	status_1: "35%,*"
};
var sxDownConstants = {
	status_0: "*,9",
	status_1: "35%,*"
};
var sxMiddleConstants = {
	status_0: "35%,*",
	status_1: "35%,*"
};
var indexFlag = 0;
function previewFrame(direction) {
	if (!direction) {
		return
	}
	var obj = parent.parent.document.getElementById("sx");
	if (obj == null) {
		obj = parent.document.getElementById("sx")
	}
	if (obj == null) {
		return
	}
	if (indexFlag > 1) {
		indexFlag = 0
	}
	var status = eval("sx" + direction + "Constants.status_" + indexFlag);
	obj.rows = status;
	if (direction != "Middle") {
		indexFlag++
	}
}
function checkImageSize(A) {
	if (A.width > 540) {
		A.width = 540
	}
}
function getDetailPageBreak(F, E) {
	var A = true;
	if (F != true && (getA8Top().window.dialogArguments || window.opener)) {
		A = false
	}
	var D = "";
	try {
		D = v3x == null ? "" : v3x.baseURL + "/common/"
	} catch (B) {}
	document.write('<table id=\'pagebreakspare\' border="0" cellpadding="0" cellspacing="0" width="100%"  height="10" align="center">');
	document.write('<tr align="center">');
	document.write("<td style='height:10px; overflow:hidden;' class=\"detail-top\">");
	if (A) {
		document.write('<table border="0" cellpadding="0" cellspacing="0" width="100%"  height="10">');
		document.write("<tr>");
		document.write("<td>");
		document.write("<div class='break-up' onclick=\"previewFrame('Up')\"></div>");
		document.write("</td>");
		document.write("<td>");
		document.write("<div class='break-down' onclick=\"previewFrame('Down')\"></div>");
		document.write("</td>");
		document.write("</tr>");
		document.write("</table>")
	} else {
		document.write("&nbsp;")
	}
	document.write("</td>");
	document.write("</tr>");
	document.write("</table>");
	document.close();
	if (E == "Down") {
		previewFrame("Down")
	} else {
		previewFrame("Middle")
	}
}
function getLimitLength(D, A, B) {
	return D.getLimitLength(A, B)
}
function changeMenuTab(D) {
	var G = document.getElementById("menuTabDiv");
	var F = D.className;
	if (F == "tab-tag-middel-sel") {
		return
	}
	var E = G.getElementsByTagName("div");
	var B;
	for (B = 0; B < E.length; B++) {
		F = E[B].className;
		if (F.substr(F.length - 4) == "-sel") {
			E[B].className = F.substr(0, F.length - 4)
		}
	}
	for (B = 0; B < E.length; B++) {
		if (D == E[B]) {
			E[B - 1].className = E[B - 1].className + "-sel";
			E[B].className = E[B].className + "-sel";
			E[B + 1].className = E[B + 1].className + "-sel"
		}
	}
	var A = document.getElementById("detailIframe").contentWindow;
	A.location.href = D.getAttribute("url")
}
function setDefaultTab(E) {
	var D = document.getElementById("menuTabDiv");
	var B = D.getElementsByTagName("div");
	B[E * 4].className = B[E * 4].className + "-sel";
	B[E * 4 + 1].className = B[E * 4 + 1].className + "-sel";
	B[E * 4 + 2].className = B[E * 4 + 2].className + "-sel";
	var A = document.getElementById("detailIframe").contentWindow;
	A.location.href = B[E * 4 + 1].getAttribute("url")
}
function getRadioValue(B) {
	var D = document.getElementsByName(B);
	if (!D) {
		return null
	}
	for (var A = 0; A < D.length; A++) {
		if (D[A].checked) {
			return D[A].value
		}
	}
	return null
}
var sx_variable = {
	detailFrameName: "",
	title: "",
	imgSrc: "",
	count: 0,
	description: "",
	isShow: false
};
function showDetailPageBaseInfo(A, F, B, E, D) {
	parent.sx_variable.detailFrameName = A;
	parent.sx_variable.title = F;
	parent.sx_variable.imgSrc = B;
	parent.sx_variable.count = E;
	parent.sx_variable.description = D;
	parent.doDetailPageBaseInfo()
}
function doDetailPageBaseInfo() {
	if (!sx_variable.detailFrameName) {
		return
	}
	var detailDocument = null;
	try {
		detailDocument = document.getElementById(sx_variable.detailFrameName).contentWindow
	} catch (e) {}
	if (detailDocument && detailDocument.document.readyState == "complete") {
		var flag = eval("detailDocument.detailPageBaseInfoFlag");
		if (!flag) {
			detailDocument.location.href = v3x.baseURL + "/common/detail.jsp";
			window.setTimeout("doDetailPageBaseInfo()", 500);
			return
		}
		detailDocument.document.getElementById("titlePlace").innerHTML = sx_variable.title;
		if (sx_variable.count != null && sx_variable.count >= 0) {
			detailDocument.document.getElementById("countPlace").innerHTML = v3x.getMessage("V3XLang.common_detailPage_count_label", "<span class='countNumber'>" + sx_variable.count + "</span>")
		}
		detailDocument.document.getElementById("descriptionPlace").innerHTML = sx_variable.description || "";
		detailDocument.document.getElementById("allDiv").style.display = ""
	} else {
		window.setTimeout("doDetailPageBaseInfo()", 500)
	}
}
function reloadDetailPageBaseInfo() {
	try {
		parent.doDetailPageBaseInfo()
	} catch (A) {}
}
function changeTabUnSelected(A) {
	if (A) {
		document.getElementById("l-" + A).className = "tab-tag-left";
		document.getElementById("m-" + A).className = "tab-tag-middel cursor-hand";
		document.getElementById("r-" + A).className = "tab-tag-right"
	}
}
function changeTabSelected(A) {
	if (A) {
		document.getElementById("l-" + A).className = "tab-tag-left-sel";
		document.getElementById("m-" + A).className = "tab-tag-middel-sel";
		document.getElementById("r-" + A).className = "tab-tag-right-sel"
	}
}
var newIdes;
var pigeonholeItem = {};
function pigeonhole(B, E, H, F, D, A) {
	pigeonholeItem.collBackFuns = A;
	newIdes = E;
	if (typeof(D) == "undefined") {
		D = ""
	}
	if (typeof(A) != "undefined") {
		getA8Top().pigeonholeWin = getA8Top().$.dialog({
				title: getA8Top().$.i18n("doc.tree.move.title"),
				transParams: {
					parentWin: window
				},
				closeParam: {
					show: true,
					handler: function () {
						pigeonholeChromeCollBack("cancel")
					}
				},
				url: v3x.baseURL + "/doc.do?method=docPigeonhole&appName=" + B + "&atts=" + H + "&validAcl=" + F + "&pigeonholeType=" + D + CsrfGuard.getUrlSurffix(),
				width: 500,
				height: 500,
				isDrag: false
			})
	} else {
		var G = v3x.openWindow({
				url: v3x.baseURL + "/doc.do?method=docPigeonhole&appName=" + B + "&atts=" + H + "&validAcl=" + F + "&pigeonholeType=" + D + CsrfGuard.getUrlSurffix(),
				width: "500",
				height: "500",
				resizable: "true",
				scrollbars: "true"
			});
		if (G == undefined) {
			G = "cancel"
		}
		return G
	}
}
function pigeonholeChromeCollBack(B) {
	var A = $("#officeFrameDiv");
	if (A.length > 0) {
		A.css("visibility", "visible")
	}
	getA8Top().pigeonholeWin.close();
	var D = new Function(pigeonholeItem.collBackFuns + "('" + B + "');");
	D()
}
function projectPigeonhole(A, D, B, F) {
	var E = v3x.openWindow({
			url: _ctxPath + "/doc.do?method=docTreeProjectIframe&appName=" + A + "&ids=" + D + "&projectId=" + B + "&atts=" + F,
			width: "500",
			height: "500",
			resizable: "true",
			scrollbars: "true"
		});
	if (E == undefined) {
		E = "cancel"
	}
	return E
}
function isPhoneNumber(B) {
	var E = B.value;
	var A = B.getAttribute("inputName");
	var D = /^([\d]*)$/;
	if (!D.test(E)) {
		writeValidateInfo(B, $.i18n("formValidate_isNumber", A));
		return false
	}
	return true
}
function Avacount(A) {
	var D = A.value;
	var B = document.getElementById("Avacount").value;
	if (parseInt(D) > parseInt(B)) {
		alertAvacount();
		return false
	}
	return true
}
function setScrollPosition(A, E, D) {
	var B = (D != null) ? document.getElementById(D) : document.body;
	B.scrollLeft = A;
	B.scrollTop = E
}
function resizeBody(D, A, B, G) {
	try {
		B = (B == "min") ? "min" : "max";
		G = (G == "left") ? "left" : "right";
		var F = parent.document.getElementById(A);
		if (F == null) {
			F = parent.parent.document.getElementById(A)
		}
		if (B == "max") {
			if (document.body.clientWidth > D) {
				if (G == "left") {
					F.cols = "" + D + ",*"
				} else {
					F.cols = "*," + D + ""
				}
			}
		} else {
			if (document.body.clientWidth < D) {
				if (G == "left") {
					F.cols = "" + D + ",*"
				} else {
					F.cols = "*," + D + ""
				}
			}
		}
	} catch (E) {}
}
function resizeRightBody(D, A, B) {
	try {
		var F = parent.document.getElementById(A);
		if (F == null) {
			F = parent.parent.document.getElementById(A)
		}
		if (document.body.clientWidth < D) {
			F.cols = "*," + B + ""
		}
	} catch (E) {}
}
function cancelOk() {
	try {
		var E = arguments[0];
		if (E != null) {
			if (E.page != null && E.page == "new") {
				window.location.href = v3x.baseURL + "/common/detail.jsp"
			} else {
				if (E.page != null && E.page == "edit") {
					var H = document.forms;
					for (var D = 0; D < H.length; D++) {
						for (var A = 0; A < H[D].length; A++) {
							if (E.enable != null) {
								for (var B = 0; B < E.enable.length; B++) {
									if (H[D][A].id == E.enable[B]) {
										break
									} else {
										H[D][A].disabled = true
									}
								}
							} else {
								H[D][A].disabled = true
							}
						}
					}
					if (E.hidden != null) {
						for (var F = 0; F < E.hidden.length; F++) {
							document.getElementById(E.hidden[F]).style.display = "none"
						}
					}
				} else {
					window.close()
				}
			}
		} else {
			window.location.href = v3x.baseURL + "/common/detail.jsp"
		}
	} catch (G) {}
}
function canShowPeopleCard(A) {
	var D = false;
	var B = new XMLHttpRequestCaller(this, "ajaxOrgManager", "canShowPeopleCard", false);
	B.addParameter(1, "Long", null);
	B.addParameter(2, "Long", A);
	var E = B.serviceRequest();
	if (E == true || E == "true") {
		D = true
	}
	return D
}
function showV3XMemberCard(A, B) {
	if (!canShowPeopleCard(A)) {
		return
	}
	newPeopleCardDialog = getA8Top().$.dialog({
			id: "newPeopleCardDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: 530,
			top: 50,
			closeParam: {
				show: false
			}
		})
}
function showV3XMemberCardWithOutButton(A, B) {
	if (!canShowPeopleCard(A)) {
		return
	}
	if (getA8Top().isCtpTop) {
		getA8Top().newPeopleCardWithoutButtonDialog = getA8Top().$.dialog({
				id: "newPeopleCardWithoutButtonDialog",
				transParams: {
					parentWin: window
				},
				title: " ",
				isHead: false,
				url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
				width: 455,
				height: 465,
				top: 50,
				closeParam: {
					show: false
				}
			})
	} else {
		getA8Top().newPeopleCardWithoutButtonDialog = v3x.openDialog({
				id: "newPeopleCardWithoutButtonDialog",
				title: " ",
				isHead: false,
				transParams: {
					parentWin: window
				},
				targetWindow: B == undefined ? getA8Top() : B,
				url: getBaseURL() + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A + CsrfGuard.getUrlSurffix(),
				width: 455,
				height: 515,
				closeParam: {
					show: false
				}
			})
	}
}
function ajaxCheckAccountExchangePendingAffair(D, F) {
	try {
		var A = new XMLHttpRequestCaller(this, "ajaxEdocExchangeManager", "checkEdocExchangeHasPendingAffair", false);
		A.addParameter(1, "Long", D);
		var B = A.serviceRequest();
		if (B != "0") {
			if (F != "") {
				alert(v3x.getMessage("MainLang.edoc_alert_hasExchangePendingAffair", F))
			} else {
				alert(v3x.getMessage("MainLang.edoc_alert_notdelteAllExchanger"))
			}
			return true
		}
		return false
	} catch (E) {
		alert("Exception : " + E);
		return false
	}
}
function isOpenFromGenius() {
	var B = false;
	try {
		B = getA8Top().location.href.indexOf("a8genius.do") > -1
	} catch (A) {
		alert(A)
	}
	return B
}
if (navigator.userAgent.indexOf("iPad") != -1) {
	window.addEventListener("load", function () {
		getA8Top().document.body.style.height = "690px"
	})
}
function setFFGrid(A, B) {
	if (A == "" || B == false) {
		return
	}
	if (document.all) {
		window.attachEvent("onload", function () {
			mxtgrid(A)
		});
		window.attachEvent("onresize", function () {
			resizeGrid(A, B)
		})
	} else {
		mxtgrid(A);
		window.addEventListener("resize", function () {
			resizeGrid(A, B)
		}, false)
	}
}
function mxtgrid(F) {
	var D = {
		id: "",
		srollLeft: 0,
		_srollLeft: 0,
		dragLeft: 0,
		xStart: 0,
		xEnd: 0,
		eStart: 0,
		oMove: null,
		iIndex: 0,
		_drag: 0,
		stopDrag: false,
		dragFlag: false,
		scroll: function () {
			D.hDiv.scrollLeft = D.bDiv.scrollLeft
		},
		setPosition: function () {
			var G = parseInt(D.hDiv.scrollLeft);
			var J = D.srollLeft - G;
			D.cDrag.style.display = "none";
			var L = D.cDrag.childNodes;
			for (var I = 0; I < L.length; I++) {
				var K = L[I];
				if (typeof K == "object" && K.nodeType != 3) {
					var H = parseInt(K.style.left) + J;
					K.style.left = H + "px"
				}
			}
			D.srollLeft = G;
			D.cDrag.style.display = ""
		},
		setDragPosition: function () {
			var G = parseInt(D.hDiv.scrollLeft);
			var I = D.srollLeft - G;
			D.cDrag.style.display = "none";
			var L = D.cDrag.childNodes;
			for (var H = 0; H < L.length; H++) {
				var K = L[H];
				if (typeof K == "object" && K.nodeType != 3) {
					var J = parseInt(K.style.left) + I;
					K.style.left = J + "px"
				}
			}
			D.srollLeft = G;
			D.cDrag.style.display = ""
		},
		attEvt: function () {
			var I = D.cDrag.childNodes;
			for (var G = 0; G < I.length; G++) {
				var H = I[G];
				if (typeof H == "object" && H.nodeType != 3) {
					H.onmousedown = D.dragStart
				}
			}
		},
		getIndex: function () {
			if (D.oMove != null && D.cDrag != null) {
				var H = D.cDrag.childNodes;
				for (var G = 0; G < H.length; G++) {
					if (H[G] == D.oMove) {
						D.iIndex = G
					}
				}
			}
		},
		dragStart: function () {
			D.oMove = this;
			D.moveOrigintLeft = parseInt(D.oMove.style.left);
			D.getIndex();
			document.onmousedown = D.mousedown;
			document.onmousemove = D.mousemove;
			document.onmouseup = D.mouseup;
			document.onselectstart = function () {
				return false
			};
			document.onselect = function () {
				document.selection.empty()
			}
		},
		mousedown: function (H) {
			D.bDiv.style.overflowY = "auto";
			D.bDiv.style.overflowX = "auto";
			D.dragFlag = true;
			var G = D.getEvent();
			D.eStart = D.xStart = document.all ? G.x : G.pageX;
			document.body.style.cursor = "col-resize"
		},
		mousemove: function (L) {
			if (!D.dragFlag) {
				return
			}
			var K = D.getEvent();
			var H = document.all ? K.x : K.pageX;
			var G = H - D.eStart;
			var J = D.oMove.previousSibling;
			var I = parseInt(D.oMove.style.left) + G;
			if (I > D.clientWidth || I < 50) {
				D.xEnd = D.eStart;
				D.oMove.style.left = D.moveOrigintLeft + "px";
				document.body.style.cursor = "default";
				D.dragFlag = false;
				D.stopDrag = false;
				D.oMove = null;
				document.onmousedown = null;
				document.onmousemove = null;
				document.onmouseup = null;
				document.onselectstart = null;
				document.onselect = null
			} else {
				if (J != null) {
					if (I > (parseInt(J.style.left) + 50)) {
						D.oMove.style.left = I + "px";
						D.eStart = H
					} else {
						D.stopDrag = true
					}
				} else {
					if (I > 50) {
						D.oMove.style.left = I + "px";
						D.eStart = H
					} else {
						D.stopDrag = true
					}
				}
			}
		},
		mouseup: function (H) {
			if (!D.dragFlag) {
				return
			}
			var G = D.getEvent();
			D.xEnd = document.all ? G.x : G.pageX;
			if (D.stopDrag) {
				D.xEnd = D.eStart
			}
			D.setDragPosition();
			D.setHeadWidth();
			D.setListWidth();
			if (D._drag < 0 && D.hDiv.scrollLeft == 0) {
				D.bDiv.scrollLeft = 0
			} else {
				D.hDiv.scrollLeft = D.bDiv.scrollLeft
			}
			D.setPosition();
			document.body.style.cursor = "default";
			D.dragFlag = false;
			D.stopDrag = false;
			D.oMove = null;
			document.onmousedown = null;
			document.onmousemove = null;
			document.onmouseup = null;
			document.onselectstart = null;
			document.onselect = null;
			if (!document.all) {}
		},
		setHeadWidth: function () {
			var G = D.oHead.childNodes[D.iIndex];
			var H = G.childNodes[0];
			var I = parseInt(H.style.width) + D._drag;
			H.style.width = I + "px";
			G.setAttribute("width", I);
			D.globalWidth = D.bTable.clientWidth;
			D.hTable.setAttribute("width", D.globalWidth + D._drag);
			if (D.noBody == true) {
				D.bDiv.innerHTML = "<div style='width:" + (D.holeWidth + D._drag) + "px'>&nbsp;</div>"
			}
		},
		setListWidth: function () {
			var H = D.oBody.childNodes;
			for (var K = 0; K < H.length; K++) {
				var J = H[K].childNodes[D.iIndex];
				var G = J.childNodes[0];
				var I = parseInt(G.style.width) + D._drag;
				G.style.width = I + "px";
				J.setAttribute("width", I)
			}
			D.bTable.setAttribute("width", D.globalWidth + D._drag)
		},
		setDragPosition: function () {
			D._srollLeft = parseInt(D.hDiv.scrollLeft);
			D._drag = D.xEnd - D.xStart;
			var J = D.cDrag.childNodes;
			for (var H = (D.iIndex + 1); H < J.length; H++) {
				var I = J[H];
				if (typeof I == "object" && I.nodeType != 3) {
					var G = parseInt(I.style.left) + D._drag;
					I.style.left = G + "px"
				}
			}
		},
		getEvent: function () {
			if (document.all) {
				return window.event
			}
			func = D.getEvent.caller;
			while (func != null) {
				var G = func.arguments[0];
				if (G) {
					if ((G.constructor == Event || G.constructor == MouseEvent) || (typeof(G) == "object" && G.preventDefault && G.stopPropagation)) {
						return G
					}
				}
				func = func.caller
			}
			return null
		},
		removeTextNode: function (H) {
			var J = H.childNodes;
			for (var G = 0; G < J.length; ++G) {
				var I = J[G];
				if (I.nodeType != 1) {
					I.parentNode.removeChild(I)
				}
			}
		},
		setWidth: function () {
			var M = new ArrayList();
			var R = D.oHead.childNodes;
			var I = D.subHeight == 0 ? Math.floor(D.clientWidth - R.length * 12 - 2) : Math.floor(D.clientWidth - R.length * 12 - 20);
			var W = 27;
			D.cDrag.style.display = "none";
			var V = 0;
			var N = 0;
			for (var L = 0; L < R.length; ++L) {
				var G = R[L];
				if (G.nodeType != 1) {
					continue
				}
				var Q = G.childNodes[0];
				var P = D.cDrag.childNodes[L];
				var J = null;
				J = G.getAttribute("width");
				if (J == null || J == undefined || J == "") {
					J = "5%"
				}
				var U;
				if (J.indexOf("%") != -1) {
					U = Math.floor(I * (parseInt(J)) / 100)
				} else {
					U = Math.floor(J)
				}
				V += U + 10;
				M.add(U);
				N += U;
				G.setAttribute("width", "");
				Q.style.width = U + "px";
				P.style.left = (V + L * 2 - 1) + "px";
				P.style.height = W + "px"
			}
			D.holeWidth = N + R.length * 12 + 2;
			D.cDrag.style.display = "";
			var S = D.oBody.childNodes;
			if (S.length != 0) {
				for (var K = 0; K < S.length; ++K) {
					var T = S[K].childNodes;
					for (var H = 0; H < T.length; ++H) {
						var O = T[H];
						if (O.childNodes.length == 0) {
							continue
						}
						O.childNodes[0].style.width = M.get(H) + "px";
						if (v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9) {
							O.setAttribute("width", (M.get(H) + 10))
						}
					}
				}
			} else {
				D.noBody = true;
				D.bDiv.innerHTML = "<div style='width:" + D.holeWidth + "px'>&nbsp;</div>"
			}
		},
		setTitle: function () {
			var K = D.oHead.childNodes;
			for (var G = 0; G < K.length; ++G) {
				var J = K[G];
				var I = J.childNodes[0];
				if (I) {
					var H = I.innerHTML;
					if (H.indexOf("<INPUT") != -1 || H.indexOf("<IMG") != -1 || H.indexOf("<FONT") != -1 || H.indexOf("<SPAN") != -1) {
						H = ""
					}
					I.setAttribute("title", H)
				}
			}
		}
	};
	D.id = F;
	D.layoutdiv = document.getElementById("scrollListDiv");
	if (D.layoutdiv == null) {
		D.layoutdiv = document.body
	} else {
		D.layoutdiv.style.overflow = "hidden"
	}
	D.clientWidth = parseInt(D.layoutdiv.clientWidth);
	D.clientHeight = parseInt(D.layoutdiv.clientHeight);
	if (D.clientHeight <= 0 || D.clientWidth <= 0) {
		setTimeout(function () {
			mxtgrid(D.id)
		}, 100)
	}
	D.mxtgrid = document.getElementById("mxtgrid_" + F);
	D.mxtgrid.style.display = "none";
	D.hTable = document.getElementById("hTable" + F);
	D.bTable = document.getElementById("bTable" + F);
	D.bDiv = document.getElementById("bDiv" + F);
	D.hDiv = document.getElementById("hDiv" + F);
	D.cDrag = document.getElementById("cDrag" + F);
	D.oHead = document.getElementById("headID" + F);
	D.oBody = document.getElementById("bodyID" + F);
	D.subHeight = parseInt(D.mxtgrid.getAttribute("subHeight"));
	if (D.subHeight != 0) {
		D.mxtgrid.style.width = D.clientWidth + "px"
	}
	if (D.clientHeight - 90 - D.subHeight <= 0) {
		return
	}
	var E = v3x.isMSIE6 && !v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9;
	if ((D.oBody.childNodes.length * 28 + 90) > D.clientHeight) {
		D.clientWidth = D.clientWidth - 17
	}
	D.bDivHeight = D.clientHeight - 90 - D.subHeight;
	D.bDiv.style.height = D.bDivHeight + "px";
	setTimeout(function () {
		if (parseInt(D.layoutdiv.clientHeight) != D.clientHeight && v3x.isMSIE) {
			resizeGrid(D.id, true)
		}
	}, 0);
	if (E) {
		D.layoutdivParent = D.layoutdiv.parentNode;
		D.bDiv.style.height = (D.bDivHeight - parseInt(D.layoutdivParent.currentStyle.paddingTop)) + "px"
	}
	D.removeTextNode(D.cDrag);
	D.removeTextNode(D.oHead);
	D.removeTextNode(D.oBody);
	var B = D.oBody.childNodes;
	for (var A = 0; A < B.length; ++A) {
		D.removeTextNode(B[A])
	}
	D.setTitle();
	D.setWidth();
	D.attEvt();
	D.bDiv.onscroll = function () {
		D.scroll();
		D.setPosition()
	};
	if (D.bTable.clientWidth < D.bDiv.clientWidth) {
		D.bDiv.style.overflowY = "auto";
		D.bDiv.style.overflowX = "hidden"
	}
	D.mxtgrid.style.display = ""
}
function setTablePosition(A, B) {
	if (B == null) {
		if (A != null && A.document != null && A.document.rowPositionObj) {
			A.document.rowPositionObj.focus()
		} else {
			return
		}
	} else {
		A.target.focus()
	}
}
function setPositionObj(A) {
	document.rowPositionObj = A
}
function resizeGrid(N, G) {
	try {
		var M = N;
		var O = document.getElementById("scrollListDiv");
		if (O == null || O.clientHeight <= 0) {
			O = document.body
		}
		var Q = Math.floor(O.clientWidth);
		var H = Math.floor(O.clientHeight);
		if (H <= 0) {
			return
		}
		var R = document.getElementById("mxtgrid_" + M);
		var S = document.getElementById("hTable" + M);
		var A = document.getElementById("bTable" + M);
		R.style.display = "none";
		var K = document.getElementById("bDiv" + M);
		var I = document.getElementById("hDiv" + M);
		var B = document.getElementById("cDrag" + M);
		var X = document.getElementById("headID" + M);
		var E = document.getElementById("bodyID" + M);
		var W = parseInt(R.getAttribute("subHeight"));
		if (W != 0) {
			R.style.width = Q + "px"
		}
		if (H - 90 - W <= 0) {
			return
		}
		var L = v3x.isMSIE6 && !v3x.isMSIE7 && !v3x.isMSIE8 && !v3x.isMSIE9;
		if (L) {
			Q = Q - 15
		}
		var D = H - 90 - W;
		K.style.height = D + "px";
		if (L) {
			layoutdivParent = O.parentNode;
			K.style.height = (D - parseInt(layoutdivParent.currentStyle.paddingTop)) + "px"
		}
		var J = H - 35;
		var V = Math.floor(A.clientHeight);
		if (V < H) {
			J = V + 29
		}
		if (J <= 0) {
			return
		}
		B.style.display = "none";
		var U = B.childNodes;
		for (var P = 0; P < U.length; ++P) {
			var F = U[P];
			F.style.height = J + "px"
		}
		B.style.display = "";
		R.style.display = ""
	} catch (T) {}
}
function MxtWindow(D) {
	if (D == null) {
		return
	}
	this.id = D.id ? D.id : Math.floor(Math.random() * 100000000);
	this.title = D.title;
	this.url = D.url;
	this.height = D.height == null ? 250 : D.height;
	this.width = D.width == null ? 300 : D.width;
	this.titleHeight = 50;
	this.footerHeight = 50;
	this.top = D.top;
	this.left = D.left;
	this.model = D.model == null ? true : false;
	this.className = D.calssName == null ? "mxt-window" : D.classNam;
	this.element = D.obj;
	this.relativeElement = D.relativeElement;
	this.isCeate = true;
	this.buttons = D.buttons;
	this.isSynchronization = D.isSynchronization == null ? false : true;
	this.userAgent = navigator.userAgent.toLowerCase();
	this.isOpera = this.userAgent.indexOf("opera") > -1;
	this.isIE = this.userAgent.indexOf("msie") > -1 && !this.isOpera;
	this.isNS = this.userAgent.indexOf("netscape") > -1;
	this.dragDiv = null;
	this.isIframe = false;
	this.iframe = null;
	this.iframeId = null;
	this.html = D.html;
	this.offsetTop = 0;
	this.offsetLeft = 0;
	this.discription = D.discription == undefined ? "" : D.discription;
	this.closeParam = D.closeParam;
	this.closeHidden = D.closeHidden == undefined ? false : D.closeHidden;
	this.transParams = D.transParams == undefined ? null : D.transParams;
	this.targetWindow = D.targetWindow == undefined ? window : D.targetWindow;
	this.maskIndex = this.targetWindow.getMaxZindex(2);
	var F = parseInt(this.targetWindow.document.documentElement.clientWidth);
	var E = parseInt(this.targetWindow.document.body.clientWidth);
	if (E > F) {
		F = E
	}
	if (F < this.width) {
		this.width = F
	}
	var A = parseInt(this.targetWindow.document.documentElement.clientHeight);
	var B = parseInt(this.targetWindow.document.body.clientHeight);
	if (B > A) {
		A = B
	}
	if (A < this.height) {
		this.height = A
	}
	this.type = D.type == null ? "window" : D.type;
	this.isDrag = D.isDrag == null ? true : D.isDrag;
	this.initWindow();
	this.isModel();
	this.showWindow();
	this.addEffect();
	this.showWindow()
}
MxtWindow.prototype.setTitle = function (B) {
	var A = this.targetWindow.document.getElementById(this.id + "-mxtwindow-title");
	if (A) {
		A.innerHTML = B
	}
};
MxtWindow.prototype.setIndex = function () {};
MxtWindow.prototype.getClass = function (D, B) {
	if (this.targetWindow.document.getElementsByClassName) {
		return this.targetWindow.document.getElementsByClassName(B)
	} else {
		var D = this.targetWindow.document.getElementsByTagName(D);
		var E = [];
		for (var A = 0; A < D.length; A++) {
			if (D[A].className == B) {
				E[E.length] = D[A]
			}
		}
		return E
	}
};
MxtWindow.prototype.getReturnValue = function (E) {
	var D = null;
	var B = this.targetWindow;
	var H = null;
	if (this.isIE) {
		try {
			H = B.document.frames(this.iframeId)
		} catch (G) {
			H = B.frames[this.iframeId]
		}
	} else {
		H = B.frames[this.iframeId]
	}
	if (H == null) {
		try {
			for (var F = 0; F < B.frames.length; F++) {
				if (B.frames[F].name == this.iframeId) {
					D = F;
					break
				}
			}
			if (D != null) {
				H = B.frames[D]
			}
		} catch (G) {
			H = B.document.getElementById(this.iframeId)
		}
	}
	if (H == null) {
		H = document.getElementById(this.iframeId)
	}
	if (H != null) {
		var A = null;
		if (H.contentWindow) {
			if (typeof(E) != "undefined" && E != null) {
				A = H.contentWindow.OK(E)
			} else {
				A = H.contentWindow.OK()
			}
		} else {
			if (typeof(E) != "undefined" && E != null) {
				A = H.OK(E)
			} else {
				A = H.OK()
			}
		}
		return A
	} else {
		return null
	}
};
MxtWindow.prototype.initWindow = function () {
	var A = this.getElement(this.id);
	if (A != null) {
		this.removeElement(A)
	}
	if (this.url == null) {
		this.isIframe = false
	} else {
		this.isIframe = true
	}
	if (this.relativeElement != null) {
		var E = this.relativeElement.offsetLeft;
		var D = this.relativeElement.offsetTop;
		var B = this.relativeElement;
		do {
			B = B.offsetParent;
			E += B.offsetLeft;
			D += B.offsetTop
		} while (B.tagName != "BODY");
		this.offsetLeft = E;
		this.offsetTop = D
	}
	if (this.buttons == null || this.buttons == undefined) {
		this.footerHeight = 0
	}
	if (this.type == "window") {
		this.getWindow()
	} else {
		this.getPanel()
	}
};
MxtWindow.prototype.addEffect = function () {
	if (this.isDrag) {
		new this.targetWindow.MxtWindow.divDrag([this.dragDiv, this.element])
	}
};
MxtWindow.prototype.showWindow = function () {
	if (this.targetWindow.document.getElementById(this.id) != null) {
		return
	}
	if (this.isSynchronization) {
		if (this.targetWindow.document.getElementById("_isSynchronization") != null) {
			return
		}
	}
	this.targetWindow.document.body.appendChild(this.element);
	if (this.transParams != null) {
		try {
			this.iframe.contentWindow.transParams = this.transParams
		} catch (A) {
			this.iframe.contentWindow.transParams = this.transParams
		}
	}
};
MxtWindow.prototype.isModel = function () {
	if (this.model) {
		if (this.targetWindow.document.getElementById(this.id + "_oMxtMask") != null) {
			return
		}
		var D = this.targetWindow.document.createElement("div");
		D.id = this.id + "_oMxtMask";
		D.className = "shield";
		var B = parseInt(this.targetWindow.document.body.scrollWidth);
		var A = parseInt(this.targetWindow.document.body.scrollHeight);
		var E = "top:0px;left:0px;position:absolute;z-index:" + this.maskIndex + ";background:#000000;width:" + B + "px;height:" + A + "px;filter: alpha(opacity=25);-moz-opacity: 0.25;opacity: 0.25;";
		D.style.cssText = E;
		this.targetWindow.document.body.appendChild(D)
	} else {
		return
	}
};
MxtWindow.prototype.close = function (A) {
	try {
		this.targetWindow.document.getElementById(this.iframeId).contentWindow.document.getElementById("docOpenBodyFrame").contentWindow.document.getElementById("officeEditorFrame").contentWindow.pdfOcxUnLoad()
	} catch (A) {}
	try {
		this.targetWindow.document.getElementById(this.iframeId).contentWindow.document.getElementById("docOpenBodyFrame").contentWindow.document.getElementById("officeEditorFrame").contentWindow.OcxUnLoad()
	} catch (A) {}
	this.targetWindow.document.getElementById(this.iframeId).src = "";
	this.removeElement(this.targetWindow.document.getElementById(this.id));
	if (this.model) {
		if (this.targetWindow.document.getElementById(this.id + "_oMxtMask") != null) {
			this.removeElement(this.targetWindow.document.getElementById(this.id + "_oMxtMask"))
		}
	}
};
MxtWindow.prototype.getPanel = function () {
	this.element = this.createObj("div");
	this.element.className = this.className;
	this.element.id = this.id;
	if (this.isIE) {
		this.element.style.width = this.width + 2 + "px";
		this.element.style.height = this.height - 8 + "px"
	} else {
		this.element.style.width = this.width + "px";
		this.element.style.height = this.height - 5 + "px"
	}
	if (this.relativeElement != null) {
		this.top = parseInt(this.offsetTop) + parseInt(this.relativeElement.offsetHeight) + "px";
		this.left = parseInt(this.offsetLeft) + "px";
		if (parseInt(this.offsetLeft) + parseInt(this.relativeElement.offsetWidth) + parseInt(this.width) > parseInt(this.targetWindow.document.body.clientWidth)) {
			this.left = parseInt(this.offsetLeft) - this.width + "px"
		}
	}
	if (this.top == null) {
		this.top = (parseInt(this.targetWindow.document.body.clientHeight) - this.height) / 2 + "px";
		this.left = (parseInt(this.targetWindow.document.body.clientWidth) - this.width) / 2 + "px"
	}
	this.element.style.top = this.top;
	this.element.style.left = this.left;
	var J = this.createObj("div");
	J.className = "mxt-panel-head";
	J.style.height = "20px";
	J.onselectstart = function () {
		return false
	};
	this.dragDiv = J;
	var L = this.createObj("span");
	L.className = "mxt-panel-head-close";
	var M = this;
	MxtWindow.addEvent(L, "click", function (O) {
		return M.close(O)
	}, false);
	J.appendChild(L);
	var E = this.createObj("div");
	E.className = "mxt-panel-body";
	E.style.height = this.height - this.footerHeight - 10 + "px";
	E.appendChild(J);
	if (this.isIframe) {
		this.iframeId = parseInt(Math.random() * 10000) + "-iframe";
		var F = this.targetWindow.document.createElement("iframe");
		F.setAttribute("src", this.url);
		F.id = this.iframeId;
		F.name = this.iframeId;
		F.setAttribute("frameborder", "0");
		F.className = "mxt-window-body-iframe";
		F.style.height = parseInt(E.style.height) - 0 + "px";
		F.style.width = this.width - 0 + "px";
		this.iframe = F;
		E.appendChild(this.iframe)
	} else {
		var G = this.createObj("div");
		G.className = "mxt-panel-body-content";
		G.style.height = parseInt(E.style.height) - 10 + "px";
		if (this.html) {
			G.innerHTML = this.html
		}
		E.appendChild(G)
	}
	this.element.appendChild(E);
	var K = this.createObj("div");
	K.className = "mxt-panel-footer";
	K.style.height = this.footerHeight + "px";
	if (this.discription != null) {
		var D = this.createObj("div");
		D.className = "discriptionDiv";
		D.innerHTML = this.discription;
		K.appendChild(D)
	}
	if (this.buttons != null && this.buttons.length > 0) {
		var I = this.createObj("div");
		I.className = "buttonsDiv";
		for (var B = 0; B < this.buttons.length; B++) {
			var A = this.buttons[B];
			var N = this.createObj("input");
			N.setAttribute("type", "button");
			N.className = "button-default-2";
			if (A.text) {
				N.setAttribute("value", A.text)
			}
			if (A.id) {
				N.setAttribute("id", A.id)
			}
			if (A.disabled) {
				N.setAttribute("disabled", A.disabled)
			}
			if (A.handler) {
				MxtWindow.addEvent(N, "click", A.handler, false)
			}
			I.appendChild(N)
		}
		K.appendChild(I)
	}
	this.element.appendChild(K);
	if (this.isSynchronization) {
		var H = this.createObj("input");
		H.setAttribute("type", "hidden");
		H.setAttribute("id", "_isSynchronization");
		this.element.appendChild(H)
	}
};
MxtWindow.prototype.getWindow = function () {
	this.element = this.createObj("div");
	this.element.className = this.className;
	this.element.id = this.id;
	this.element.style.width = this.width + "px";
	this.element.style.height = this.height + "px";
	this.element.style.zIndex = this.maskIndex + 1;
	this.elementContent = this.createObj("div");
	this.elementContent.style.position = "absolute";
	this.elementContent.style.zIndex = "10";
	this.elementContent.style.width = "100%";
	this.element.appendChild(this.elementContent);
	this.iframeMask = this.targetWindow.document.createElement("iframe");
	this.iframeMask.style.position = "absolute";
	this.iframeMask.style.zIndex = "1";
	this.iframeMask.id = this.iframeId + "_iframeMask";
	this.iframeMask.setAttribute("frameBorder", "0");
	this.iframeMask.style.width = (this.width + 3) + "px";
	this.iframeMask.style.height = this.height + "px";
	this.element.appendChild(this.iframeMask);
	if (this.relativeElement != null) {
		this.top = parseInt(this.offsetTop) + parseInt(this.relativeElement.offsetHeight) + "px";
		this.left = parseInt(this.offsetLeft) + "px";
		if (parseInt(this.offsetLeft) + parseInt(this.relativeElement.offsetWidth) / 2 + parseInt(this.width) > parseInt(this.targetWindow.document.body.clientWidth)) {
			this.left = parseInt(this.offsetLeft) - this.width + "px"
		}
	}
	if (this.top == null) {
		this.top = (parseInt(this.targetWindow.document.body.clientHeight) - this.height) / 2 + "px";
		this.left = (parseInt(this.targetWindow.document.body.clientWidth) - this.width) / 2 + "px"
	}
	this.element.style.top = this.top;
	this.element.style.left = this.left;
	var J = this.createObj("div");
	J.className = "mxt-window-head";
	J.style.height = this.titleHeight + "px";
	if (!this.isDrag) {
		J.style.cursor = "default"
	}
	J.onselectstart = function () {
		return false
	};
	this.dragDiv = J;
	var K = this.createObj("span");
	K.id = this.id + "-mxtwindow-title";
	K.className = "mxt-window-head-title";
	K.innerHTML = this.title;
	K.style.width = this.width - 80 + "px";
	var M = this.createObj("span");
	M.className = "mxt-window-head-close";
	var N = this;
	if (this.closeParam && this.closeParam.handler) {
		MxtWindow.addEvent(M, "click", this.closeParam.handler, false)
	} else {
		MxtWindow.addEvent(M, "click", function (P) {
			return N.close(P)
		}, false)
	}
	if (this.closeHidden) {
		M.style.display = "none"
	}
	J.appendChild(K);
	J.appendChild(M);
	var E = this.createObj("div");
	E.className = "mxt-window-body";
	E.style.height = this.height - this.titleHeight - this.footerHeight - 0 + "px";
	if (this.isIframe) {
		this.iframeId = parseInt(Math.random() * 10000) + "-iframe";
		var F = this.targetWindow.document.createElement("iframe");
		F.setAttribute("src", this.url);
		F.id = this.iframeId;
		F.name = this.iframeId;
		F.setAttribute("frameBorder", "0");
		F.className = "mxt-window-body-iframe";
		F.style.height = parseInt(E.style.height) - 5 + "px";
		F.style.width = this.width + "px";
		this.iframe = F;
		E.appendChild(this.iframe)
	} else {
		var G = this.createObj("div");
		G.className = "mxt-window-body-content";
		G.style.height = parseInt(E.style.height) - 10 + "px";
		if (this.html) {
			G.innerHTML = this.html
		}
		E.appendChild(G)
	}
	this.elementContent.appendChild(J);
	this.elementContent.appendChild(E);
	var L = this.createObj("div");
	L.className = "mxt-window-footer";
	L.style.height = this.footerHeight + "px";
	L.style.background = "#4D4D4D";
	if (this.discription != null || this.discription != "") {
		var D = this.createObj("div");
		D.className = "discriptionDiv";
		D.innerHTML = this.discription;
		L.appendChild(D)
	}
	if (this.buttons != null && this.buttons.length > 0) {
		var I = this.createObj("div");
		I.className = "buttonsDiv";
		for (var B = 0; B < this.buttons.length; B++) {
			var A = this.buttons[B];
			var O = this.createObj("input");
			O.setAttribute("type", "button");
			O.className = "button-default-2 margin_l_10";
			if (A.emphasize) {
				O.className = "button-default_emphasize margin_l_10"
			}
			if (A.text) {
				O.setAttribute("value", A.text)
			}
			if (A.id) {
				O.setAttribute("id", A.id)
			}
			if (A.disabled) {
				O.setAttribute("disabled", A.disabled)
			}
			if (A.handler) {
				MxtWindow.addEvent(O, "click", A.handler, false)
			}
			I.appendChild(O)
		}
		L.appendChild(I)
	}
	this.elementContent.appendChild(L);
	if (this.isSynchronization) {
		var H = this.createObj("input");
		H.setAttribute("type", "hidden");
		H.setAttribute("id", "_isSynchronization");
		this.element.appendChild(H)
	}
};
MxtWindow.prototype.reloadUrl = function (A) {
	var B = A;
	B ? null : B = this.url;
	var D = this.targetWindow.document.getElementById(this.iframeId);
	D.setAttribute("src", B)
};
MxtWindow.addEvent = function (D, B, E, A) {
	try {
		if (D.addEventListener) {
			D.addEventListener(B, E, A)
		} else {
			if (D.attachEvent) {
				D.attachEvent("on" + B, E)
			}
		}
	} catch (F) {}
};
MxtWindow.prototype.removeElement = function (A) {
	A.parentNode.removeChild(A)
};
MxtWindow.prototype.createObj = function (A, D) {
	var B = this.targetWindow.document.createElement(A);
	B.id = D == null ? "" : D;
	return B
};
MxtWindow.prototype.getElement = function (A) {
	if (A == null) {
		return null
	} else {
		return document.getElementById(A)
	}
};
Array.prototype.extend = function (E) {
	for (var F = 0, D = E.length; F < D; F++) {
		this.push(E[F])
	}
	return this
};
MxtWindow.divDrag = function () {
	var D,
	G,
	E;
	var F = 2000;
	this.dragStart = function (A) {
		A = A || window.event;
		if ((A.which && (A.which != 1)) || (A.button && (A.button != 1))) {
			return
		}
		var B = this.$pos;
		E = this.parent || this;
		if (document.defaultView) {
			_top = document.defaultView.getComputedStyle(E, null).getPropertyValue("top");
			_left = document.defaultView.getComputedStyle(E, null).getPropertyValue("left")
		} else {
			if (E.currentStyle) {
				_top = E.currentStyle.top;
				_left = E.currentStyle.left
			}
		}
		B.ox = (A.pageX || (A.clientX + document.documentElement.scrollLeft)) - parseInt(_left);
		B.oy = (A.pageY || (A.clientY + document.documentElement.scrollTop)) - parseInt(_top);
		if (!!D) {
			if (document.removeEventListener) {
				document.removeEventListener("mousemove", D, false);
				document.removeEventListener("mouseup", G, false);
				document.onselectstart = function () {
					return true
				}
			} else {
				document.detachEvent("onmousemove", D);
				document.detachEvent("onmouseup", G)
			}
		}
		D = this.dragMove.create(this);
		G = this.dragEnd.create(this);
		if (document.addEventListener) {
			document.addEventListener("mousemove", D, false);
			document.addEventListener("mouseup", G, false)
		} else {
			document.attachEvent("onmousemove", D);
			document.attachEvent("onmouseup", G)
		}
		this.stop(A)
	};
	this.dragMove = function (A) {
		A = A || window.event;
		var B = this.$pos;
		E = this.parent || this;
		E.style.top = (A.pageY || (A.clientY + document.documentElement.scrollTop)) - parseInt(B.oy) + "px";
		E.style.left = (A.pageX || (A.clientX + document.documentElement.scrollLeft)) - parseInt(B.ox) + "px";
		this.stop(A)
	};
	this.dragEnd = function (A) {
		var B = this.$pos;
		A = A || window.event;
		if ((A.which && (A.which != 1)) || (A.button && (A.button != 1))) {
			return
		}
		E = this.parent || this;
		if (!!(this.parent)) {
			this.style.backgroundColor = B.color
		}
		if (document.removeEventListener) {
			document.removeEventListener("mousemove", D, false);
			document.removeEventListener("mouseup", G, false)
		} else {
			document.detachEvent("onmousemove", D);
			document.detachEvent("onmouseup", G)
		}
		D = null;
		G = null;
		this.stop(A)
	};
	this.shiftColor = function () {};
	this.position = function (H) {
		var B = H.offsetTop;
		var A = H.offsetLeft;
		while (H = H.offsetParent) {
			B += H.offsetTop;
			A += H.offsetLeft
		}
		return {
			x: A,
			y: B,
			ox: 0,
			oy: 0,
			color: null
		}
	};
	this.stop = function (A) {
		if (A.stopPropagation) {
			A.stopPropagation()
		} else {
			A.cancelBubble = true
		}
		if (A.preventDefault) {
			A.preventDefault()
		} else {
			A.returnValue = false
		}
	};
	this.stop1 = function (A) {
		A = A || window.event;
		if (A.stopPropagation) {
			A.stopPropagation()
		} else {
			A.cancelBubble = true
		}
	};
	this.create = function (J) {
		var I = this;
		var H = J;
		return function (A) {
			return I.apply(H, [A])
		}
	};
	this.dragStart.create = this.create;
	this.dragMove.create = this.create;
	this.dragEnd.create = this.create;
	this.shiftColor.create = this.create;
	this.initialize = function () {
		for (var H = 0, I = arguments.length; H < I; H++) {
			C = arguments[H];
			if (!(C.push)) {
				C = [C]
			}
			$C = (typeof(C[0]) == "object") ? C[0] : (typeof(C[0]) == "string" ? $(C[0]) : null);
			if (!$C) {
				continue
			}
			$C.$pos = this.position($C);
			$C.dragMove = this.dragMove;
			$C.dragEnd = this.dragEnd;
			$C.stop = this.stop;
			if (!!C[1]) {
				$C.parent = C[1];
				$C.$pos.color = $C.style.backgroundColor
			}
			if ($C.addEventListener) {
				$C.addEventListener("mousedown", this.dragStart.create($C), false);
				if (!!C[1]) {
					$C.addEventListener("mousedown", this.shiftColor.create($C), false)
				}
			} else {
				$C.attachEvent("onmousedown", this.dragStart.create($C));
				if (!!C[1]) {
					$C.attachEvent("onmousedown", this.shiftColor.create($C))
				}
			}
		}
	};
	this.initialize.apply(this, arguments)
};
MxtWindow.prototype.addShadow = function () {
	obj = this.element;
	if (!obj) {
		return false
	}
	var R = navigator.userAgent.toLowerCase();
	var B = R.indexOf("opera") > -1;
	var F = R.indexOf("msie") > -1 && !B;
	var P = R.indexOf("netscape") > -1;
	var K = obj.offsetWidth;
	var O = obj.offsetHeight;
	var D = 0;
	var M = 0;
	var L = function (S) {
		if (!S) {
			return false
		}
		var U = 0,
		T = 0;
		if (F || B) {
			while (S != null && S.nodeName != "#document") {
				U += S.offsetLeft;
				T += S.offsetTop;
				S = S.parentNode
			}
		} else {
			T = S.offsetTop;
			U = S.offsetLeft
		}
		return {
			T: T,
			L: U
		}
	};
	var Q = L(obj);
	D = Q.L;
	M = Q.T;
	var J = this.targetWindow.document.createElement("div");
	var I = this.targetWindow.document.createElement("div");
	var H = this.targetWindow.document.createElement("div");
	var G = this.targetWindow.document.createElement("div");
	var A = function (U, T, S) {
		if (!U) {
			return false
		}
		if (!B) {
			if (!S) {
				U.style.cssText = T
			} else {
				U.style.cssText += T
			}
		} else {
			if (!S) {
				U.setAttribute("style", T)
			} else {
				U.setAttribute("style", U.getAttribute("style") + ";" + T)
			}
		}
	};
	var E = "width:100%;height:100%;position:absolute;margin:0px;padding:0px;top:-1px;left:-1px";
	A(J, "position:absolute;left:" + (D + 3) + "px;top:" + (M + 3) + "px;width:" + K + "px;height:" + O + "px;background:#eee");
	A(I, E + ";background:#ddd");
	A(H, E + ";background:#ccc");
	A(G, E + ";background:#fff");
	if (F || P) {
		A(J, ";z-index:-1", 1)
	} else {
		A(obj, "position:absolute;z-index:2;left:+" + D + "px;top:" + M + "px", 1)
	}
	J.appendChild(I);
	I.appendChild(H);
	H.appendChild(G);
	var N = this.targetWindow.document.createElement("div");
	N.className = "mxt-window";
	N.appendChild(J);
	N.appendChild(obj);
	this.element = N
};
function initIpadScroll(E, A, B) {
	if (v3x.isIpad) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto";
			touchScroll(E)
		}
	}
}
function initIe10AutoScroll(E, D) {
	var A = window.top.document.getElementById("main");
	var B = A != null ? A.offsetHeight - D : parseInt(window.top.document.body.offsetHeight) - D;
	if (B < 0) {
		return
	}
	initIe10Scroll(E, B)
}
function initIe10Scroll(E, A, B) {
	var D = document.getElementById(E);
	if (D) {
		if (A) {
			D.style.height = A + "px"
		}
		if (B) {
			D.style.width = B + "px"
		}
	}
}
function initFFScroll(E, A, B) {
	if (v3x.isFirefox) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function initSafariScroll(E, A, B) {
	if (v3x.isSafari) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function initChromeScroll(E, A, B) {
	if (v3x.isChrome) {
		var D = document.getElementById(E);
		if (D) {
			if (A) {
				D.style.height = A + "px"
			}
			if (B) {
				D.style.width = B + "px"
			}
			D.style.overflow = "auto"
		}
	}
}
function isTouchDevice() {
	try {
		document.createEvent("TouchEvent");
		return true
	} catch (A) {
		return false
	}
}
function touchScroll(E) {
	if (isTouchDevice()) {
		var A = document.getElementById(E);
		var B = 0;
		var D = 0;
		A.addEventListener("touchstart", function (F) {
			B = this.scrollTop + F.touches[0].pageY;
			D = this.scrollLeft + F.touches[0].pageX
		}, false);
		A.addEventListener("touchmove", function (F) {
			this.scrollTop = B - F.touches[0].pageY;
			this.scrollLeft = D - F.touches[0].pageX;
			F.preventDefault()
		}, false)
	}
}
function isDecimal(B, A, E, D) {
	if (!testRegExp(B, "^-?[0-9]{0," + (E ? E : "") + "}\\.?[0-9]{1," + (D ? D : "") + "}$")) {
		if (A) {
			alert($.i18n("formValidate_isNumber", A))
		}
		return false
	}
	return true
}
function showPushWindow(J) {
	var H = "";
	var G = document.getElementById("edocType");
	var E = document.getElementById("pushMessageMemberIds");
	if (G) {
		H = G.value
	}
	var F = document.getElementById("pushMessageMemberIds").value;
	var A = colWorkFlowURL + "?method=showPushWindow&summaryId=" + J + "&edocType=" + H + "&sel=" + encodeURIat(F);
	var B = document.getElementById("replyedAffairId");
	if (B != null && typeof(B) != "undefined") {
		A += "&replyedAffairId=" + B.value
	}
	var I = v3x.openWindow({
			url: A,
			height: 350,
			width: 300
		});
	if (typeof(I) != "undefined" && I != null) {
		var L = I[0];
		var K = I[1];
		document.getElementById("pushMessageMemberIds").value = L;
		var D = document.getElementById("pushMessageMemberNames");
		if (D && B != B.value) {
			D.value = K;
			D.title = K
		}
	}
}
function sendSMSV3X(A) {
	var B = getBaseURL() + "/message.do?method=showSendSMSDlg";
	if (A) {
		B += "&receiverIds=" + A
	}
	if (getA8Top().isCtpTop) {
		getA8Top().senSmsWin = getA8Top().$.dialog({
				title: "\u53d1\u9001\u77ed\u4fe1",
				transParams: {
					parentWin: window
				},
				url: B,
				width: 420,
				height: 280,
				isDrag: false
			})
	} else {
		getA8Top().senSmsWin = v3x.openDialog({
				title: "\u53d1\u9001\u77ed\u4fe1",
				transParams: {
					parentWin: window
				},
				url: B,
				width: 420,
				height: 280,
				isDrag: false
			})
	}
}
function sendSmsCollBack(A) {
	getA8Top().senSmsWin.close();
	if (!A) {
		return
	}
	alert(A)
}
function sendMessageForCard(A, D) {
	var B;
	if (A) {
		B = "/seeyon/message.do?method=showSendDlg&getData=fromParent"
	} else {
		B = "/seeyon/message.do?method=showSendDlg&receiverIds=" + D
	}
	v3x.openWindow({
		url: B,
		width: "440",
		height: "300"
	})
}
function sendMessageForIMTab(E, A) {
	if (!getA8Top().contentFrame.topFrame.onlineWin) {
		var D = 50;
		var B = (window.screen.availHeight - 600) / 2;
		getA8Top().contentFrame.topFrame.onlineWin = getA8Top().contentFrame.topFrame.open("/seeyon/message.do?method=showOnlineUser&id=" + E + "&name=" + A, "", "left=" + D + ",top=" + B + ",width=600,height=600,toolbar=no,menubar=no,scrollbars=no,resizable=yes,location=no,status=no")
	} else {
		getA8Top().contentFrame.topFrame.onlineWin.focus();
		getA8Top().contentFrame.topFrame.onlineWin.showIMTab("1", E, A, "false")
	}
}
function forwardColV3X(A, D, B) {
	var E = v3x.openWindow({
			url: "/seeyon/collaboration.do?method=showForward&showType=model&data=" + A + "_" + D,
			width: 511,
			height: 400
		});
	if (B == "self") {
		if (E == "true") {
			document.location.reload(true)
		}
	} else {
		if (B == "list") {
			if (E && E == "true" && (getParameter("method") == "listSent")) {
				document.location.reload(true)
			}
		}
	}
}
function showDetailAndLog(A, F, D, E) {
	var B = "";
	if (E && (E == "recEdoc" || E == "sendEdoc" || E == "signReport" || E == "edocSend" || E == "edocRec" || E == "edocSign")) {
		B = "&appName=4&appTypeName=" + E
	}
	getA8Top().v3x.openWindow({
		url: colWorkFlowURL + "?method=showFlowNodeDetailFrame&summaryId=" + A + "&processId=" + F + "&defaultTab=" + D + B,
		dialogType: v3x.getBrowserFlag("openWindow") == true ? "modal" : "1",
		width: "750",
		height: "500"
	})
}
function confirmToOffice2003() {
	if (confirm(_("V3XLang.OfficeSaveTo2003"))) {
		return true
	} else {
		return false
	}
}
function isOffice2007(A) {
	if (typeof(A) == "undefined" || A == null) {
		return false
	}
	if (A.indexOf(".docx") != -1 || A.indexOf(".xlsx") != -1 || A.indexOf(".pptx") != -1) {
		return true
	} else {
		return false
	}
}
function V3XAutocomplete() {
	this._disableEvent = false;
	this._onchange = function (D, G, B, A) {
		if (v3xautocomplete._disableEvent) {
			return
		}
		if (D) {
			if (D.select) {
				var E = {
					label: G.value,
					value: G.id
				};
				D.select(E, B)
			}
			if (D.bindSelect) {
				var F = jQuery.Event("change");
				if (jQuery.isFunction(D.bindSelect)) {
					F.target = D.bindSelect(jQuery(A))
				} else {
					F.target = jQuery(D.bindSelect)
				}
				try {
					jQuery(F.target).val(G.id).trigger(F, jQuery(F.target));
					jQuery(F.target).blur()
				} catch (F) {}
			}
		}
	};
	this._getViewElement = function (B) {
		var A;
		if (typeof B == "string") {
			A = jQuery(document.getElementById(B + "_autocomplete"))
		} else {
			A = jQuery(B)
		}
		return A
	}
}
var v3xautocomplete = new V3XAutocomplete();
V3XAutocomplete.prototype.autocomplete = function (L, Y, E) {
	var M = this._getViewElement(L);
	if (typeof(M) == "undefined" || M == null || M[0] == null) {
		return
	}
	if (!M) {
		return false
	}
	var O = true;
	var W = true;
	var Q = 240;
	var R = 0;
	var F = false;
	var D = 0;
	var J = {
		id: "",
		value: ""
	};
	var U = 17;
	var P = Y.length == 0;
	if (!P && Y.length == 1 && Y[0].value == "" && !Y[0].label) {
		P = true
	}
	if (E) {
		jQuery(M).data("options", E);
		if (E.button !== undefined) {
			W = true
		}
		if (E.maxHeight !== undefined) {
			Q = E.maxHeight
		}
		if (E.width !== undefined) {
			R = E.width
		}
		if (E.autoSize !== undefined) {
			F = E.autosize
		}
		if (E.appendBlank !== undefined) {
			O = E.appendBlank
		}
	}
	var I = new Array();
	var T = Y == null ? I : Y;
	if (T.length > 0) {
		if (O) {
			I.push(J)
		}
		jQuery.each(T, function (a, c) {
			var b = {
				id: c.value,
				value: c.label
			};
			if (b.value) {
				I.push(b);
				var Z = b.value.length;
				if (Z > D) {
					D = Z
				}
			}
		})
	}
	var B = function (b) {
		for (var Z in I) {
			var a = I[Z];
			if (a.id == b.id && a.value == b.value) {
				return true
			}
		}
		return false
	};
	var H = jQuery(M).data("current");
	jQuery(M).data("current", null);
	var K = function (Z, a) {
		if (!a.item) {
			return false
		}
		jQuery(document.getElementById(L)).val(a.item.id);
		jQuery(M).val(a.item.value);
		jQuery(M).data("current", a.item);
		X(E, a.item, L, M);
		return false
	};
	var A = function () {
		K(null, {
			item: J
		});
		jQuery(M).data("current", null)
	};
	if (W) {
		var N = M.next('button[name="acToggle"]').length > 0;
		if (!N) {
			var V = "background-image:url('common/images/desc.gif');background-repeat:no-repeat;background-color: #ececec;background-position:center;width:" + U + "px;height:21px;border:1px #d1d1d1 solid;";
			M.after('<button name="acToggle" tabindex="-1" onclick="v3xautocomplete.toggle(this.previousSibling);this.blur();" style="' + V + '"/>')
		}
	}
	var X = this._onchange;
	jQuery(M).bind("blur", function () {
		var Z = jQuery(M).data("current");
		if (Z) {
			if (jQuery(M).val() != Z.value) {
				jQuery(M).val(Z.value)
			}
		} else {
			A()
		}
	});
	jQuery(M).bind("click", function () {
		this.select()
	});
	M.autocomplete({
		minLength: 0,
		source: I,
		autoFocus: true,
		delay: 0,
		focus: function (Z, a) {
			return false
		},
		position: {
			collision: "flip"
		},
		select: K,
		search: function () {
			var Z = jQuery(this).autocomplete("widget");
			Z.css("height", "auto")
		},
		beforePosition: function () {
			var Z = jQuery(this).autocomplete("widget");
			if (Z.outerHeight() > Q) {
				Z.css("overflow-y", "auto");
				Z.css("overflow-x", "hidden");
				Z.css("height", Q + "px")
			}
		},
		open: function () {
			var g = jQuery(this).autocomplete("widget");
			var h;
			if (F) {
				h = D * 8 + 20
			} else {
				if (R) {
					h = R
				} else {
					h = jQuery(this).outerWidth();
					if (W) {
						var e = M.next('button[name="acToggle"]').position().top;
						var a = (e >= (M.position().top + M.outerHeight()));
						if (!a) {
							h += U
						}
					}
				}
			}
			var d = M.outerWidth();
			if (h < 120) {
				h = 120
			}
			if (h < 0 || (h > 500 && h > (d + U))) {
				h = 300
			}
			g.width(h);
			g.find(".ui-menu-item").css("overflow", "hidden").css("white-space", "nowrap");
			g.find("li").each(function (j, k) {
				k.title = k.innerText
			});
			jQuery(M.parents()).scroll(function () {
				g.css("display", "none")
			});
			var b = g.position().top;
			var Z = g.outerHeight();
			var f = M.position().top;
			var c = M.outerHeight();
			if (b < 0) {
				b = 0;
				if (Z < f) {
					b = f - Z
				}
				Z = f - b;
				g.css("top", b + "px");
				g.css("height", Z + "px")
			}
			if (b + Z < f) {
				b = f - Z;
				g.css("top", b + "px")
			}
			if (b + Z > f + c) {
				b = f + c;
				g.css("top", b + "px")
			}
			g.css("left", M.position().left + "px")
		}
	});
	var G = false;
	if (H != null) {
		G = B(H);
		if (!G) {
			A()
		}
	}
	if (P) {
		A();
		M[0].disabled = true;
		if (W) {
			M.next('button[name="acToggle"]').attr("disabled", true).css("opacity", "0.4")
		}
	} else {
		M[0].disabled = false;
		if (W) {
			M.next('button[name="acToggle"]').attr("disabled", false).css("opacity", "1")
		}
		if (E && (E.value || E.value == null)) {
			var S = E.value;
			var B = false;
			if (S != null) {
				jQuery.each(I, function (Z, a) {
					if (a.id == S) {
						B = true;
						return
					}
				})
			}
			if (B) {
				if (typeof L == "string") {
					this.select(L, S)
				} else {
					this.select(M, S)
				}
			} else {
				if (!G) {
					A()
				} else {
					jQuery(M).data("current", H)
				}
			}
		} else {
			if (jQuery(M).val()) {
				A()
			}
		}
	}
};
V3XAutocomplete.prototype.select = function (E, G) {
	var A = this._getViewElement(E);
	var F = A.autocomplete("option", "source");
	if (!F) {
		return false
	}
	var D = jQuery(A).data("options");
	var B = this._onchange;
	jQuery.each(F, function (H, I) {
		if (I.id == G) {
			jQuery(document.getElementById(E)).val(I.id);
			A.val(I.value);
			jQuery(A).data("current", I);
			B(D, I, E, A);
			return true
		}
	})
};
V3XAutocomplete.prototype.refresh = function (B) {
	var A = this._getViewElement(B);
	var D = jQuery(A).data("current");
	if (D) {
		this._disableEvent = true;
		this.select(A, D.id);
		this._disableEvent = false
	}
};
V3XAutocomplete.prototype.disableEvent = function (A) {
	this._disableEvent = A
};
V3XAutocomplete.prototype.getData = function (B) {
	var A = this._getViewElement(B);
	var E = A.autocomplete("option", "source");
	var D = new Array();
	jQuery.each(E, function (F, H) {
		var G = {
			value: H.id,
			label: H.value
		};
		if (G.value) {
			D.push(G)
		}
	});
	return D
};
V3XAutocomplete.prototype.copy = function (I, H) {
	var A = this._getViewElement(I);
	var F = A.autocomplete("option", "source");
	var E = new Array();
	jQuery.each(F, function (J, L) {
		var K = {
			value: L.id,
			label: L.value
		};
		if (K.value) {
			E.push(K)
		}
	});
	var B = jQuery(A).data("options");
	try {
		if (jQuery.expando) {
			jQuery(H).removeAttr(jQuery.expando)
		}
	} catch (G) {}
	var D = jQuery(A).data("current");
	if (D) {
		B.value = D.id
	}
	this.autocomplete(H, E, B)
};
V3XAutocomplete.prototype.toggle = function (B) {
	var A = this._getViewElement(B);
	if (A.autocomplete("widget").is(":visible")) {
		A.autocomplete("close");
		return
	}
	A.autocomplete("search", "");
	A.focus()
};
V3XAutocomplete.prototype.build = function (A, F) {
	function E(G) {
		var H = new Array();
		jQuery.each(G, function (I, J) {
			if (J.key) {
				H.push(J.key, '="', J.value, '" ')
			}
		});
		return H.join("")
	}
	var B = new Array();
	var D = A + "_autocomplete";
	B.push("<input ", E([{
					key: "name",
					value: A
				}, {
					key: "id",
					value: A
				}, {
					key: "type",
					value: "hidden"
				}
			]), " />");
	B.push("<input ", E([{
					key: "name",
					value: D
				}, {
					key: "id",
					value: D
				}, {
					key: "type",
					value: "text"
				}, {
					key: "class",
					value: "input_autocomplete"
				}, {
					key: "onclick",
					value: "v3xautocomplete.toggle('" + A + "');"
				}
			]), " />\n");
	B.push("<script>\n");
	B.push("v3xautocomplete.autocomplete(", "'", A, "',", F, ");\n");
	B.push("<\/script>");
	return (B.join(""))
};
var postUrl = "";
function getQueryCondition(P, B, J) {
	var D = document.getElementById("ftable");
	var L = D.rows[0];
	var E = J;
	var N = isCrossTable();
	if (N) {
		E = 0;
		var I;
		var K = L.cells.length;
		for (var G = 0; G < K; G++) {
			var H = L.cells[G];
			if (H.getAttribute("rowspan") == "2") {
				E++
			}
			if (H.getAttribute("colspan") != null) {
				I = parseInt(H.getAttribute("colspan"))
			}
		}
	}
	if (B > (E - 1)) {
		var M = "";
		for (var G = 0; G < E; G++) {
			M += getRowHead(G, P) + ","
		}
		if (N) {
			M += getColHead(E, I, B) + ",";
			M += getCrossDataCol(E, B) + ","
		} else {
			M += getDataCol(B) + ","
		}
		var F = document.all("showdetail").value;
		postUrl = "/seeyon/formreport.do?method=showReportQuery&str=" + encodeURIComponent(M);
		var A = screen.width - 155;
		var O = screen.height - 300;
		v3x.openWindow({
			url: "/seeyon/formreport.do?method=openShowReportQuery",
			workSpace: "yes",
			dialogType: "modal",
			resizable: false
		});
		return
	}
}
function getSummaryId(D) {
	var A = new XMLHttpRequestCaller(null, "", "", false, "GET", "false", D);
	var B = A.serviceRequest();
	return B
}
function showQueryTable(B) {
	var G = document.getElementById("showdetail").value;
	var H = document.getElementById("formname").value;
	var J = document.getElementById("formid").value;
	var F = document.getElementById("queryname").value;
	var I = document.getElementById("isFlow").value;
	if (I == "true") {
		var D = "/seeyon/formquery.do?method=hasSummaryId&id=" + B + "&showdetail=" + encodeURIComponent(G) + "&formid=" + J + "&formname=" + H;
		var E = getSummaryId(D);
		if (E.trim() == "null") {
			alert(v3x.getMessage("formLang.formquery__selectnone"))
		} else {
			if (E.indexOf("|") > -1) {
				D = "/seeyon/formquery.do?method=collFrameViewRelate&summaryId=" + E + "&showdetail=" + encodeURIComponent(G) + "&appid=" + J + "&queryname=" + encodeURIComponent(F);
				v3x.openWindow({
					url: D,
					workSpace: "yes",
					dialogType: v3x.getBrowserFlag("pageBreak") ? "modal" : "open"
				})
			} else {
				D = "/seeyon/formquery.do?method=showRecordDetail&summaryId=" + E + "&showdetail=" + encodeURIComponent(G) + "&appid=" + J + "&queryname=" + encodeURIComponent(F);
				v3x.openWindow({
					url: D,
					workSpace: "yes",
					dialogType: v3x.getBrowserFlag("pageBreak") ? "modal" : "open"
				})
			}
		}
	} else {
		if (I == "false") {
			var A = document.getElementById("appShowDetail").value;
			v3x.openWindow({
				url: "/seeyon/appFormController.do?method=viewFormData&isOpenWin=true&appformId=" + J + "&masterId=" + B + "&showDetail=" + encodeURIComponent(A),
				dialogType: "modal",
				workSpace: "yes",
				resizable: "true"
			})
		}
	}
}
function isCrossTable() {
	var A = document.getElementById("ftable");
	var B = A.rows[0];
	var F = B.cells.length;
	for (var D = 0; D < F; D++) {
		var E = B.cells[D];
		if (E.getAttribute("rowspan") == "2") {
			return true
		}
	}
	return false
}
function getColHead(B, F, E) {
	var A = document.getElementById("ftable");
	var D = A.rows[0];
	return D.cells[Math.floor((E - B) / F) + B].getAttribute("value")
}
function getCrossDataCol(B, D) {
	var A = document.getElementById("ftable");
	return A.rows[1].cells[D - B].getAttribute("value")
}
function getDataCol(B) {
	var A = document.getElementById("ftable");
	return A.rows[0].cells[B].getAttribute("value")
}
function getRowHead(B, D) {
	var A = document.getElementById("ftable");
	return A.rows[D].cells[B].getAttribute("value")
}
function newPlan(A, B, D) {
	getA8Top().contentFrame.mainFrame.location.href = A + "?method=initAdd&type=" + B + "&time=" + D
}
function newTask(B, D) {
	var A = v3x.openWindow({
			url: B + "?method=addTaskPageFrame&from=timing&time=" + D,
			width: 530,
			height: 480,
			resizable: false
		});
	if (A || A == "true") {
		window.location.href = window.location.href
	}
}
function newCal(B, D) {
	var A = v3x.openWindow({
			url: B + "?method=createEvent&time=" + D,
			width: 530,
			height: 480,
			resizable: false
		});
	if (A && A == "true") {
		window.location.href = window.location.href
	}
}
function newMeeting(A, B) {
	getA8Top().contentFrame.mainFrame.location.href = A + "?method=create&formOper=new&time=" + B
}
function isLeftClose() {
	return getA8Top().contentFrame.document.getElementById("LeftRightFrameSet").cols == "142,*"
}
function showCtpLocation(A, L) {
	var I = getA8Top();
	if (L && L.html) {
		if (I.showLocation) {
			var J = "vp-personal";
			var G = '<i class="vportal ' + J + '"></i>';
			L.html = G + L.html;
			I.showLocation(L.html)
		}
		return
	}
	if (I.$) {
		function B(Q) {
			if (I.$) {
				function P(W, T, X) {
					for (var U = 0; U < W.length; U++) {
						var Y = W[U];
						Y.parentMenu = T;
						var V = Y.resourceCode;
						if (V != null) {
							X[V] = Y
						}
						if (Y.items) {
							P(Y.items, Y, X)
						}
					}
				}
				var N = null;
				if (I.vPortal && I.vPortal.memberMenus) {
					N = I.vPortal.memberMenus
				} else {
					if (I.vPortal && I.vPortal.menu) {
						N = I.vPortal.menu
					}
				}
				if (N) {
					var S = "resourceMenuCache";
					var O = I.$.data(I.document.body, S);
					if (O == undefined) {
						O = new Array();
						P(N, null, O);
						I.$.data(I.document.body, S, O)
					}
					var M = [];
					var R = O[Q];
					if (R != undefined) {
						while (R != null) {
							M.push(R);
							R = R.parentMenu
						}
					}
					return M.reverse()
				}
			}
			return []
		}
		var D = B(A);
		if (D.length > 0) {
			var K = "\u5f53\u524d\u4f4d\u7f6e\uff1a";
			if (I.$) {
				K = I.$.i18n("seeyon.top.nowLocation.label")
			}
			var J = I.currentSpaceType || "personal";
			var F = I.skinPathKey || "defaultV51";
			var G = '<span class="nowLocation_ico"><img src="' + v3x.baseURL + "/main/skin/frame/" + F + "/menuIcon/" + J + '.png"></span>';
			G += '<span class="nowLocation_content">';
			var H = [];
			for (var E = 0; E < D.length; E++) {
				if (D[E].url) {
					H.push('<a class="hand" onclick="showMenu(\'' + v3x.baseURL + D[E].url + "')\">" + D[E].name + "</a>")
				} else {
					H.push('<a style="cursor:default" >' + D[E].name + "</a>")
				}
			}
			G += H.join(" > ");
			if (L && L.surffix) {
				G += " > " + L.surffix
			}
			I.showLocation(G)
		}
	}
}
function resetCtpLocation() {
	var A = getA8Top();
	if (A) {
		A.showLocation("")
	}
}
function openEditorAssociate(E, F, M, I, G, N, A, O) {
	function J() {
		if (v3x) {
			return v3x.baseURL ? v3x.baseURL : parent._ctxPath
		}
		return "/seeyon"
	}
	var B;
	var L = false;
	var D = document.getElementById("moduleId");
	if (D != null) {
		I = D.value
	} else {
		if (typeof(summary_id) !== undefined && (typeof(summary_id) !== "undefined")) {
			I = summary_id
		}
	}
	if (typeof(_baseObjectId) !== undefined && (typeof(_baseObjectId) !== "undefined")) {
		I = _baseObjectId
	}
	var K = document.getElementById("moduleType");
	if (K != null) {
		G = K.value
	} else {
		if (typeof(_baseApp) !== undefined && (typeof(_baseApp) !== "undefined")) {
			G = _baseApp
		}
	}
	if (F == "collaboration") {
		B = "collaboration/collaboration.do?method=summary&openFrom=glwd&type=&affairId=" + M + "&baseObjectId=" + I + "&baseApp=" + G
	} else {
		if (F == "edoc") {
			B = "edocController.do?method=detailIFrame&from=Done&openFrom=glwd&affairId=" + M + "&isQuote=true&baseObjectId=" + I + "&baseApp=4"
		} else {
			if (F == "km") {
				B = "doc.do?method=docOpenIframeOnlyId&openFrom=glwd&docResId=" + M + "&baseObjectId=" + I + "&baseApp=" + G
			} else {
				if (F == "meeting") {
					B = "mtMeeting.do?method=myDetailFrame&id=" + M + "&isQuote=true&baseObjectId=" + I + "&baseApp=" + G + "&state=10"
				} else {
					L = true;
					B = "fileUpload.do?method=download&fileId=" + E + "&createDate=" + N.substring(0, 10) + "&filename=" + encodeURI(A) + "&v=" + O
				}
			}
		}
	}
	B = B + "&fromEditor=1";
	B = J() + "/" + B;
	if (L) {
		var H = document.getElementById("downloadFileFrame");
		if (H) {
			H.src = B
		} else {
			window.open(B, "_blank")
		}
	} else {
		openDetailURL(B)
	}
}
function closeAllDialog(A) {
	var B = window;
	if (A) {
		B = A
	}
	B.$(".mask").remove();
	B.$(".dialog_box").remove();
	B.$(".shield").remove();
	B.$(".mxt-window").remove()
}
function isYoZoOffice() {
	var D = false;
	try {
		var B = "";
		if (navigator.cpuClass.indexOf("x86") != -1) {
			B = new ActiveXObject("Kinggrid.iWebOffice")
		} else {
			B = new ActiveXObject("Kinggrid.iWebOffice_x64")
		}
		D = B.WebApplication(".eio")
	} catch (A) {}
	return D
}
function clearOfficeFlag() {
	try {
		var B = navigator.userAgent;
		var A = (navigator.appName == "Microsoft Internet Explorer") || B.indexOf("Trident") != -1;
		var D = getA8Top();
		D.isOffice = false;
		D.officeObj = null
	} catch (E) {}
}
function setOfficeFlag(B, D) {
	try {
		var E = navigator.userAgent;
		var A = (navigator.appName == "Microsoft Internet Explorer") || E.indexOf("Trident") != -1;
		if (A) {
			var F = getA8Top();
			F.isOffice = B;
			F.officeObj = [];
			F.officeObj.push(D);
			return
		}
		var F = getA8Top();
		F.isOffice = B;
		if (F.officeObj && typeof F.officeObj == "object" && "[object Array]" == Object.prototype.toString.call(F.officeObj)) {
			F.officeObj.push(D)
		} else {
			F.officeObj = [];
			F.officeObj.push(D)
		}
	} catch (G) {}
}
function hideOfficeObj() {
	try {
		var E = navigator.userAgent;
		var B = (navigator.appName == "Microsoft Internet Explorer") || E.indexOf("Trident") != -1;
		var F = getA8Top();
		if (F.isOffice && F.officeObj && F.officeObj.length > 0) {
			for (var D = 0; D < F.officeObj.length; D++) {
				var A = F.officeObj[D];
				if (A && A.style) {
					try {
						if (B) {
							A.Hide(0)
						} else {
							A.HidePlugin(0)
						}
					} catch (G) {}
				}
			}
		}
	} catch (G) {}
}
var OfficeObjExt = {
	iframeId: null,
	showDialogOffice: function () {},
	setIframeId: function (A) {
		OfficeObjExt.iframeId = A
	},
	firstHeight: null,
	showExt: function () {
		if (OfficeObjExt.iframeId == null) {
			return
		}
		var D = document.getElementById(OfficeObjExt.iframeId);
		var B;
		if (OfficeObjExt.firstHeight == null) {
			B = D.style.height;
			OfficeObjExt.firstHeight = B
		} else {
			B = OfficeObjExt.firstHeight
		}
		B = B + "";
		var A = B;
		if (B.indexOf("%") > 0) {
			A = B.substring(0, B.length - 1);
			A = parseInt(A);
			A = A - 2;
			D.style.height = A + "%"
		} else {
			if (B.indexOf("px") > 0) {
				A = B.substring(0, B.length - 2);
				A = parseInt(A);
				A = A - 2;
				D.style.height = A + "px"
			} else {
				B = $(D).height();
				OfficeObjExt.firstHeight = B + "px";
				D.style.height = (B - 2) + "px"
			}
		}
		window.setTimeout(function () {
			D.style.height = B
		}, 2)
	},
	showIfame: function (B) {
		var D,
		F,
		G;
		D = B.firstAttr;
		F = B.iframe;
		G = B.callback || function () {};
		var E;
		if (OfficeObjExt[D] == null) {
			E = F.style.height;
			OfficeObjExt[D] = E
		} else {
			E = OfficeObjExt[D]
		}
		E = E + "";
		var A = E;
		if (E.indexOf("%") > 0) {
			A = E.substring(0, E.length - 1);
			A = parseInt(A);
			A = A - 2;
			F.style.height = A + "%"
		} else {
			if (E.indexOf("px") > 0) {
				A = E.substring(0, E.length - 2);
				A = parseInt(A);
				A = A - 2;
				F.style.height = A + "px"
			} else {
				E = $(F).height();
				OfficeObjExt[D] = E + "px";
				F.style.height = (E - 2) + "px"
			}
		}
		window.setTimeout(function () {
			window.setTimeout(B.callback, 1)
		}, 2)
	}
};
function showOfficeObj(D) {
	try {
		var G = navigator.userAgent.toLowerCase().match(/chrome/) != null;
		var E = getCtpTop();
		if ((E.$(".layui-layer").length > 0 || E.$(".dialog_main").length > 0) && D != true) {
			return void(0)
		}
		try {
			if (E.$(".shield").size() >= 1) {
				return
			}
		} catch (F) {}
		try {
			if ((E.$(".mask").size() > 0 && E.$(".mask").css("display") != "none") || (E.$(".shield").size() > 0 && E.$(".shield").css("display") != "none")) {
				if (typeof OfficeObjExt.showDialogOffice == "undefined") {
					return
				}
				OfficeObjExt.showDialogOffice()
			}
		} catch (F) {}
		if (E.isOffice && E.officeObj && E.officeObj.length > 0) {
			for (var B = 0; B < E.officeObj.length; B++) {
				var A = E.officeObj[B];
				if (A && A.style) {
					try {
						if (G) {
							A.HidePlugin(1);
							A.FuncExtModule.ShowToolBar = "1"
						} else {
							A.Hide(1)
						}
					} catch (F) {}
				}
			}
		}
		if (G) {
			window.setTimeout(OfficeObjExt.showExt, 50)
		}
	} catch (F) {}
};
(function () {
	var fieldTypeValue = {
		string: "string",
		number: "number",
		email: "email",
		telephone: "telephone",
		mobilePhone: "mobilePhone",
		"0": "0",
		"1": "1",
		"2": "2",
		"3": "3",
		"4": "4",
		"5": "5",
		"8": "0",
		"9": "0",
		"6": "6"
	};
	var fieldType = "type";
	var fieldName = "name";
	var maxValue = "maxValue";
	var minValue = "minValue";
	var minLength = "minLength";
	var maxLength = "maxLength";
	var china3char = "china3char";
	var notNull = "notNull";
	var dotNumber = "dotNumber";
	var fieldDiaplayName = "displayName";
	var fieldLen = "fieldLen";
	var nullable = "nullable";
	var isNumber = "isNumber";
	var integerDigits = "integerDigits";
	var decimalDigits = "decimalDigits";
	var isEmail = "isEmail";
	var notNullWithoutTrim = "notNullWithoutTrim";
	var isInteger = "isInteger";
	var max = "max";
	var min = "min";
	var maxEqual = "maxEqual";
	var minEqual = "minEqual";
	var isWord = "isWord";
	var character = "avoidChar";
	var isDeaultValue = "isDeaultValue";
	var deaultValue = "deaultValue";
	var regExp = "regExp";
	var errorMsg = "errorMsg";
	var func = "func";
	$.fn.resetValidate = function (options) {
		var errorClassName = "error-form";
		this.find("." + errorClassName).removeClass(errorClassName).each(function (i, e) {
			var prt = $(e);
			var es = prt.data("errorIcon");
			if (es) {
				prt.removeClass("error-form").next().remove();
				prt.removeAttr("title");
				prt.removeData("errorIcon");
				prt.find("input,textarea").unbind("propertychange");
				prt.css({
					width: ($(this).width() + 35) + "px"
				})
			}
		})
	};
	function checkValue(obj, options, errorArray) {
		var resultTemp = obj;
		var resultTempPar = resultTemp.parent();
		curCheckObj = checkInput(resultTemp, options.checkNull);
		if (curCheckObj.errorArray) {
			var len = curCheckObj.errorArray.length;
			if (len > 0) {
				showError(resultTempPar, curCheckObj, options, resultTemp);
				if (!resultTempPar.hasClass("error-form") || resultTemp.attr("comptype") == "calendar") {
					if (resultTemp.hasClass("comp")) {
						resultTemp.focus(function () {
							checkval($(this), options)
						})
					}
				}
				if ($.browser.msie && parseInt($.browser.version) < 9) {
					resultTemp.bind("propertychange", function (e) {
						if (e.originalEvent && e.originalEvent.propertyName == "value") {
							checkval($(this), options)
						}
					})
				} else {
					resultTemp.bind("change", function () {
						checkval($(this), options)
					})
				}
				errorArray.push(curCheckObj.errorArray.join("\r\n"))
			}
		}
	}
	function MxtCheckForm(form, options) {
		if (typeof form === "string") {
			form = $("#" + form)
		} else {
			form = $(form)
		}
		var errorArray = [],
		curCheckObj = null;
		var result = [];
		var focusObj = null;
		var firstErrorObj = null;
		if (options && options.validateHidden) {
			$(".validate", form).add(form).each(function () {
				if (!this.disabled && $(this).attr("validate") && this.tagName.toLowerCase() != "span" && this.tagName.toLowerCase() != "div") {
					result.push($(this))
				}
			})
		} else {
			$(".validate", form).add(form).each(function () {
				if (!this.disabled && $(this).is(":visible") && $(this).attr("validate") && this.tagName.toLowerCase() != "span" && this.tagName.toLowerCase() != "div") {
					result.push($(this))
				}
			})
		}
		for (var i = 0; i < result.length; i++) {
			if (i == 0) {
				focusObj = result[0]
			}
			checkValue(result[i], options, errorArray);
			if (firstErrorObj == null && errorArray.length == 1) {
				firstErrorObj = result[i]
			}
			result[i] = null
		}
		form = null;
		if (focusObj != null && !$(focusObj).is(":visible")) {
			var tempId = focusObj.attr("id");
			if (tempId != null) {
				if (!/^field\d{0,5}/.test(tempId)) {
					focusObj.focus()
				}
			} else {
				focusObj.focus()
			}
		}
		if (errorArray.length > 0) {
			var errorAlert = options.errorAlert;
			if (errorAlert) {
				if (top.$("#checkformError").length <= 0) {
					$.alert({
						id: "checkformError",
						msg: errorArray.join("<br/>")
					})
				}
			}
			return false
		} else {
			return true
		}
	}
	function MxtCheckInput(input) {
		var options = {
			errorIcon: true
		};
		if (input == null) {
			return true
		}
		var errorArray = [];
		checkValue(input, options, errorArray);
		var result = true;
		if (curCheckObj.errorArray && curCheckObj.errorArray.length > 0) {
			result = false
		}
		input = null;
		return result
	}
	function MxtCheckMsg(msg, context) {
		if (msg == null) {
			return
		}
		context = context || document.body;
		if (typeof context === "string") {
			context = $("#" + context)
		} else {
			context = $(context)
		}
		for (var elemSelector in msg) {
			addCheckMsg($(elemSelector, context), msg[elemSelector])
		}
		context = null
	}
	window.MxtCheckForm = MxtCheckForm;
	window.MxtCheckInput = MxtCheckInput;
	window.MxtCheckMsg = MxtCheckMsg;
	window.RemoveCheckMsg = checkval;
	function checkInput(input, checkIsNull) {
		if (input == null) {
			return {}
		}
		var checkObj = getCheckObj(input);
		if (checkObj != null) {
			if (checkObj.errorArray == null) {
				checkObj.errorArray = []
			}
			checkObj.checkNull = checkIsNull;
			if (checkIsNull) {
				checkNotNull(checkObj);
				if (checkObj.errorArray.length > 0) {
					input = null;
					return checkObj
				}
				checkNotNullWithourTrim(checkObj);
				if (checkObj.errorArray.length > 0) {
					input = null;
					return checkObj
				}
			}
			checkIsNumber(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsEmail(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsWord(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDefaultValue(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsTelephone(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsMobilePhone(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDate(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDateTime(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsDateTimes(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsShorterThanMax(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkIsLongerThanMin(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkCustomRegExp(checkObj);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
			checkCustomFunc(checkObj, input);
			if (checkObj.errorArray.length > 0) {
				input = null;
				return checkObj
			}
		}
		input = null;
		return checkObj
	}
	function checkval(obj, options) {
		if (options == null) {
			var settings = {
				errorIcon: true,
				errorAlert: false,
				errorBg: false,
				validateHidden: false,
				checkNull: true
			};
			options = $.extend(settings, options)
		}
		var temp = checkInput(obj, true);
		var prt = obj.parent();
		if (!temp.errorArray || (temp.errorArray && temp.errorArray.length === 0)) {
			prt.removeClass("error-form");
			prt.removeAttr("title");
			if (prt.data("errorIcon")) {
				prt.removeData("errorIcon");
				prt.next().remove();
				if (options.errorIcon) {
					if (obj.attr("comptype") != "calendar" || (obj.attr("comptype") == "calendar" && options.needfloat == true)) {
						prt.css({
							width: (prt.width() + 35) + "px"
						});
						if (obj.hasClass("comp")) {
							obj.width("100%")
						}
					}
				}
			}
			if (prt.data("errorBg")) {
				prt.removeData("errorBg");
				prt.css("background", "#fff");
				if (obj && !(temp[notNull] || temp[nullable])) {
					$(obj).css("background", "#fff")
				}
			}
		} else {
			showError(prt, temp, options, obj)
		}
	}
	function showError(par, obj, options, objDom) {
		if (options) {
			var _w = par.width();
			if (options.errorIcon) {
				par.addClass("error-form").attr("title", obj.errorArray.join(""));
				if (objDom.attr("comptype") != "calendar" || (objDom.attr("comptype") == "calendar" && obj.needfloat == true)) {
					par.css("float", "left")
				}
				var es = par.data("errorIcon");
				if (!es) {
					es = $("<span class='error-title'></span>");
					par.data("errorIcon", es);
					par.after(es);
					if (objDom.attr("comptype") != "calendar" || (objDom.attr("comptype") == "calendar" && options.needfloat == true)) {
						par.css({
							width: (_w - 35) + "px"
						})
					}
				}
				es.attr("title", obj.errorArray.join(""))
			} else {
				par.addClass("error-form").attr("title", obj.errorArray.join(""))
			}
			if (options.errorBg) {
				var bg = par.data("errorBg");
				if (!bg) {
					if (par.hasClass("common_txtbox_wrap")) {
						par.css("background", "#FCDD8B")
					}
					if (objDom) {
						$(objDom).css("background", "#FCDD8B")
					}
					par.data("errorBg", true)
				}
			}
		} else {}
	}
	function addCheckMsg(elem, msg) {
		if (elem == null) {
			return
		}
		if (typeof msg == "string") {
			try {
				msg = eval("({" + msg + "})")
			} catch (e) {
				return
			}
		}
		var checkObj = getCheckObj(elem);
		$.extend(checkObj, msg);
		elem = null
	}
	function getCheckObj(input) {
		if (input == null) {
			return {}
		}
		if (input.data("checkObj")) {
			var checkObj = input.data("checkObj");
			checkObj.errorArray = null;
			checkObj.value = input.val();
			return input.data("checkObj")
		}
		var checkObj = null,
		validate = null;
		input = $(input);
		validate = input.attr("validate");
		if (validate == null || $.trim(validate) == "") {
			return {}
		} else {
			try {
				checkObj = eval("({" + validate + "})")
			} catch (e) {
				checkObj = {};
				var errorMessage = input.attr("name") + $.i18n("validate.notJson.js");
				addErrorMessage(checkObj, errorMessage, true);
				input = null;
				return checkObj
			}
		}
		if (checkObj.name == null) {
			var tempName = checkObj[fieldName] || checkObj[fieldDiaplayName] || input.attr("name");
			if (tempName) {
				checkObj.name = tempName
			} else {
				var errorMessage = $.i18n("validate.notName.js");
				addErrorMessage(checkObj, errorMessage, true);
				input = null;
				return checkObj
			}
		}
		checkObj.value = input.val();
		input.data("checkObj", checkObj);
		input = null;
		return checkObj
	}
	function checkNotNull(obj) {
		if (obj == null) {
			return true
		}
		if (obj[notNull] || obj[nullable]) {
			if (isNull(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNull.js"), true);
				return false
			}
		}
		return true
	}
	function checkNotNullWithourTrim(obj) {
		if (obj == null) {
			return true
		}
		if (obj[notNullWithoutTrim]) {
			if (isNull(obj.value, true)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNull.js"), true);
				return false
			}
		}
		return true
	}
	function checkIsNumber(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var isNumberFlag = false,
		isIntegerFlag = false;
		if (obj[isNumber] || (obj[fieldType] == fieldTypeValue.number) || (obj[fieldType] == fieldTypeValue["1"]) || (obj[fieldType] == fieldTypeValue["2"])) {
			isNumberFlag = true;
			if (isNull(obj.value)) {
				return true
			}
			if (!isANumber(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notNumber.js"));
				return false
			}
			var value = "" + $.trim(obj.value);
			var dotIndex = value.indexOf("."),
			intdigits = obj[integerDigits],
			decDigits = obj[decimalDigits];
			if (decDigits == null) {
				decDigits = obj[dotNumber]
			}
			if (intdigits != null && isANumber(intdigits)) {
				var intbits = dotIndex > -1 ? dotIndex : value.length;
				if (intbits > parseInt(intdigits)) {
					addErrorMessage(obj, obj.name + $.i18n("validate.integerDigits.js", intdigits));
					return false
				}
			}
			if (decDigits != null && isANumber(decDigits)) {
				var decbits = dotIndex > -1 ? (value.length - 1 - dotIndex) : 0;
				if (decbits > parseInt(decDigits)) {
					addErrorMessage(obj, obj.name + $.i18n("validate.decimalDigits.js", decDigits));
					return false
				}
			}
		}
		if (obj[isInteger]) {
			isIntegerFlag = true;
			if (isNull(obj.value)) {
				return true
			}
			if (!isANumber(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.integer.js"));
				return false
			}
			var value = "" + obj.value;
			if (value.indexOf(".") > -1) {
				addErrorMessage(obj, obj.name + $.i18n("validate.integer.decimal.js"));
				return false
			}
		}
		if (isNumberFlag || isIntegerFlag) {
			if (!checkIsLessThanMax(obj)) {
				return false
			}
			if (!checkIsBiggerThanMin(obj)) {
				return false
			}
		}
		return true
	}
	function checkIsEmail(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[isEmail] || (obj[fieldType] == "email")) {
			var str = obj.value;
			if (isNull(str)) {
				return true
			} else {
				var result = true;
				if (str.indexOf("@") == -1) {
					result = false
				} else {
					if (str.indexOf("@") == 0) {
						result = false
					} else {
						if ((str.length - str.indexOf("@")) < 5) {
							result = false
						} else {
							if (str.indexOf(".") == -1) {
								result = false
							} else {
								if ((str.length - str.indexOf(".")) < 3) {
									result = false
								}
							}
						}
					}
				}
				if (!result) {
					addErrorMessage(obj, obj.name + $.i18n("validate.email.js"))
				}
				return result
			}
		}
		return true
	}
	function checkIsWord(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[isWord] || (obj[fieldType] == fieldTypeValue.string) || (obj[fieldType] == fieldTypeValue["0"]) || (obj[fieldType] == fieldTypeValue["8"]) || (obj[fieldType] == fieldTypeValue["9"])) {
			if (typeof obj.value != "string") {
				return false
			}
			if (obj[character] && typeof obj[character] == "string") {
				var value = "" + obj.value,
				chars = obj[character];
				for (var i = 0, len = chars.length; i < len; i++) {
					if (value.indexOf(chars.charAt(i)) > -1) {
						addErrorMessage(obj, obj.name + " " + $.i18n("validate.specialhave.js") + obj[character]);
						return false
					}
				}
			}
		}
		return true
	}
	function checkIsDefaultValue(obj) {
		if (obj == null) {
			return false
		}
		if (isNull(obj.value)) {
			return false
		}
		if (obj[isDeaultValue] && obj[deaultValue]) {
			if ($.trim(obj.value) == obj[deaultValue]) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notDefault.js") + "(" + obj[deaultValue] + ")!");
				return true
			}
		}
		return false
	}
	var telReg = /^\d[-_0-9]{5,}\d$/;
	function checkIsTelephone(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == "telephone") {
			var value = "" + obj.value;
			if (telReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.phoneNumber.js"));
				return false
			}
		}
		return true
	}
	var mobileReg = /\d{11,}/;
	function checkIsMobilePhone(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == "mobilePhone") {
			var value = "" + obj.value;
			if (mobileReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.mobileNumber.js"));
				return false
			}
		}
		return true
	}
	var dateReg = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29))$/;
	function checkIsDate(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 3) {
			var value = "" + obj.value;
			if (dateReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.js"));
				return false
			}
		}
		return true
	}
	var datetimeReg = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$/;
	function checkIsDateTime(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 4) {
			var value = "" + obj.value;
			if (datetimeReg.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.hh.mm.ss.js"));
				return false
			}
		}
		return true
	}
	var datetimeRegs = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29)) (20|21|22|23|[0-1]?\d):[0-5]?\d$/;
	function checkIsDateTimes(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[fieldType] == 5) {
			var value = "" + obj.value;
			if (datetimeRegs.test(value) != true) {
				addErrorMessage(obj, obj.name + $.i18n("validate.yyyy.MM.dd.hh.mm.ss.js"));
				return false
			}
		}
		return true
	}
	function checkIsShorterThanMax(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[maxLength] != null) {
			if (isANumber(obj[maxLength])) {
				if (obj[isNumber] || (obj[fieldType] == fieldTypeValue.number) || (obj[fieldType] == fieldTypeValue["1"]) || (obj[fieldType] == fieldTypeValue["2"])) {
					if (obj.value.length > 0) {
						obj.value = obj.value.replace(/\./, "")
					}
					if (longerThanSecond(obj.value, obj[maxLength])) {
						addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.js", obj[maxLength]));
						return false
					}
				} else {
					if (obj[china3char] == true) {
						if (longerThanSecondChina(obj.value, obj[maxLength])) {
							addErrorMessage(obj, obj.name + $.i18n("validate.maxLengthChina.js", obj[maxLength]));
							return false
						}
					} else {
						if (longerThanSecond(obj.value, obj[maxLength])) {
							addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.js", obj[maxLength]));
							return false
						}
					}
				}
			} else {
				addErrorMessage(obj, obj.name + $.i18n("validate.maxLength.notNumber.js"));
				return false
			}
		}
		return true
	}
	function checkIsLongerThanMin(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		if (obj[minLength] != null) {
			if (isANumber(obj[minLength])) {
				if (shorterThanSecond(obj.value, obj[minLength])) {
					addErrorMessage(obj, obj.name + $.i18n("validate.minLength.js") + obj[minLength] + "!");
					return false
				}
			} else {
				addErrorMessage(obj, obj.name + $.i18n("validate.minLength.notNumber.js"));
				return false
			}
		}
		return true
	}
	function checkIsLessThanMax(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var tempMax = obj[max];
		if (tempMax == null) {
			tempMax = obj[maxValue]
		}
		if (tempMax != null && isANumber(tempMax)) {
			value = parseFloat(obj.value);
			if (obj[maxEqual] == false) {
				if (tempMax <= value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustLittle.js") + tempMax + "!");
					return false
				}
			} else {
				if (tempMax < value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustLittleOrEqual.js") + tempMax + "!");
					return false
				}
			}
		}
		return true
	}
	function checkIsBiggerThanMin(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var tempMin = obj[min];
		if (tempMin == null) {
			tempMin = obj[minValue]
		}
		if (tempMin != null && isANumber(tempMin)) {
			value = parseFloat(obj.value);
			if (obj[minEqual] == false) {
				if (tempMin >= value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustBigger.js") + tempMin + "!");
					return false
				}
			} else {
				if (tempMin > value) {
					addErrorMessage(obj, obj.name + $.i18n("validate.mustBiggerOrEqual.js") + tempMin + "!");
					return false
				}
			}
		}
		return true
	}
	function checkCustomRegExp(obj) {
		if (obj == null) {
			return true
		}
		if (isNull(obj.value)) {
			return true
		}
		var customRegExp = obj[regExp];
		if (customRegExp != null) {
			if (!new RegExp(customRegExp).test(obj.value)) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notMatch.js"));
				return false
			}
		}
		return true
	}
	function checkCustomFunc(obj, input) {
		if (obj == null || input == null) {
			input = null;
			return true
		}
		if (typeof obj[func] == "function") {
			var result = obj[func](input, obj);
			if (result == null || result == false) {
				addErrorMessage(obj, obj.name + $.i18n("validate.notMatch.js"))
			}
		}
		input = null;
		return true
	}
	function isNull(value, notTrim) {
		if (value == null) {
			return true
		} else {
			if (typeof(value) == "string") {
				value = notTrim == true ? $.trim(value) : value;
				if (value == "") {
					return true
				}
			}
		}
		return false
	}
	function isANumber(value) {
		if (typeof value == "string") {
			value = value
		}
		return /^[-+]?\d+([\.]\d+)?$/.test(value)
	}
	function longerThanSecond(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (first.length > second) {
				return true
			}
		}
		return false
	}
	function longerThanSecondChina(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (getLength(first) > second) {
				return true
			}
		}
		return false
	}
	function shorterThanSecond(first, second) {
		if (first != null && second != null && isANumber(second)) {
			second = parseFloat(second);
			if (first.length < second) {
				return true
			}
		}
		return false
	}
	function getLength(value) {
		if (value == null) {
			return 0
		} else {
			if (value == "") {
				return 1
			} else {
				var result = 0;
				for (var i = 0, len = value.length; i < len; i++) {
					var ch = value.charCodeAt(i);
					if (ch < 256) {
						result++
					} else {
						result += 3
					}
				}
				return result
			}
		}
	}
	function addErrorMessage(obj, errMsg, useSystem) {
		if (obj) {
			if (obj.errorArray == null) {
				obj.errorArray = []
			}
			var customErrorMsg = obj[errorMsg];
			if (useSystem != true && customErrorMsg) {
				obj.errorArray.push(customErrorMsg)
			} else {
				obj.errorArray.push(errMsg)
			}
		}
	}
	$.fn.validate = function (options) {
		var settings = {
			errorIcon: true,
			errorAlert: false,
			errorBg: false,
			validateHidden: false,
			checkNull: true
		};
		options = $.extend(settings, options);
		return MxtCheckForm(this, options)
	};
	$.fn.validateChange = function (obj) {
		var tempElem = this;
		if (tempElem != null && tempElem.size() > 0) {
			addCheckMsg(tempElem, obj)
		}
		tempElem = null
	};
	var invalid = [];
	$._invalidObj = function (obj) {
		if (obj) {
			invalid.push(obj)
		}
		invalid.contains(obj)
	};
	$._isInValid = function (obj) {
		if (invalid.contains) {
			return invalid.contains(obj)
		}
		return null
	};
	$.isNull = isNull;
	$.isANumber = isANumber
})();
function _clearIframeContent(E, D, A, B) {
	if (E === D.type[2]) {
		try {
			var C = SeeUtils.getElObj("layui-layer-iframe" + A);
			C.src = "about:blank";
			SeeUtils.eachByClass(B, "layui-layer-content", function (G) {
				SeeUtils.removeChild(G, C)
			})
		} catch (F) {}
	}
}
function __getIframeDialogNumbers() {
	var D = document.querySelectorAll(".layui-layer");
	var C = [];
	for (var B = 0; B < D.length; B++) {
		var A = D[B];
		if (SeeUtils.hasClass(A, "layui-layer-iframe")) {
			C.push(A)
		}
	}
	return C
}
!function (window, undefined) {
	var winBtnClickName = "";
	"use strict";
	var isLayui = window.layui && layui.define,
	$,
	win,
	ready = {
		getPath: function () {
			var js = document.scripts,
			script = js[js.length - 1],
			jsPath = script.src;
			if (script.getAttribute("merge")) {
				return
			}
			return jsPath.substring(0, jsPath.lastIndexOf("/seeyon/") + 1)
		}
		(),
		config: {},
		end: {},
		minIndex: 0,
		minLeft: [],
		btn: ["&#x786E;&#x5B9A;", "&#x53D6;&#x6D88;"],
		type: ["dialog", "page", "iframe", "loading", "tips"]
	};
	var layer = {
		v: "3.0.1",
		ie: function () {
			var agent = navigator.userAgent.toLowerCase();
			return (!!window.ActiveXObject || "ActiveXObject" in window) ? ((agent.match(/msie\s(\d+)/) || [])[1] || "11") : false
		}
		(),
		index: (window.layer && window.layer.v) ? 100000 : 0,
		path: ready.getPath,
		config: function (options, fn) {
			options = options || {};
			layer.cache = ready.config = $.extend({}, ready.config, options);
			layer.path = ready.config.path || layer.path;
			typeof options.extend === "string" && (options.extend = [options.extend]);
			if (ready.config.path) {
				layer.ready()
			}
			if (!options.extend) {
				return this
			}
			isLayui ? layui.addcss("modules/layer/" + options.extend) : layer.link("skin/" + options.extend);
			return this
		},
		link: function (href, fn, cssname) {
			if (!layer.path) {
				return
			}
			var head = document.getElementsByTagName("head")[0];
			var link = document.createElement("link");
			if (typeof fn === "string") {
				cssname = fn
			}
			var app = (cssname || href).replace(/\.|\//g, "");
			var id = "layuicss-" + app,
			timeout = 0;
			link.rel = "stylesheet";
			link.href = layer.path + href;
			link.id = id;
			if (!document.getElementById(id) && href) {
				head.appendChild(link)
			}
			if (typeof fn !== "function") {
				return
			}
			fn()(function poll() {
				if (++timeout > 8 * 1000 / 100) {
					return window.console && console.error("layer.css: Invalid")
				}
				parseInt(SeeUtils.getElWidth(id)) === 1989 ? fn() : setTimeout(poll, 100)
			}
				())
		},
		ready: function (callback) {
			var cssname = "skinlayercss",
			ver = "1172";
			isLayui ? layui.addcss("seeyon/common/css/seeyon.ui.layer-debug.css?v=" + layer.v + ver, callback, cssname) : layer.link("", callback, cssname);
			return this
		},
		alert: function (content, options, yes) {
			var type = typeof options === "function";
			if (type) {
				yes = options
			}
			var otherParams = type ? {}
			 : options;
			if (otherParams == null) {
				otherParams = {}
			}
			options = SeeUtils.extend({
					content: content,
					yes: yes
				}, otherParams);
			return layer.open(options)
		},
		confirm: function (content, options, yes, cancel) {
			var type = typeof options === "function";
			if (type) {
				cancel = yes;
				yes = options
			}
			var otherParams = type ? {}
			 : options;
			if (otherParams == null) {
				otherParams = {}
			}
			options = SeeUtils.extend({
					content: content,
					btn: ready.btn,
					yes: yes,
					btn2: cancel
				}, otherParams);
			return layer.open(options)
		},
		msg: function (content, options, end) {
			var type = typeof options === "function",
			rskin = ready.config.skin;
			var skin = (rskin ? rskin + " " + rskin + "-msg" : "") || "layui-layer-msg";
			var anim = doms.anim.length - 1;
			if (type) {
				end = options
			}
			return layer.open($.extend({
					content: content,
					time: 3000,
					shade: false,
					skin: skin,
					title: false,
					closeBtn: false,
					btn: false,
					resize: false,
					end: end
				}, (type && !ready.config.skin) ? {
					skin: skin + " layui-layer-hui",
					anim: anim
				}
					 : function () {
					options = options || {};
					if (options.icon === -1 || options.icon === undefined && !ready.config.skin) {
						options.skin = skin + " " + (options.skin || "layui-layer-hui")
					}
					return options
				}
					()))
		},
		load: function (icon, options) {
			if (options == null) {
				options = {}
			}
			options = SeeUtils.extend({
					type: 3,
					icon: icon || 0,
					resize: false,
					shade: 0.01
				}, options);
			return layer.open(options)
		},
		tips: function (content, follow, options) {
			if (options == null) {
				options = {}
			}
			return layer.open(SeeUtils.extend({
					type: 4,
					content: [content, follow],
					closeBtn: false,
					time: 3000,
					shade: false,
					resize: false,
					fixed: false,
					maxWidth: 210
				}, options))
		}
	};
	var Class = function (setings) {
		var that = this;
		that.index = ++layer.index;
		that.config = $.extend({}, that.config, ready.config, setings);
		if (that.config.timeout) {
			setTimeout(function () {
				document.body ? that.creat() : setTimeout(function () {
					that.creat()
				}, 50)
			}, that.config.timeout)
		} else {
			document.body ? that.creat() : setTimeout(function () {
				that.creat()
			}, 50)
		}
		if (getCtpTop().isOffice || (!getCtpTop().needShowContent)) {
			if (window.navigator.userAgent.indexOf("AppleWebKit") != -1) {
				setTimeout(function () {
					that.officeAction(false)
				}, 500)
			} else {
				that.officeAction(false)
			}
		} else {
			that.officeAction(true)
		}
	};
	Class.pt = Class.prototype;
	var doms = ["layui-layer", ".layui-layer-title", ".layui-layer-main", ".layui-layer-dialog", "layui-layer-iframe", "layui-layer-content", "layui-layer-btn", "layui-layer-close", "layui-layer-messageBox"];
	doms.anim = ["layer-anim", "layer-anim-01", "layer-anim-02", "layer-anim-03", "layer-anim-04", "layer-anim-05", "layer-anim-06"];
	Class.pt.config = {
		type: 0,
		shade: 0.3,
		fixed: true,
		move: doms[1],
		title: "&#x4FE1;&#x606F;",
		offset: "auto",
		area: "auto",
		closeBtn: 1,
		time: 0,
		zIndex: 600,
		maxWidth: 360,
		anim: 0,
		icon: -1,
		moveType: 1,
		resize: true,
		scrollbar: true,
		tips: 2,
		moveOut: true
	};
	Class.pt.vessel = function (conType, callback) {
		var that = this,
		times = that.index,
		config = that.config;
		var zIndex = that.config.targetWindow.getMaxZindex(2);
		var titype = typeof config.title === "object";
		var ismax = config.maxmin && (config.type === 1 || config.type === 2);
		var titleHTML = (config.title ? '<div class="layui-layer-title" style="' + (titype ? config.title[1] : "") + '">' + (titype ? config.title[0] : config.title) + "</div>" : "");
		if (config.nameType != "panel") {
			that.ifMax()
		}
		var layerContent;
		if (config.layerFrom == "msg") {
			layerContent = "<table width='90%' class='margin_t_20' style='font-size:12px;'><tr><td class='msgbox_content padding_l_10' style='padding-right:15px;'>" + config.content + "</td></tr></table>"
		} else {
			if (config.layerFrom == "dialog") {
				if (config.title) {
					config.btn ? config.area[1] = parseInt(config.area[1].split("px")[0]) + 105 + "px" : config.area[1] = parseInt(config.area[1].split("px")[0]) + 55 + "px"
				}
				layerContent = (config.type == 1 && conType ? "" : (config.content || ""))
			}
		}
		config.zIndex = zIndex;
		var _nextShade = "";
		if (config.nextShade) {
			_nextShade = '<div class="layui-layer-shade" id="layui-layer-shade-next' + times + '" style="' + ("z-index:" + (zIndex + 1) + "; background-color:" + ("#fff") + ";") + '"></div>'
		}
		winBtnClickName = "dialogWinBtnClick" + that.index;
		callback([config.shade ? ('<div class="layui-layer-shade" id="layui-layer-shade' + times + '" times="' + times + '" notCopyReturnValue="' + config.notCopyReturnValue + '" style="' + ("z-index:" + (zIndex) + "; background-color:" + (config.shade[1] || "#000") + "; opacity:" + (config.shade[0] || config.shade) + "; filter:alpha(opacity=" + (config.shade[0] * 100 || config.shade * 100) + ");") + '"></div>') + _nextShade : "", '<div layType="dialog" class="' + doms[0] + (" layui-layer-" + ready.type[config.type]) + (((config.type == 0 || config.type == 2) && !config.shade) ? " layui-layer-border" : "") + " " + (config.skin || "") + '" id="' + doms[0] + times + '" type="' + ready.type[config.type] + '" times="' + times + '" showtime="' + config.time + '" notCopyReturnValue="' + config.notCopyReturnValue + '" conType="' + (conType ? "object" : "string") + '" style="z-index: ' + (zIndex + 1) + "; width:" + config.area[0] + ";height:" + config.area[1] + (config.fixed ? "" : ";position:absolute;") + '">' + (conType && config.type != 2 ? "" : titleHTML) + '<div id="' + (config.id || "") + '_main" class="layui-layer-content' + ((config.type == 0 && config.icon !== -1) ? " layui-layer-padding" : "") + (config.type == 3 ? " layui-layer-loading" + config.icon : "") + '" style="' + (config.nameType == "panel" ? "font-size:12px" : "") + '">' + (config.type == 0 && config.icon !== -1 ? '<i class="layui-layer-ico layui-layer-ico' + config.icon + '"></i>' : "") + (config.type == 1 && conType ? "" : (layerContent || "")) + '</div><span class="layui-layer-setwin">' + function () {
					var closebtn = ismax ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max" href="javascript:;"></a>' : "";
					config.closeBtn && (closebtn += '<a class="layui-layer-ico ' + doms[7] + " " + doms[7] + (config.title ? config.closeBtn : (config.type == 4 ? "1" : "2")) + '"></a>');
					return closebtn
				}
				() + "</span>" + (config.btn ? function () {
					var button = "";
					typeof config.btn === "string" && (config.btn = [config.btn]);
					for (var i = 0, len = config.btn.length; i < len; i++) {
						button += '<a onclick="' + winBtnClickName + '(event,this)" id="layui-layer-btn-' + config.btnId[i] + '" class="' + doms[6] + "" + i + " " + (config.btnIsEmphasize[i] ? "margin_r_10 common_button common_button_emphasize" : "margin_r_10 common_button common_button_gray") + " " + (config.btnDisabled[i] ? "common_button_disable" : " ") + '" style="' + (config.btnHide[i] ? "display:none" : "") + '" disableAttr="' + config.btnDisabled[i] + '">' + config.btn[i] + "</a>"
					}
					var bottomHTML = "";
					if (config.bottomHTML) {
						bottomHTML += "<div class='left display_inline-block padding_l_10 padding_t_5'>" + config.bottomHTML + "</div>"
					}
					return '<div class="' + doms[6] + " layui-layer-btn-" + (config.btnAlign || "") + '">' + button + bottomHTML + "</div>"
				}
					() : "") + "<iframe id='" + config.id + "_iframe_shadow' class='absolute iframe_shadow' style='top:0;width:" + config.area[0] + ";height:" + config.area[1] + ";border:0;z-index:-1;'></iframe>" + (config.resize ? '<span class="layui-layer-resize"></span>' : "") + "</div>"], titleHTML, $('<div class="layui-layer-move"></div>'));
		return that
	};
	Class.pt.creat = function () {
		var that = this,
		config = that.config,
		times = that.index,
		nodeIndex,
		content = config.content,
		conType = typeof content === "object";
		if (SeeUtils.getElObj(config.id)) {
			return
		}
		if (typeof config.area === "string") {
			config.area = config.area === "auto" ? ["", ""] : [config.area, ""]
		}
		if (config.shift) {
			config.anim = config.shift
		}
		if (layer.ie == 6) {
			config.fixed = false
		}
		switch (config.type) {
		case 0:
			config.btn = ("btn" in config) ? config.btn : ready.btn[0];
			layer.closeAll("dialog");
			break;
		case 2:
			var content = config.content = conType ? config.content : [config.content || "http://layer.layui.com", "auto"];
			config.content = '<iframe scrolling="' + (config.content[1] || "auto") + '" allowtransparency="true" id="' + doms[4] + "" + times + '" name="' + doms[4] + "" + times + '" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + config.content[0] + '"></iframe>';
			break;
		case 3:
			delete config.title;
			delete config.closeBtn;
			config.icon === -1 && (config.icon === 0);
			layer.closeAll("loading");
			break;
		case 4:
			conType || (config.content = [config.content, "body"]);
			config.follow = config.content[1];
			config.content = config.content[0] + '<i class="layui-layer-TipsG"></i>';
			delete config.title;
			config.tips = typeof config.tips === "object" ? config.tips : [config.tips, true];
			config.tipsMore || layer.closeAll("tips");
			break
		}
		that.vessel(conType, function (html, titleHTML, moveElem) {
			$("body").focus();
			SeeUtils.appendToBody(html[0]);
			conType ? function () {
				(config.type == 2 || config.type == 4) ? function () {
					SeeUtils.appendToBody(html[1])
				}
				() : function () {
					if (!content.parents("." + doms[0])[0]) {
						var layerObj = SeeUtils.getElObj(doms[0] + times);
						if (config.nameType == "panel") {
							content.data("display", content.css("display")).show().addClass("layui-layer-wrap").wrap(html[1])
						} else {
							SeeUtils.prependToBody(html[1]);
							$("#" + doms[0] + times).find("." + doms[5]).append(content);
							SeeUtils.eachChildren(SeeUtils.getElObj(doms[0] + times).querySelector("." + doms[5]), function (elObj) {
								SeeUtils.showEl(elObj)
							})
						}
						$(SeeUtils.getElObj(doms[0] + times).querySelector("." + doms[5])).before(titleHTML)
					}
				}
				()
			}
			() : SeeUtils.appendToBody(html[1]);
			that.layeroObj = SeeUtils.getElObj(doms[0] + times);
			if (!document.querySelector(".layui-layer-move")) {
				$("body").append(ready.moveElem = moveElem)
			}
			that.layero = $("#" + doms[0] + times);
			if (config.showTime) {
				var mainObj = SeeUtils.getElObj(config.id + "_main");
				var tempPHtml = mainObj.querySelector("p").innerText;
				var tempTime = parseInt(config.time) / 1000;
				if (mainObj.querySelector("p") != null) {
					mainObj.querySelector("p").innerHTML = tempPHtml + "<span style='color:red;font-size: 16px;'>(" + (--tempTime) + "s)</span>"
				}
				var tempInterval = setInterval(function () {
						if (mainObj.querySelector("p") != null) {
							mainObj.querySelector("p").innerHTML = tempPHtml + "<span style='color:red;font-size: 16px;'>(" + (--tempTime) + "s)</span>"
						}
						if (tempTime <= 1) {
							config.showTimeFun();
							window.clearInterval(tempInterval)
						}
					}, 1000)
			}
			if (config.type == 2 && config.transParams) {
				that.layeroObj.querySelector("iframe").contentWindow.transParamsCopy = config.transParams;
				that.layeroObj.querySelector("iframe").contentWindow.dialogArguments = config.transParams;
				that.layeroObj.querySelector("iframe").contentWindow.transParams = config.transParams
			}
			if (config.type == 2 && that.layeroObj.querySelector("iframe").contentWindow) {
				if (!that.layeroObj.querySelector("iframe").contentWindow.parentDialogObj) {
					that.layeroObj.querySelector("iframe").contentWindow.parentDialogObj = new Object()
				}
				eval("that.layeroObj.querySelector('iframe').contentWindow.parentDialogObj['" + config.id + "'] = layer;")
			}
			config.scrollbar || doms.html.css("overflow", "hidden").attr("layer-full", times)
		}).auto(times);
		config.type == 2 && layer.ie == 6 && SeeUtils.attrEl(that.layeroObj.querySelector("iframe"), "src", content[0]);
		config.type == 4 ? that.tips() : that.offset();
		if (config.fixed) {
			win.on("resize", function () {
				that.offset();
				(/^\d+%$/.test(config.area[0]) || /^\d+%$/.test(config.area[1])) && that.auto(times);
				config.type == 4 && that.tips()
			})
		}
		config.time <= 0 || setTimeout(function () {
			layer.close(that.index)
		}, config.time);
		that.move().callback()
	};
	Class.pt.auto = function (index) {
		var that = this,
		config = that.config;
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		if (config.area[0] === "" && config.maxWidth > 0) {
			SeeUtils.getOuterWidth(layeroObj) > config.maxWidth && SeeUtils.setElWidth(layeroObj, config.maxWidth)
		}
		var area = [SeeUtils.getInnerWidth(layeroObj), SeeUtils.getInnerHeight(layeroObj)];
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0;
		var btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0;
		function setHeight(elem) {
			elem = layeroObj.querySelector(elem);
			if (navigator.userAgent.indexOf("Firefox") == -1) {
				if (win.height() == 0 || win.width() == 0) {
					if (window.SeeUtils.getElHeight(document.body) > area[1]) {
						SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					} else {
						SeeUtils.setElHeight(elem, (window.SeeUtils.getElHeight(document.body) - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					}
				} else {
					SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
				}
			} else {
				if (win.height() == 0 || win.width() == 0) {
					if (document.body.clientHeight > area[1]) {
						SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					} else {
						SeeUtils.setElHeight(elem, (document.body.clientHeight - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
					}
				} else {
					SeeUtils.setElHeight(elem, (area[1] - titHeight - btnHeight - 2 * (parseFloat(SeeUtils.getCss(elem, "padding")) | 0)))
				}
			}
		}
		switch (config.type) {
		case 2:
			setHeight("iframe");
			break;
		default:
			if (config.area[1] === "") {
				if (config.fixed && area[1] >= win.height()) {
					area[1] = win.height();
					setHeight("." + doms[5])
				}
			} else {
				setHeight("." + doms[5])
			}
			break
		}
		return that
	};
	Class.pt.offset = function () {
		var that = this,
		config = that.config;
		var layeroObj = that.layeroObj;
		var area = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
		var type = typeof config.offset === "object";
		that.offsetTop = (win.height() - area[1]) / 2;
		that.offsetLeft = (win.width() - area[0]) / 2;
		if (win.height() == 0 || win.width() == 0) {
			if (navigator.userAgent.indexOf("Firefox") == -1) {
				if (window.SeeUtils.getElHeight(document.body) < area[1]) {
					that.offsetTop = 0
				} else {
					that.offsetTop = (window.SeeUtils.getElHeight(document.body) - area[1]) / 2
				}
				that.offsetLeft = (window.SeeUtils.getElWidth(document.body) - area[0]) / 2
			} else {
				if (document.body.clientHeight < area[1]) {
					that.offsetTop = 0
				} else {
					that.offsetTop = (document.body.clientHeight - area[1]) / 2
				}
				that.offsetLeft = (document.body.clientWidth - area[0]) / 2
			}
		}
		if (type) {
			that.offsetTop = config.offset[0];
			that.offsetLeft = config.offset[1] || that.offsetLeft
		} else {
			if (config.offset !== "auto") {
				if (config.offset === "t") {
					that.offsetTop = 0
				} else {
					if (config.offset === "r") {
						that.offsetLeft = win.width() - area[0]
					} else {
						if (config.offset === "b") {
							that.offsetTop = win.height() - area[1]
						} else {
							if (config.offset === "l") {
								that.offsetLeft = 0
							} else {
								if (config.offset === "lt") {
									that.offsetTop = 0;
									that.offsetLeft = 0
								} else {
									if (config.offset === "lb") {
										that.offsetTop = win.height() - area[1];
										that.offsetLeft = 0
									} else {
										if (config.offset === "rt") {
											that.offsetTop = 0;
											that.offsetLeft = win.width() - area[0]
										} else {
											if (config.offset === "rb") {
												that.offsetTop = win.height() - area[1];
												that.offsetLeft = win.width() - area[0]
											} else {
												that.offsetTop = config.offset
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (!config.fixed) {
			that.offsetTop = /%$/.test(that.offsetTop) ? win.height() * parseFloat(that.offsetTop) / 100 : parseFloat(that.offsetTop);
			that.offsetLeft = /%$/.test(that.offsetLeft) ? win.width() * parseFloat(that.offsetLeft) / 100 : parseFloat(that.offsetLeft);
			that.offsetTop += win.scrollTop();
			that.offsetLeft += win.scrollLeft()
		}
		if (SeeUtils.getAttrEl(layeroObj, "minLeft") != null) {
			that.offsetTop = win.height() - (SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0);
			that.offsetLeft = SeeUtils.getCss(layeroObj, "left")
		}
		if (typeof(config.top) != "undefined" && typeof(config.left) == "undefined") {
			SeeUtils.css(layeroObj, "top", config.top);
			SeeUtils.css(layeroObj, "left", that.offsetLeft)
		} else {
			if (typeof(config.top) != "undefined" && typeof(config.left) != "undefined") {
				SeeUtils.css(layeroObj, "top", config.top);
				SeeUtils.css(layeroObj, "left", config.left)
			} else {
				if (that.offsetTop < 0) {
					SeeUtils.css(layeroObj, "top", 0);
					SeeUtils.css(layeroObj, "left", that.offsetLeft)
				} else {
					SeeUtils.css(layeroObj, "top", that.offsetTop);
					SeeUtils.css(layeroObj, "left", that.offsetLeft)
				}
			}
		}
	};
	Class.pt.tips = function () {
		var that = this,
		config = that.config;
		var layeroObj = that.layeroObj;
		var layArea = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
		var follow = $(config.follow);
		if (!follow[0]) {
			follow = $("body")
		}
		var goal = {
			width: follow.outerWidth(),
			height: follow.outerHeight(),
			top: follow.offset().top,
			left: follow.offset().left
		};
		var tipsGObj = layeroObj.querySelector(".layui-layer-TipsG");
		var guide = config.tips[0];
		config.tips[1] || SeeUtils.removeEl(tipsGObj);
		goal.autoLeft = function () {
			if (goal.left + layArea[0] - win.width() > 0) {
				goal.tipLeft = goal.left + goal.width - layArea[0];
				SeeUtils.css(tipsGObj, "right", 12);
				SeeUtils.css(tipsGObj, "left", "auto")
			} else {
				goal.tipLeft = goal.left
			}
		};
		goal.where = [function () {
				goal.autoLeft();
				goal.tipTop = goal.top - layArea[1] - 10;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsB");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsT");
				SeeUtils.css(tipsGObj, "borderRightColor", config.tips[1])
			}, function () {
				goal.tipLeft = goal.left + goal.width + 10;
				goal.tipTop = goal.top;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsL");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsR");
				SeeUtils.css(tipsGObj, "borderBottomColor", config.tips[1])
			}, function () {
				goal.autoLeft();
				goal.tipTop = goal.top + goal.height + 10;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsT");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsB");
				SeeUtils.css(tipsGObj, "borderRightColor", config.tips[1])
			}, function () {
				goal.tipLeft = goal.left - layArea[0] - 10;
				goal.tipTop = goal.top;
				SeeUtils.removeClass(tipsGObj, "layui-layer-TipsR");
				SeeUtils.addClass(tipsGObj, "layui-layer-TipsL");
				SeeUtils.css(tipsGObj, "borderBottomColor", config.tips[1])
			}
		];
		goal.where[guide - 1]();
		if (guide === 1) {
			goal.top - (win.scrollTop() + layArea[1] + 8 * 2) < 0 && goal.where[2]()
		} else {
			if (guide === 2) {
				win.width() - (goal.left + goal.width + layArea[0] + 8 * 2) > 0 || goal.where[3]()
			} else {
				if (guide === 3) {
					(goal.top - win.scrollTop() + goal.height + layArea[1] + 8 * 2) - win.height() > 0 && goal.where[0]()
				} else {
					if (guide === 4) {
						layArea[0] + 8 * 2 - goal.left > 0 && goal.where[1]()
					}
				}
			}
		}
		SeeUtils.css(layeroObj.querySelector("." + doms[5]), "backgroundColor", config.tips[1]);
		SeeUtils.css(layeroObj.querySelector("." + doms[5]), "paddingRight", (config.closeBtn ? "30px" : ""));
		SeeUtils.css(layeroObj, "left", goal.tipLeft - (config.fixed ? win.scrollLeft() : 0));
		SeeUtils.css(layeroObj, "top", goal.tipTop - (config.fixed ? win.scrollTop() : 0))
	};
	Class.pt.move = function () {
		var that = this,
		config = that.config,
		layeroObj = that.layeroObj,
		dict = {};
		if (config.move) {
			SeeUtils.css(layeroObj.querySelector(config.move), "cursor", "move")
		}
		var dialogDOM = document.getElementById(SeeUtils.getAttrEl(layeroObj, "id"));
		if (dialogDOM.querySelector(config.move)) {
			dialogDOM.querySelector(config.move).onmousedown = function (e) {
				var ee = e || window.event;
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					if (ee != null) {
						ee.returnValue = false
					}
				} else {
					ee.preventDefault()
				}
				if (config.move) {
					dict.moveStart = true;
					dict.offset = [ee.clientX - parseFloat(SeeUtils.getCss(layeroObj, "left")), ee.clientY - parseFloat(SeeUtils.getCss(layeroObj, "top"))];
					ready.moveElem.css("cursor", "move").show()
				}
			}
		}
		if (dialogDOM.querySelector(".layui-layer-resize")) {
			dialogDOM.querySelector(".layui-layer-resize").onmousedown = function (e) {
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				dict.resizeStart = true;
				dict.offset = [e.clientX, e.clientY];
				dict.area = [SeeUtils.getOuterWidth(layeroObj), SeeUtils.getOuterHeight(layeroObj)];
				ready.moveElem.css("cursor", "se-resize").show()
			}
		}
		SeeUtils.addEvent(document, "mousemove", function (e) {
			e = e || window.event;
			if (dict.moveStart) {
				var X = e.clientX - dict.offset[0],
				Y = e.clientY - dict.offset[1],
				fixed = SeeUtils.getCss(layeroObj, "position") === "fixed";
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				dict.stX = fixed ? 0 : win.scrollLeft();
				dict.stY = fixed ? 0 : win.scrollTop();
				if (!config.moveOut) {
					var setRig = win.width() - SeeUtils.getOuterWidth(layeroObj) + dict.stX,
					setBot = win.height() - SeeUtils.getOuterHeight(layeroObj) + dict.stY;
					X < dict.stX && (X = dict.stX);
					X > setRig && (X = setRig);
					Y < dict.stY && (Y = dict.stY);
					Y > setBot && (Y = setBot)
				}
				SeeUtils.css(layeroObj, "left", X);
				SeeUtils.css(layeroObj, "top", Y)
			}
			if (config.resize && dict.resizeStart) {
				var X = e.clientX - dict.offset[0],
				Y = e.clientY - dict.offset[1];
				if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
					e.returnValue = false
				} else {
					e.preventDefault()
				}
				layer.style(config.zIndex, {
					width: dict.area[0] + X,
					height: dict.area[1] + Y
				});
				dict.isResize = true
			}
		});
		SeeUtils.addEvent(document, "mouseup", function (e) {
			if (dict.moveStart) {
				delete dict.moveStart;
				ready.moveElem.hide();
				config.moveEnd && config.moveEnd()
			}
			if (dict.resizeStart) {
				delete dict.resizeStart;
				ready.moveElem.hide()
			}
		});
		that = null;
		return this
	};
	Class.pt.callback = function () {
		var that = this,
		layero = that.layero,
		layeroObj = that.layeroObj,
		config = that.config;
		that.openLayer();
		if (config.success) {
			if (config.type == 2) {
				layero.find("iframe").on("load", function () {
					config.success(layero, that.index)
				})
			} else {
				config.success(layero, that.index)
			}
		}
		var dialogDOM = document.getElementById(SeeUtils.getAttrEl(layeroObj, "id"));
		winBtnClickName = "dialogWinBtnClick" + that.index;
		if (dialogDOM.querySelector("." + doms[6]) && dialogDOM.querySelector("." + doms[6]).querySelector("a")) {
			window[winBtnClickName] = function (e, t) {
				if ($(t).attr("disableattr") != "true") {
					var index = $(t).index();
					if (index === 0) {
						if (config.yes) {
							config.yes(that.index, layero)
						} else {
							if (config.btn1) {
								config.btn1(that.index, layero)
							} else {
								layer.close(that.index)
							}
						}
					} else {
						var close = config["btn" + (index + 1)] && config["btn" + (index + 1)](that.index, layero)
					}
				}
			}
		}
		function cancel() {
			var close = config.cancel && config.cancel(that.index, layero);
			close === false || layer.close(that.index)
		}
		if (dialogDOM.querySelector("." + doms[7])) {
			dialogDOM.querySelector("." + doms[7]).onclick = cancel
		}
		if (config.shadeClose) {
			document.getElementById("layui-layer-shade" + that.index).onclick = function () {
				layer.close(that.index)
			}
		}
		if (layeroObj.querySelector(".layui-layer-min") != null) {
			dialogDOM.querySelector(".layui-layer-min").onclick = function () {
				var min = config.min && config.min(layero);
				min === false || layer.min(that.index, config)
			}
		}
		if (layeroObj.querySelector(".layui-layer-max") != null) {
			dialogDOM.querySelector(".layui-layer-max").onclick = function () {
				if ($(this).hasClass("layui-layer-maxmin")) {
					layer.restore(that.index);
					config.restore && config.restore(layero)
				} else {
					layer.full(that.index, config);
					setTimeout(function () {
						config.full && config.full(layero)
					}, 100)
				}
			}
		}
		config.end && (ready.end[that.index] = config.end)
	};
	ready.reselect = function () {
		SeeUtils.eachByTag(document, "select", function (elObj) {
			if (SeeUtils.closestByClass(elObj, "." + doms[0]) != null) {
				(SeeUtils.getAttrEl(elObj, "layer") == 1) && (SeeUtils.getByClass("." + doms[0]).length < 1) && SeeUtils.removeAttrEl(elObj, "layer") && SeeUtils.showEl(elObj)
			}
		})
	};
	Class.pt.IE6 = function (layero) {
		SeeUtils.eachByTag(document, "select", function (elObj) {
			if (SeeUtils.closestByClass(elObj, "." + doms[0]) != null) {
				SeeUtils.getCss(elObj, "display") === "none" || SeeUtils.hideEl(elObj);
				SeeUtils.attrEl(elObj, "layer", "1")
			}
		})
	};
	Class.pt.openLayer = function () {
		var that = this;
		layer.zIndex = that.config.zIndex;
		layer.setTop = function (layero) {
			var setZindex = function () {
				layer.zIndex++;
				layero.css("z-index", layer.zIndex + 1)
			};
			layer.zIndex = parseInt(layero[0].style.zIndex);
			layero.on("mousedown", setZindex);
			return layer.zIndex
		}
	};
	Class.pt.ifMax = function () {
		var that = this;
		var _w_window = that.config.targetWindow.document.body.clientWidth - 40;
		var _h_window = that.config.targetWindow.document.documentElement.clientHeight - 80;
		var _w_temp = that.config.area[0].split("px")[0];
		var _h_temp = that.config.area[1].split("px")[0];
		that.config.area[0] = _w_temp > _w_window ? _w_window : _w_temp;
		that.config.area[1] = _h_temp > _h_window ? _h_window : _h_temp;
		if (that.config.area[0] <= 0) {
			that.config.area[0] = _w_temp + "px"
		} else {
			that.config.area[0] = that.config.area[0] + "px"
		}
		if (that.config.area[1] <= 0) {
			that.config.area[1] = _h_temp + "px"
		} else {
			that.config.area[1] = that.config.area[1] + "px"
		}
	};
	Class.pt.officeAction = function (flag) {
		var that = this;
		var _officeIframeId = ["officeFrameDiv", "zwIframe", "mainbodyFrame"];
		var _findWindow = getCtpTop();
		var componentDiv = SeeUtils.getElObj("componentDiv");
		if (componentDiv != null) {
			try {
				_findWindow = componentDiv.contentWindow.document.getElementById("zwIframe").contentWindow
			} catch (e) {}
		} else {
			if (getCtpTop().isOffice == true && SeeUtils.getCss("zwOfficeIframe", "display") == "block") {
				try {
					_findWindow = getCtpTop().document.getElementById("zwOfficeIframe").contentWindow
				} catch (e) {}
			}
		}
		if (_findWindow.$) {
			for (var i = 0; i < _officeIframeId.length; i++) {
				var _tempid = _officeIframeId[i];
				var _obj = _findWindow.$("#" + _tempid);
				if (_obj && _obj.size() > 0) {
					that.officeIframe = _obj;
					break
				}
			}
		}
		that.qianzhangIframe = $("[classid='clsid:2294689C-9EDF-40BC-86AE-0438112CA439']");
		DialogOfficeObj.qianzhangIframe = that.qianzhangIframe;
		DialogOfficeObj.officeIframe = that.officeIframe;
		if (!flag) {
			DialogOfficeObj.hideOfficeObj()
		} else {
			DialogOfficeObj.showOfficeObj()
		}
	};
	var DialogOfficeObj = {
		officeIframe: {
			size: function () {
				return 0
			}
		},
		qianzhangIframe: {
			size: function () {
				return 0
			}
		},
		hideOfficeObjExt: function () {
			try {
				var _tpWin = getA8Top();
				var isOffice = _tpWin.isOffice;
				if ((typeof isOffice == "undefined") || (isOffice == false)) {
					return false
				}
			} catch (e) {}
			return true
		},
		showOfficeObjExt: function () {
			try {
				var _tpWin = getA8Top();
				var isOffice = _tpWin.isOffice;
				if ((typeof isOffice == "undefined") || (isOffice == false)) {
					return false
				}
			} catch (e) {}
			return true
		},
		hideOfficeObj: function () {
			var ua = navigator.userAgent.toLowerCase();
			var isOpera = (ua.indexOf("opera") != -1);
			var isIE = SeeUtils.isIE;
			if (isIE) {
				if (!DialogOfficeObj.hideOfficeObjExt()) {
					return
				}
			}
			if (window.hideOfficeObj) {
				hideOfficeObj()
			}
		},
		showOfficeObj: function () {
			var dialog = __getIframeDialogNumbers();
			if (dialog.length != 0) {
				return
			}
			var ua = navigator.userAgent.toLowerCase();
			var isOpera = (ua.indexOf("opera") != -1);
			var isIE = SeeUtils.isIE;
			if (isIE) {
				if (!DialogOfficeObj.showOfficeObjExt()) {
					return
				}
			}
			if (window.showOfficeObj) {
				showOfficeObj()
			}
		}
	};
	ready.recordByObj = function (layeroObj) {
		var area = [SeeUtils.getElWidth(layeroObj), SeeUtils.getElHeight(layeroObj), $(layeroObj).position().top, $(layeroObj).position().left + parseFloat(SeeUtils.getCss(layeroObj, "marginLeft"))];
		SeeUtils.addClass(layeroObj.querySelector(".layui-layer-max"), "layui-layer-maxmin");
		SeeUtils.attrEl(layeroObj, "area", area.join(","))
	};
	ready.record = function (layero) {
		var area = [layero.width(), layero.height(), layero.position().top, layero.position().left + parseFloat(layero.css("margin-left"))];
		layero.find(".layui-layer-max").addClass("layui-layer-maxmin");
		layero.attr({
			area: area
		})
	};
	ready.rescollbar = function (index) {
		if (doms.html.attr("layer-full") == index) {
			if (doms.html[0].style.removeProperty) {
				doms.html[0].style.removeProperty("overflow")
			} else {
				doms.html[0].style.removeAttribute("overflow")
			}
			doms.html.removeAttr("layer-full")
		}
	};
	window.layer = layer;
	layer.getChildFrame = function (selector, index) {
		index = index || SeeUtils.getAttrEl(document.querySelector("." + doms[4]), "times");
		return $("#" + doms[0] + index).find("iframe").contents().find(selector)
	};
	layer.getFrameIndex = function (name) {
		return $("#" + name).parents("." + doms[4]).attr("times")
	};
	layer.iframeAuto = function (index) {
		if (!index) {
			return
		}
		var heg = layer.getChildFrame("html", index).outerHeight();
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0;
		var btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0;
		SeeUtils.setElHeight(layeroObj, "height", heg + titHeight + btnHeight);
		SeeUtils.eachByTag(layeroObj, "iframe", function (elObj) {
			SeeUtils.setElHeight(elObj, heg)
		})
	};
	layer.iframeSrc = function (index, url) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByTag(layeroObj, "iframe", function (elObj) {
			SeeUtils.attrEl(elObj, "src", url)
		})
	};
	layer.style = function (index, options, limit) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type"),
		titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0,
		btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6])) || 0,
		minLeft = SeeUtils.getAttrEl(layeroObj, "minLeft");
		if (type === ready.type[3] || type === ready.type[4]) {
			return
		}
		if (!limit) {
			if (parseFloat(options.width) <= 260) {
				options.width = 260
			}
			if (parseFloat(options.height) - titHeight - btnHeight <= 64) {
				options.height = 64 + titHeight + btnHeight
			}
		}
		SeeUtils.cssByJson(layeroObj, options);
		btnHeight = SeeUtils.getOuterHeight(layeroObj.querySelector("." + doms[6]));
		var contElemObj = layeroObj.querySelector(".layui-layer-content");
		if (type === ready.type[2]) {
			SeeUtils.setElHeight(layeroObj.querySelector("iframe"), parseFloat(options.height) - titHeight - btnHeight)
		} else {
			SeeUtils.setElHeight(contElemObj, parseFloat(options.height) - titHeight - btnHeight - parseFloat(SeeUtils.getCss(contElemObj, "paddingTop")) - parseFloat(SeeUtils.getCss(contElemObj, "paddingBottom")))
		}
		if (SeeUtils.getElObj("layui-layer-shade-next" + index) != null) {
			SeeUtils.removeEl("layui-layer-shade-next" + index)
		}
	};
	layer.min = function (index, options) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var titHeight = SeeUtils.getOuterHeight(layeroObj.querySelector(doms[1])) || 0,
		left = SeeUtils.getCss(layeroObj, "minLeft") || (181 * ready.minIndex) + "px",
		position = SeeUtils.getCss(layeroObj, "position");
		ready.recordByObj(layeroObj);
		if (ready.minLeft[0]) {
			left = ready.minLeft[0];
			ready.minLeft.shift()
		}
		SeeUtils.attrEl(layeroObj, "position", position);
		layer.style(index, {
			width: 180,
			height: titHeight,
			left: left,
			top: win.height() - titHeight,
			position: "fixed",
			overflow: "hidden"
		}, true);
		SeeUtils.hideEl(layeroObj.querySelector(".layui-layer-min"));
		SeeUtils.getAttrEl(layeroObj, "type") === "page" && SeeUtils.hideEl(layeroObj.querySelector(doms[4]));
		ready.rescollbar(index);
		if (!SeeUtils.getAttrEl(layeroObj, "minLeft")) {
			ready.minIndex++
		}
		SeeUtils.attrEl(layeroObj, "minLeft", left)
	};
	layer.restore = function (index) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var area = SeeUtils.getAttrEl(layeroObj, "area").split(",");
		layer.style(index, {
			width: parseFloat(area[0]),
			height: parseFloat(area[1]),
			top: parseFloat(area[2]),
			left: parseFloat(area[3]),
			position: SeeUtils.getAttrEl(layeroObj, "position"),
			overflow: "visible"
		}, true);
		SeeUtils.removeClass(layeroObj.querySelector(".layui-layer-max"));
		SeeUtils.showEl(layeroObj.querySelector(".layui-layer-min"));
		SeeUtils.getAttrEl(layeroObj, "type") === "page" && SeeUtils.showEl(layeroObj.querySelector(doms[4]));
		ready.rescollbar(index)
	};
	layer.full = function (index) {
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		ready.recordByObj(layeroObj);
		if (!doms.html.attr("layer-full")) {
			doms.html.css("overflow", "hidden").attr("layer-full", index)
		}
		clearTimeout(timer);
		timer = setTimeout(function () {
				var isfix = SeeUtils.getCss(layeroObj, "position") === "fixed";
				layer.style(index, {
					top: isfix ? 0 : win.scrollTop(),
					left: isfix ? 0 : win.scrollLeft(),
					width: win.width(),
					height: win.height()
				}, true);
				SeeUtils.hideEl(layeroObj.querySelector(".layui-layer-min"))
			}, 0)
	};
	layer.title = function (name, index) {
		SeeUtils.getElObj(doms[0] + (index || layer.index)).querySelector(doms[1]).innerHTML = name
	};
	layer.close = function (index) {
		if (!index || typeof index != "number") {
			var tempLastChild = layer.getBodyLastChild();
			if (tempLastChild && tempLastChild.nodeType == 1) {
				index = tempLastChild.getAttribute("times")
			} else {
				return
			}
		}
		var layero = $("#" + doms[0] + index),
		closeAnim = "layer-anim-close";
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type");
		if (layeroObj == null) {
			return
		}
		if (layero.data("anim")) {
			SeeUtils.addClass(layeroObj, closeAnim)
		}
		SeeUtils.removeEl("layui-layer-moves");
		SeeUtils.removeEl("layui-layer-shade" + index);
		ready.rescollbar(index);
		var minLeft = SeeUtils.getAttrEl(layeroObj, "minLeft");
		if (minLeft != null) {
			ready.minIndex--;
			ready.minLeft.push(minLeft)
		}
		layer.remove(index);
		if ($(".layui-layer").length > 0 || $(".dialog_main").length > 0) {
			return void(0)
		}
		Class.pt.officeAction(true)
	};
	layer.remove = function (index) {
		var layero = $("#" + doms[0] + index);
		var layeroObj = SeeUtils.getElObj(doms[0] + index);
		var type = SeeUtils.getAttrEl(layeroObj, "type");
		var WRAP = "layui-layer-wrap";
		if (type === ready.type[1] && SeeUtils.getAttrEl(layeroObj, "conType") === "object") {
			layero.children(":not(." + doms[5] + ")").remove();
			var wrap = layero.find("." + WRAP);
			if (wrap.length) {
				for (var i = 0; i < 2; i++) {
					wrap.unwrap()
				}
				wrap.css("display", wrap.data("display")).removeClass(WRAP)
			} else {
				layeroObj.innerHTML = "";
				SeeUtils.removeEl(layeroObj)
			}
		} else {
			_clearIframeContent(type, ready, index, layeroObj);
			layeroObj.innerHTML = "";
			SeeUtils.removeEl(layeroObj)
		}
		typeof ready.end[index] === "function" && ready.end[index]();
		delete ready.end[index]
	};
	layer.closeAll = function (type) {
		SeeUtils.eachByClass(document, "layui-layer", function (elObj) {
			var is = type ? (SeeUtils.getAttrEl(elObj, "type") === type) : 1;
			is && layer.close(SeeUtils.getAttrEl(elObj, "times"));
			is = null
		})
	};
	layer.getReturnValue = function (json) {
		if (json == null) {
			json = {}
		}
		var win = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector("iframe");
		var win_notCopyReturnValue = layer.getBodyLastChild().getAttribute("notcopyreturnvalue");
		if (win != null) {
			var returnValues = null;
			if (win.contentWindow && typeof(win.contentWindow.OK) == "function") {
				returnValues = win.contentWindow.OK(json)
			} else {
				return null
			}
			if (win_notCopyReturnValue == "false") {
				if (returnValues && typeof returnValues == "object") {
					try {
						var returnValueString = $.toJSON(returnValues);
						return $.parseJSON(returnValueString)
					} catch (e) {
						return returnValues
					}
				} else {
					return returnValues
				}
			} else {
				return returnValues
			}
		} else {
			return null
		}
	};
	layer.hideDialog = function (winObj) {
		var lastBodyChild = layer.getBodyLastChild();
		if (winObj != null && lastBodyChild != null && lastBodyChild.getAttribute != null) {
			var lastLayId = lastBodyChild.getAttribute("id");
			if (lastLayId != winObj.attr("id")) {
				return false
			}
		}
		if (lastBodyChild && lastBodyChild.nodeType == 1) {
			var winIframe = SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times")).querySelector("iframe");
			winIframe.setAttribute("src", "");
			var winShade = SeeUtils.getElObj("layui-layer-shade" + lastBodyChild.getAttribute("times"));
			SeeUtils.hideEl(winShade);
			var win = SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times"));
			SeeUtils.hideEl(win);
			layer.close()
		}
		return true
	};
	layer.getTransParams = function () {
		var lastBodyChild = layer.getBodyLastChild();
		return SeeUtils.getElObj(doms[0] + lastBodyChild.getAttribute("times")).querySelector("iframe").contentWindow.transParamsCopy
	};
	layer.getBodyLastChild = function () {
		var lastDivChild = document.body.lastChild;
		var oldLastDivChild;
		for (var i = (layer.ie <= 8 ? document.body.childNodes.length : document.body.children.length); i > 0; i--) {
			if (lastDivChild != null) {
				if (lastDivChild.nodeType == 1 && lastDivChild.nodeName == "DIV" && lastDivChild.getAttribute("layType")) {
					break
				} else {
					oldLastDivChild = lastDivChild;
					lastDivChild = lastDivChild.previousElementSibling;
					if (!lastDivChild) {
						lastDivChild = oldLastDivChild.previousSibling
					}
				}
			} else {
				return lastDivChild
			}
		}
		return lastDivChild
	};
	layer.enabledBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			btnEl.removeAttribute("disabled");
			SeeUtils.attrEl(btnEl, "disableAttr", "false");
			SeeUtils.removeClass(btnEl, "common_button_disable")
		}
	};
	layer.disabledBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.attrEl(btnEl, "disabled", "disabled");
			SeeUtils.attrEl(btnEl, "disableAttr", "true");
			SeeUtils.addClass(btnEl, "common_button_disable")
		}
	};
	layer.getObjectById = function (id) {
		return $("#" + id)
	};
	layer.getObjectByClass = function (className) {
		return $("." + className)
	};
	layer.maxfn = function () {
		layer.full(layer.getBodyLastChild().getAttribute("times"))
	};
	layer.hideBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.hideEl(btnEl)
		}
	};
	layer.showBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.showEl(btnEl)
		}
	};
	layer.getBtnObj = function (id) {
		for (var i = 0; i < SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-btn").children.length; i++) {
			var jsonTemp = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-btn").children[i];
			if (SeeUtils.getAttrEl(jsonTemp, "id") == "layui-layer-btn-" + id) {
				return jsonTemp
			}
		}
		return null
	};
	layer.getBtn = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			return $(btnEl)
		}
		return null
	};
	layer.reSize = function (json) {
		var _client_width = document.body.clientWidth;
		var _client_Height = document.body.clientHeight;
		if (json.cHeight) {
			_client_Height = json.cHeight
		}
		if (json.cWidth) {
			_client_width = json.cWidth
		}
		var _w = json.width;
		var _h = json.height;
		var _left = (_client_width - (_w + 5)) / 2;
		var _top = (_client_Height - (_h + 15 + 5)) / 2;
		if (_top < 0) {
			_top = 0
		}
		if ((_h + _top) > _client_Height) {
			_h = _client_Height - _top - 30
		}
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		if (SeeUtils.getElObj(doms[0] + index).querySelectorAll("." + doms[6]).length) {
			SeeUtils.css(layerObj, "left", _left);
			SeeUtils.css(layerObj, "top", _top);
			SeeUtils.setElHeight(layerObj, _h + 105);
			SeeUtils.setElWidth(layerObj, _w)
		} else {
			SeeUtils.css(layerObj, "left", _left);
			SeeUtils.css(layerObj, "top", _top);
			SeeUtils.setElHeight(layerObj, _h + 55);
			SeeUtils.setElWidth(layerObj, _w)
		}
		var layerContent = SeeUtils.getElObj(doms[0] + index).querySelector("." + doms[5]);
		SeeUtils.eachChildren(layerContent, function (elObj) {
			SeeUtils.setElHeight(elObj, _h)
		})
	};
	layer.startLoading = function () {
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByClass(layerObj, "iframe_shadow", function (elObj) {
			SeeUtils.showEl(elObj)
		})
	};
	layer.endLoading = function () {
		var index = layer.getBodyLastChild().getAttribute("times");
		var layerObj = SeeUtils.getElObj(doms[0] + index);
		SeeUtils.eachByClass(layerObj, "iframe_shadow", function (elObj) {
			SeeUtils.hideEl(elObj)
		})
	};
	layer.setBtnEmphasize = function (id) {
		var btnEl = this.getBtnObj(id);
		if (btnEl != null) {
			SeeUtils.addClass(btnEl, "common_button_emphasize");
			SeeUtils.removeClass(btnEl, "common_button_gray")
		}
	};
	layer.setTitle = function (newtitle) {
		SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector(".layui-layer-title").innerHTML = newtitle
	};
	layer.getClose = function (json) {
		if (json == null) {
			json = {}
		}
		var win = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times")).querySelector("iframe");
		if (win != null) {
			var returnValues = null;
			if (win.contentWindow) {
				returnValues = win.contentWindow.CLOSE(json)
			} else {
				returnValues = win.CLOSE(json)
			}
			if (returnValues && typeof returnValues == "object") {
				try {
					var returnValueString = $.toJSON(returnValues);
					return $.parseJSON(returnValueString)
				} catch (e) {
					return returnValues
				}
			} else {
				return returnValues
			}
		} else {
			return null
		}
	};
	layer.getDialogWindow = function (index) {
		var currentLayer;
		if (index) {
			currentLayer = SeeUtils.getElObj(doms[0] + index);
			if (currentLayer && currentLayer.querySelector("iframe")) {
				return currentLayer.querySelector("iframe").contentWindow
			} else {
				return null
			}
		} else {
			currentLayer = SeeUtils.getElObj(doms[0] + layer.getBodyLastChild().getAttribute("times"));
			if (currentLayer && currentLayer.querySelector("iframe")) {
				return currentLayer.querySelector("iframe").contentWindow
			} else {
				return null
			}
		}
	};
	var cache = layer.cache || {},
	skin = function (type) {
		return (cache.skin ? (" " + cache.skin + " " + cache.skin + "-" + type) : "")
	};
	layer.prompt = function (options, yes) {
		var style = "";
		options = options || {};
		if (typeof options === "function") {
			yes = options
		}
		if (options.area) {
			var area = options.area;
			style = 'style="width: ' + area[0] + "; height: " + area[1] + ';"';
			delete options.area
		}
		var prompt,
		content = options.formType == 2 ? '<textarea class="layui-layer-input"' + style + ">" + (options.value || "") + "</textarea>" : function () {
			return '<input type="' + (options.formType == 1 ? "password" : "text") + '" class="layui-layer-input" value="' + (options.value || "") + '">'
		}
		();
		return layer.open($.extend({
				type: 1,
				btn: ["&#x786E;&#x5B9A;", "&#x53D6;&#x6D88;"],
				content: content,
				skin: "layui-layer-prompt" + skin("prompt"),
				maxWidth: win.width(),
				success: function (layero) {
					prompt = layero.find(".layui-layer-input");
					prompt.focus()
				},
				resize: false,
				yes: function (index) {
					var value = prompt.val();
					if (value === "") {
						prompt.focus()
					} else {
						if (value.length > (options.maxlength || 500)) {
							layer.tips("&#x6700;&#x591A;&#x8F93;&#x5165;" + (options.maxlength || 500) + "&#x4E2A;&#x5B57;&#x6570;", prompt, {
								tips: 1
							})
						} else {
							yes && yes(value, index, prompt)
						}
					}
				}
			}, options))
	};
	layer.tab = function (options) {
		options = options || {};
		var tab = options.tab || {};
		return layer.open($.extend({
				type: 1,
				skin: "layui-layer-tab" + skin("tab"),
				resize: false,
				title: function () {
					var len = tab.length,
					ii = 1,
					str = "";
					if (len > 0) {
						str = '<span class="layui-layer-tabnow">' + tab[0].title + "</span>";
						for (; ii < len; ii++) {
							str += "<span>" + tab[ii].title + "</span>"
						}
					}
					return str
				}
				(),
				content: '<ul class="layui-layer-tabmain">' + function () {
					var len = tab.length,
					ii = 1,
					str = "";
					if (len > 0) {
						str = '<li class="layui-layer-tabli xubox_tab_layer">' + (tab[0].content || "no content") + "</li>";
						for (; ii < len; ii++) {
							str += '<li class="layui-layer-tabli">' + (tab[ii].content || "no  content") + "</li>"
						}
					}
					return str
				}
				() + "</ul>",
				success: function (layero) {
					var btn = layero.find(".layui-layer-title").children();
					var main = layero.find(".layui-layer-tabmain").children();
					btn.on("mousedown", function (e) {
						e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
						var othis = $(this),
						index = othis.index();
						othis.addClass("layui-layer-tabnow").siblings().removeClass("layui-layer-tabnow");
						main.eq(index).show().siblings().hide();
						typeof options.change === "function" && options.change(index)
					})
				}
			}, options))
	};
	layer.photos = function (options, loop, key) {
		var dict = {};
		options = options || {};
		if (!options.photos) {
			return
		}
		var type = options.photos.constructor === Object;
		var photos = type ? options.photos : {},
		data = photos.data || [];
		var start = photos.start || 0;
		dict.imgIndex = (start | 0) + 1;
		options.img = options.img || "img";
		if (!type) {
			var parent = $(options.photos),
			pushData = function () {
				data = [];
				parent.find(options.img).each(function (index) {
					var othis = $(this);
					othis.attr("layer-index", index);
					data.push({
						alt: othis.attr("alt"),
						pid: othis.attr("layer-pid"),
						src: othis.attr("layer-src") || othis.attr("src"),
						thumb: othis.attr("src")
					})
				})
			};
			pushData();
			if (data.length === 0) {
				return
			}
			loop || parent.on("click", options.img, function () {
				var othis = $(this),
				index = othis.attr("layer-index");
				layer.photos($.extend(options, {
						photos: {
							start: index,
							data: data,
							tab: options.tab
						},
						full: options.full
					}), true);
				pushData()
			});
			if (!loop) {
				return
			}
		} else {
			if (data.length === 0) {
				return layer.msg("&#x6CA1;&#x6709;&#x56FE;&#x7247;")
			}
		}
		dict.imgprev = function (key) {
			dict.imgIndex--;
			if (dict.imgIndex < 1) {
				dict.imgIndex = data.length
			}
			dict.tabimg(key)
		};
		dict.imgnext = function (key, errorMsg) {
			dict.imgIndex++;
			if (dict.imgIndex > data.length) {
				dict.imgIndex = 1;
				if (errorMsg) {
					return
				}
			}
			dict.tabimg(key)
		};
		dict.keyup = function (event) {
			if (!dict.end) {
				var code = event.keyCode;
				event.preventDefault();
				if (code === 37) {
					dict.imgprev(true)
				} else {
					if (code === 39) {
						dict.imgnext(true)
					} else {
						if (code === 27) {
							layer.close(dict.index)
						}
					}
				}
			}
		};
		dict.tabimg = function (key) {
			if (data.length <= 1) {
				return
			}
			photos.start = dict.imgIndex - 1;
			layer.close(dict.index);
			layer.photos(options, true, key)
		};
		dict.event = function () {
			dict.bigimg.hover(function () {
				dict.imgsee.show()
			}, function () {
				dict.imgsee.hide()
			});
			dict.bigimg.find(".layui-layer-imgprev").on("click", function (event) {
				event.preventDefault();
				dict.imgprev()
			});
			dict.bigimg.find(".layui-layer-imgnext").on("click", function (event) {
				event.preventDefault();
				dict.imgnext()
			});
			SeeUtils.addEvent(document, "keyup", dict.keyup)
		};
		function loadImage(url, callback, error) {
			var img = new Image();
			img.src = url;
			if (img.complete) {
				return callback(img)
			}
			img.onload = function () {
				img.onload = null;
				callback(img)
			};
			img.onerror = function (e) {
				img.onerror = null;
				error(e)
			}
		}
		dict.loadi = layer.load(1, {
				shade: "shade" in options ? false : 0.9,
				scrollbar: false
			});
		loadImage(data[start].src, function (img) {
			layer.close(dict.loadi);
			dict.index = layer.open($.extend({
						type: 1,
						area: function () {
							var imgarea = [img.width, img.height];
							var winarea = [$(window).width() - 100, $(window).height() - 100];
							if (!options.full && (imgarea[0] > winarea[0] || imgarea[1] > winarea[1])) {
								var wh = [imgarea[0] / winarea[0], imgarea[1] / winarea[1]];
								if (wh[0] > wh[1]) {
									imgarea[0] = imgarea[0] / wh[0];
									imgarea[1] = imgarea[1] / wh[0]
								} else {
									if (wh[0] < wh[1]) {
										imgarea[0] = imgarea[0] / wh[1];
										imgarea[1] = imgarea[1] / wh[1]
									}
								}
							}
							return [imgarea[0] + "px", imgarea[1] + "px"]
						}
						(),
						title: false,
						shade: 0.9,
						shadeClose: true,
						closeBtn: false,
						move: ".layui-layer-phimg img",
						moveType: 1,
						scrollbar: false,
						moveOut: true,
						anim: Math.random() * 5 | 0,
						skin: "layui-layer-photos" + skin("photos"),
						content: '<div class="layui-layer-phimg"><img src="' + data[start].src + '" alt="' + (data[start].alt || "") + '" layer-pid="' + data[start].pid + '"><div class="layui-layer-imgsee">' + (data.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : "") + '<div class="layui-layer-imgbar" style="display:' + (key ? "block" : "") + '"><span class="layui-layer-imgtit"><a href="javascript:;">' + (data[start].alt || "") + "</a><em>" + dict.imgIndex + "/" + data.length + "</em></span></div></div></div>",
						success: function (layero, index) {
							dict.bigimg = layero.find(".layui-layer-phimg");
							dict.imgsee = layero.find(".layui-layer-imguide,.layui-layer-imgbar");
							dict.event(layero);
							options.tab && options.tab(data[start], layero)
						},
						end: function () {
							dict.end = true;
							SeeUtils.removeEvent("keyup", dict.keyup)
						}
					}, options))
		}, function () {
			layer.close(dict.loadi);
			layer.msg("&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;", {
				time: 30000,
				btn: ["&#x4E0B;&#x4E00;&#x5F20;", "&#x4E0D;&#x770B;&#x4E86;"],
				yes: function () {
					data.length > 1 && dict.imgnext(true, true)
				}
			})
		})
	};
	ready.run = function (_$) {
		$ = _$;
		win = $(window);
		doms.html = $("html");
		layer.open = function (deliver) {
			var _options = {
				id: "",
				type: 1,
				title: "",
				area: new Array(),
				content: "",
				transParams: {},
				btn: "",
				bottomHTML: "",
				layerFrom: "dialog"
			};
			if (!deliver.url && !deliver.html && !deliver.htmlId) {
				_options.content = deliver.content;
				_options.type = 0
			}
			if (deliver.url) {
				_options.type = 2;
				var url = deliver.url;
				if (url.indexOf("CSRFTOKEN=") < 0) {
					url = url + CsrfGuard.getUrlSurffix(url)
				}
				_options.content = url
			}
			if (deliver.html) {
				_options.content = deliver.html
			}
			if (deliver.time) {
				_options.time = deliver.time;
				if (deliver.showTime) {
					_options.showTime = deliver.showTime;
					_options.showTimeFun = deliver.showTimeFun
				}
			}
			if (deliver.id) {
				_options.id = deliver.id;
				layer.id = _options.id
			}
			if (!deliver.isDrag) {
				_options.move = deliver.isDrag;
				_options.moveOut = deliver.isDrag
			}
			_options.title = deliver.title;
			_options.area.push(deliver.width + "px");
			_options.area.push(deliver.height + "px");
			if (deliver.maxParam) {
				if (deliver.maxParam.show) {
					_options.maxmin = true;
					if (deliver.maxParam.handler) {
						_options.full = deliver.maxParam.handler
					}
				}
			}
			if (deliver.minParam) {
				if (deliver.minParam.show) {
					_options.maxmin = true;
					if (deliver.minParam.handler) {
						_options.min = deliver.minParam.handler
					}
				}
			}
			if (deliver.closeParam) {
				if (deliver.closeParam.show) {
					_options.cancel = deliver.closeParam.handler
				} else {
					_options.closeBtn = 0
				}
			}
			_options.targetWindow = deliver.targetWindow || getCtpTop();
			_options.transParams = deliver.transParams;
			if (deliver.buttons) {
				_options.btn = new Array();
				_options.btnId = new Array();
				_options.btnIsEmphasize = new Array();
				_options.btnDisabled = new Array();
				_options.btnHide = new Array();
				for (var i = 1; i <= deliver.buttons.length; i++) {
					_options.btn.push(deliver.buttons[i - 1].text);
					if (deliver.buttons[i - 1].id) {
						_options.btnId.push(deliver.buttons[i - 1].id)
					} else {
						_options.btnId.push(Math.floor(Math.random() * 100000000) + "_btn")
					}
					if (i == 1) {
						_options.btnIsEmphasize.push(true)
					} else {
						if (deliver.buttons[i - 1].isEmphasize) {
							_options.btnIsEmphasize.push(deliver.buttons[i - 1].isEmphasize)
						} else {
							_options.btnIsEmphasize.push(false)
						}
					}
					if (deliver.buttons[i - 1].disabled) {
						_options.btnDisabled.push(deliver.buttons[i - 1].disabled)
					} else {
						_options.btnDisabled.push(false)
					}
					if (deliver.buttons[i - 1].hide) {
						_options.btnHide.push(deliver.buttons[i - 1].hide)
					} else {
						_options.btnHide.push(false)
					}
					var key = "btn" + i;
					_options[key] = deliver.buttons[i - 1].handler;
					if (deliver.buttons[i - 1].OKFN) {
						layer.buttons = deliver.buttons
					}
				}
			}
			if (deliver.bottomHTML) {
				_options.bottomHTML = deliver.bottomHTML
			}
			if (deliver.isHead != undefined && deliver.isHead == false) {
				_options.title = false;
				_options.closeBtn = 0
			}
			if (!(deliver.url) && !(deliver.type) && deliver.htmlId) {
				_options.content = deliver.contentCopyWindow.$("#" + deliver.htmlId);
				var htmlObj = deliver.contentCopyWindow.$("#" + deliver.htmlId).clone(true);
				deliver.contentCopyWindow.$("#" + deliver.htmlId).after('<div id="' + deliver.htmlId + '_area"></div>');
				deliver.contentCopyWindow.$("#" + deliver.htmlId + "_area").after(htmlObj);
				deliver.contentCopyWindow.$("#" + deliver.htmlId + "_area").remove()
			}
			if (deliver.type == "panel" && deliver.htmlId) {
				if (deliver.timeout) {
					_options.timeout = deliver.timeout
				}
				_options.type = 1;
				_options.nameType = deliver.type;
				_options.content = deliver.contentCopyWindow.$("#" + deliver.htmlId);
				_options.title = false;
				_options.closeBtn = 0;
				if (deliver.top) {
					if (deliver.targetId) {
						var tarobj = document.getElementById(deliver.targetId);
						var _client_height = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
						_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + document.documentElement.scrollTop;
						_options.top = _options.top + deliver.height < _client_height ? _options.top : (_options.top - deliver.height - tarobj.offsetHeight < 0 ? 0 : _options.top - deliver.height - tarobj.offsetHeight)
					} else {
						if (deliver.w_space) {
							var _client_height = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
							_options.top = deliver.top + deliver.height < _client_height ? (deliver.top + 15) : (deliver.top - deliver.height < 0 ? 0 : deliver.top - deliver.height - 15)
						} else {
							_options.top = deliver.top
						}
					}
				}
				if (deliver.left) {
					if (deliver.targetId) {
						var tarobj = document.getElementById(deliver.targetId);
						var leftTemp = tarobj.getBoundingClientRect().left;
						if ((leftTemp + deliver.width) > document.body.clientWidth) {
							leftTemp = leftTemp + tarobj.clientWidth - deliver.width
						}
						_options.left = leftTemp + deliver.width < document.body.clientWidth ? leftTemp : leftTemp - deliver.width - tarobj.offsetWidth
					} else {
						if (deliver.w_space) {
							var _client_width = document.body.clientWidth;
							_options.left = deliver.left + deliver.width < _client_width ? deliver.left + deliver.w_space : (deliver.left - deliver.width - deliver.w_space < 0 ? deliver.w_space : deliver.left - deliver.width - deliver.w_space)
						} else {
							_options.left = deliver.left
						}
					}
				}
				if (deliver.shadow == false) {
					_options.shade = 0
				}
			}
			if (deliver.type == "panel" && deliver.html) {
				_options.title = false;
				_options.shade = 0;
				_options.closeBtn = 0;
				_options.top = deliver.top
			}
			if (deliver.type == "panel" && deliver.targetId && deliver.url) {
				var tarobj = document.getElementById(deliver.targetId);
				_options.closeBtn = false;
				_options.title = false;
				_options.shade = false;
				_options.resize = false;
				_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + deliver.height < document.body.clientHeight ? tarobj.getBoundingClientRect().top + tarobj.offsetHeight : ((document.body.clientHeight - deliver.height) < 0 ? 0 : document.body.clientHeight - deliver.height - 5);
				if (_options.top < tarobj.getBoundingClientRect().bottom) {
					_options.top = _options.top - (document.body.clientHeight - tarobj.getBoundingClientRect().bottom + tarobj.offsetHeight)
				}
				_options.left = tarobj.getBoundingClientRect().left + deliver.width < document.body.clientWidth ? tarobj.getBoundingClientRect().left : tarobj.getBoundingClientRect().left - deliver.width + tarobj.offsetWidth
			}
			if (deliver.type == "panel" && deliver.targetId && deliver.html) {
				var tarobj = document.getElementById(deliver.targetId);
				_options.closeBtn = false;
				_options.title = false;
				_options.shade = false;
				_options.resize = false;
				_options.nameType = deliver.type;
				_options.top = tarobj.getBoundingClientRect().top + tarobj.offsetHeight + document.documentElement.scrollTop;
				var leftTemp = tarobj.getBoundingClientRect().left;
				if ((leftTemp + deliver.width) > document.body.clientWidth) {
					leftTemp = leftTemp + tarobj.clientWidth - deliver.width
				}
				_options.left = leftTemp + deliver.width < document.body.clientWidth ? leftTemp : leftTemp - deliver.width - tarobj.offsetWidth
			}
			if (deliver.type == "panel" && deliver.url) {
				_options.nameType = deliver.type
			}
			if (deliver.notCopyReturnValue) {
				_options.notCopyReturnValue = true
			} else {
				_options.notCopyReturnValue = false
			}
			if (deliver.nextShade) {
				_options.nextShade = true
			} else {
				_options.nextShade = false
			}
			_options.resize = false;
			var o = new Class(_options);
			layer.layerConfig = _options;
			layer.targetWindow = _options.targetWindow;
			layer.transParams = _options.transParams;
			layer.closeParam = deliver.closeParam;
			var layerTran = new Object();
			var tempI;
			for (tempI in layer) {
				layerTran[tempI] = layer[tempI]
			}
			return layerTran
		}
	};
	window.layui && layui.define ? (layer.ready(), layui.define("jquery", function (exports) {
			layer.path = layui.cache.dir;
			ready.run(layui.jquery);
			window.layer = layer;
			exports("layer", layer)
		})) : (typeof define === "function" ? define(["jquery"], function () {
			ready.run(window.jQuery);
			return layer
		}) : function () {
		ready.run(window.jQuery);
		layer.ready()
	}
		())
}
(window);
function MxtMsgBox(A) {
	this.id = A.id ? A.id : Math.floor(Math.random() * 100000000);
	this.title = A.title ? A.title : "MessageBox";
	this.type = A.type ? A.type : 0;
	this.msg = A.msg ? A.msg : "";
	this.buttons = A.buttons ? A.buttons : [];
	this.width = A.width ? A.width : 350;
	this.height = A.height ? A.height : 120;
	this.isDrag = A.isDrag === false ? A.isDrag : true;
	this.borderSize = 1;
	this.closeTitle = A.closeTitle ? A.closeTitle : $.i18n("common.button.close.label");
	this.submitText = A.submitText ? A.submitText : "submit";
	this.headerHeight = 50;
	this.footerHeight = 50;
	this.imgType = A.imgType == null ? null : A.imgType;
	this.okText = A.okText ? A.okText : $.i18n("message.ok.js");
	this.cancelText = A.cancelText ? A.cancelText : $.i18n("message.cancel.js");
	this.yesText = A.yesText ? A.yesText : $.i18n("message.yes.js");
	this.noText = A.noText ? A.noText : $.i18n("message.no.js");
	this.retryText = A.retryText ? A.retryText : $.i18n("message.retry.js");
	this.detailText = A.detailText ? A.detailText : $.i18n("message.detail.js");
	this.ok_fn = A.ok_fn ? A.ok_fn : null;
	this.cancel_fn = A.cancel_fn ? A.cancel_fn : null;
	this.yes_fn = A.yes_fn ? A.yes_fn : null;
	this.no_fn = A.no_fn ? A.no_fn : null;
	this.retry_fn = A.retry_fn ? A.retry_fn : null;
	this.detail_fn = A.detail_fn ? A.detail_fn : null;
	this.close_fn = A.close_fn ? A.close_fn : this.cancel_fn;
	this.close_show = A.close_show === false ? A.close_show : true;
	this.zIndex = 5000;
	this.isFrountEvent = A.isFrountEvent ? A.isFrountEvent : false;
	this.targetWindow = A.targetWindow == null ? getCtpTop() : A.targetWindow;
	var B = this.targetWindow.$("body");
	if (!B) {
		this.targetWindow = window.parent
	}
	this.bottomHTML = A.bottomHTML;
	this._zoomParam = 1;
	if (this._zoomParam == null || this._zoomParam == undefined) {
		this._zooParam = 1
	}
	if (typeof this.targetWindow.$ === "undefined") {
		alert(this.msg);
		return
	}
	this.init();
	this.drag();
	var C = this;
	SeeUtils.addEvent(document, "keyup", function (D) {
		if (D.keyCode == 27) {
			C.close()
		}
	})
}
MxtMsgBox.prototype.init = function () {
	var E = this.id + "_mask";
	var F = this.targetWindow.document.body.clientWidth;
	var B = (this.targetWindow.document.documentElement.scrollHeight > this.targetWindow.document.documentElement.clientHeight ? this.targetWindow.document.documentElement.scrollHeight : this.targetWindow.document.documentElement.clientHeight);
	this.zIndex = this.targetWindow.getMaxZindex(2);
	if (SeeUtils.getElObj(E) == null) {
		if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
			this.targetWindow.SeeUtils.appendToBody("<div id='" + E + "' class='mask mask_msg' style='top:0;left:0;width:" + F + "px;height:" + B + "px;z-index:" + (this.zIndex) + ";zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>&nbsp;</div>")
		} else {
			this.targetWindow.$("body").append("<div id='" + E + "' class='mask mask_msg' style='top:0;left:0;width:" + F + "px;height:" + B + "px;z-index:" + (this.zIndex) + ";zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>&nbsp;</div>")
		}
	}
	if (SeeUtils.getElObj(this.id) != null) {
		if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
			this.targetWindow.SeeUtils.removeEl(this.id)
		} else {
			this.targetWindow.$("#" + this.id).remove()
		}
	}
	var A = "";
	var I = (F - (this.width + this.borderSize * 2 + 5)) / 2;
	var H = (this.targetWindow.document.documentElement.clientHeight - (this.height + this.borderSize * 2 + this.headerHeight + this.footerHeight + 5)) / 2;
	if (H <= 0) {
		H = ($(document.body).height() - (this.height + this.borderSize * 2 + this.headerHeight + this.footerHeight + 5)) / 2
	}
	A += "<div id='" + this.id + "' class='dialog_box absolute' style='z-index:" + (this.zIndex + 1) + ";left:" + ((I < 0 ? 0 : I) + this.targetWindow.document.documentElement.scrollLeft) + "px;top:" + ((H < 0 ? 0 : H) + (this.targetWindow.document.documentElement.scrollTop == 0 ? this.targetWindow.document.body.scrollTop : this.targetWindow.document.documentElement.scrollTop)) + "px;zoom:" + (this._zoomParam == null ? 1 : this._zoomParam) + ";'>";
	A += "<div id='" + this.id + "_shadow' class='dialog_shadow absolute' style='width:" + (this.width + this.borderSize * 0) + "px;height:" + (this.height + this.headerHeight + 5 + this.footerHeight) + "px;top:0px;left:0px;'>&nbsp;</div>";
	A += "<iframe id='" + this.id + "_iframe_shadow' class='absolute iframe_shadow' style='width:" + this.width + "px;height:" + (this.height + this.headerHeight + 5 + this.footerHeight) + "px;border:0'></iframe>";
	A += "<div id='" + this.id + "_main' class='dialog_main absolute' style='width:" + this.width + "px;border:0px;'>";
	A += "<div id='" + this.id + "_main_head' class='dialog_main_head'>";
	if (this.close_show) {}
	A += "</div>";
	if (this.close_show) {
		A += "<span id='" + this.id + "_close' class='dialog_close_msg' title='" + this.closeTitle + "'></span>"
	}
	A += "<div id='" + this.id + "_main_body' class='dialog_main_body left' style='width:" + this.width + "px;height:" + this.height + "px'>";
	A += "<div id='" + this.id + "_main_iframe' class='dialog_main_iframe absolute' style='top:" + this.headerHeight + "px;width:" + this.width + "px;height:" + this.height + "px;display:none;'>&nbsp;</div>";
	A += "<div id='" + this.id + "_main_content' class='dialog_main_content absolute'>";
	A += "<div class='dialog_main_content_html ' style='width:" + (this.width) + "px;height:" + (this.height) + "px;overflow:auto;border:0px;'>";
	A += "<table width='90%' class='margin_t_20' style='font-size:12px;'><tr>";
	if (this.imgType != null) {
		A += "<td valign='top' width='24' class='padding_l_20'><span class='msgbox_img_" + this.imgType + "'></span>";
		A += "</td>"
	}
	A += "<td class='msgbox_content padding_l_10' style='padding-right:15px;'>";
	A += this.msg;
	A += "</td>";
	A += "</tr></table>";
	A += "</div>";
	A += "</div>";
	A += "</div>";
	A += "<div id='" + this.id + "_main_footer' class='dialog_main_footer left align_right w100b'>";
	if (this.bottomHTML != undefined) {
		A += '<span class="left margin_l_10 padding_t_10 padding_l_10 font_size12">' + this.bottomHTML + "</span>"
	}
	A += '<span class="right padding_t_10 padding_r_10">';
	switch (this.type) {
	case 0:
		A += "<a  id='" + this.id + "ok_msg_btn_first'  class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		break;
	case 1:
		A += "<a  id='" + this.id + "ok_msg_btn_first'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 2:
		A += "<a  id='" + this.id + "yes_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.yesText + "</a>";
		A += "<a  id='" + this.id + "no_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.noText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 3:
		A += "<a  id='" + this.id + "yes_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.yesText + "</a>";
		A += "<a  id='" + this.id + "no_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.noText + "</a>";
		break;
	case 4:
		A += "<a  id='" + this.id + "retry_msg_btn'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.retryText + "</a>";
		A += "<a  id='" + this.id + "cancel_msg_btn'  class='common_button common_button_gray margin_r_10 hand'>" + this.cancelText + "</a>";
		break;
	case 5:
		A += "<a  id='" + this.id + "ok_msg_btn_first'  class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>";
		A += "<a  id='" + this.id + "detail_msg_btn'   class='common_button common_button_gray margin_r_10 hand'>" + this.detailText + "</a>";
		break;
	case 100:
		if (this.buttons.length > 0) {
			for (var D = 0; D < this.buttons.length; D++) {
				var C = this.buttons[D];
				if (D == 0) {
					A += "<a  id='" + C.id + "_btn'   class='common_button common_button_emphasize margin_r_10 hand' title='" + C.text + "'>" + C.text + "</a>"
				} else {
					A += "<a  id='" + C.id + "_btn'   class='common_button common_button_gray margin_r_10 hand' title='" + C.text + "'>" + C.text + "</a>"
				}
			}
		}
		break;
	default:
		A += "<a  id='ok_msg_btn_first'   class='common_button common_button_emphasize margin_r_10 hand'>" + this.okText + "</a>"
	}
	A += "</span>";
	A += "</div>";
	A += "</div>";
	A += "</div>";
	if (getCtpTop().isOffice) {
		this.officeAction(false)
	} else {
		this.officeAction(true)
	}
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		this.targetWindow.SeeUtils.appendToBody(A)
	} else {
		this.targetWindow.$("body").append(A)
	}
	var G = this;
	if (this.targetWindow.document.getElementById(this.id + "_close")) {
		this.targetWindow.document.getElementById(this.id + "_close").onclick = function () {
			G.close();
			if (G.close_fn) {
				G.close_fn()
			}
		}
	}
	switch (this.type) {
	case 0:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			}
		}
		break;
	case 1:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 2:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				G.close();
				if (G.yes_fn) {
					G.yes_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				G.close();
				if (G.no_fn) {
					G.no_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				if (G.yes_fn) {
					G.yes_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				if (G.no_fn) {
					G.no_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 3:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				G.close();
				if (G.yes_fn) {
					G.yes_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				G.close();
				if (G.no_fn) {
					G.no_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "yes_msg_btn").onclick = function () {
				if (G.yes_fn) {
					G.yes_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "no_msg_btn").onclick = function () {
				if (G.no_fn) {
					G.no_fn()
				}
				G.close()
			}
		}
		break;
	case 4:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "retry_msg_btn").onclick = function () {
				G.close();
				if (G.retry_fn) {
					G.retry_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				G.close();
				if (G.cancel_fn) {
					G.cancel_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "retry_msg_btn").onclick = function () {
				if (G.retry_fn) {
					G.retry_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "cancel_msg_btn").onclick = function () {
				if (G.cancel_fn) {
					G.cancel_fn()
				}
				G.close()
			}
		}
		break;
	case 5:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (G.ok_fn) {
					G.ok_fn()
				}
			};
			this.targetWindow.document.getElementById(this.id + "detail_msg_btn").onclick = function () {
				G.close();
				if (G.detail_fn) {
					G.detail_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (G.ok_fn) {
					G.ok_fn()
				}
				G.close()
			};
			this.targetWindow.document.getElementById(this.id + "detail_msg_btn").onclick = function () {
				if (G.detail_fn) {
					G.detail_fn()
				}
				G.close()
			}
		}
		break;
	case 100:
		if (this.buttons.length > 0) {
			for (var D = 0; D < this.buttons.length; D++) {
				var C = this.buttons[D];
				if (!this.isFrountEvent) {
					this.targetWindow.$("#" + C.id + "_btn").click(function () {
						G.close()
					}).click(C.handler)
				} else {
					this.targetWindow.$("#" + C.id + "_btn").click(C.handler).click(function () {
						G.close()
					})
				}
			}
		}
		break;
	default:
		if (!this.isFrountEvent) {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				G.close();
				if (this.ok_fn) {
					this.ok_fn()
				}
			}
		} else {
			this.targetWindow.document.getElementById(this.id + "ok_msg_btn_first").onclick = function () {
				if (this.ok_fn) {
					this.ok_fn()
				}
				G.close()
			}
		}
	}
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		if (this.targetWindow.SeeUtils.getElObj(this.id + "ok_msg_btn_first") != null) {
			this.targetWindow.$("#" + this.id + "ok_msg_btn_first").parent().focus()
		}
	} else {
		if (this.targetWindow.$("#" + this.id + "ok_msg_btn_first").size() > 0) {
			this.targetWindow.$("#" + this.id + "ok_msg_btn_first").parent().focus()
		}
	}
};
MxtMsgBox.prototype.drag = function () {
	if (this.isDrag) {
		var A = {
			cancel: ".dialog_main_content_html,.dialog_main_footer",
			containment: "body",
			scroll: false
		};
		var B = this.targetWindow.$("#" + this.id);
		if (typeof B.draggable !== "undefined") {
			B.draggable(A)
		} else {}
	}
};
MxtMsgBox.prototype.close = function () {
	if (this.targetWindow != null && this.targetWindow.SeeUtils != null) {
		this.targetWindow.SeeUtils.removeEl(this.id + "_mask");
		this.targetWindow.SeeUtils.removeEl(this.id)
	} else {
		this.targetWindow.$("#" + this.id + "_mask").remove();
		this.targetWindow.$("#" + this.id).remove()
	}
	if (this.targetWindow.$(".layui-layer").length > 0 || this.targetWindow.$(".dialog_main").length > 0) {
		return void(0)
	}
	this.officeAction(true)
};
MxtMsgBox.prototype.officeAction = function (G) {
	var D = this;
	var I = ["officeFrameDiv", "zwIframe", "mainbodyFrame"];
	var H = getCtpTop();
	var A = SeeUtils.getElObj("componentDiv");
	if (A != null) {
		try {
			H = componentDiv.contentWindow.document.getElementById("zwIframe").contentWindow
		} catch (E) {}
	} else {
		if (getCtpTop().isOffice == true && SeeUtils.getCss("zwOfficeIframe", "display") == "block") {
			try {
				H = getCtpTop().document.getElementById("zwOfficeIframe").contentWindow
			} catch (E) {}
		}
	}
	if (H.$) {
		for (var C = 0; C < I.length; C++) {
			var B = I[C];
			var F = H.$("#" + B);
			if (F && F.size() > 0) {
				D.officeIframe = F;
				break
			}
		}
	}
	D.qianzhangIframe = $("[classid='clsid:2294689C-9EDF-40BC-86AE-0438112CA439']");
	DialogOfficeObj.qianzhangIframe = D.qianzhangIframe;
	DialogOfficeObj.officeIframe = D.officeIframe;
	if (!G) {
		DialogOfficeObj.hideOfficeObj()
	} else {
		DialogOfficeObj.showOfficeObj()
	}
};
var DialogOfficeObj = {
	officeIframe: {
		size: function () {
			return 0
		}
	},
	qianzhangIframe: {
		size: function () {
			return 0
		}
	},
	hideOfficeObjExt: function () {
		try {
			var B = getA8Top();
			var A = B.isOffice;
			if ((typeof A == "undefined") || (A == false)) {
				return false
			}
		} catch (C) {}
		return true
	},
	showOfficeObjExt: function () {
		try {
			var B = getA8Top();
			var A = B.isOffice;
			if ((typeof A == "undefined") || (A == false)) {
				return false
			}
		} catch (C) {}
		return true
	},
	hideOfficeObj: function () {
		var B = navigator.userAgent.toLowerCase();
		var A = (B.indexOf("opera") != -1);
		var C = SeeUtils.isIE;
		if (C) {
			if (!DialogOfficeObj.hideOfficeObjExt()) {
				return
			}
		}
		if (window.hideOfficeObj) {
			hideOfficeObj()
		}
	},
	showOfficeObj: function () {
		var C = __getIframeDialogNumbers();
		if (C.length != 0) {
			return
		}
		var B = navigator.userAgent.toLowerCase();
		var A = (B.indexOf("opera") != -1);
		var D = SeeUtils.isIE;
		if (D) {
			if (!DialogOfficeObj.showOfficeObjExt()) {
				return
			}
		}
		if (window.showOfficeObj) {
			showOfficeObj()
		}
	}
};
function MxtLayout(A) {
	var D = {
		id: A.id,
		spritHeight: A.spritHeight == null ? 7 : A.spritHeight,
		borderWidth: A.borderWidth == null ? 1 : A.borderWidth,
		northArea: A.northArea,
		southArea: A.southArea,
		eastArea: A.eastArea,
		westArea: A.westArea,
		centerArea: A.centerArea,
		successFn: A.successFn,
		setCallFun: A.setCallFun == null ? function () {}
		 : A.setCallFun,
		moveCallFun: A.moveCallFun == null ? function () {}
		 : A.moveCallFun,
		isFixLayout: (A.isFixLayout == null || A.isFixLayout == undefined) ? true : A.isFixLayout,
		disableDrag: (A.disableDrag == undefined) ? false : true,
		spiretBarN: function () {
			if (A.northArea) {
				if (A.northArea.spiretBar) {
					if (A.northArea.spiretBar.show) {
						return A.northArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarS: function () {
			if (A.southArea) {
				if (A.southArea.spiretBar) {
					if (A.southArea.spiretBar.show) {
						return A.southArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarE: function () {
			if (A.eastArea) {
				if (A.eastArea.spiretBar) {
					if (A.eastArea.spiretBar.show) {
						return A.eastArea.spiretBar
					}
				}
			}
			return false
		}
		(),
		spiretBarW: function () {
			if (A.westArea) {
				if (A.westArea.spiretBar) {
					if (A.westArea.spiretBar.show) {
						return A.westArea.spiretBar
					}
				}
			}
			return false
		}
		()
	};
	var B = {
		init: function (E) {
			B.height = SeeUtils.getElHeight(B.mainObj);
			B.width = SeeUtils.getElWidth(B.mainObj);
			B._100 = B.width;
			B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
			B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
			B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
			B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
			E.__initNorth(B, D);
			E.__initEast(B, D);
			E.__initCenter(B, D);
			E.__initWest(B, D);
			E.__initSouth(B, D)
		},
		fixLayout: function (F, E, I) {
			var G = false;
			if (I == "north") {
				var H = SeeUtils.getElHeight(B.nObj) + D.borderWidth * (D.northBorder ? 2 : 0) + E;
				D.northArea.minHeight = D.northArea.minHeight == null ? 20 : D.northArea.minHeight;
				D.northArea.maxHeight = D.northArea.maxHeight == null ? 100 : D.northArea.maxHeight;
				if (H < D.northArea.minHeight) {
					D.nHeight = D.northArea.minHeight;
					G = true
				} else {
					if (H > D.northArea.maxHeight) {
						D.nHeight = D.northArea.maxHeight;
						G = true
					} else {
						D.nHeight = H
					}
				}
				B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
				B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
				SeeUtils.setElHeight(B.nObj, (D.nHeight - D.borderWidth * (D.northBorder ? 2 : 0)) + "px");
				if (G) {
					SeeUtils.css(B.northSpObj, "top", D.nHeight + "px")
				}
				if (B.eObj != null) {
					SeeUtils.cssByJson(B.eObj, {
						height: B._m_height - D.borderWidth * (D.eastBorder ? 2 : 0),
						top: B._m_top
					});
					SeeUtils.cssByJson(B.eastSpObj, {
						height: (B._m_height + D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
						top: B._m_top
					})
				}
				if (B.cObj != null) {
					SeeUtils.cssByJson(B.cObj, {
						height: B._m_height - D.borderWidth * (D.centerBorder ? 2 : 0),
						top: B._m_top
					})
				}
				if (B.wObj != null) {
					SeeUtils.cssByJson(B.wObj, {
						height: B._m_height - D.borderWidth * (D.westBorder ? 2 : 0),
						top: B._m_top
					});
					SeeUtils.cssByJson(B.westSpObj, {
						height: (B._m_height + D.borderWidth * (D.westBorder ? 2 : 0)) + "px",
						top: B._m_top
					})
				}
			} else {
				if (I == "south") {
					var H = SeeUtils.getElHeight(B.sObj) + D.borderWidth * (D.southBorder ? 2 : 0) - E;
					D.southArea.minHeight = D.southArea.minHeight == null ? 20 : D.southArea.minHeight;
					D.southArea.maxHeight = D.southArea.maxHeight == null ? 100 : D.southArea.maxHeight;
					if (H < D.southArea.minHeight) {
						D.sHeight = D.southArea.minHeight;
						G = true
					} else {
						if (H > D.southArea.maxHeight) {
							D.sHeight = D.southArea.maxHeight;
							G = true
						} else {
							D.sHeight = H
						}
					}
					B._m_height = B.height - D.nHeight - D.sHeight - D.spritHeight * B._h_spritSize;
					B._m_top = D.nHeight + D.spritHeight * (D.northFlag == 2 ? 1 : 0);
					SeeUtils.cssByJson(B.sObj, {
						height: (D.sHeight - D.borderWidth * (D.southBorder ? 2 : 0)) + "px",
						top: (B.height - D.sHeight) + "px"
					});
					if (G) {
						SeeUtils.css(B.southSpObj, "top", (B.height - D.sHeight - D.spritHeight) + "px")
					}
					if (B.eObj != null) {
						SeeUtils.cssByJson(B.eObj, {
							height: (B._m_height - D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
							top: B._m_top + "px"
						});
						SeeUtils.cssByJson(B.eastSpObj, {
							height: (B._m_height + D.borderWidth * (D.eastBorder ? 2 : 0)) + "px",
							top: B._m_top + "px"
						})
					}
					if (B.cObj != null) {
						SeeUtils.cssByJson(B.cObj, {
							height: B._m_height - D.borderWidth * (D.centerBorder ? 2 : 0),
							top: B._m_top
						})
					}
					if (B.wObj != null) {
						SeeUtils.cssByJson(B.wObj, {
							height: B._m_height - D.borderWidth * (D.westBorder ? 2 : 0),
							top: B._m_top
						});
						SeeUtils.cssByJson(B.westSpObj, {
							height: (B._m_height + D.borderWidth * (D.westBorder ? 2 : 0)) + "px",
							top: B._m_top
						})
					}
				} else {
					if (I == "west") {
						var H = SeeUtils.getElWidth(B.wObj) + D.borderWidth * (D.westBorder ? 2 : 0) + F;
						D.westArea.minWidth = D.westArea.minWidth == null ? 20 : D.westArea.minWidth;
						D.westArea.maxWidth = D.westArea.maxWidth == null ? 250 : D.westArea.maxWidth;
						if (H < D.westArea.minWidth) {
							D.wWidth = D.westArea.minWidth;
							G = true
						} else {
							if (H > D.westArea.maxWidth) {
								D.wWidth = D.westArea.maxWidth;
								G = true
							} else {
								D.wWidth = H;
								if (isNaN(H) && this.hresize.sx > D.westArea.maxWidth) {
									D.wWidth = D.westArea.maxWidth;
									G = true
								} else {
									if (isNaN(H) && this.hresize.sx < D.westArea.maxWidth) {
										D.wWidth = this.hresize.sx;
										G = true
									}
								}
								if (!isNaN(H) && this.hresize.sx < D.westArea.maxWidth) {
									D.wWidth = H;
									G = true
								} else {
									if (!isNaN(H) && this.hresize.sx > D.westArea.maxWidth) {
										D.wWidth = H;
										G = true
									}
								}
							}
						}
						B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
						B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
						SeeUtils.setElWidth(B.wObj, D.wWidth - D.borderWidth * (D.westBorder ? 2 : 0));
						if (G) {
							SeeUtils.css(B.westSpObj, "left", D.wWidth + "px")
						}
						SeeUtils.cssByJson(B.cObj, {
							width: (B._c_width - D.borderWidth * (D.centerBorder ? 2 : 0)) + "px",
							left: B._c_left + "px"
						})
					} else {
						if (I == "east") {
							var H = SeeUtils.getElWidth(B.eObj) + D.borderWidth * (D.eastBorder ? 2 : 0) - F;
							D.eastArea.minWidth = D.eastArea.minWidth == null ? 20 : D.eastArea.minWidth;
							D.eastArea.maxWidth = D.eastArea.maxWidth == null ? 250 : D.eastArea.maxWidth;
							if (H < D.eastArea.minWidth) {
								D.eWidth = D.eastArea.minWidth;
								G = true
							} else {
								if (H > D.eastArea.maxWidth) {
									D.eWidth = D.eastArea.maxWidth;
									G = true
								} else {
									D.eWidth = H
								}
							}
							B._c_width = B._100 - D.spritHeight * B._w_spritSize - D.eWidth - D.wWidth;
							B._c_left = D.wWidth + D.spritHeight * (D.westFlag == 2 ? 1 : 0);
							SeeUtils.cssByJson(B.eObj, {
								width: D.eWidth - D.borderWidth * (D.eastBorder ? 2 : 0),
								left: (B.width - D.eWidth) + "px"
							});
							if (G) {
								SeeUtils.css(B.eastSpObj, "left", (B.width - D.eWidth - D.spritHeight) + "px")
							}
							SeeUtils.cssByJson(B.cObj, {
								width: (B._c_width - D.borderWidth * (D.centerBorder ? 2 : 0)) + "px",
								left: B._c_left + "px"
							})
						}
					}
				}
			}
		},
		dragStart: function (H, G, F, I) {
			if (D.disableDrag) {
				return
			}
			if (H == "h") {
				var E = false;
				if (F) {
					E = true;
					SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "row-resize")
				}
				D.move = F;
				this.hresize = {
					t: parseInt(F.style.top),
					l: parseInt(F.style.left),
					sy: G.pageY,
					sx: G.pageX,
					hgo: E,
					direct: I
				}
			}
			$("<div class='layout_mask'></div>").css({
				position: "absolute",
				background: "#ffffff",
				width: $("#" + D.id).width() + "px",
				height: $("#" + D.id).height() + "px",
				"z-index": 2,
				top: 0,
				left: 0,
				"-moz-opacity": 0,
				opacity: 0
			}).prependTo($("body"));
			$("body").noSelect()
		},
		dragMove: function (H) {
			if (this.hresize) {
				var F = this.hresize;
				var I = H.pageY;
				var G = I - F.sy;
				if (F.hgo) {
					var E = H.pageX;
					this.hresize.xdiff = E - F.sx;
					this.hresize.ydiff = I - F.sy;
					if (this.hresize.direct == "north" || this.hresize.direct == "south") {
						SeeUtils.css(D.move, "top", F.t + this.hresize.ydiff)
					} else {
						SeeUtils.css(D.move, "left", F.l + this.hresize.xdiff)
					}
				}
				F = null
			}
		},
		dragEnd: function () {
			if (this.hresize) {
				this.fixLayout(this.hresize.xdiff, this.hresize.ydiff, this.hresize.direct);
				D.setCallFun({
					offsetX: this.hresize.xdiff,
					offsetY: this.hresize.ydiff
				});
				this.hresize = false
			}
			D.move = null;
			var E = document.querySelector(".layout_mask");
			if (E != null) {
				SeeUtils.removeEl(E)
			}
			SeeUtils.css(SeeUtils.getElByTag(document, "body")[0], "cursor", "default");
			$("body").noSelect(false)
		}
	};
	if (D.isFixLayout) {
		$("html").css({
			height: "100%",
			overflow: "hidden"
		});
		$("body").css({
			height: "100%",
			overflow: "hidden",
			padding: "0px",
			margin: "0px",
			border: "0px"
		})
	}
	B.mainObj = SeeUtils.getElObj(D.id);
	SeeUtils.cssByJson(B.mainObj, {
		overflow: "hidden",
		position: "relative",
		padding: "0px",
		margin: "0px",
		border: "0px"
	});
	if (D.isFixLayout) {
		SeeUtils.setElHeight(B.mainObj, "100%")
	}
	if (document.querySelector("#" + D.id) == null) {
		B.nObj = D.northArea == null ? null : document.querySelector("#" + D.northArea.id);
		B.eObj = D.eastArea == null ? null : document.querySelector("#" + D.eastArea.id);
		B.cObj = D.centerArea == null ? null : document.querySelector("#" + D.centerArea.id);
		B.wObj = D.westArea == null ? null : document.querySelector("#" + D.westArea.id);
		B.sObj = D.southArea == null ? null : document.querySelector("#" + D.southArea.id)
	} else {
		B.nObj = D.northArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.northArea.id);
		B.eObj = D.eastArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.eastArea.id);
		B.cObj = D.centerArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.centerArea.id);
		B.wObj = D.westArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.westArea.id);
		B.sObj = D.southArea == null ? null : document.querySelector("#" + D.id).querySelector("#" + D.southArea.id)
	}
	B._h_spritSize = 0;
	D.northFlag = 0;
	D.nHeight = 0;
	D.northBorder = false;
	if (D.northArea != null) {
		D.nHeight = D.northArea.height == null ? 50 : D.northArea.height;
		D.northFlag = 1;
		if (D.northArea.sprit == null || D.northArea.sprit == true) {
			B._h_spritSize += 1;
			D.northFlag = 2
		}
		if (D.northArea.border == null || D.northArea.border == true) {
			D.northBorder = true
		}
	}
	D.southFlag = 0;
	D.sHeight = 0;
	D.southBorder = false;
	if (D.southArea != null) {
		D.sHeight = D.southArea.height == null ? 50 : D.southArea.height;
		D.southFlag = 1;
		if (D.southArea.sprit == null || D.southArea.sprit == true) {
			B._h_spritSize += 1;
			D.southFlag = 2
		}
		if (D.southArea.border == null || D.southArea.border == true) {
			D.southBorder = true
		}
	}
	B._w_spritSize = 0;
	D.eastFlag = 0;
	D.eWidth = 0;
	D.eastBorder = false;
	if (D.eastArea != null) {
		D.eWidth = D.eastArea.width == null ? 200 : D.eastArea.width;
		D.eastFlag = 1;
		if (D.eastArea.sprit == null || D.eastArea.sprit == true) {
			B._w_spritSize += 1;
			D.eastFlag = 2
		}
		if (D.eastArea.border == null || D.eastArea.border == true) {
			D.eastBorder = true
		}
	}
	D.westFlag = 0;
	D.wWidth = 0;
	D.westBorder = false;
	if (D.westArea != null) {
		D.wWidth = D.westArea.width == null ? 200 : D.westArea.width;
		D.westFlag = 1;
		if (D.westArea.sprit == null || D.westArea.sprit == true) {
			B._w_spritSize += 1;
			D.westFlag = 2
		}
		if (D.westArea.border == null || D.westArea.border == true) {
			D.westBorder = true
		}
	}
	D.centerBorder = false;
	if (D.centerArea != null) {
		if (D.centerArea.border != null && D.centerArea.border == true) {
			D.centerBorder = true
		}
	}
	B.init(this);
	if (D.successFn != null) {
		D.successFn()
	}
	this.params = D;
	this.methods = B;
	if (SeeUtils.isIE8 || SeeUtils.isIE9 || SeeUtils.isIE10) {
		$(document).mousemove(function (E) {
			B.dragMove(E);
			if (B.moveStart) {
				if (E.stopPropagation) {
					E.stopPropagation()
				}
				if (E.preventDefault) {
					E.preventDefault()
				}
				E.cancelBubble = true;
				E.returnValue = false;
				return false
			}
		})
	} else {
		SeeUtils.addEvent(document, "mousemove", function (E) {
			B.dragMove(E);
			if (B.moveStart) {
				if (E.stopPropagation) {
					E.stopPropagation()
				}
				if (E.preventDefault) {
					E.preventDefault()
				}
				E.cancelBubble = true;
				E.returnValue = false;
				return false
			}
		})
	}
	SeeUtils.addEvent(document, "mouseup", function (E) {
		B.dragEnd();
		B.moveStart = false
	});
	SeeUtils.addEvent(document, "mousedown", function (F) {
		var E = SeeUtils.closestByClass(F.target, "spiret");
		if (E != null) {
			B.moveStart = true
		}
		E = SeeUtils.closestByClass(F.target, ".vGrip_line");
		if (E != null) {
			B.moveStart = true
		}
	});
	SeeUtils.addEvent(document, "hover", function (E) {
		B.dragEnd()
	});
	var C = this;
	$(window).resize(function () {
		B.init(C)
	})
}
MxtLayout.prototype.__initWest = function (F, G) {
	if (F.wObj) {
		if (SeeUtils.getElObj("westSp_" + G.id) != null) {
			SeeUtils.removeEl("westSp_" + G.id)
		}
		var H = "";
		var E = G.westBorder ? 1 : 0;
		if (!G.disableDrag) {
			var B = "cursor:e-resize;"
		} else {
			var B = ""
		}
		if (G.westFlag == 2) {
			H = "<span class='spiret spiret_L' id='westSp_" + G.id + "' style='" + B + "z-index:3;width:" + G.spritHeight + "px;height:" + (F._m_height + G.borderWidth * (G.westBorder ? 2 : 0)) + "px;left:" + (G.wWidth) + "px;top:" + (F._m_top) + "px;'><table border='0' cellpadding='0' cellspacing='0' width='100%' style='display:" + (G.spiretBarW ? "table" : "none") + ";margin-top:" + ((F._m_height - G.borderWidth * (G.eastBorder ? 2 : 0)) / 2 - 25) + "px'><tr><td valign='middle'><span class='spiretBarHidden hidden'><em></em></span><span class='spiretBarHidden2'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(F.wObj, {
			height: (F._m_height - G.borderWidth * (G.westBorder ? 2 : 0)) + "px",
			left: "0px",
			top: (F._m_top) + "px",
			width: (G.wWidth - G.borderWidth * (G.westBorder ? 2 : 0)) + "px",
			"border-width": E + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(F.wObj);
		SeeUtils.insertAfter(H, F.wObj);
		F.westSpObj = SeeUtils.getElObj("westSp_" + G.id);
		$("#westSp_" + G.id).mousedown(function (I) {
			if (I.target == this) {
				F.dragStart("h", I, this, "west")
			}
		});
		F.westSpObj = SeeUtils.getElObj("westSp_" + G.id);
		if (G.spiretBarW.show) {
			var C = SeeUtils.getElObj("westSp_" + G.id);
			var D = C.querySelector(".spiretBarHidden");
			var A = C.querySelector(".spiretBarHidden2");
			window.layout_westSpBarRClick = function () {
				SeeUtils.showEl(A);
				SeeUtils.hideEl(D);
				G.spiretBarW.handlerR()
			};
			SeeUtils.attrEl(D, "onclick", "layout_westSpBarRClick()");
			window.layout_westSpBarLClick = function () {
				SeeUtils.showEl(D);
				SeeUtils.hideEl(A);
				G.spiretBarW.handlerL()
			};
			SeeUtils.attrEl(A, "onclick", "layout_westSpBarLClick()")
		}
	}
};
MxtLayout.prototype.__initSouth = function (F, B) {
	if (F.sObj) {
		if (typeof(SeeUtils.getElObj("southSp_" + B.id)) != "undefined") {
			SeeUtils.removeEl("southSp_" + B.id)
		}
		var H = "";
		var E = B.southBorder ? 1 : 0;
		if (!B.disableDrag) {
			var D = "cursor:row-resize;"
		} else {
			var D = ""
		}
		if (B.southFlag == 2) {
			H = "<span id='southSp_" + B.id + "' upordown='down' class='spiret spiret_T' style='" + D + "z-index:3;width:" + F.width + "px;height:" + B.spritHeight + "px;left:0px;top:" + (F.height - B.sHeight - B.spritHeight) + "px;'><table align='center' border='0' cellpadding='0' cellspacing='0' height='100%' style='display:" + (B.spiretBarS ? "table" : "none") + ";'><tr><td align='center'><span class='spiretBarHidden4'><em></em></span><span class='spiretBarHidden3'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(F.sObj, {
			height: (B.sHeight - B.borderWidth * (B.southBorder ? 2 : 0)) + "px",
			left: "0px",
			top: (F.height - B.sHeight) + "px",
			width: F._100 + "px",
			"border-width": E + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(F.sObj);
		SeeUtils.insertAfter(H, F.sObj);
		F.southSpObj = SeeUtils.getElObj("southSp_" + B.id);
		if (B.southSpritBar != true) {
			$("#southSp_" + B.id).mousedown(function (J) {
				if (J.target == this) {
					F.dragStart("h", J, this, "south")
				}
			})
		}
		if (B.spiretBarS.show) {
			var C = SeeUtils.getElObj("southSp_" + B.id);
			var G = C.querySelector(".spiretBarHidden3");
			var I = C.querySelector(".spiretBarHidden4");
			SeeUtils.css(I, "borderRight", 0);
			if (B.spiretBarS.type == "1") {
				SeeUtils.hideEl(I);
				SeeUtils.css(I, "borderRight", "")
			}
			window.layout_southSpBarBClick = function () {
				if (B.spiretBarS.type == "1") {
					SeeUtils.showEl(I);
					SeeUtils.hideEl(G)
				}
				B.spiretBarS.handlerB()
			};
			SeeUtils.attrEl(G, "onclick", "layout_southSpBarBClick()");
			var A = this;
			window.layout_southSpBarTClick = function () {
				if (B.spiretBarS.type == "1") {
					SeeUtils.hideEl(I);
					SeeUtils.showEl(G)
				}
				B.spiretBarS.handlerT();
				F.init(A)
			};
			SeeUtils.attrEl(I, "onclick", "layout_southSpBarTClick()")
		}
	}
};
MxtLayout.prototype.__initCenter = function (B, C) {
	var A = (B._m_height - C.borderWidth * (C.centerBorder ? 2 : 0));
	if (B.cObj != null && A > 0) {
		SeeUtils.cssByJson(B.cObj, {
			height: (B._m_height - C.borderWidth * (C.centerBorder ? 2 : 0)) + "px",
			left: B._c_left + "px",
			top: (B._m_top) + "px",
			width: (B._c_width - C.borderWidth * (C.centerBorder ? 2 : 0)) + "px",
			"border-width": C.centerBorder ? 1 : 0 + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(B.cObj)
	}
};
MxtLayout.prototype.__initEast = function (D, F) {
	if (D.eObj) {
		if (SeeUtils.getElObj("eastSp_" + F.id) != null) {
			SeeUtils.removeEl("eastSp_" + F.id)
		}
		var G = "";
		var B = F.eastBorder ? 1 : 0;
		if (!F.disableDrag) {
			var A = "cursor:e-resize;"
		} else {
			var A = ""
		}
		if (F.eastFlag == 2) {
			G = "<span class='spiret spiret_R' id='eastSp_" + F.id + "' style='" + A + "z-index:3;width:" + F.spritHeight + "px;height:" + (D._m_height + F.borderWidth * (F.eastBorder ? 2 : 0)) + "px;left:" + (D.width - F.eWidth - F.spritHeight) + "px;top:" + (D._m_top) + "px;'><table valign='middle' border='0' cellpadding='0' cellspacing='0' width='100%' style='display:" + (F.spiretBarE ? "table" : "none") + ";margin-top:" + ((D._m_height - F.borderWidth * (F.eastBorder ? 2 : 0)) / 2 - 25) + "px'><tr><td><span class='spiretBarHidden'><em></em></span><span class='spiretBarHidden2'><em></em></span></td></tr></table></span>"
		}
		SeeUtils.cssByJson(D.eObj, {
			height: (D._m_height - F.borderWidth * (F.eastBorder ? 2 : 0)) + "px",
			left: (D.width - F.eWidth) + "px",
			top: (D._m_top) + "px",
			width: (F.eWidth - F.borderWidth * (F.eastBorder ? 2 : 0)) + "px",
			"border-width": B + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(D.eObj);
		SeeUtils.insertAfter(G, D.eObj);
		D.eastSpObj = SeeUtils.getElObj("eastSp_" + F.id);
		$("#eastSp_" + F.id).mousedown(function (I) {
			if (I.target == this) {
				D.dragStart("h", I, this, "east")
			}
		});
		if (F.spiretBarE.show) {
			var E = SeeUtils.getElObj("eastSp_" + F.id);
			var H = E.querySelector(".spiretBarHidden");
			var C = E.querySelector(".spiretBarHidden2");
			if (F.spiretBarE.showItem == "L") {
				SeeUtils.hideEl(H)
			} else {
				SeeUtils.hideEl(C)
			}
			window.layout_eastSpBarRClick = function () {
				SeeUtils.showEl(C);
				SeeUtils.hideEl(H);
				F.spiretBarE.handlerR()
			};
			SeeUtils.attrEl(H, "onclick", "layout_eastSpBarRClick()");
			window.layout_eastSpBarLClick = function () {
				SeeUtils.showEl(H);
				SeeUtils.hideEl(C);
				F.spiretBarE.handlerL()
			};
			SeeUtils.attrEl(C, "onclick", "layout_eastSpBarLClick()")
		}
	}
};
MxtLayout.prototype.__initNorth = function (E, A) {
	if (E.nObj) {
		if (SeeUtils.getElObj("northSp_" + A.id) != null) {
			SeeUtils.removeEl("northSp_" + A.id)
		}
		var I = "";
		var G = A.nHeight;
		var D = A.northBorder ? 1 : 0;
		if (!A.disableDrag) {
			var C = "cursor:row-resize;"
		} else {
			var C = ""
		}
		if (A.northFlag == 2) {
			I = "<span id='northSp_" + A.id + "' class='spiret spiret_T align_center' style='" + C + "z-index:3;width:" + E.width + "px;height:" + A.spritHeight + "px;left:0px;top:" + (A.nHeight) + "px;'><table align='center' border='0' cellpadding='0' cellspacing='0' height='100%' style='display:" + (A.spiretBarN ? "table" : "none") + ";'><tr><td align='center'><span class='spiretBarHidden4'><em></em></span><span class='spiretBarHidden3'><em></em></span></td></tr></table></span>";
			G = A.northArea.height
		}
		if (SeeUtils.getAttrEl(E.nObj, "style") == null) {
			SeeUtils.setElHeight(E.nObj, (G - A.borderWidth * (A.northBorder ? 2 : 0)) + "px")
		}
		SeeUtils.cssByJson(E.nObj, {
			left: "0px",
			top: "0px",
			"border-width": D + "px",
			width: E._100 - A.borderWidth * (A.northBorder ? 2 : 0) + "px",
			"z-index": "1"
		});
		SeeUtils.showEl(E.nObj);
		SeeUtils.insertAfter(I, E.nObj);
		if (A.northFlag == 2) {
			var H = SeeUtils.getElObj("northSp_" + A.id);
			E.northSpObj = H;
			$("#northSp_" + A.id).mousedown(function (J) {
				if (J.target == this) {
					E.dragStart("h", J, this, "north")
				}
			});
			if (A.spiretBarN.show) {
				var B = H.querySelector(".spiretBarHidden3");
				var F = H.querySelector(".spiretBarHidden4");
				SeeUtils.css(F, "borderRight", 0);
				if (A.spiretBarN.type == "1") {
					SeeUtils.hideEl(H.querySelector(".spiretBarHidden3"));
					SeeUtils.css(F, "borderRight", "")
				}
				window.layout_northSpBarBClick = function () {
					if (A.spiretBarN.type == "1") {
						SeeUtils.showEl(F);
						SeeUtils.hideEl(B)
					}
					A.spiretBarN.handlerB()
				};
				SeeUtils.attrEl(B, "onclick", "layout_northSpBarBClick()");
				window.layout_northSpBarTClick = function () {
					if (A.spiretBarN.type == "1") {
						SeeUtils.hideEl(F);
						SeeUtils.showEl(B)
					}
					A.spiretBarN.handlerT()
				};
				SeeUtils.attrEl(F, "onclick", "layout_northSpBarTClick()")
			}
		}
	}
};
MxtLayout.prototype.setEast = function (C) {
	if (C == undefined) {
		return
	}
	var A = this.params;
	var F = this.methods;
	if (F.eObj) {
		var K = parseInt(SeeUtils.getElWidth(F.eObj));
		var D = parseInt(SeeUtils.getCss(F.eObj, "left"));
		var B = K - C;
		SeeUtils.setElWidth(F.eObj, C);
		A.eWidth = C;
		var J = D + B;
		SeeUtils.css(F.eObj, "left", J)
	}
	if (F.eastSpObj) {
		var I = parseInt(SeeUtils.getCss(F.eastSpObj, "left"));
		var H = I + B;
		SeeUtils.css(F.eastSpObj, "left", H)
	}
	if (F.cObj) {
		var E = parseInt(SeeUtils.getElWidth(F.cObj));
		var G = E + B;
		SeeUtils.setElWidth(F.cObj, G)
	}
	A.setCallFun({
		offsetX: B
	})
};
MxtLayout.prototype.setWest = function (D) {
	if (D == undefined) {
		return
	}
	var A = this.params;
	var F = this.methods;
	if (F.wObj) {
		this._clearScroll({
			obj: F.wObj,
			mode: "hidden"
		});
		var J = parseInt(SeeUtils.getElWidth(F.wObj));
		var B = J - D;
		SeeUtils.setElWidth(F.wObj, D);
		A.wWidth = D;
		this._clearScroll({
			obj: F.wObj,
			mode: "show"
		})
	}
	if (F.westSpObj) {
		var C = parseInt(SeeUtils.getCss(F.westSpObj, "left"));
		var H = C - B;
		SeeUtils.css(F.westSpObj, "left", H)
	}
	if (F.cObj) {
		var G = parseInt(SeeUtils.getElWidth(F.cObj));
		var I = G + B;
		var K = parseInt(SeeUtils.getCss(F.cObj, "left"));
		var E = K - B;
		SeeUtils.setElWidth(F.cObj, I);
		SeeUtils.css(F.cObj, "left", E)
	}
	A.setCallFun({
		offsetX: B
	})
};
MxtLayout.prototype.setSouth = function (S) {
	if (S == undefined) {
		return
	}
	var K = this.params;
	var N = this.methods;
	if (N.sObj) {
		var R = parseInt(SeeUtils.getElHeight(N.sObj));
		var L = parseInt(SeeUtils.getCss(N.sObj, "top"));
		var H = R - S;
		var O = L + H;
		SeeUtils.setElHeight(N.sObj, S);
		K.sHeight = S;
		SeeUtils.css(N.sObj, "top", O)
	}
	if (N.southSpObj) {
		var C = parseInt(SeeUtils.getCss(N.southSpObj, "top"));
		var A = C + H;
		SeeUtils.css(N.southSpObj, "top", A)
	}
	if (N.cObj) {
		var B = parseInt(SeeUtils.getElHeight(N.cObj));
		var F = B + H;
		SeeUtils.setElHeight(N.cObj, F)
	}
	if (N.wObj) {
		var D = parseInt(SeeUtils.getElHeight(N.wObj));
		var M = D + H;
		SeeUtils.setElHeight(N.wObj, M)
	}
	if (N.eObj) {
		var E = parseInt(SeeUtils.getElHeight(N.eObj));
		var J = E + H;
		SeeUtils.setElHeight(N.eObj, J)
	}
	if (N.westSpObj) {
		var P = parseInt(SeeUtils.getElHeight(N.westSpObj));
		var Q = P + H;
		SeeUtils.setElHeight(N.westSpObj, Q)
	}
	if (N.eastSpObj) {
		var I = parseInt(SeeUtils.getElHeight(N.eastSpObj));
		var G = I + H;
		SeeUtils.setElHeight(N.eastSpObj, G)
	}
	K.setCallFun({
		offsetY: H
	})
};
MxtLayout.prototype.setNorth = function (Z) {
	if (Z == undefined) {
		return
	}
	var R = this.params;
	var U = this.methods;
	if (U.nObj) {
		var E = SeeUtils.getElHeight(U.nObj);
		var M = E - Z;
		SeeUtils.setElHeight(U.nObj, Z);
		R.nHeight = Z
	}
	if (U.northSpObj) {
		var L = parseInt(SeeUtils.getCss(U.northSpObj, "top"));
		var A = L - M;
		SeeUtils.css(U.northSpObj, "top", A)
	}
	if (U.cObj) {
		var B = SeeUtils.getElHeight(U.cObj);
		var J = B + M;
		SeeUtils.setElHeight(U.cObj, J);
		var T = parseInt(SeeUtils.getCss(U.cObj, "top"));
		var a = T - M;
		SeeUtils.css(U.cObj, "top", a)
	}
	if (U.wObj) {
		var D = SeeUtils.getElHeight(U.wObj);
		var V = parseInt(SeeUtils.getCss(U.wObj, "top"));
		var S = D + M;
		var I = V - M;
		SeeUtils.setElHeight(U.wObj, S);
		SeeUtils.css(U.wObj, "top", I)
	}
	if (U.westSpObj) {
		var W = SeeUtils.getElHeight(U.westSpObj);
		var Q = parseInt(SeeUtils.getCss(U.westSpObj, "top"));
		var Y = W + M;
		var N = Q - M;
		SeeUtils.setElHeight(U.westSpObj, Y);
		SeeUtils.css(U.westSpObj, "top", N)
	}
	if (U.eObj) {
		var F = SeeUtils.getElHeight(U.eObj);
		var X = parseInt(SeeUtils.getCss(U.eObj, "top"));
		var P = F + M;
		var G = X - M;
		SeeUtils.setElHeight(U.eObj, P);
		SeeUtils.css(U.eObj, "top", G)
	}
	if (U.eastSpObj) {
		var O = SeeUtils.getElHeight(U.eastSpObj);
		var H = parseInt(SeeUtils.getCss(U.eastSpObj, "top"));
		var K = O + M;
		var C = H - M;
		SeeUtils.setElHeight(U.eastSpObj, K);
		SeeUtils.css(U.eastSpObj, "top", C)
	}
	R.setCallFun({
		offsetY: M
	})
};
MxtLayout.prototype.getNorthHeight = function () {
	var A = this.params;
	return A.nHeight
};
MxtLayout.prototype.getSouthHeight = function () {
	var A = this.params;
	return A.sHeight
};
MxtLayout.prototype.getWestWidth = function () {
	var A = this.params;
	return A.wWidth
};
MxtLayout.prototype.getEastWidth = function () {
	var A = this.params;
	return A.eWidth
};
MxtLayout.prototype._clearScroll = function (A) {
	if (A.mode == "hidden") {
		SeeUtils.css(A.obj, "overflow", "hidden")
	} else {
		SeeUtils.css(A.obj, "overflow", "")
	}
};
MxtLayout.prototype.setEastSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.eastFlag = 2
	} else {
		C.eastFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setWestSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.westFlag = 2
	} else {
		C.westFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setSouthSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.southFlag = 2
	} else {
		C.southFlag = 1
	}
	B.init(this)
};
MxtLayout.prototype.setNorthSp = function (A) {
	var C = this.params;
	var B = this.methods;
	if (A) {
		C.northFlag = 2
	} else {
		C.northFlag = 1
	}
	B.init(this)
};
$(document).ready(function () {
	if ($.browser.msie) {}
});
(function (A) {
	A.extend({
		init_stadic_layout: function () {
			A("html").css({
				height: "100%",
				overflow: "hidden"
			});
			A("body").css({
				height: "100%",
				overflow: "hidden",
				padding: "0px",
				margin: "0px",
				border: "0px"
			})
		}
	});
	A.fn.noSelect = function (C) {
		var B = (C == null) ? true : C;
		if (B) {
			return this.each(function () {
				if (A.browser.msie || A.browser.safari) {
					A(this).bind("selectstart", function () {
						return false
					})
				} else {
					if (A.browser.mozilla) {
						A(this).css("MozUserSelect", "none");
						A("body").trigger("focus")
					} else {
						if (A.browser.opera) {
							A(this).bind("mousedown", function () {
								return false
							})
						} else {
							A(this).attr("unselectable", "on")
						}
					}
				}
			})
		} else {
			return this.each(function () {
				if (A.browser.msie || A.browser.safari) {
					A(this).unbind("selectstart")
				} else {
					if (A.browser.mozilla) {
						A(this).css("MozUserSelect", "inherit")
					} else {
						if (A.browser.opera) {
							A(this).unbind("mousedown")
						} else {
							A(this).removeAttr("unselectable", "on")
						}
					}
				}
			})
		}
	}
})(jQuery);
function MxtToolTip(A) {
	this.id = A.id ? A.id : "toolTip_" + Math.floor(Math.random() * 1000000000);
	this.width = A.width ? A.width : 200;
	this.event = A.event ? A.event : null;
	this.targetId = A.targetId ? A.targetId : null;
	this.openPoint = A.openPoint ? A.openPoint : [];
	this.openAuto = A.openAuto ? A.openAuto : false;
	this.direction = A.direction ? A.direction : "TL";
	this.showHtmlID = A.htmlID ? A.htmlID : null;
	this.showMsg = A.msg ? A.msg : null;
	this.targetWindow = A.targetWindow == null ? window : A.targetWindow;
	this.z_index = this.targetWindow.getMaxZindex();
	this.left = 0;
	this.top = 0;
	this.init()
}
MxtToolTip.prototype.init = function () {
	var B = this;
	$(".tooltip").remove();
	var A = "";
	A += "<div id='" + this.id + "' class='tooltip' style='display:none; position: absolute; width: " + this.width + "px;z-index:" + this.z_index + "'>";
	A += "<div class='tooltip_border'>";
	A += "<span><em class='tooltip_em' style=''></em></span>";
	A += "<div class='tooltip_text'></div>";
	A += "</div>";
	A += "</div>";
	$(this.targetWindow.document).find("body").append(A);
	if (this.showHtmlID != null) {
		$("#" + this.showHtmlID).wrap("<div id='" + this.id + "_area'></div>");
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").append($("#" + this.showHtmlID).clone(true));
		$("#" + this.id + "_area").empty()
	} else {
		if (this.showMsg != null) {
			$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html(this.showMsg)
		} else {
			$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html($("#" + this.targetId).attr("tooltip"))
		}
	}
	this.setPoint(this.left, this.top);
	if (this.openAuto == true) {
		this.show()
	}
	var B = this;
	$(this.targetWindow.document).find("#" + this.id + " .tooltip_close").click(function () {
		B.hide()
	})
};
MxtToolTip.prototype.getPD = function () {
	var E;
	var B;
	var D = $(this.targetWindow.document).find("#" + this.id).width();
	var F = $(this.targetWindow.document).find("#" + this.id).height();
	var C = $(this.targetWindow).width();
	var A = $(this.targetWindow).height();
	if (this.event) {
		E = $("#" + this.targetId).offset().left;
		B = $("#" + this.targetId).offset().top + $("#" + this.targetId).height()
	} else {
		E = this.openPoint[0];
		B = this.openPoint[1]
	}
	if ((this.direction.substr(0, 1) == "T") || (this.direction.substr(0, 1) == "B")) {
		if (E + D > C) {
			this.direction = this.direction.substr(0, 1) + "R";
			this.left = E - D
		} else {
			this.left = E
		}
		if (B + F > A - 5) {
			this.direction = "B" + this.direction.substr(1);
			this.top = B - F
		} else {
			this.top = B + 5
		}
	} else {
		if (E + D > C) {
			this.direction = "R" + this.direction.substr(1);
			this.left = E - D
		} else {
			this.left = E
		}
		if (B + F > A) {
			this.direction = this.direction.substr(0, 1) + "B";
			this.top = B - F
		} else {
			this.top = B
		}
	}
	this.setDirection(this.direction)
};
MxtToolTip.prototype.setPoint = function (A, B) {
	this.left = A;
	this.top = B;
	this.getPD();
	$(this.targetWindow.document).find("#" + this.id).css({
		left: this.left + "px",
		top: this.top + "px"
	})
};
MxtToolTip.prototype.setDirection = function (B) {
	var C = $(this.targetWindow.document).find("#" + this.id + " .tooltip_em");
	var A = "";
	switch (B) {
	case "TL":
		A = "0 -166px";
		C.css({
			left: "",
			top: "-5px",
			right: "",
			bottom: ""
		});
		break;
	case "TR":
		A = "0 -166px";
		C.css({
			left: "",
			top: "-5px",
			right: "10px",
			bottom: ""
		});
		break;
	case "BL":
		A = "0 -160px";
		C.css({
			left: "",
			top: "",
			right: "",
			bottom: "-5px"
		});
		break;
	case "BR":
		A = "0 -160px";
		C.css({
			left: "",
			top: "",
			right: "10px",
			bottom: "-5px"
		});
		break;
	case "LT":
		A = "-22px -160px";
		C.css({
			left: "-5px",
			top: "",
			right: "",
			bottom: "",
			width: "6px",
			height: "11px"
		});
		break;
	case "LB":
		A = "-22px -160px";
		C.css({
			left: "-5px",
			top: "",
			right: "",
			bottom: "10px",
			width: "6px",
			height: "11px"
		});
		break;
	case "RT":
		A = "-16px -160px";
		C.css({
			left: "",
			top: "",
			right: "-5px",
			bottom: "",
			width: "6px",
			height: "11px"
		});
		break;
	case "RB":
		A = "-16px -160px";
		C.css({
			left: "",
			top: "",
			right: "-5px",
			bottom: "10px",
			width: "6px",
			height: "11px"
		});
		break
	}
	C.css({
		"background-position": A
	})
};
MxtToolTip.prototype.setHtml = function (A) {
	if (A.id) {
		if (this.showHtmlID != null) {
			$(this.targetWindow.document).find("#" + this.showHtmlID).clone(true).appendTo("#" + this.id + "_area");
			$("#" + this.showHtmlID).unwrap()
		}
		this.showHtmlID = A.id;
		$("#" + this.showHtmlID).wrap("<div id='" + this.showHtmlID + "_area'></div>");
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").empty().append($("#" + this.showHtmlID).clone(true));
		$("#" + this.showHtmlID + "_area").empty()
	}
	if (A.text) {
		$(this.targetWindow.document).find("#" + this.id + " .tooltip_text").html(A.text)
	}
};
MxtToolTip.prototype.close = function () {
	$(this.targetWindow.document).find("#" + this.showHtmlID).clone(true).appendTo("#" + this.id + "_area");
	$("#" + this.showHtmlID).unwrap();
	$(this.targetWindow.document).find("#" + this.id).remove()
};
MxtToolTip.prototype.show = function () {
	$(this.targetWindow.document).find("#" + this.id).show()
};
MxtToolTip.prototype.hide = function () {
	$(this.targetWindow.document).find("#" + this.id).hide()
};
function MxtTip(A) {
	this.settings = {
		id: "MxtTip" + Math.floor(Math.random() * 100000000),
		targetId: null,
		top: 0,
		left: 0,
		keepTime: 2000,
		autoShow: true,
		autoClose: true,
		offsetTop: 0,
		offsetLeft: 0,
		checkPosition: true,
		color: "#463900",
		background: "#FDF0A4",
		content: "\u9700\u8981\u4f60\u7ed9\u6211\u6307\u5b9a\u5185\u5bb9,\u4eb2~",
		beforeShowCallBack: function () {},
		callBack: function () {}
	};
	$.extend(this.settings, A);
	this.init()
}
MxtTip.prototype.init = function () {
	var E = this;
	var C = "";
	C += "<div id='" + E.settings.id + "' class='MxtTip' style='display:none;position:absolute;z-index:10000;left:0;top:0; background:" + E.settings.background + ";color:" + E.settings.color + ";'><div class='MxtTip_content' style='padding: 5px 10px;font-size:12px;'>" + E.settings.content + "<em class='close ico16 close_16' style='display:none;'></em></div></div>";
	$("body").append(C);
	E.myObj = $("#" + E.settings.id);
	if (E.settings.targetId) {
		var A = E.myObj.width();
		var G = $("#" + E.settings.targetId);
		var D = G.width() == null ? D = document.body.clientWidth : G.width();
		var H,
		I;
		var B = G.length ? G.offset().top : 0;
		var F = G.length ? G.offset().left : 0;
		H = B;
		I = F * 1 + (D - A) / 2;
		E.setPosition({
			top: H,
			left: I
		})
	} else {
		if (E.settings.top && E.settings.left) {
			E.setPosition({
				top: E.settings.top,
				left: E.settings.left
			})
		}
	}
	this.mouserHander();
	if (E.settings.autoShow) {
		E.show()
	}
};
MxtTip.prototype.setPosition = function (A) {
	var D = this;
	var C = A.top * 1 + D.settings.offsetTop;
	var B = A.left * 1 + D.settings.offsetLeft;
	if (D.settings.checkPosition) {
		C = C >= 0 ? C : 0;
		B = B >= 0 ? B : 0
	}
	D.myObj.css({
		top: C + "px",
		left: B + "px"
	})
};
MxtTip.prototype.mouserHander = function () {};
MxtTip.prototype.show = function () {
	var A = this;
	A.settings.beforeShowCallBack();
	A.myObj.fadeIn("fast");
	setTimeout(function () {
		A.close()
	}, A.settings.keepTime)
};
MxtTip.prototype.close = function () {
	var A = this;
	A.myObj.fadeOut("fast", function () {
		A.myObj.remove();
		A.settings.callBack()
	})
};
var AssertUtils = {
	isString: function (A) {
		return "[object String]" == Object.prototype.toString.call(A)
	},
	isFunction: function (A) {
		if (AssertUtils.isNotNull(A)) {
			if (typeof A == "function") {
				return true
			} else {
				return false
			}
		}
	},
	isObject: function (A) {
		if (A != null && typeof A == "object") {
			return true
		} else {
			return false
		}
	},
	isNotNull: function (A) {
		if (A != null && typeof A != undefined && typeof A != null) {
			return true
		} else {
			return false
		}
	},
	isNotEmpty: function (A) {
		if (A != null && typeof A != undefined && A !== "") {
			return true
		} else {
			return false
		}
	},
	isUrl: function (A) {
		if (typeof A == "" && A.indexOf("/")) {
			return true
		} else {
			return false
		}
	},
	isArray: function (A) {
		if (typeof A === "object" && typeof A.slice === "function" && typeof A.sort === "function" && typeof A.length === "number" && !A.propertyIsEnumerable(A.length)) {
			return true
		} else {
			return false
		}
	},
	isNumber: function (A) {
		return (parseFloat(A) == A)
	}
};
var SeeUtils = {
	getPageY: function (A) {
		return A.y ? A.y : A.pageY
	},
	getPageX: function (A) {
		return A.x ? A.x : A.pageX
	},
	trim: function (E) {
		var C = E.toCharArray();
		var A = 0;
		var D = C.length;
		for (var B = 0; B < C.length; B++) {
			var F = C[B];
			if (F == " ") {
				A++
			} else {
				break
			}
		}
		if (A == E.length) {
			return ""
		}
		for (var B = C.length; B > 0; B--) {
			var F = C[B - 1];
			if (F == " ") {
				D--
			} else {
				break
			}
		}
		return E.substring(A, D)
	},
	eventHandler: {},
	beforeEL: function (B, A) {
		B = SeeUtils.getElObj(B);
		A = SeeUtils.getElObj(A);
		$(B).before(A)
	},
	afterEL: function (B, A) {
		B = SeeUtils.getElObj(B);
		A = SeeUtils.getElObj(A);
		$(B).after(A)
	},
	executeCusEvent: function (D, C) {
		if (AssertUtils.isNotEmpty((D))) {
			var B = D.split(";");
			for (var A = 0; A < B.length; A++) {
				if (typeof SeeUtils.eventHandler[B[A]] == "function") {
					SeeUtils.eventHandler[B[A]](C)
				}
			}
		}
	},
	isVisible: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (A.style.display != "none") {
				return true
			}
		}
		return false
	},
	getLabel: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			return A.innerText
		} else {
			return ""
		}
	},
	executeMouseenter: function (B) {
		B = SeeUtils.getElObj(B);
		var A = SeeUtils.getAttrEl(B, "mouseenterid");
		SeeUtils.executeCusEvent(A, B)
	},
	executeMouseleave: function (B) {
		B = SeeUtils.getElObj(B);
		var A = SeeUtils.getAttrEl(B, "mouseleaveid");
		SeeUtils.executeCusEvent(A, B)
	},
	executeClick: function (A) {
		A = SeeUtils.getElObj(A);
		SeeUtils.triggerClick(A)
	},
	toggleClass: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (SeeUtils.hasClass(A, B)) {
			SeeUtils.removeClass(A, B)
		} else {
			SeeUtils.addClass(A, B)
		}
	},
	triggerClick: function (B) {
		if (B.click) {
			B.click()
		} else {
			try {
				var A = document.createEvent("Event");
				A.initEvent("click", true, true);
				B.dispatchEvent(A)
			} catch (C) {}
		}
	},
	isOpera: (navigator.userAgent.indexOf("Opera") > -1),
	isFF: (navigator.userAgent.indexOf("Firefox") > -1),
	isSafari: (navigator.userAgent.indexOf("Safari") > -1),
	isIE: (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0),
	isIE6: (window.XMLHttpRequest == null && navigator.userAgent.indexOf("MSIE") >= 0),
	isIE7: (navigator.userAgent.indexOf("MSIE 7.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE8: (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 8\.0/i.test(navigator.userAgent) || (navigator.userAgent.indexOf("MSIE") >= 0 || navigator.userAgent.indexOf("Trident") >= 0) && /msie 7\.0/i.test(navigator.userAgent),
	isIE9: (navigator.userAgent.indexOf("MSIE 9.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE10: (navigator.userAgent.indexOf("MSIE 10.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	isIE11: (navigator.userAgent.indexOf("MSIE 11.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0 || navigator.userAgent.indexOf("rv:11.0") >= 0 && navigator.userAgent.indexOf("Trident") >= 0),
	getElObj: function (B, A) {
		if (B != null) {
			if (A != null) {
				if (typeof B == "string" || typeof B == "number") {
					B = A.document.getElementById(B + "")
				}
			} else {
				if (typeof B == "string" || typeof B == "number") {
					B = document.getElementById(B + "")
				}
			}
			return B
		} else {
			return null
		}
	},
	getSizeById: function (B, A) {
		var C = null;
		if (A != null) {
			C = A.document.getElementById(B)
		} else {
			C = document.getElementById(B)
		}
		if (C != null) {
			return 1
		} else {
			return 0
		}
	},
	eachChildren: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			for (var C = 0; C < B.children.length; C++) {
				if (A != null && AssertUtils.isFunction(A)) {
					A(B.children[C])
				}
			}
			return B.children
		}
		return []
	},
	eachAllSonElsByClass: function (F, H) {
		function G(N, L) {
			var K = N.childNodes;
			for (var J = 0; J < K.length; J++) {
				var M = K[J];
				if (M != null) {
					L.push(M);
					G(M, L)
				}
			}
		}
		var C = [];
		var B = SeeUtils.getByClass(document, F);
		for (var D = 0; D < B.length; D++) {
			var E = B[D];
			C.push(E);
			G(E, C)
		}
		for (var A = 0; A < C.length; A++) {
			var I = C[A];
			typeof H == "function" && H(I, A)
		}
	},
	siblings: function (B, E, F) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = [];
		var A = [];
		if (!B.parentNode) {
			return C
		}
		A = B.parentNode.childNodes;
		for (var D = 0; D < A.length; D++) {
			if (A[D] != B && A[D].nodeType === 1 && B.tagName === E.toUpperCase()) {
				C.push(A[D]);
				if (AssertUtils.isFunction(F)) {
					F(A[D])
				}
			}
		}
	},
	getSizeByClass: function (C, A) {
		if (A != null) {
			var B = SeeUtils.getByClass(A.document, C);
			return B.length
		} else {
			return SeeUtils.getByClass(document, C).length
		}
	},
	getFirstElByClass: function (D, B, A) {
		var C = [];
		if (B != null) {
			C = SeeUtils.getByClass(B.document, D)
		} else {
			if (A == null) {
				A = document
			}
			C = SeeUtils.getByClass(A, D)[0]
		}
		if (C.length > 0) {
			return C[0]
		}
	},
	removeElByClass: function (B, A) {
		if (A != null) {
			return SeeUtils._removeElByClass(A.document, B)
		} else {
			return SeeUtils._removeElByClass(document, B)
		}
	},
	_removeElByClass: function (D, B) {
		var E = [];
		var C = SeeUtils.getByClass(D, B);
		if (B.indexOf(".") == 0) {
			B = B.substring(1, B.length)
		}
		for (var A = 0; A < C.length; A++) {
			if (C[A].className != null && C[A].className.indexOf(B) >= 0) {
				SeeUtils.removeEl(C[A])
			}
		}
	},
	_getObjType: function (A) {
		switch (A.constructor) {
		case Object:
			return "Object";
			break;
		case Array:
			return "Array";
			break;
		case NodeList:
			return "NodeList";
			break;
		default:
			return "null";
			break
		}
	},
	each: function (A, D) {
		var C = SeeUtils._getObjType(A);
		if (C === "Array" || C === "NodeList") {
			[].every.call(A, function (E, F) {
				return D.call(E, F, E) === false ? false : true
			})
		} else {
			if (C === "Object") {
				for (var B in A) {
					if (D.call(A[B], B, A[B]) === false) {
						break
					}
				}
			}
		}
	},
	getElByTag: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			var C = B.getElementsByTagName(A);
			return C
		}
		return []
	},
	_getParents: function (C, A, B) {
		if (A != null) {
			if (SeeUtils.hasClass(A, B)) {
				C.push(A)
			}
		}
		if (A != null) {
			SeeUtils._getParents(C, A.parentNode, B)
		}
	},
	getParentsByClass: function (C, B) {
		if (B.indexOf(".") == 0) {
			B = B.substring(1, B.length)
		}
		var A = [];
		SeeUtils._getParents(A, C, B);
		return A
	},
	_closestEl: function (B, A) {
		if (B != null) {
			if (B.tagName === A.toUpperCase()) {
				return B
			} else {
				return SeeUtils._closestEl(B.parentNode, A)
			}
		}
		return null
	},
	_closestElByClass: function (B, A) {
		if (B != null) {
			if (SeeUtils.hasClass(B, A)) {
				return B
			} else {
				return SeeUtils._closestElByClass(B.parentNode, A)
			}
		}
		return null
	},
	closestByClass: function (C, B) {
		var A = (B + "").split(".");
		var B = A[0];
		if (A.length > 0) {
			B = A[1]
		}
		C = SeeUtils.getElObj(C);
		if (C != null) {
			return SeeUtils._closestElByClass(C.parentNode, B)
		}
		return null
	},
	closestByTagName: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			if (B.tagName === A.toUpperCase()) {
				return B
			}
			return SeeUtils._closestEl(B.parentNode, A)
		}
		return null
	},
	eachElsByTagAndProp: function (A, C, F, B, E) {
		var I = [];
		A = SeeUtils.getElObj(A);
		if (A != null) {
			var D = SeeUtils.getElByTag(A, C);
			for (var G = 0; G < D.length; G++) {
				var H = D[G];
				if (SeeUtils.getAttrEl(H, F) === B) {
					I.push(H);
					if (E != null && AssertUtils.isFunction(E)) {
						E(H, G)
					}
				}
			}
		}
		return I
	},
	getCheckedInpus: function (D) {
		var A = [];
		D = SeeUtils.getElObj(D);
		if (D != null) {
			var E = SeeUtils.getElByTag(D, "input");
			for (var B = 0; B < E.length; B++) {
				var C = E[B];
				if (C.checked) {
					A.push(C)
				}
			}
		}
		return A
	},
	getNextEl: function (B) {
		var A = null;
		if (SeeUtils.isIE8) {
			A = B.nextSibling
		} else {
			A = B.nextElementSibling
		}
		if (A) {
			if (A.nodeType === 1) {
				return A
			}
		} else {
			return null
		}
	},
	getPrevEle: function (A) {
		var B = A.previousSibling;
		if (B) {
			if (B.nodeType === 1) {
				return B
			}
			if (B.previousSibling) {
				return arguments.callee(B)
			}
		} else {
			return null
		}
	},
	eachBySiblings: function (B, E) {
		var C = [];
		var A = [];
		if (!B.parentNode) {
			return C
		}
		A = B.parentNode.childNodes;
		for (var D = 0; D < A.length; D++) {
			if (A[D] != B && A[D].nodeType === 1) {
				C.push(A[D]);
				if (AssertUtils.isFunction(E)) {
					E(A[D])
				}
			}
		}
		return C
	},
	eachByTag: function (D, B, F) {
		var C = SeeUtils.getElByTag(D, B);
		for (var E = 0; E < C.length; E++) {
			var A = C[E];
			typeof F == "function" && F(A, E)
		}
	},
	eachByClass: function (D, B, E) {
		var C = SeeUtils.getByClass(D, B);
		for (var A = 0; A < C.length; A++) {
			typeof E == "function" && E(C[A], A)
		}
	},
	getByClass: function (C, B) {
		C = SeeUtils.getElObj(C);
		if (C == null) {
			return []
		}
		if (B.indexOf(".") != 0) {
			B = "." + B
		}
		if (C == null) {
			return []
		}
		if (B.indexOf(".") != 0) {
			B = "." + B
		}
		var A = C.querySelectorAll(B);
		return A
	},
	hasClass: function (C, B) {
		C = SeeUtils.getElObj(C);
		if (C == null) {
			return void(0)
		}
		if (C.className != null) {
			var A = C.className.match(new RegExp("(\\s|^)" + B + "(\\s|$)"));
			if (A == null) {
				return false
			} else {
				return true
			}
		} else {
			return false
		}
	},
	addClass: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		if (!SeeUtils.hasClass(B, A)) {
			B.className += " " + A
		}
	},
	removeClass: function (C, A) {
		C = SeeUtils.getElObj(C);
		if (SeeUtils.hasClass(C, A)) {
			var B = new RegExp("(\\s|^)" + A + "(\\s|$)");
			C.className = C.className.replace(B, " ")
		}
	},
	getInnerWidth: function (A) {
		var B = parseFloat(SeeUtils.getElWidth(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingLeft"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingRight")));
		return B
	},
	getOuterWidth: function (A) {
		var B = parseFloat(SeeUtils.getElWidth(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderLeftWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderRightWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingLeft"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingRight")));
		return B
	},
	getInnerHeight: function (A) {
		var B = parseFloat(SeeUtils.getElHeight(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingTop"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingBottom")));
		return B
	},
	getOuterHeight: function (A) {
		var B = parseFloat(SeeUtils.getElHeight(A)) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderTopWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "borderBottomWidth"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingTop"))) + parseFloat(SeeUtils.getNumber(SeeUtils.getCss(A, "paddingBottom")));
		return B
	},
	getElWidth: function (B) {
		B = SeeUtils.getElObj(B);
		if (B != null && SeeUtils.isShow(B)) {
			if (B.style.width != null && B.style.width.length > 0 && B.style.width != "auto" && (B.style.width + "").indexOf("%") == -1) {
				return parseFloat(B.style.width)
			}
			if (parseFloat(SeeUtils._getStyleValue(B, "width")) > 0 && SeeUtils._getStyleValue(B, "width").indexOf("%") == -1) {
				return parseFloat(SeeUtils._getStyleValue(B, "width"))
			}
			if (B.offsetWidth > 0) {
				var A = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderLeftWidth"));
				var G = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderRightWidth"));
				var D = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingLeft"));
				var H = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingRight"));
				var F = parseFloat(B.offsetWidth) - parseFloat(A) - parseFloat(G) - parseFloat(D) - parseFloat(H);
				return parseFloat(F)
			}
			return 0
		} else {
			if (B != null) {
				var C = B.getAttribute("style");
				SeeUtils.attrEl(B, "style", "visibility:hidden;display:inline-block !important;" + C);
				var E = SeeUtils.getElWidth(B);
				SeeUtils.attrEl(B, "style", C);
				return Math.ceil(E)
			} else {
				return 0
			}
		}
	},
	getDocumentHeight: function () {
		return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
	},
	getDocumentWidth: function () {
		return document.documentElement.scrollWidth
	},
	getStyle: function (B, A) {
		if (window.getComputedStyle) {
			return window.getComputedStyle(B)[A]
		} else {
			return B.currentStyle[A]
		}
	},
	getElOffest: function (E) {
		E = SeeUtils.getElObj(E);
		function G(N) {
			return N != null && N == N.window
		}
		function B(N) {
			return G(N) ? N : N.nodeType === 9 ? N.defaultView || N.parentWindow : false
		}
		var C,
		J,
		K,
		H,
		L,
		A,
		F,
		I = {
			top: 0,
			left: 0
		},
		D = E,
		M = D && D.ownerDocument;
		if (!M) {
			return
		}
		if ((J = M.body) === D) {
			return SeeUtils.bodyOffset(D)
		}
		C = M.documentElement;
		if (typeof D.getBoundingClientRect !== "undefined") {
			I = D.getBoundingClientRect()
		}
		K = B(M);
		H = C.clientTop || J.clientTop || 0;
		L = C.clientLeft || J.clientLeft || 0;
		A = K.pageYOffset || C.scrollTop;
		F = K.pageXOffset || C.scrollLeft;
		return {
			top: I.top + A - H,
			left: I.left + F - L
		}
	},
	offset: function (C) {
		var B = 0,
		A = 0;
		while (C.offsetParent) {
			B += C.offsetTop;
			A += C.offsetLeft;
			C = C.offsetParent
		}
		return {
			top: B,
			left: A
		}
	},
	bodyOffset: function (A) {
		var C = A.offsetTop,
		B = A.offsetLeft;
		return {
			top: C,
			left: B
		}
	},
	getWidthByClass: function (C, A) {
		var B = SeeUtils.getByClass(A.document, C);
		if (B.length > 0) {
			return SeeUtils.getElWidth(B[0])
		} else {
			return 0
		}
	},
	getClassElWidth: function (C, B) {
		var A = SeeUtils.getByClass(document.getElementById(C), B);
		if (A.length > 0) {
			return SeeUtils.getElWidth(A[0])
		} else {
			return 0
		}
	},
	getAllWidth: function (D, C) {
		var E = 0;
		var B = SeeUtils.getByClass(document.getElementById(D), C);
		if (B.length > 0) {
			for (var A = 0; A < B.length; A++) {
				E += SeeUtils.getElWidth(B[A])
			}
		}
		return E
	},
	_getStyleValue: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (!B.nodeType) {
			return void(0)
		}
		var C = B.ownerDocument.defaultView;
		if (!C || !C.opener) {
			C = window
		}
		if (B.currentStyle) {
			return B.currentStyle[A]
		} else {
			if (C.getComputedStyle != null) {
				return C.getComputedStyle(B)[A]
			}
		}
	},
	isShow: function (A) {
		A = SeeUtils.getElObj(A);
		var B = SeeUtils._getStyleValue(A, "display");
		if (B === "none") {
			return false
		} else {
			return true
		}
	},
	indexByTag: function (E, C, D) {
		var F = SeeUtils.getElByTag(E, C);
		for (var B = 0; B < F.length; B++) {
			var A = F[B];
			if (A == D) {
				return B
			}
		}
		return -1
	},
	getElHeight: function (B) {
		B = SeeUtils.getElObj(B);
		if (B != null && SeeUtils.isShow(B)) {
			if (B.style.height != null && B.style.height.length > 0 && B.style.height != "auto" && (B.style.height + "").indexOf("%") == -1) {
				return parseFloat(B.style.height)
			}
			if ((SeeUtils._getStyleValue(B, "height") + "").indexOf("%") == -1 && parseFloat(SeeUtils._getStyleValue(B, "height")) > 0) {
				return parseFloat(SeeUtils._getStyleValue(B, "height"))
			}
			if (B.offsetHeight > 0) {
				var H = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderTopWidth"));
				var E = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "borderBottomWidth"));
				var F = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingTop"));
				var G = SeeUtils.getNumber(SeeUtils._getStyleValue(B, "paddingBottom"));
				var D = parseFloat(B.offsetHeight) - parseFloat(H) - parseFloat(E) - parseFloat(F) - parseFloat(G);
				return parseFloat(D)
			}
			return 0
		} else {
			if (B != null) {
				var C = B.getAttribute("style");
				SeeUtils.attrEl(B, "style", "visibility:hidden;display:block !important;" + C);
				var A = SeeUtils.getElHeight(B);
				SeeUtils.attrEl(B, "style", C);
				return A
			} else {
				return 0
			}
		}
	},
	setElWidth: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null && AssertUtils.isNotEmpty(B)) {
			if ((B + "").indexOf("%") > 0 || B === "auto") {
				A.style.width = B
			} else {
				if (!isNaN(B)) {
					A.style.width = parseFloat(B) + "px"
				}
			}
		}
	},
	innerHTMl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (SeeUtils.isIE8 || SeeUtils.isIE9) {
				$(A).html(B)
			} else {
				A.innerHTML = B
			}
		}
	},
	setElHeight: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null && AssertUtils.isNotEmpty(A)) {
			if ((A + "").indexOf("%") > 0 || A === "auto") {
				B.style.height = A
			} else {
				if (parseFloat(A) >= 0) {
					B.style.height = parseFloat(A) + "px"
				}
			}
		}
	},
	insertAfter: function (E, B) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = B.parentNode;
		if (C.lastChild == B) {
			if (typeof E === "string") {
				var A = document.createElement("div");
				A.innerHTML = E;
				var D = document.createDocumentFragment();
				while (A.firstChild) {
					D.appendChild(A.firstChild)
				}
				C.appendChild(D)
			} else {
				C.appendChild(E)
			}
		} else {
			if (typeof E === "string") {
				var A = document.createElement("div");
				A.innerHTML = E;
				var D = document.createDocumentFragment();
				while (A.firstChild) {
					D.appendChild(A.firstChild)
				}
				C.insertBefore(D, B.nextSibling)
			} else {
				C.insertBefore(E, B.nextSibling)
			}
		}
	},
	insertBefore: function (E, B) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		var C = B.parentNode;
		if (typeof E === "string") {
			var A = document.createElement("div");
			A.innerHTML = E;
			var D = document.createDocumentFragment();
			while (A.firstChild) {
				D.appendChild(A.firstChild)
			}
			C.insertBefore(D, B)
		} else {
			C.insertBefore(E, B)
		}
	},
	appendToBody: function (C, A) {
		var E = null;
		if (A != null) {
			E = A.document.getElementsByTagName("body")
		} else {
			E = document.getElementsByTagName("body")
		}
		if (typeof C === "string") {
			var B = document.createElement("div");
			B.innerHTML = C;
			var D = document.createDocumentFragment();
			while (B.firstChild) {
				D.appendChild(B.firstChild)
			}
			E[0].appendChild(D);
			return D
		} else {
			E[0].appendChild(C);
			return C
		}
	},
	getNumber: function (A) {
		A = parseFloat(A);
		if (AssertUtils.isNumber(A)) {
			return A
		} else {
			return 0
		}
	},
	prependToBody: function (B, A, C) {
		var D = null;
		if (A != null) {
			D = A.document.getElementsByTagName("body")
		} else {
			D = document.getElementsByTagName("body")
		}
		if (D[0].childNodes.length > 0 && C !== true) {
			if (typeof B === "string") {
				SeeUtils.prepend(B, D[0])
			} else {
				D[0].insertBefore(B, D[0].childNodes[0])
			}
		} else {
			D[0].appendChild(B)
		}
	},
	removeChild: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A == null) {
			return void(0)
		}
		if (B != null) {
			A.removeChild(B)
		}
	},
	showHide: function (A, K) {
		var I = {
			BODY: "block"
		};
		var E,
		H = null;
		function J(P) {
			if (I[P]) {
				return I[P]
			}
			var O = SeeUtils.getUUid();
			var N = SeeUtils.appendToBody("<" + P + " id='" + O + "'>");
			G = SeeUtils._getStyleValue(O, "display");
			SeeUtils.removeEl(O);
			if (G === "none" || G === "") {
				var M = document.createElement("iframe");
				M.style.frameBorder = 0;
				M.style.width = 0;
				M.style.height = 0;
				SeeUtils.appendToBody(M);
				if (!H || !E.createElement) {
					H = (E.contentWindow || E.contentDocument).document;
					H.write("<!doctype html><html><body>");
					H.close()
				}
				D = H.body.appendChild(H.createElement(P));
				G = SeeUtils._getStyleValue(D, "display");
				document.body.removeChild(E)
			}
			I[P] = G;
			return G
		}
		function B(N, M) {
			N = M || N;
			return SeeUtils._getStyleValue(N, "display") === "none"
		}
		var D,
		G,
		L = [],
		F = 0,
		C = A.length;
		for (; F < C; F++) {
			D = A[F];
			if (!D.style) {
				continue
			}
			if (K) {
				if (!L[F] && D.style.display === "none") {
					D.style.display = ""
				}
				if (D.style.display === "" && B(D)) {
					L[F] = J(D.nodeName)
				}
			}
		}
		for (F = 0; F < C; F++) {
			D = A[F];
			if (!D.style) {
				continue
			}
			if (!K || D.style.display === "none" || D.style.display === "") {
				D.style.display = K ? L[F] || "" : "none"
			}
		}
		return A
	},
	showEl: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			return SeeUtils.showHide([B], true)
		}
	},
	getElVal: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			return B.value
		}
	},
	setElVal: function (A, C) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.value = C
		}
	},
	hideEl: function (A) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.style.display = "none"
		}
	},
	text: function (A, C) {
		var B = SeeUtils.getElObj(A);
		if (B != null) {
			B.innerText = C
		}
	},
	showElByClass: function (C) {
		var B = SeeUtils.getByClass(document, C);
		if (B.length > 0) {
			for (var A = 0; A < B.length; A++) {
				SeeUtils.showEl(B[A])
			}
		}
	},
	hideElByClass: function (D, A) {
		var C = [];
		if (A != null) {
			C = SeeUtils.getByClass(A.document, D)
		} else {
			C = SeeUtils.getByClass(document, D)
		}
		if (C.length > 0) {
			for (var B = 0; B < C.length; B++) {
				SeeUtils.hideEl(C[B])
			}
		}
	},
	getElByTagAndIndex: function (E, C, A) {
		var D = SeeUtils.getElByTag(E, C);
		for (var F = 0; F < D.length; F++) {
			var B = D[F];
			if (parseFloat(A) === F) {
				return B
			}
		}
		return null
	},
	removeEl: function (A) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			if (A.parentNode) {
				A.parentNode.removeChild(A)
			}
		}
	},
	html: function (B, A) {
		B = SeeUtils.getElObj(B);
		if (B != null) {
			B.innerHTML = A
		}
	},
	attrByClass: function (D, F, E, A) {
		var C = null;
		if (A != null) {
			C = SeeUtils.getByClass(A.document, D)
		} else {
			C = SeeUtils.getByClass(document, D)
		}
		if (C.length > 0) {
			for (var B = 0; B < C.length; B++) {
				SeeUtils.attrEl(C[B], F, E)
			}
		}
	},
	removeAttrEl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			A.removeAttribute(B)
		}
	},
	attrEl: function (A, C, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			A.setAttribute(C, B)
		}
		if (A != null && C === "value" && A.tagName === "INPUT") {
			A.value = B
		}
	},
	getAttrEl: function (A, B) {
		A = SeeUtils.getElObj(A);
		if (A != null) {
			return A.getAttribute(B)
		}
	},
	cssByClass: function (E, F, B, A) {
		var D = null;
		if (A != null) {
			D = SeeUtils.getByClass(A.document, E)
		} else {
			D = SeeUtils.getByClass(document, E)
		}
		if (D.length > 0) {
			for (var C = 0; C < D.length; C++) {
				SeeUtils.css(D[C], F, B)
			}
		}
	},
	getCss: function (A, D) {
		var C = SeeUtils.getElObj(A);
		var B = null;
		if (C != null) {
			B = C.style[D];
			if (!AssertUtils.isNotEmpty(B)) {
				B = SeeUtils._getStyleValue(C, D)
			}
		}
		return B
	},
	css: function (C, F, B, A) {
		var D = SeeUtils.getElObj(C, A);
		if (D != null && B != null && (B + "").indexOf("undefined") < 0) {
			B = B + "";
			if (F == "width" || F == "height" || F == "left" || F == "right" || F == "top" || F == "bottom" || F == "maxWidth" || F == "maxHeight") {
				if (B != null && B.length > 0 && B.indexOf("%") < 0 && B != "auto" && B != "none") {
					B = (B + "").split("px")[0] + "px"
				}
			}
			if (B != null) {
				try {
					D.style[F] = B
				} catch (E) {}
			}
		}
		return this
	},
	cssByJson: function (C, B, A) {
		var D = SeeUtils.getElObj(C, A);
		if (D != null) {
			for (var E in B) {
				SeeUtils.css(C, E, B[E])
			}
		}
	},
	prepend: function (D, B) {
		var C = SeeUtils.getElObj(B);
		if (C.childNodes[0] != null) {
			if (C == null || D == null) {
				return void(0)
			}
			if (typeof D === "string") {
				var A = document.createElement("div");
				A.innerHTML = D;
				var E = document.createDocumentFragment();
				while (A.firstChild) {
					C.insertBefore(A.firstChild, C.childNodes[0])
				}
				C.insertBefore(E, C.childNodes[0])
			} else {
				C.insertBefore(D, C.childNodes[0])
			}
		} else {
			SeeUtils.appendTo(D, B)
		}
	},
	appendTo: function (D, B) {
		var C = SeeUtils.getElObj(B);
		if (C == null || D == null) {
			return void(0)
		}
		if (typeof D === "string") {
			var A = document.createElement("div");
			A.innerHTML = D;
			var E = document.createDocumentFragment();
			while (A.firstChild) {
				E.appendChild(A.firstChild)
			}
			C.appendChild(E)
		} else {
			if (C.nodeType === 1 || C.nodeType === 11) {
				if (D instanceof jQuery) {
					if (D.get(0) != null) {
						C.appendChild(D.get(0))
					}
				} else {
					C.appendChild(D)
				}
			}
		}
	},
	getUUid: function () {
		function A() {
			return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1)
		}
		return ("id_" + A() + A() + "-" + A() + "-" + A() + "-" + A() + "-" + A() + A() + A())
	},
	addEvent: function (B, C, A) {
		B = SeeUtils.getElObj(B);
		if (B != null && typeof B == "object") {
			if (B.attachEvent) {
				if (C != null && C.indexOf("on") < 0) {
					C = "on" + SeeUtils.changeFirstCharToLow(C)
				}
				B.attachEvent(C, A)
			} else {
				if (B.addEventListener) {
					B.addEventListener(C, A, false)
				}
			}
		}
	},
	removeEvent: function (B, C, A) {
		B = SeeUtils.getElObj(B);
		if (B == null) {
			return void(0)
		}
		if (A == null) {
			A = function () {}
		}
		if (B.detachEvent) {
			if (C != null && C.indexOf("on") < 0) {
				C = "on" + SeeUtils.changeFirstCharToLow(C)
			}
			B.detachEvent(C, A)
		} else {
			if (B.removeEventListener) {
				B.removeEventListener(C, A, false)
			}
		}
	},
	changeFirstCharToUpp: function (C) {
		var B = C.substring(0, 1);
		var A = C.substring(1);
		C = B.toUpperCase() + A;
		return C
	},
	changeFirstCharToLow: function (C) {
		if (AssertUtils.isNotEmpty(C)) {
			var B = C.substring(0, 1);
			var A = C.substring(1);
			C = B.toLowerCase() + A;
			return C
		}
	},
	getWindowHeight: function () {
		if (window.innerHeight != undefined) {
			return window.innerHeight
		} else {
			var C = document.body,
			A = document.documentElement;
			return Math.min(A.clientHeight, C.clientHeight)
		}
	},
	ready: function (A) {
		if (document.addEventListener) {
			document.addEventListener("DOMContentLoaded", function () {
				document.removeEventListener("DOMContentLoaded", arguments.callee, false);
				A()
			}, false)
		} else {
			if (document.attachEvent) {
				document.attachEvent("onreadystatechange", function () {
					if (document.readyState == "complete") {
						document.detachEvent("onreadystatechange", arguments.callee);
						A()
					}
				})
			}
		}
	},
	addNodeToHeader: function (B) {
		var A = document.getElementsByTagName("HEAD").item(0);
		A.appendChild(B)
	},
	addCssToHeader: function (A) {
		var C = document.getElementsByTagName("HEAD").item(0);
		var B = document.createElement("link");
		B.type = "text/css";
		B.href = A;
		B.setAttribute("rel", "stylesheet");
		C.appendChild(B)
	},
	getHttpRequest: function () {
		if (window.XMLHttpRequest) {
			return new XMLHttpRequest()
		} else {
			if (window.ActiveXObject) {
				return new ActiveXObject("MsXml2.XmlHttp")
			}
		}
	},
	includeJS: function (B, A, E) {
		if ((E != null) && (!document.getElementById(B))) {
			var D = document.getElementsByTagName("HEAD").item(0);
			var C = document.createElement("script");
			C.type = "text/javascript";
			C.id = B;
			C.text = E;
			D.appendChild(C)
		}
	},
	ajaxPage: function (B, A) {
		var C = SeeUtils.getHttpRequest();
		C.onreadystatechange = function () {
			if (C.readyState == 4) {
				SeeUtils.includeJS(B, A, C.responseText)
			}
		};
		C.open("GET", A, false);
		C.send(null)
	},
	addScriptToHeader: function (F, G, B, C) {
		if (B) {
			SeeUtils.ajaxPage(C, F)
		} else {
			var E = document.getElementsByTagName("HEAD").item(0);
			var D = document.createElement("script");
			D.type = "text/javascript";
			D.src = F;
			var A = false;
			if (G != null) {
				D.onload = D.onreadystatechange = function () {
					if (!A && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) {
						A = true;
						G()
					}
				}
			}
			E.appendChild(D)
		}
	},
	extend: (function () {
		var C = function (F) {
			var G = Object.prototype.toString;
			return function () {
				return G.call(arguments[0]) === "[object " + F + "]"
			}
		};
		var A = C("Object"),
		B = C("Array"),
		D = C("Boolean");
		return function E() {
			var L = 0,
			K = false,
			I,
			G,
			M,
			F,
			J;
			if (D(arguments[0])) {
				L = 1;
				K = arguments[0]
			}
			for (J = arguments.length - 1; J > L; J--) {
				M = arguments[J - 1];
				F = arguments[J];
				if (A(F) || B(F)) {
					for (var N in F) {
						I = F[N];
						if (K && (A(I) || B(I))) {
							G = A(I) ? {}
							 : [];
							var H = E(K, G, I);
							M[N] = H
						} else {
							M[N] = F[N]
						}
					}
				} else {
					M = F
				}
			}
			return M
		}
	})()
};
var plist = null;
var printObj = {};
function printCap4(B, E, D) {
	printObj = D;
	var C = new ArrayList();
	C.add({
		dataName: "\u6807\u9898",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u53d1\u8d77\u8005\u4fe1\u606f",
		dataHtml: "",
		hide: true
	});
	if (AssertUtils.isNotEmpty(B)) {
		C.add({
			dataName: "\u6b63\u6587",
			dataHtml: B
		})
	} else {
		C.add({
			dataName: "\u6b63\u6587",
			dataHtml: window.window.location.href,
			hide: true
		})
	}
	C.add({
		dataName: "\u9644\u4ef6",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u5173\u8054\u6587\u6863",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u539f\u534f\u540c\u610f\u89c1",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u53d1\u8d77\u4eba\u9644\u8a00",
		dataHtml: "",
		hide: true
	});
	C.add({
		dataName: "\u5904\u7406\u4eba\u610f\u89c1\u533a",
		dataHtml: "",
		hide: true
	});
	plist = C;
	var A = _ctxPath + "/common/print/captPrintForm.jsp?printType=cap4Print";
	A += "&printUrl=" + B;
	window.open(A)
}
function inputChange(B, C, A) {
	this.obj = B;
	this.color = A;
	if (B.val() == "") {
		if (!(this.color)) {
			this.color = "color_gray"
		}
	}
	this.text = C;
	if (!(this.text)) {
		this.text = "\u8bf7\u8f93\u5165\u5185\u5bb9"
	}
	this.change()
}
inputChange.prototype.change = function () {
	with (this) {
		check();
		obj.focus(function () {
			if (obj.hasClass(color)) {
				obj.removeClass(color).val("")
			}
		});
		obj.blur(function () {
			if (obj.val() == "") {
				obj.addClass(color).val(text)
			}
		})
	}
};
inputChange.prototype.check = function () {
	with (this) {
		if (obj.val() == "" || obj.val() == text) {
			obj.addClass(color).val(text)
		} else {
			obj.removeClass(color)
		}
	}
};
SeeUtils.ready(function () {
	SeeUtils.addEvent("condition", "change", function () {
		var A = SeeUtils.getElVal("condition");
		SeeUtils.hideElByClass(".condition_text");
		SeeUtils.showEl(A + "Div")
	})
});
function showHide(B, A) {
	B.click(function () {
		A.toggle()
	})
}
function _GoTo_Top_ClickFn(B, A) {
	var C = __GoTo_Top_Array__[A];
	if (C) {
		$("html,body").stop().animate({
			scrollTop: C._nGoToHeight
		}, "fast");
		$("#compontentHtml .content_view").stop().animate({
			scrollTop: C._nGoToHeight
		}, "fast")
	}
}
function _openSubImg() {
	SeeUtils.addClass("openOtherMenu", "goToOtherMenuHover");
	SeeUtils.getElObj("_subImgMenu").style.display = "inline";
	var B = SeeUtils.getAttrEl("_openTemp", "state");
	if (B != "false") {
		SeeUtils.showEl("_openTemp")
	}
	var A = SeeUtils.getAttrEl("_procssBook", "showBook");
	if (A == false || A === "false") {
		SeeUtils.removeEl("_procssBook");
		if (SeeUtils.isIE8) {
			SeeUtils.css("_subImgMenu", "width", "60px")
		}
	}
}
function _hideSubImg() {
	SeeUtils.removeClass("openOtherMenu", "goToOtherMenuHover");
	SeeUtils.getElObj("_subImgMenu").style.display = "none"
}
function colseProBookImg() {
	SeeUtils.attrEl("openOtherMenu", "oldRight", SeeUtils.getCss("openOtherMenu", "right"));
	SeeUtils.css("openOtherMenu", "right", "40px");
	SeeUtils.attrEl("_subImgMenu", "oldRight", SeeUtils.getCss("_subImgMenu", "right"));
	SeeUtils.css("_subImgMenu", "right", "63px");
	SeeUtils.attrEl("openOtherMenu", "close", "true");
	var A = SeeUtils.getByClass(document, "guanlian_msg");
	if (SeeUtils.getCss(A[0], "display") === "block") {
		SeeUtils.css("_procssBook_temp", "right", "395px")
	}
}
function openProBookImg() {
	if (SeeUtils.getAttrEl("openOtherMenu", "oldRight") != null) {
		SeeUtils.attrEl("openOtherMenu", "close", "false");
		SeeUtils.css("openOtherMenu", "right", SeeUtils.getAttrEl("openOtherMenu", "oldRight"));
		SeeUtils.css("_subImgMenu", "right", SeeUtils.getAttrEl("_subImgMenu", "oldRight"))
	} else {
		SeeUtils.attrEl("openOtherMenu", "close", "false");
		SeeUtils.css("openOtherMenu", "right", "360px");
		SeeUtils.css("_subImgMenu", "right", "385px")
	}
	var A = SeeUtils.getByClass(document, "guanlian_msg");
	if (SeeUtils.getCss(A[0], "display")) {
		SeeUtils.css("_procssBook_temp", "right", "703px")
	}
}
var __GoTo_Top_Array__ = {};
function _createImgMenu(H, G) {
	if (G.showRelData == null) {
		G.showRelData = true
	}
	var B = document.createElement("div");
	B.id = "_subImgMenu";
	B.className = "_subImgMenu";
	B.style.display = "none";
	var D = SeeUtils.getLabel("proBookTitle");
	var F = SeeUtils.getLabel("relDataTitle");
	var E = "<a id='_procssBook' title='" + D + "' showBook='" + G.showBook + "' class='procssBook'></a>";
	if (G.showRelData) {
		E += "<a title='" + F + "' id='_openTemp' class='openTemp guanlian'></a>"
	}
	B.innerHTML = E;
	B.style.marginLeft = (H / 2 - 82) + "px";
	SeeUtils.prependToBody(B);
	function C(I) {
		if (I.dataRelationShowFun != null) {
			I.dataRelationShowFun();
			SeeUtils.hideEl("openOtherMenu");
			SeeUtils.hideEl("_subImgMenu");
			if (I.showBook) {
				setTimeout(function () {
					var J = 703;
					if (SeeUtils.getCss("east", "display") === "none") {
						J = 347
					} else {
						if (SeeUtils.getAttrEl("openOtherMenu", "close") === "true") {
							J = J - 308
						}
					}
					if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
						J = J - 310
					}
					SeeUtils.appendToBody("<a id='_procssBook_temp' title='" + D + "' showBook='" + I.showBook + "' class='procssBook' style='position: absolute;top:46px;right:" + J + "px;'></a>");
					SeeUtils.addEvent("_procssBook_temp", "click", function () {
						if (openProcessInsBook != null) {
							openProcessInsBook()
						}
					})
				}, 200)
			}
		}
	}
	SeeUtils.addEvent("openOtherMenu", "click", function () {
		if (G.showRelData) {
			C(G)
		}
	});
	SeeUtils.addEvent("openOtherMenu", "mouseover", function () {
		_openSubImg("openOtherMenu")
	});
	if (G.showRelData) {
		SeeUtils.addEvent("_openTemp", "click", function () {
			C(G)
		})
	}
	var A = SeeUtils.getByClass(SeeUtils.getElObj("guanlian_info_div"), "guanlian");
	if (A != null && A.length > 0) {
		SeeUtils.addEvent(A[0], "click", function () {
			SeeUtils.showEl("openOtherMenu");
			SeeUtils.showEl("_openTemp");
			SeeUtils.css("_subImgMenu", "top", "5px");
			SeeUtils.removeEl("_procssBook_temp")
		})
	}
	if (G.showBook) {
		SeeUtils.addEvent("_procssBook", "click", function () {
			if (G.piShowFun != null) {
				G.piShowFun()
			}
		})
	}
	if (!G.showRelData) {
		SeeUtils.hideEl("_openTemp");
		SeeUtils.css("_procssBook", "position", "absolute");
		SeeUtils.css("_procssBook", "left", G.elItemWidth)
	} else {
		SeeUtils.css("_openTemp", "left", "0px");
		SeeUtils.css("_procssBook", "left", G.elItemWidth);
		SeeUtils.css("_procssBook", "position", "absolute");
		if (!G.showBook) {
			SeeUtils.css("_openTemp", "margin-left", G.elItemWidth)
		}
	}
	if (!G.showRelData && !G.showBook) {
		SeeUtils.hideEl("openOtherMenu")
	}
	SeeUtils.addEvent("openOtherMenu", "mouseleave", function () {
		_hideSubImg("openOtherMenu")
	});
	SeeUtils.addEvent("_subImgMenu", "mouseover", function () {
		_openSubImg("openOtherMenu")
	});
	SeeUtils.addEvent("_subImgMenu", "mouseleave", function () {
		_hideSubImg("openOtherMenu")
	})
}
function GoTo_Top(J) {
	if (J == null) {
		var J = {}
	}
	var I = "41px";
	J.elItemWidth = I;
	var H = J.id ? J.id : "GoTo_Top_" + Math.floor(Math.random() * 100000000);
	var A = SeeUtils.getWindowHeight();
	var D = J.btnClass ? J.btnClass : "GoTo_Top";
	var L = J.showHeight ? J.showHeight : A;
	var F = J.marginLeft ? J.marginLeft : 798;
	this._nGoToHeight = J.nGoToHeight ? J.nGoToHeight : 0;
	var K = J.sTitle ? J.sTitle : SeeUtils.getLabel("goToTop");
	if (J.id === "openOtherMenu") {
		K = SeeUtils.getLabel("proAss")
	}
	var E = this;
	if (D != null && D != "goToOtherMenu" && D != "GoTo_Top2") {
		var C = document.createElement("iframe");
		C.className = D + "_iframe";
		C.setAttribute("scrolling", "no");
		C.setAttribute("border", 0);
		if (D != "GoTo_Top") {
			C.style.marginLeft = (F / 2) + "px"
		}
		SeeUtils.prependToBody(C)
	}
	var B = document.createElement("a");
	B.id = H;
	B.className = D;
	B.setAttribute("href", "javascript:void(0)");
	B.setAttribute("title", K);
	if (D == "goToOtherMenu") {
		SeeUtils.prependToBody(B, null, true)
	} else {
		SeeUtils.prependToBody(B)
	}
	if (D == "goToReply") {
		B.style.display = "inline";
		B.style.bottom = "18px"
	} else {
		if (D == "goToOtherMenu") {
			B.style.display = "inline";
			_createImgMenu(F, J)
		}
	}
	SeeUtils.addEvent(H, "click", function () {
		_GoTo_Top_ClickFn(this, D)
	});
	var G = $(window);
	if (D == "GoTo_Top") {
		G.scroll(function () {
			if (G.scrollTop() > 0) {
				SeeUtils.showElByClass(".GoTo_Top");
				SeeUtils.showElByClass(".GoTo_Top_iframe")
			} else {
				SeeUtils.hideElByClass(".GoTo_Top");
				SeeUtils.hideElByClass(".GoTo_Top_iframe")
			}
		});
		$("#compontentHtml .content_view").scroll(function () {
			if ($(".content_view").scrollTop() > 0) {
				SeeUtils.showElByClass(".GoTo_Top");
				SeeUtils.showElByClass(".GoTo_Top_iframe")
			} else {
				SeeUtils.hideElByClass(".GoTo_Top");
				SeeUtils.hideElByClass(".GoTo_Top_iframe")
			}
		})
	}
	if (D != "goToOtherMenu") {
		__GoTo_Top_Array__[D] = this
	} else {
		SeeUtils.css(B, "z-index", 100);
		if (SeeUtils.getCss("east", "display") === "none") {
			SeeUtils.css(B, "right", "10px")
		} else {
			if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
				SeeUtils.css(B, "right", "40px")
			} else {
				SeeUtils.css(B, "right", "360px")
			}
		}
		if (SeeUtils.getCss("east", "display") === "none") {
			SeeUtils.css("_subImgMenu", "right", "28px")
		} else {
			if (parseFloat(SeeUtils.getCss("east", "width")) === 36) {
				SeeUtils.css("_subImgMenu", "right", "62px")
			} else {
				SeeUtils.css("_subImgMenu", "right", "385px")
			}
		}
		SeeUtils.css("_subImgMenu", "margin-left", "0px")
	}
	if (document.querySelector(".GoTo_Top2") != null) {
		SeeUtils.showElByClass(".GoTo_Top2");
		SeeUtils.showElByClass(".GoTo_Top2_iframe")
	}
}
GoTo_Top.prototype.setGoToHeight = function (A) {
	this._nGoToHeight = A
};
function getFirstDateOfWeek(A) {
	var B = new Date(A.getTime());
	if (A.getDay() == 0) {
		B.setDate(A.getDate() - 6)
	} else {
		B.setDate(A.getDate() - A.getDay() + 1)
	}
	return B
}
function getLastDateOfWeek(B) {
	var A = new Date(B.getTime());
	if (B.getDay() != 0) {
		A.setDate(B.getDate() + 6 - B.getDay() + 1)
	}
	return A
}
var MonHead = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function getLastDateOfMonth(A, B) {
	var C = MonHead[B - 1];
	if (B == 2 && IsPinYear(A)) {
		C++
	}
	return C
}
function IsPinYear(A) {
	return (0 == A % 4 && (A % 100 != 0 || A % 400 == 0))
}
function mouseBind(D, G, B, C, F, A) {
	function E(N) {
		var M = N || window.e;
		var K = M.target || M.srcElement;
		if (K.nodeType == 3) {
			K = K.parentNode
		}
		var H = D.offset();
		var J = K.style.height;
		if (H != null) {
			var L = G;
			if (G != null && G.get != null) {
				L = G.get(0)
			}
			var O = (N.clientX > H.left && N.clientX < (H.left + B.width) && N.clientY < (H.top + B.height) && N.clientY > (H.top - SeeUtils.getElHeight(L))) || (N.clientX > H.left && N.clientX < (H.left + D.width()) && N.clientY < (H.top + D.height()) && N.clientY > (H.top - SeeUtils.getElHeight(L)))
		}
		if (K != G && !O && K.id != C) {
			var I = B.hideDialog(F);
			if (I) {
				SeeUtils.removeEvent(document, "mouseover", E);
				if (AssertUtils.isNotNull(A)) {
					A()
				}
			}
		}
	}
	SeeUtils.addEvent(document, "mouseover", E)
}
function setAttachmentsLayoutHeight(M) {
	if (SeeUtils.isIE) {
		if (SeeUtils.isIE6) {
			var G = SeeUtils.getByClass(document, "affix_area");
			for (var I = 0; I < G.length; I++) {
				var K = G[I];
				if (parseFloat(K.style.height) > 34) {
					K.style.height = 34 + "px"
				}
			}
		}
	}
	var H = document.getElementById(M.fj_id);
	var J = document.getElementById(M.wd_id);
	var L = document.getElementById(M.layout_head_id);
	var D = document.getElementById(M.layout_body_id);
	var F = 0,
	E = 0,
	C = 0,
	A = 0,
	B = 20;
	C += SeeUtils.getClassElWidth(M.fj_id, "attachment_block_number");
	C += SeeUtils.getAllWidth(M.fj_id, "attachment_block");
	A += SeeUtils.getClassElWidth(M.wd_id, "attachment_block_number");
	A += SeeUtils.getAllWidth(M.wd_id, "attachment_block");
	if (C > SeeUtils.getElWidth(H)) {
		E += 2
	} else {
		if (C > B) {
			E += 1
		}
	}
	if (A > SeeUtils.getElWidth(J)) {
		E += 2
	} else {
		if (A > B) {
			E += 1
		}
	}
	SeeUtils.setElHeight(L, SeeUtils.getElHeight(D) + E * 17);
	if (AssertUtils.isNotEmpty(SeeUtils.getCss(D, "top"))) {
		SeeUtils.css(D, "top", parseFloat(SeeUtils.getCss(D, "top")) + E * 17 + "px")
	}
}
function set_select_val(A, C) {
	if (SeeUtils.isIE6) {
		setTimeout(function () {
			A.val(C)
		}, 1)
	} else {
		try {
			A.val(C)
		} catch (B) {
			setTimeout(function () {
				A.val(C)
			}, 1)
		}
	}
};
function MxtProgressBar(A) {
	if (A == undefined) {
		A = {}
	}
	this.id = A.id ? A.id : "MxtProgressBar" + Math.floor(Math.random() * 100000000);
	this.text = A.text ? A.text : "";
	this.progress = A.progress ? A.progress : "";
	this.width = A.width ? A.width : 600;
	this.height = A.height ? A.height : 70;
	this.isMode = A.isMode == undefined ? true : A.isMode;
	this.buttons = A.buttons;
	if (this.buttons != null) {
		this.height += 30
	}
	this.borderSize = 1;
	this.init();
	MxtProgressBar.current = this
}
MxtProgressBar.current = null;
MxtProgressBar.createCtpTopBar = function (A) {
	var C = null;
	try {
		C = getCtpTop()
	} catch (B) {
		return null
	}
	if (C != null) {
		C.MxtProgressBar.current = new C.MxtProgressBar(A);
		return C.MxtProgressBar.current
	} else {
		return null
	}
};
MxtProgressBar.getCtpTopBar = function () {
	var B = null;
	try {
		B = getCtpTop()
	} catch (A) {
		return null
	}
	if (B != null) {
		return B.MxtProgressBar.current
	} else {
		return null
	}
};
MxtProgressBar.prototype.init = function () {
	var G = this.id + "_mask";
	var K = document.body.clientWidth;
	var B = (document.documentElement.scrollHeight > document.documentElement.clientHeight ? document.documentElement.scrollHeight : document.documentElement.clientHeight);
	var D = getMaxZindex(2);
	if (document.getElementById(G) == null && this.isMode == true) {
		var L = document.createElement("div");
		L.style.height = B + "px";
		L.style.width = K + "px";
		L.style.zIndex = D;
		L.id = G;
		L.className = "mask";
		L.innerHTML = "&nbsp;";
		SeeUtils.prependToBody(L)
	}
	var E = document.getElementById(this.id);
	if (E != null) {
		E.remove()
	}
	var A = "";
	if (this.progress == "") {
		var N = (K - 66) / 2;
		var M = (document.documentElement.clientHeight - 66) / 2;
		A += "<div id='" + this.id + "' class='common_loading_progress_box absolute clearfix' style='left:" + (N + document.documentElement.scrollLeft) + "px;top:" + (M + document.documentElement.scrollTop) + "px;z-index:" + (D + 1) + "'></div>";
		if (this.text != "" && this.text != undefined) {
			A += "<div id='" + this.id + "_text' class='absolute clearfix' style='width:auto;overflow:hidden;border:0px #286fbf solid;background:#f8f8f8;font-size:12px;padding:5px;left:" + (N + document.documentElement.scrollLeft - 76) + "px;top:" + (M + document.documentElement.scrollTop + 66) + "px;z-index:" + (D + 1) + "'>" + this.text + "</div>"
		}
	} else {
		var N = (K - (this.width + 5)) / 2;
		var M = (document.documentElement.clientHeight - (this.height + 5)) / 2;
		A += "<div id='" + this.id + "' class='common_progress_box absolute clearfix' style='left:" + ((N < 0 ? 0 : N) + document.documentElement.scrollLeft) + "px;top:" + ((M < 0 ? 0 : M) + document.documentElement.scrollTop) + "px;z-index:" + (D + 1) + "'>";
		A += "<div id='" + this.id + "_shadow' class='common_progress_shadow absolute' style='width:" + (this.width + this.borderSize * 2) + "px;height:" + (this.height + this.borderSize * 2) + "px;'>&nbsp;</div>";
		A += "<div class='common_progress_strip absolute padding_5' style='width:" + (this.width - 10) + "px;height:" + (this.height - 10) + "px;'>";
		if (this.text != "") {
			A += "<dl id='" + this.id + "_title' class='common_progress_strip_title margin_b_5 margin_t_5 '>" + this.text + "</dl>"
		}
		A += "<dl id='" + this.id + "_text' class='common_progress_strip_per margin_l_10 right margin_r_5'>" + this.progress + "%</dl>";
		A += "<dl class='common_progress_strip_content'>";
		A += "<dt id='" + this.id + "_progress' class='common_progress_strip_bg' style='width:" + this.progress + "%'></dt>";
		A += "</dl>";
		A += "<div class='padding_10'><table class='common_right'><tr><td class='clearfix' id='" + this.id + "_buttons'>";
		A += "</td></tr></table></div>";
		A += "</div>";
		A += "</div>"
	}
	var J = document.createElement("div");
	J.id = this.id + "_box";
	J.innerHTML = A;
	SeeUtils.prependToBody(J);
	if (this.buttons != null) {
		for (var F = 0; F < this.buttons.length; F++) {
			var H = this.buttons[F];
			var C = document.createElement("a");
			C.id = H.id;
			C.className = "common_button common_button_gray margin_r_10";
			C.setAttribute("href", "javascript:void(0)");
			C.innerHTML = H.text;
			SeeUtils.addEvent(C, "click", H.handler);
			SeeUtils.appendTo(C, this.id + "_buttons")
		}
	}
	var I = SeeUtils.getElWidth(this.id + "_text");
	if (AssertUtils.isNumber(I)) {
		SeeUtils.css(this.id + "_text", "left", N + document.documentElement.scrollLeft - ((parseFloat(I) - 56) / 2) + "px")
	}
};
MxtProgressBar.prototype.setText = function (B) {
	var A = document.getElementById(this.id + "_text");
	SeeUtils.css(A, "width", "100%");
	SeeUtils.css(A, "textAlign", "center");
	SeeUtils.css(A, "left", "0");
	SeeUtils.css(A, "background", "none");
	SeeUtils.html(A, "<span style='text-align: center;background-color: #f8f8f8;padding: 3px 5px'>" + B + "</span>")
};
MxtProgressBar.prototype.setProgress = function (A) {
	SeeUtils.css(this.id + "_text", "width", A + "%");
	SeeUtils.html(this.id + "_text", A + "%")
};
MxtProgressBar.prototype.setTitle = function (A) {
	SeeUtils.html(this.id + "_title", A)
};
MxtProgressBar.prototype.close = function () {
	if (SeeUtils != null) {
		SeeUtils.removeEl(this.id + "_mask");
		SeeUtils.removeEl(this.id + "_box");
		SeeUtils.removeEl(this.id);
		if (this.text != "" && this.text != undefined) {
			SeeUtils.removeEl(this.id + "_text")
		}
		MxtProgressBar.current = null
	}
};
MxtProgressBar.prototype.start = function () {
	SeeUtils.showEl(this.id + "_mask");
	SeeUtils.showEl(this.id);
	if (this.text != "" && this.text != undefined) {
		SeeUtils.showEl(this.id + "_text")
	}
};
function StringBuffer() {
	this._strings_ = new Array()
}
StringBuffer.prototype.append = function (A) {
	if (A) {
		if (A instanceof Array) {
			this._strings_ = this._strings_.concat(A)
		} else {
			this._strings_[this._strings_.length] = A
		}
	}
	return this
};
StringBuffer.prototype.reset = function (A) {
	this.clear();
	this.append(A)
};
StringBuffer.prototype.clear = function () {
	this._strings_ = new Array()
};
StringBuffer.prototype.isBlank = function () {
	return this._strings_.length == 0
};
StringBuffer.prototype.toString = function (A) {
	A = A == null ? "" : A;
	if (this._strings_.length == 0) {
		return ""
	}
	return this._strings_.join(A)
};
String.prototype.getBytesLength = function () {
	var A = this.match(/[^\x00-\xff]/ig);
	return this.length + (A == null ? 0 : A.length)
};
String.prototype.getLimitLength = function (C, F) {
	if (!C || C < 0) {
		return this
	}
	var A = this.getBytesLength();
	if (A <= C) {
		return this
	}
	F = F == null ? ".." : F;
	C = C - F.length;
	var B = 0;
	var D = "";
	for (var E = 0; E < this.length; E++) {
		if (this.charCodeAt(E) > 255) {
			B += 2
		} else {
			B++
		}
		D += this.charAt(E);
		if (B >= C) {
			return D + F
		}
	}
	return this
};
String.prototype.escapeHTML = function (B, A) {
	try {
		return escapeStringToHTML(this, B, A)
	} catch (C) {}
	return this
};
String.prototype.escapeJavascript = function () {
	return escapeStringToJavascript(this)
};
String.prototype.escapeSpace = function () {
	return this.replace(/ /g, "&nbsp;")
};
String.prototype.escapeSameWidthSpace = function () {
	return this.replace(/ /g, "&nbsp;&nbsp;")
};
String.prototype.escapeXML = function () {
	return this.replace(/\&/g, "&amp;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replace(/\"/g, "&quot;")
};
String.prototype.escapeQuot = function () {
	return this.replace(/\'/g, "&#039;").replace(/"/g, "&#034;")
};
String.prototype.startsWith = function (A) {
	return this.indexOf(A) == 0
};
String.prototype.endsWith = function (A) {
	var B = this.indexOf(A);
	return B > -1 && B == this.length - A.length
};
String.prototype.trim = function () {
	var C = this.toCharArray();
	var A = 0;
	var D = C.length;
	for (var B = 0; B < C.length; B++) {
		var E = C[B];
		if (E == " ") {
			A++
		} else {
			break
		}
	}
	if (A == this.length) {
		return ""
	}
	for (var B = C.length; B > 0; B--) {
		var E = C[B - 1];
		if (E == " ") {
			D--
		} else {
			break
		}
	}
	return this.substring(A, D)
};
String.prototype.toCharArray = function () {
	var B = [];
	for (var A = 0; A < this.length; A++) {
		B[A] = this.charAt(A)
	}
	return B
};
function ArrayList() {
	this.instance = new Array()
}
ArrayList.prototype.size = function () {
	return this.instance.length
};
ArrayList.prototype.add = function (A) {
	this.instance[this.instance.length] = A
};
ArrayList.prototype.addSingle = function (A) {
	if (!this.contains(A)) {
		this.instance[this.instance.length] = A
	}
};
ArrayList.prototype.addAt = function (A, B) {
	if (A >= this.size() || A < 0 || this.isEmpty()) {
		this.add(B);
		return
	}
	this.instance.splice(A, 0, B)
};
ArrayList.prototype.addAll = function (A) {
	if (!A || A.length < 1) {
		return
	}
	this.instance = this.instance.concat(A)
};
ArrayList.prototype.addList = function (A) {
	if (A && A instanceof ArrayList && !A.isEmpty()) {
		this.instance = this.instance.concat(A.instance)
	}
};
ArrayList.prototype.get = function (A) {
	if (this.isEmpty()) {
		return null
	}
	if (A > this.size()) {
		return null
	}
	return this.instance[A]
};
ArrayList.prototype.getLast = function () {
	if (this.size() < 1) {
		return null
	}
	return this.instance[this.size() - 1]
};
ArrayList.prototype.set = function (B, C) {
	if (B >= this.size()) {
		throw "IndexOutOfBoundException : Index " + B + ", Size " + this.size()
	}
	var A = this.instance[B];
	this.instance[B] = C;
	return A
};
ArrayList.prototype.removeElementAt = function (A) {
	if (A > this.size() || A < 0) {
		return
	}
	this.instance.splice(A, 1)
};
ArrayList.prototype.remove = function (B) {
	var A = this.indexOf(B);
	this.removeElementAt(A)
};
ArrayList.prototype.contains = function (A, B) {
	return this.indexOf(A, B) > -1
};
ArrayList.prototype.indexOf = function (C, D) {
	for (var A = 0; A < this.size(); A++) {
		var B = this.instance[A];
		if (B == C) {
			return A
		} else {
			if (D != null && B != null && C != null && B[D] == C[D]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.lastIndexOf = function (C, D) {
	for (var A = this.size() - 1; A >= 0; A--) {
		var B = this.instance[A];
		if (B == C) {
			return A
		} else {
			if (D != null && B != null && C != null && B[D] == C[D]) {
				return A
			}
		}
	}
	return -1
};
ArrayList.prototype.subList = function (B, D) {
	if (B < 0) {
		B = 0
	}
	if (D > this.size()) {
		D = this.size()
	}
	var C = this.instance.slice(B, D);
	var A = new ArrayList();
	A.addAll(C);
	return A
};
ArrayList.prototype.toArray = function () {
	return this.instance
};
ArrayList.prototype.isEmpty = function () {
	return this.size() == 0
};
ArrayList.prototype.clear = function () {
	this.instance = new Array()
};
ArrayList.prototype.toString = function (A) {
	A = A || ", ";
	return this.instance.join(A)
};
function Properties(A) {
	this.instanceKeys = new ArrayList();
	this.instance = {};
	if (A) {
		this.instance = A;
		for (var B in A) {
			this.instanceKeys.add(B)
		}
	}
}
Properties.prototype.size = function () {
	return this.instanceKeys.size()
};
Properties.prototype.get = function (B, A) {
	if (B == null) {
		return null
	}
	var C = this.instance[B];
	if (C == null && A != null) {
		return A
	}
	return C
};
Properties.prototype.remove = function (A) {
	if (A == null) {
		return null
	}
	this.instanceKeys.remove(A);
	delete this.instance[A]
};
Properties.prototype.put = function (A, B) {
	if (A == null) {
		return null
	}
	if (this.instance[A] == null) {
		this.instanceKeys.add(A)
	}
	this.instance[A] = B
};
Properties.prototype.putRef = function (A, B) {
	if (A == null) {
		return null
	}
	this.instanceKeys.add(A);
	this.instance[A] = B
};
Properties.prototype.getMultilevel = function (D, B) {
	if (D == null) {
		return null
	}
	var C = D.split(".");
	function A(I, G, F) {
		try {
			if (I == null || (typeof I != "object")) {
				return null
			}
			var J = I.get(G[F]);
			if (F < G.length - 1) {
				J = A(J, G, F + 1)
			}
			return J
		} catch (H) {}
		return null
	}
	var E = A(this, C, 0);
	return E == null ? B : E
};
Properties.prototype.containsKey = function (A) {
	if (A == null) {
		return false
	}
	return this.instance[A] != null
};
Properties.prototype.keys = function () {
	return this.instanceKeys
};
Properties.prototype.values = function () {
	var D = new ArrayList();
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		if (A) {
			var C = this.instance[A];
			D.add(C)
		}
	}
	return D
};
Properties.prototype.isEmpty = function () {
	return this.instanceKeys.isEmpty()
};
Properties.prototype.clear = function () {
	this.instanceKeys.clear();
	this.instance = {}
};
Properties.prototype.swap = function (C, B) {
	if (!C || !B || C == B) {
		return
	}
	var E = -1;
	var D = -1;
	for (var A = 0; A < this.instanceKeys.instance.length; A++) {
		if (this.instanceKeys.instance[A] == C) {
			E = A
		} else {
			if (this.instanceKeys.instance[A] == B) {
				D = A
			}
		}
	}
	this.instanceKeys.instance[E] = B;
	this.instanceKeys.instance[D] = C
};
Properties.prototype.entrySet = function () {
	var A = [];
	for (var C = 0; C < this.instanceKeys.size(); C++) {
		var B = this.instanceKeys.get(C);
		var D = this.instance[B];
		if (!B) {
			continue
		}
		var E = new Object();
		E.key = B;
		E.value = D;
		A[A.length] = E
	}
	return A
};
Properties.prototype.toString = function () {
	var C = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		C += A + "=" + this.instance[A] + "\n"
	}
	return C
};
Properties.prototype.toStringTokenizer = function (E, D) {
	E = E == null ? ";" : E;
	D = D == null ? "=" : D;
	var F = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var C = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			F += E
		}
		F += A + D + C
	}
	return F
};
Properties.prototype.toQueryString = function () {
	if (this.size() < 1) {
		return ""
	}
	var D = "";
	for (var B = 0; B < this.instanceKeys.size(); B++) {
		var A = this.instanceKeys.get(B);
		var C = this.instance[A];
		if (!A) {
			continue
		}
		if (B > 0) {
			D += "&"
		}
		if (typeof C == "object") {}
		else {
			D += A + "=" + encodeURIat(C)
		}
	}
	return D
};
var _orgManager = RemoteJsonService.extend({
		jsonGateway: _ctxPath + "/ajax.do?method=ajaxAction&managerName=orgManager",
		canShowPeopleCard: function () {
			return this.ajaxCall(arguments, "canShowPeopleCard")
		},
		getMemberExternalType: function () {
			return this.ajaxCall(arguments, "getMemberExternalType")
		}
	});
function insertScript(D) {
	if (SeeUtils.getSizeById("script_people") == 0) {
		var G = document.createElement("div");
		G.id = "script_people";
		G.className = "hidden";
		SeeUtils.addNodeToHeader(G);
		SeeUtils.addScriptToHeader(_ctxPath + "/ajax.do?managerName=peopleCardManager,orgManager" + CsrfGuard.getUrlSurffix(), null, true, "orgManager");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/collaboration/js/CollaborationApi.js", null, true, "CollaborationApi");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/webmail/js/webmail.js", null, false, "webmail");
		SeeUtils.addScriptToHeader(_ctxPath + "/apps_res/sms/js/sms.js", null, false, "sms");
		var B = document.createElement("script");
		B.innerHTML = "var dialog;";
		SeeUtils.addNodeToHeader(B);
		SeeUtils.addCssToHeader(_ctxPath + "/common/css/peoplecard.css")
	}
	if (typeof(peopleCardManager) == "undefined") {
		return
	}
	var F = D.memberId;
	var E = new peopleCardManager();
	var A = D;
	var C = E.showPeoPleCardMini(F);
	A.data = C;
	return A
}
function insertScriptP() {
	if (SeeUtils.getSizeById("script_people") == 0) {
		var A = document.createElement("div");
		A.id = "script_people";
		A.className = "hidden";
		SeeUtils.addNodeToHeader(A);
		SeeUtils.addScriptToHeader(_ctxPath + "/ajax.do?managerName=peopleCardManager,orgManager" + CsrfGuard.getUrlSurffix(), function () {}, true, "orgManager")
	}
}
function createPanel(F) {
	var Q = getA8Top();
	var V = 0;
	var K = SeeUtils.getSizeById("main", Q);
	while (K == 0 && V < 5) {
		Q = Q.v3x.getParentWindow().getA8Top();
		V++
	}
	var J = false;
	var X = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (X == null || X == undefined) {
		X = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	var B = X.id;
	var R = F.data.emailaddress;
	var U = $.ctx && $.ctx._emailShow || vPortal._emailShow;
	if (U == null || U == undefined) {
		U = getCtpTop().$.ctx && getCtpTop().$.ctx._emailShow || getCtpTop().vPortal._emailShow
	}
	if (F.memberId == B) {
		J = true
	} else {
		J = false
	}
	var A = false;
	if (!F.id) {
		A = true
	}
	var Y = document.getElementById("miniCrad");
	var M = "";
	if (F.accountShortName && F.accountShortName != "" && F.accountShortName != "null" && F.accountShortName != "undefined") {
		M = "(" + F.accountShortName + ")"
	}
	var O = F.data.deptName;
	if (O.length > 20) {
		O = O.substring(0, 20) + "..."
	}
	var G = F.data.postName;
	if (G.length > 20) {
		G = G.substring(0, 20) + "..."
	}
	var I = F.data.name + M;
	if (I.length > 20) {
		I = I.substring(0, 16) + "..."
	}
	var T = "<div class='peoplecard_pageTur  ' style='margin: 0px 0px; position: relative;'><em class='peoplecard_pageTurning'></em><div class='peoplecard_cd_list peoplecard_overflow peoplecard_cd_show peoplecard_left' style='border-bottom:transparent; padding-right: 33px;'><div class='peoplecard_cardMsg'><div class='peoplecard_cd_img peoplecard_left'><span><img width='50' height='50' class='radius' src='" + F.data.imgurl + "'></span></div><dl class='peoplecard_left'><dd class='peoplecard_cd_name'><span>" + I + "</span></dd><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("relate.memberinfo.dep") + "</span><span class='peoplecard_cd_message'>&nbsp;" + O + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("relate.memberinfo.post1") + "</span><span class='peoplecard_cd_message'>&nbsp;" + G + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("org.account_form.telephone.label") + ":</span><span class='peoplecard_cd_message'>&nbsp;" + F.data.officenumber + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("member.mobile") + ":</span><span class='peoplecard_cd_message'>&nbsp;" + F.data.telnumber + "</span></dt><dt class='peoplecard_cd_detail'><span class='peoplecard_cd_bar'>" + $.i18n("member.email") + ":</span><span class='peoplecard_cd_message peoplecard_cd_email'>&nbsp;" + F.data.emailaddress + "</span></dt></dl></div></div><div class='peoplecard_sendMessage peoplecard_overflow'><div class='peoplecard_msgImg_list' style='width: 441px;'>";
	T = T + "<a  id='sendcollaboration' name='sendcollaboration' title='" + $.i18n("people.send.collaborative") + "' class='peoplecard_button peoplecard_margin_l_92'  href='javascript:void(0)'><em class='peoplecard_icon16 peoplecard_addConection_icon16' style='margin-bottom:3px;'></em></a>";
	if (R != "" && U) {
		T = T + "<a  href='javascript:void(0)' class='peoplecard_button ' id='sendemail' name='sendemail' title='" + $.i18n("people.send.email") + "'><em class='peoplecard_icon16 peoplecard_sendMsg_icon16' style='margin-bottom:3px;'></em></a>"
	}
	if (X.canSendSMS) {
		T = T + "<a  href='javascript:void(0)' class='peoplecard_button '  id='sendSMS'  name='sendSMS' title='" + $.i18n("people.send.SMS") + "' ><em class='peoplecard_icon16 peoplecard_sendShortMsg_icon16' style='margin-bottom:3px;'></em></a>"
	}
	if (!J) {
		T = T + "<a  id='addcorrelation' name='addcorrelation' title='" + $.i18n("people.add.correlation") + "' class='peoplecard_button ' style='background: rgb(243, 243, 243);'  href='javascript:void(0)'><em class='peoplecard_icon16 peoplecard_sendEmail_icon16 peoplecard_addcorrelation_icon16' style='margin-bottom:3px;'></em></a>"
	}
	"</div></div></div>";
	if (Y.length == 0) {
		var H = document.createElement("div");
		H.id = "miniCrad";
		H.className = "peoplecard_cardmini h100b peoplecard_hidden";
		H.innerHTML = T;
		var Z = document.getElementsByTagName("body");
		Z[0].appendChild(H)
	} else {
		Y.innerHTML = T
	}
	SeeUtils.addEvent("sendcollaboration", "mouseenter", function () {
		var a = document.getElementById("sendcollaboration");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-176px -31px"
	});
	SeeUtils.addEvent("sendcollaboration", "mouseleave", function () {
		var a = document.getElementById("sendcollaboration");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "0 -32px"
	});
	SeeUtils.addEvent("sendemail", "mouseenter", function () {
		var a = document.getElementById("sendemail");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-209px -31px"
	});
	SeeUtils.addEvent("sendemail", "mouseleave", function () {
		var a = document.getElementById("sendemail");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-33px -31px"
	});
	SeeUtils.addEvent("sendSMS", "mouseenter", function () {
		var a = document.getElementById("sendSMS");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-224px -32px"
	});
	SeeUtils.addEvent("sendSMS", "mouseleave", function () {
		var a = document.getElementById("sendSMS");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-48px -32px"
	});
	SeeUtils.addEvent("addcorrelation", "mouseenter", function () {
		var a = document.getElementById("addcorrelation");
		a.style.background = "#5093e1";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-241px -31px"
	});
	SeeUtils.addEvent("addcorrelation", "mouseleave", function () {
		var a = document.getElementById("addcorrelation");
		a.style.background = "#f3f3f3";
		var b = a.getElementById("em");
		b.style.backgroundPosition = "-65px -31px"
	});
	var P = function () {
		dialog = $.dialog({
				id: "url",
				url: _ctxPath + "/relateMember.do?method=addRelativePeople&receiverId=" + F.data.id,
				width: 420,
				height: 200,
				targetWindow: getCtpTop(),
				title: $.i18n("peoplecard.addrelpeple.js")
			})
	};
	SeeUtils.removeEvent("addcorrelation", "click", P);
	SeeUtils.addEvent("addcorrelation", "click", P);
	var L = function () {
		if (document.getElementById("emailaddress").innerHTML != "") {
			sendMail(document.getElementById("emailaddress").innerHTML)
		}
	};
	SeeUtils.removeEvent("sendemail", "click", L);
	SeeUtils.addEvent("sendemail", "click", L);
	var N = function () {
		var a = {
			personId: F.data.id,
			from: "peopleCard"
		};
		collaborationApi.newColl(a)
	};
	SeeUtils.removeEvent("sendcollaboration", "click", N);
	SeeUtils.addEvent("sendcollaboration", "click", N);
	var S = function () {
		sendSMS(F.data.id)
	};
	SeeUtils.removeEvent("sendSMS", "click", S);
	SeeUtils.addEvent("sendSMS", "click", S);
	var E = $.ctx && $.ctx.resources || vPortal.resources;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.resources || getCtpTop().vPortal.resources
	}
	try {
		if (!E.contains("F01_newColl")) {
			SeeUtils.hideEl("sendcollaboration")
		}
		if (!E.contains("F12_mailcreate")) {
			SeeUtils.hideEl("sendemail")
		}
	} catch (W) {}
	if (!X.canSendSMS) {
		SeeUtils.hideEl("sendSMS")
	}
	var C = $.ctx && $.ctx.plugins || vPortal.plugins;
	if (C == null || C == undefined) {
		C = getCtpTop().$.ctx && getCtpTop().$.ctx.plugins || getCtpTop().vPortal.plugins
	}
	var D = $.dialog({
			id: "dialog_cardMini",
			width: 444,
			height: 258,
			type: "panel",
			htmlId: "miniCrad",
			targetId: F.id,
			left: F.obj.offset().left,
			top: F.obj.offset().top + F.obj.innerHeight(),
			shadow: false,
			panelParam: {
				show: A,
				margins: false,
				inside: A
			},
			timeout: 1000
		});
	return D
}
function createPanelWithOutButton(F) {
	var O = getA8Top();
	var S = 0;
	var I = SeeUtils.getSizeById("main", O);
	while (I == 0 && S < 5) {
		O = getA8Top().v3x.getParentWindow().getA8Top();
		S++
	}
	var H = false;
	var U = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (U == null || U == undefined) {
		U = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	var B = U.id;
	var P = F.data.emailaddress;
	if (F.memberId == B) {
		H = true
	} else {
		H = false
	}
	var A = false;
	if (!F.id) {
		A = true
	}
	var V = document.getElementById("miniCrad");
	var J = "";
	if (F.accountShortName && F.accountShortName != "" && F.accountShortName != "null" && F.accountShortName != "undefined") {
		J = "(" + F.accountShortName + ")"
	}
	var M = F.data.orgDepartmentId;
	if (M.length > 20) {
		M = M.substring(0, 20) + "..."
	}
	var R = "<div class='left'style='width:90px;'><div class=' align_center'><span class='people_img relative display_inline-block  over_hidden margin_t_5'><img class='radius' id='memberimg' src='" + F.data.imgurl + "' width='70'height='70'></span></div><div class=' align_center'>";
	R = R + "</div></div><form name='peoplecardminiform'id='peoplecardminiform'method='post'><div style='height:127px;' class='over_hidden adapt_w font_size12 form_area people_msg'><table cellpadding='0'cellspacing='0'width='100%'class='padding_5 margin_l_10'><caption class='align_left font_bold font_size14'><label id='name'/><div class='cut_string margin_5'>" + F.data.name + J + "</div></caption><tr><td width='100%'colspan='2'class='font_bold'style='font-size:14px;'><label id='orgDepartmentId'/><div class='cut_string'>" + M + "</div></td></tr><tr><th nowrap='nowrap'>" + $.i18n("org.account_form.telephone.label") + ":</th><td width='400'><label id='officenumber'/>" + F.data.officenumber + "</td></tr><tr><th nowrap='nowrap'>" + $.i18n("member.mobile") + ":</th><td><label id='telnumber'/>" + F.data.telnumber + "</td></tr><tr><th nowrap='nowrap'>" + $.i18n("member.email") + ":</th><td><label  id='emailaddress'/>" + F.data.emailaddress + "</td></tr></table></div></form><ul class='font_size12 align_center card_operate border_t clear'>";
	R = R + "</ul>";
	if (V.length == 0) {
		var G = document.createElement("div");
		G.id = "miniCrad";
		G.className = "cardmini h100b hidden";
		G.innerHTML = R;
		var W = document.getElementsByTagName("body");
		W[0].appendChild(G)
	} else {
		V.innerHTML = R
	}
	if ("" == F.data.relateType) {
		var N = function () {
			dialog = $.dialog({
					id: "url",
					url: _ctxPath + "/relateMember.do?method=addRelativePeople&receiverId=" + F.data.id,
					width: 420,
					height: 200,
					targetWindow: getCtpTop(),
					title: $.i18n("peoplecard.addrelpeple.js")
				})
		};
		SeeUtils.removeEvent("addcorrelation", "click", N);
		SeeUtils.addEvent("addcorrelation", "click", N)
	} else {
		document.getElementById("addcorrelation").innerText = F.data.relateType
	}
	var K = function () {
		if (document.getElementById("emailaddress").innerHTML != "") {
			sendMail(document.getElementById("emailaddress").innerHTML)
		}
	};
	SeeUtils.removeEvent("sendemail", "click", K);
	SeeUtils.addEvent("sendemail", "click", K);
	var L = function () {
		appToColl4DialogMode("peopleCard", F.data.id)
	};
	SeeUtils.removeEvent("sendcollaboration", "click", L);
	SeeUtils.addEvent("sendcollaboration", "click", L);
	var Q = function () {
		sendSMS(F.data.id)
	};
	SeeUtils.removeEvent("sendSMS", "click", Q);
	SeeUtils.addEvent("sendSMS", "click", Q);
	var E = $.ctx && $.ctx.resources || vPortal.resources;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.resources || getCtpTop().vPortal.resources
	}
	try {
		if (!E.contains("F01_newColl")) {
			SeeUtils.hideEl("sendcollaboration")
		}
		if (!E.contains("F12_mailcreate")) {
			SeeUtils.hideEl("sendemail")
		}
	} catch (T) {}
	if (!U.canSendSMS) {
		SeeUtils.hideEl("sendSMS")
	}
	var C = $.ctx && $.ctx.plugins || vPortal.plugins;
	if (C == null || C == undefined) {
		C = getCtpTop().$.ctx && getCtpTop().$.ctx.plugins || getCtpTop().vPortal.plugins
	}
	var D = $.dialog({
			id: "dialog_cardMini",
			width: 330,
			height: 161,
			type: "panel",
			htmlId: "miniCrad",
			targetId: F.id,
			left: F.left,
			top: F.top,
			shadow: false,
			panelParam: {
				show: A,
				margins: false,
				inside: A
			}
		});
	return D
}
var size = 0;
function PeopleCard(B) {
	var F = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!F.canShowPeopleCard(D.id, B.memberId)) {
		return
	}
	var E = F.getMemberExternalType(B.memberId);
	var A = E == 0 ? true : false;
	var C = "530";
	if (!A) {
		C = "300"
	}
	newPeopleCardDialog = getA8Top().$.dialog({
			id: "newPeopleCardDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: _ctxPath + "/organization/peopleCard.do?method=showPeoPleCard&type=withbutton&memberId=" + B.memberId + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: C,
			top: B.top,
			closeParam: {
				show: false
			}
		});
	return newPeopleCardDialog
}
function PeopleCardWithOutButton(A) {
	var C = new _orgManager();
	var B = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (B == null || B == undefined) {
		B = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!C.canShowPeopleCard(B.id, A.memberId)) {
		return
	}
	newPeopleCardWithoutButtonDialog = getA8Top().$.dialog({
			id: "newPeopleCardWithoutButtonDialog",
			transParams: {
				parentWin: window
			},
			title: " ",
			isHead: false,
			url: _ctxPath + "/organization/peopleCard.do?method=showPeoPleCard&type=withoutbutton&memberId=" + A.memberId + CsrfGuard.getUrlSurffix(),
			width: 455,
			height: 530,
			top: A.top,
			closeParam: {
				show: false
			}
		});
	return newPeopleCardWithoutButtonDialog
}
function PeopleCardMini_flash(C) {
	var E = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!E.canShowPeopleCard(D.id, C.memberId)) {
		return
	}
	this.memberId = C.memberId;
	this.data = C.data;
	this.left = C.left;
	this.top = C.top;
	this.accountShortName = C.accountShortName;
	this.id = null;
	var B = this;
	var A = createPanel(B);
	return A
}
function PeopleCardMini_flashWithOutButton(C) {
	var E = new _orgManager();
	var D = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (D == null || D == undefined) {
		D = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!E.canShowPeopleCard(D.id, C.memberId)) {
		return
	}
	this.memberId = C.memberId;
	this.data = C.data;
	this.left = C.left;
	this.top = C.top;
	this.accountShortName = C.accountShortName;
	this.id = null;
	var B = this;
	var A = createPanelWithOutButton(B);
	return A
}
function PeopleCardMini(D, F) {
	var G = new _orgManager();
	var E = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!G.canShowPeopleCard(E.id, D.memberId)) {
		return
	}
	this.memberId = D.memberId;
	this.obj = F;
	this.data = D.data;
	this.id = F.attr("id");
	var C;
	var B = this;
	var A = true;
	this.obj.bind({
		mouseenter: function () {
			C = createPanel(B);
			SeeUtils.addEvent(C.id + "_main", "mouseenter", function () {
				A = false
			});
			SeeUtils.addEvent(C.id + "_main", "mouseleave", function () {
				C.hideDialog()
			})
		},
		mouseleave: function () {
			setTimeout(function () {
				if (A) {
					try {
						C.hideDialog()
					} catch (H) {}
				}
			}, 200)
		}
	});
	return C
}
function PeopleCardMiniWithOutButton(D, F) {
	var G = new _orgManager();
	var E = $.ctx && $.ctx.CurrentUser || vPortal.CurrentUser;
	if (E == null || E == undefined) {
		E = getCtpTop().$.ctx && getCtpTop().$.ctx.CurrentUser || getCtpTop().vPortal.CurrentUser
	}
	if (!G.canShowPeopleCard(E.id, D.memberId)) {
		return
	}
	this.memberId = D.memberId;
	this.obj = F;
	this.data = D.data;
	this.id = F.attr("id");
	var C;
	var B = this;
	var A = true;
	this.obj.bind({
		mouseenter: function () {
			C = createPanelWithOutButton(B);
			SeeUtils.addEvent(C.id, "mouseenter", function () {
				A = false
			});
			SeeUtils.addEvent(C.id, "mouseleave", function () {
				C.hideDialog()
			})
		},
		mouseleave: function () {
			setTimeout(function () {
				if (A) {
					try {
						C.hideDialog()
					} catch (H) {}
				}
			}, 200)
		}
	});
	return C
};
!function () {
	var B,
	A = {
		open: "{{",
		close: "}}"
	},
	E = {
		exp: function (F) {
			return new RegExp(F, "g")
		},
		query: function (F, I, H) {
			var G = ["#([\\s\\S])+?", "([^{#}])*?"][F || 0];
			return D((I || "") + A.open + G + A.close + (H || ""))
		},
		escape: function (F) {
			return String(F || "").replace(/&(?!#?[a-zA-Z0-9]+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&#39;").replace(/"/g, "&quot;")
		},
		error: function (G, F) {
			var H = "Laytpl Error\uff1a";
			return "object" == typeof console && console.error(H + G + "\n" + (F || "")),
			H + G
		}
	},
	D = E.exp,
	C = function (F) {
		this.tpl = F
	};
	C.pt = C.prototype,
	C.pt.parse = function (F, L) {
		var K = this,
		J = F,
		I = D("^" + A.open + "#", ""),
		H = D(A.close + "$", "");
		F = F.replace(/[\r\t\n]/g, " ").replace(D(A.open + "#"), A.open + "# ").replace(D(A.close + "}"), "} " + A.close).replace(/\\/g, "\\\\").replace(/(?="|')/g, "\\").replace(E.query(), function (M) {
				return M = M.replace(I, "").replace(H, ""),
				'";' + M.replace(/\\/g, "") + '; view+="'
			}).replace(E.query(1), function (M) {
				var N = '"+(';
				return M.replace(/\s/g, "") === A.open + A.close ? "" : (M = M.replace(D(A.open + "|" + A.close), ""), /^=/.test(M) && (M = M.replace(/^=/, ""), N = '"+_escape_('), N + M.replace(/\\/g, "") + ')+"')
			}),
		F = '"use strict";var view = "' + F + '";return view;';
		try {
			return K.cache = F = new Function("d, _escape_", F),
			F(L, E.escape)
		} catch (G) {
			return delete K.cache,
			E.error(G, J)
		}
	},
	C.pt.render = function (G, F) {
		var H,
		I = this;
		return G ? (H = I.cache ? I.cache(G, E.escape) : I.parse(I.tpl, G), F ? (F(H), void 0) : H) : E.error("no data")
	},
	B = function (F) {
		return "string" != typeof F ? E.error("Template not found") : new C(F)
	},
	B.config = function (F) {
		F = F || {};
		for (var G in F) {
			A[G] = F[G]
		}
	},
	B.v = "1.1",
	"function" == typeof define ? define(function () {
		return B
	}) : "undefined" != typeof exports ? module.exports = B : window.laytpl = B
}
();